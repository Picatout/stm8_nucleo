ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;  MONA   MONitor written in Assembly
                                      2 	.module MONA 
                                      3     .optsdcc -mstm8
                                      4 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                      5 	.include "../inc/nucleo_8s208.inc"
                                      1 ; NUCLEO-8S208RB board specific definitions
                                      2 
                                      3 ; mcu on board is stm8s208rbt6
                                      4 
                                      5 ; crystal on board is 8Mhz
                           7A1200     6 FHSE = 8000000
                                      7 
                                      8 ; LED2 is user LED
                                      9 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    10 LED2_PORT = 0x500a ;port C
                           000005    11 LED2_BIT = 5
                           000020    12 LED2_MASK = (1<<5) ;bit 5 mask
                                     13 
                                     14 ; B1 is user button
                                     15 ; connected to PE4
                                     16 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    17 BTN1_PORT = 0x5015 ; port E IDR
                           000004    18 BTN1_BIT = 4
                           000010    19 BTN1_MASK = (1<<4) ;bit 4 mask
                                     20 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                      6 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB ÂµC registers map
                                      4 ; sdas file
                                      5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      6 	.module stm8s208rb
                                      7 
                                      8 ;;;;;;;;;;;;
                                      9 ; bits
                                     10 ;;;;;;;;;;;;
                           000000    11  BIT0 = 0
                           000001    12  BIT1 = 1
                           000002    13  BIT2 = 2
                           000003    14  BIT3 = 3
                           000004    15  BIT4 = 4
                           000005    16  BIT5 = 5
                           000006    17  BIT6 = 6
                           000007    18  BIT7 = 7
                                     19  	
                                     20 ;;;;;;;;;;;;
                                     21 ; bits masks
                                     22 ;;;;;;;;;;;;
                           000001    23  B0_MASK = (1<<0)
                           000002    24  B1_MASK = (1<<1)
                           000004    25  B2_MASK = (1<<2)
                           000008    26  B3_MASK = (1<<3)
                           000010    27  B4_MASK = (1<<4)
                           000020    28  B5_MASK = (1<<5)
                           000040    29  B6_MASK = (1<<6)
                           000080    30  B7_MASK = (1<<7)
                                     31 
                                     32 ; HSI oscillator frequency 16Mhz
                           F42400    33  FHSI = 16000000
                                     34 ; LSI oscillator frequency 128Khz
                           01F400    35  FLSI = 128000 
                                     36 
                                     37 ; controller memory regions
                           001800    38  RAM_SIZE = (0x1800) ; 6KB 
                           000800    39  EEPROM_SIZE = (0x800) ; 2KB
                                     40 ; STM8S208RB have 128K flash
                           020000    41  FLASH_SIZE = (0x20000)
                                     42 
                           000000    43  RAM_BASE = (0)
                           0017FF    44  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    45  EEPROM_BASE = (0x4000)
                           0047FF    46  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    47  SFR_BASE = (0x5000)
                           0057FF    48  SFR_END = (0x57FF)
                           006000    49  BOOT_ROM_BASE = (0x6000)
                           007FFF    50  BOOT_ROM_END = (0x7fff)
                           008000    51  FLASH_BASE = (0x8000)
                           027FFF    52  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    53  OPTION_BASE = (0x4800)
                           00487F    54  OPTION_END = (0x487F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           0048CD    55  DEVID_BASE = (0x48CD)
                           0048D8    56  DEVID_END = (0x48D8)
                           007F00    57  DEBUG_BASE = (0X7F00)
                           007FFF    58  DEBUG_END = (0X7FFF)
                                     59 
                                     60 ; options bytes
                                     61 ; this one can be programmed only from SWIM  (ICP)
                           004800    62  OPT0  = (0x4800)
                                     63 ; these can be programmed at runtime (IAP)
                           004801    64  OPT1  = (0x4801)
                           004802    65  NOPT1  = (0x4802)
                           004803    66  OPT2  = (0x4803)
                           004804    67  NOPT2  = (0x4804)
                           004805    68  OPT3  = (0x4805)
                           004806    69  NOPT3  = (0x4806)
                           004807    70  OPT4  = (0x4807)
                           004808    71  NOPT4  = (0x4808)
                           004809    72  OPT5  = (0x4809)
                           00480A    73  NOPT5  = (0x480A)
                           00480B    74  OPT6  = (0x480B)
                           00480C    75  NOPT6 = (0x480C)
                           00480D    76  OPT7 = (0x480D)
                           00480E    77  NOPT7 = (0x480E)
                           00487E    78  OPTBL  = (0x487E)
                           00487F    79  NOPTBL  = (0x487F)
                                     80 ; option registers usage
                                     81 ; read out protection, value 0xAA enable ROP
                           004800    82  ROP = OPT0  
                                     83 ; user boot code, {0..0x3e} 512 bytes row
                           004801    84  UBC = OPT1
                           004802    85  NUBC = NOPT1
                                     86 ; alternate function register
                           004803    87  AFR = OPT2
                           004804    88  NAFR = NOPT2
                                     89 ; miscelinous options
                           004805    90  WDGOPT = OPT3
                           004806    91  NWDGOPT = NOPT3
                                     92 ; clock options
                           004807    93  CLKOPT = OPT4
                           004808    94  NCLKOPT = NOPT4
                                     95 ; HSE clock startup delay
                           004809    96  HSECNT = OPT5
                           00480A    97  NHSECNT = NOPT5
                                     98 ; flash wait state
                           00480D    99 FLASH_WS = OPT7
                           00480E   100 NFLASH_WS = NOPT7
                                    101 
                                    102 ; watchdog options bits
                           000003   103   WDGOPT_LSIEN   =  BIT3
                           000002   104   WDGOPT_IWDG_HW =  BIT2
                           000001   105   WDGOPT_WWDG_HW =  BIT1
                           000000   106   WDGOPT_WWDG_HALT = BIT0
                                    107 ; NWDGOPT bits
                           FFFFFFFC   108   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   109   NWDGOPT_IWDG_HW  = ~BIT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           FFFFFFFE   110   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   111   NWDGOPT_WWDG_HALT = ~BIT0
                                    112 
                                    113 ; CLKOPT bits
                           000003   114  CLKOPT_EXT_CLK  = BIT3
                           000002   115  CLKOPT_CKAWUSEL = BIT2
                           000001   116  CLKOPT_PRS_C1   = BIT1
                           000000   117  CLKOPT_PRS_C0   = BIT0
                                    118 
                                    119 ; AFR option, remapable functions
                           000007   120  AFR7_BEEP    = BIT7
                           000006   121  AFR6_I2C     = BIT6
                           000005   122  AFR5_TIM1    = BIT5
                           000004   123  AFR4_TIM1    = BIT4
                           000003   124  AFR3_TIM1    = BIT3
                           000002   125  AFR2_CCO     = BIT2
                           000001   126  AFR1_TIM2    = BIT1
                           000000   127  AFR0_ADC     = BIT0
                                    128 
                                    129 ; device ID = (read only)
                           0048CD   130  DEVID_XL  = (0x48CD)
                           0048CE   131  DEVID_XH  = (0x48CE)
                           0048CF   132  DEVID_YL  = (0x48CF)
                           0048D0   133  DEVID_YH  = (0x48D0)
                           0048D1   134  DEVID_WAF  = (0x48D1)
                           0048D2   135  DEVID_LOT0  = (0x48D2)
                           0048D3   136  DEVID_LOT1  = (0x48D3)
                           0048D4   137  DEVID_LOT2  = (0x48D4)
                           0048D5   138  DEVID_LOT3  = (0x48D5)
                           0048D6   139  DEVID_LOT4  = (0x48D6)
                           0048D7   140  DEVID_LOT5  = (0x48D7)
                           0048D8   141  DEVID_LOT6  = (0x48D8)
                                    142 
                                    143 
                           005000   144 GPIO_BASE = (0x5000)
                           000005   145 GPIO_SIZE = (5)
                                    146 ; PORTS SFR OFFSET
                           000000   147 PA = 0
                           000005   148 PB = 5
                           00000A   149 PC = 10
                           00000F   150 PD = 15
                           000014   151 PE = 20
                           000019   152 PF = 25
                           00001E   153 PG = 30
                                    154 
                                    155 ; GPIO
                                    156 ; gpio register offset to base
                           000000   157  GPIO_ODR = 0
                           000001   158  GPIO_IDR = 1
                           000002   159  GPIO_DDR = 2
                           000003   160  GPIO_CR1 = 3
                           000004   161  GPIO_CR2 = 4
                                    162 
                                    163 ; port A
                           005000   164  PA_BASE = (0X5000)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           005000   165  PA_ODR  = (0x5000)
                           005001   166  PA_IDR  = (0x5001)
                           005002   167  PA_DDR  = (0x5002)
                           005003   168  PA_CR1  = (0x5003)
                           005004   169  PA_CR2  = (0x5004)
                                    170 ; port B
                           005005   171  PB_BASE = (0X5005)
                           005005   172  PB_ODR  = (0x5005)
                           005006   173  PB_IDR  = (0x5006)
                           005007   174  PB_DDR  = (0x5007)
                           005008   175  PB_CR1  = (0x5008)
                           005009   176  PB_CR2  = (0x5009)
                                    177 ; port C
                           00500A   178  PC_BASE = (0X500A)
                           00500A   179  PC_ODR  = (0x500A)
                           00500B   180  PC_IDR  = (0x500B)
                           00500C   181  PC_DDR  = (0x500C)
                           00500D   182  PC_CR1  = (0x500D)
                           00500E   183  PC_CR2  = (0x500E)
                                    184 ; port D
                           00500F   185  PD_BASE = (0X500F)
                           00500F   186  PD_ODR  = (0x500F)
                           005010   187  PD_IDR  = (0x5010)
                           005011   188  PD_DDR  = (0x5011)
                           005012   189  PD_CR1  = (0x5012)
                           005013   190  PD_CR2  = (0x5013)
                                    191 ; port E
                           005014   192  PE_BASE = (0X5014)
                           005014   193  PE_ODR  = (0x5014)
                           005015   194  PE_IDR  = (0x5015)
                           005016   195  PE_DDR  = (0x5016)
                           005017   196  PE_CR1  = (0x5017)
                           005018   197  PE_CR2  = (0x5018)
                                    198 ; port F
                           005019   199  PF_BASE = (0X5019)
                           005019   200  PF_ODR  = (0x5019)
                           00501A   201  PF_IDR  = (0x501A)
                           00501B   202  PF_DDR  = (0x501B)
                           00501C   203  PF_CR1  = (0x501C)
                           00501D   204  PF_CR2  = (0x501D)
                                    205 ; port G
                           00501E   206  PG_BASE = (0X501E)
                           00501E   207  PG_ODR  = (0x501E)
                           00501F   208  PG_IDR  = (0x501F)
                           005020   209  PG_DDR  = (0x5020)
                           005021   210  PG_CR1  = (0x5021)
                           005022   211  PG_CR2  = (0x5022)
                                    212 ; port H not present on LQFP48/LQFP64 package
                           005023   213  PH_BASE = (0X5023)
                           005023   214  PH_ODR  = (0x5023)
                           005024   215  PH_IDR  = (0x5024)
                           005025   216  PH_DDR  = (0x5025)
                           005026   217  PH_CR1  = (0x5026)
                           005027   218  PH_CR2  = (0x5027)
                                    219 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005028   220  PI_BASE = (0X5028)
                           005028   221  PI_ODR  = (0x5028)
                           005029   222  PI_IDR  = (0x5029)
                           00502A   223  PI_DDR  = (0x502a)
                           00502B   224  PI_CR1  = (0x502b)
                           00502C   225  PI_CR2  = (0x502c)
                                    226 
                                    227 ; input modes CR1
                           000000   228  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   229  INPUT_PULLUP = (1)
                                    230 ; output mode CR1
                           000000   231  OUTPUT_OD = (0) ; open drain
                           000001   232  OUTPUT_PP = (1) ; push pull
                                    233 ; input modes CR2
                           000000   234  INPUT_DI = (0)
                           000001   235  INPUT_EI = (1)
                                    236 ; output speed CR2
                           000000   237  OUTPUT_SLOW = (0)
                           000001   238  OUTPUT_FAST = (1)
                                    239 
                                    240 
                                    241 ; Flash memory
                           00505A   242  FLASH_CR1  = (0x505A)
                           00505B   243  FLASH_CR2  = (0x505B)
                           00505C   244  FLASH_NCR2  = (0x505C)
                           00505D   245  FLASH_FPR  = (0x505D)
                           00505E   246  FLASH_NFPR  = (0x505E)
                           00505F   247  FLASH_IAPSR  = (0x505F)
                           005062   248  FLASH_PUKR  = (0x5062)
                           005064   249  FLASH_DUKR  = (0x5064)
                                    250 ; data memory unlock keys
                           0000AE   251  FLASH_DUKR_KEY1 = (0xae)
                           000056   252  FLASH_DUKR_KEY2 = (0x56)
                                    253 ; flash memory unlock keys
                           000056   254  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   255  FLASH_PUKR_KEY2 = (0xae)
                                    256 ; FLASH_CR1 bits
                           000003   257  FLASH_CR1_HALT = BIT3
                           000002   258  FLASH_CR1_AHALT = BIT2
                           000001   259  FLASH_CR1_IE = BIT1
                           000000   260  FLASH_CR1_FIX = BIT0
                                    261 ; FLASH_CR2 bits
                           000007   262  FLASH_CR2_OPT = BIT7
                           000006   263  FLASH_CR2_WPRG = BIT6
                           000005   264  FLASH_CR2_ERASE = BIT5
                           000004   265  FLASH_CR2_FPRG = BIT4
                           000000   266  FLASH_CR2_PRG = BIT0
                                    267 ; FLASH_FPR bits
                           000005   268  FLASH_FPR_WPB5 = BIT5
                           000004   269  FLASH_FPR_WPB4 = BIT4
                           000003   270  FLASH_FPR_WPB3 = BIT3
                           000002   271  FLASH_FPR_WPB2 = BIT2
                           000001   272  FLASH_FPR_WPB1 = BIT1
                           000000   273  FLASH_FPR_WPB0 = BIT0
                                    274 ; FLASH_NFPR bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000005   275  FLASH_NFPR_NWPB5 = BIT5
                           000004   276  FLASH_NFPR_NWPB4 = BIT4
                           000003   277  FLASH_NFPR_NWPB3 = BIT3
                           000002   278  FLASH_NFPR_NWPB2 = BIT2
                           000001   279  FLASH_NFPR_NWPB1 = BIT1
                           000000   280  FLASH_NFPR_NWPB0 = BIT0
                                    281 ; FLASH_IAPSR bits
                           000006   282  FLASH_IAPSR_HVOFF = BIT6
                           000003   283  FLASH_IAPSR_DUL = BIT3
                           000002   284  FLASH_IAPSR_EOP = BIT2
                           000001   285  FLASH_IAPSR_PUL = BIT1
                           000000   286  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    287 
                                    288 ; Interrupt control
                           0050A0   289  EXTI_CR1  = (0x50A0)
                           0050A1   290  EXTI_CR2  = (0x50A1)
                                    291 
                                    292 ; Reset Status
                           0050B3   293  RST_SR  = (0x50B3)
                                    294 
                                    295 ; Clock Registers
                           0050C0   296  CLK_ICKR  = (0x50c0)
                           0050C1   297  CLK_ECKR  = (0x50c1)
                           0050C3   298  CLK_CMSR  = (0x50C3)
                           0050C4   299  CLK_SWR  = (0x50C4)
                           0050C5   300  CLK_SWCR  = (0x50C5)
                           0050C6   301  CLK_CKDIVR  = (0x50C6)
                           0050C7   302  CLK_PCKENR1  = (0x50C7)
                           0050C8   303  CLK_CSSR  = (0x50C8)
                           0050C9   304  CLK_CCOR  = (0x50C9)
                           0050CA   305  CLK_PCKENR2  = (0x50CA)
                           0050CC   306  CLK_HSITRIMR  = (0x50CC)
                           0050CD   307  CLK_SWIMCCR  = (0x50CD)
                                    308 
                                    309 ; Peripherals clock gating
                                    310 ; CLK_PCKENR1 
                           000007   311  CLK_PCKENR1_TIM1 = (7)
                           000006   312  CLK_PCKENR1_TIM3 = (6)
                           000005   313  CLK_PCKENR1_TIM2 = (5)
                           000004   314  CLK_PCKENR1_TIM4 = (4)
                           000003   315  CLK_PCKENR1_UART3 = (3)
                           000002   316  CLK_PCKENR1_UART1 = (2)
                           000001   317  CLK_PCKENR1_SPI = (1)
                           000000   318  CLK_PCKENR1_I2C = (0)
                                    319 ; CLK_PCKENR2
                           000007   320  CLK_PCKENR2_CAN = (7)
                           000003   321  CLK_PCKENR2_ADC = (3)
                           000002   322  CLK_PCKENR2_AWU = (2)
                                    323 
                                    324 ; Clock bits
                           000005   325  CLK_ICKR_REGAH = (5)
                           000004   326  CLK_ICKR_LSIRDY = (4)
                           000003   327  CLK_ICKR_LSIEN = (3)
                           000002   328  CLK_ICKR_FHW = (2)
                           000001   329  CLK_ICKR_HSIRDY = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000000   330  CLK_ICKR_HSIEN = (0)
                                    331 
                           000001   332  CLK_ECKR_HSERDY = (1)
                           000000   333  CLK_ECKR_HSEEN = (0)
                                    334 ; clock source
                           0000E1   335  CLK_SWR_HSI = 0xE1
                           0000D2   336  CLK_SWR_LSI = 0xD2
                           0000B4   337  CLK_SWR_HSE = 0xB4
                                    338 
                           000003   339  CLK_SWCR_SWIF = (3)
                           000002   340  CLK_SWCR_SWIEN = (2)
                           000001   341  CLK_SWCR_SWEN = (1)
                           000000   342  CLK_SWCR_SWBSY = (0)
                                    343 
                           000004   344  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   345  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   346  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   347  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   348  CLK_CKDIVR_CPUDIV0 = (0)
                                    349 
                                    350 ; Watchdog
                           0050D1   351  WWDG_CR  = (0x50D1)
                           0050D2   352  WWDG_WR  = (0x50D2)
                           0050E0   353  IWDG_KR  = (0x50E0)
                           0050E1   354  IWDG_PR  = (0x50E1)
                           0050E2   355  IWDG_RLR  = (0x50E2)
                           0050F0   356  AWU_CSR1  = (0x50F0)
                           0050F1   357  AWU_APR  = (0x50F1)
                           0050F2   358  AWU_TBR  = (0x50F2)
                                    359 
                                    360 ; Beeper
                                    361 ; beeper output is alternate function AFR7 on PD4
                                    362 ; connected to CN9-6
                           0050F3   363  BEEP_CSR  = (0x50F3)
                           00000F   364  BEEP_PORT = PD
                           000004   365  BEEP_BIT = 4
                           000010   366  BEEP_MASK = B4_MASK
                                    367 
                                    368 ; SPI
                           005200   369  SPI_CR1  = (0x5200)
                           005201   370  SPI_CR2  = (0x5201)
                           005202   371  SPI_ICR  = (0x5202)
                           005203   372  SPI_SR  = (0x5203)
                           005204   373  SPI_DR  = (0x5204)
                           005205   374  SPI_CRCPR  = (0x5205)
                           005206   375  SPI_RXCRCR  = (0x5206)
                           005207   376  SPI_TXCRCR  = (0x5207)
                                    377 
                                    378 ; I2C
                           005210   379  I2C_CR1  = (0x5210)
                           005211   380  I2C_CR2  = (0x5211)
                           005212   381  I2C_FREQR  = (0x5212)
                           005213   382  I2C_OARL  = (0x5213)
                           005214   383  I2C_OARH  = (0x5214)
                           005216   384  I2C_DR  = (0x5216)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005217   385  I2C_SR1  = (0x5217)
                           005218   386  I2C_SR2  = (0x5218)
                           005219   387  I2C_SR3  = (0x5219)
                           00521A   388  I2C_ITR  = (0x521A)
                           00521B   389  I2C_CCRL  = (0x521B)
                           00521C   390  I2C_CCRH  = (0x521C)
                           00521D   391  I2C_TRISER  = (0x521D)
                           00521E   392  I2C_PECR  = (0x521E)
                                    393 
                           000007   394  I2C_CR1_NOSTRETCH = (7)
                           000006   395  I2C_CR1_ENGC = (6)
                           000000   396  I2C_CR1_PE = (0)
                                    397 
                           000007   398  I2C_CR2_SWRST = (7)
                           000003   399  I2C_CR2_POS = (3)
                           000002   400  I2C_CR2_ACK = (2)
                           000001   401  I2C_CR2_STOP = (1)
                           000000   402  I2C_CR2_START = (0)
                                    403 
                           000000   404  I2C_OARL_ADD0 = (0)
                                    405 
                           000009   406  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   407  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    408 
                           000007   409  I2C_OARH_ADDMODE = (7)
                           000006   410  I2C_OARH_ADDCONF = (6)
                           000002   411  I2C_OARH_ADD9 = (2)
                           000001   412  I2C_OARH_ADD8 = (1)
                                    413 
                           000007   414  I2C_SR1_TXE = (7)
                           000006   415  I2C_SR1_RXNE = (6)
                           000004   416  I2C_SR1_STOPF = (4)
                           000003   417  I2C_SR1_ADD10 = (3)
                           000002   418  I2C_SR1_BTF = (2)
                           000001   419  I2C_SR1_ADDR = (1)
                           000000   420  I2C_SR1_SB = (0)
                                    421 
                           000005   422  I2C_SR2_WUFH = (5)
                           000003   423  I2C_SR2_OVR = (3)
                           000002   424  I2C_SR2_AF = (2)
                           000001   425  I2C_SR2_ARLO = (1)
                           000000   426  I2C_SR2_BERR = (0)
                                    427 
                           000007   428  I2C_SR3_DUALF = (7)
                           000004   429  I2C_SR3_GENCALL = (4)
                           000002   430  I2C_SR3_TRA = (2)
                           000001   431  I2C_SR3_BUSY = (1)
                           000000   432  I2C_SR3_MSL = (0)
                                    433 
                           000002   434  I2C_ITR_ITBUFEN = (2)
                           000001   435  I2C_ITR_ITEVTEN = (1)
                           000000   436  I2C_ITR_ITERREN = (0)
                                    437 
                                    438 ; Precalculated values, all in KHz
                           000080   439  I2C_CCRH_16MHZ_FAST_400 = 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           00000D   440  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    441 ;
                                    442 ; Fast I2C mode max rise time = 300ns
                                    443 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    444 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    445 
                           000005   446  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    447 
                           0000C0   448  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   449  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   450  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    451 
                           000080   452  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   453  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   454  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    455 
                           000000   456  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   457  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    458 ;
                                    459 ; Standard I2C mode max rise time = 1000ns
                                    460 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    461 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    462 
                           000011   463  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    464 
                           000000   465  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   466  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   467  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    468 
                           000001   469  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   470  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   471  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    472 
                           000001   473  I2C_READ = 1
                           000000   474  I2C_WRITE = 0
                                    475 
                                    476 ; baudrate constant for brr_value table access
                           000000   477 B2400=0
                           000001   478 B4800=1
                           000002   479 B9600=2
                           000003   480 B19200=3
                           000004   481 B38400=4
                           000005   482 B57600=5
                           000006   483 B115200=6
                           000007   484 B230400=7
                           000008   485 B460800=8
                           000009   486 B921600=9
                                    487 
                                    488 ; UART1 
                           005230   489  UART1_SR    = (0x5230)
                           005231   490  UART1_DR    = (0x5231)
                           005232   491  UART1_BRR1  = (0x5232)
                           005233   492  UART1_BRR2  = (0x5233)
                           005234   493  UART1_CR1   = (0x5234)
                           005235   494  UART1_CR2   = (0x5235)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005236   495  UART1_CR3   = (0x5236)
                           005237   496  UART1_CR4   = (0x5237)
                           005238   497  UART1_CR5   = (0x5238)
                           005239   498  UART1_GTR   = (0x5239)
                           00523A   499  UART1_PSCR  = (0x523A)
                                    500 
                                    501 ; UART3
                           005240   502  UART3_SR    = (0x5240)
                           005241   503  UART3_DR    = (0x5241)
                           005242   504  UART3_BRR1  = (0x5242)
                           005243   505  UART3_BRR2  = (0x5243)
                           005244   506  UART3_CR1   = (0x5244)
                           005245   507  UART3_CR2   = (0x5245)
                           005246   508  UART3_CR3   = (0x5246)
                           005247   509  UART3_CR4   = (0x5247)
                           004249   510  UART3_CR6   = (0x4249)
                                    511 
                                    512 ; UART Status Register bits
                           000007   513  UART_SR_TXE = (7)
                           000006   514  UART_SR_TC = (6)
                           000005   515  UART_SR_RXNE = (5)
                           000004   516  UART_SR_IDLE = (4)
                           000003   517  UART_SR_OR = (3)
                           000002   518  UART_SR_NF = (2)
                           000001   519  UART_SR_FE = (1)
                           000000   520  UART_SR_PE = (0)
                                    521 
                                    522 ; Uart Control Register bits
                           000007   523  UART_CR1_R8 = (7)
                           000006   524  UART_CR1_T8 = (6)
                           000005   525  UART_CR1_UARTD = (5)
                           000004   526  UART_CR1_M = (4)
                           000003   527  UART_CR1_WAKE = (3)
                           000002   528  UART_CR1_PCEN = (2)
                           000001   529  UART_CR1_PS = (1)
                           000000   530  UART_CR1_PIEN = (0)
                                    531 
                           000007   532  UART_CR2_TIEN = (7)
                           000006   533  UART_CR2_TCIEN = (6)
                           000005   534  UART_CR2_RIEN = (5)
                           000004   535  UART_CR2_ILIEN = (4)
                           000003   536  UART_CR2_TEN = (3)
                           000002   537  UART_CR2_REN = (2)
                           000001   538  UART_CR2_RWU = (1)
                           000000   539  UART_CR2_SBK = (0)
                                    540 
                           000006   541  UART_CR3_LINEN = (6)
                           000005   542  UART_CR3_STOP1 = (5)
                           000004   543  UART_CR3_STOP0 = (4)
                           000003   544  UART_CR3_CLKEN = (3)
                           000002   545  UART_CR3_CPOL = (2)
                           000001   546  UART_CR3_CPHA = (1)
                           000000   547  UART_CR3_LBCL = (0)
                                    548 
                           000006   549  UART_CR4_LBDIEN = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000005   550  UART_CR4_LBDL = (5)
                           000004   551  UART_CR4_LBDF = (4)
                           000003   552  UART_CR4_ADD3 = (3)
                           000002   553  UART_CR4_ADD2 = (2)
                           000001   554  UART_CR4_ADD1 = (1)
                           000000   555  UART_CR4_ADD0 = (0)
                                    556 
                           000005   557  UART_CR5_SCEN = (5)
                           000004   558  UART_CR5_NACK = (4)
                           000003   559  UART_CR5_HDSEL = (3)
                           000002   560  UART_CR5_IRLP = (2)
                           000001   561  UART_CR5_IREN = (1)
                                    562 ; LIN mode config register
                           000007   563  UART_CR6_LDUM = (7)
                           000005   564  UART_CR6_LSLV = (5)
                           000004   565  UART_CR6_LASE = (4)
                           000002   566  UART_CR6_LHDIEN = (2) 
                           000001   567  UART_CR6_LHDF = (1)
                           000000   568  UART_CR6_LSF = (0)
                                    569 
                                    570 ; TIMERS
                                    571 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   572  TIM1_CR1  = (0x5250)
                           005251   573  TIM1_CR2  = (0x5251)
                           005252   574  TIM1_SMCR  = (0x5252)
                           005253   575  TIM1_ETR  = (0x5253)
                           005254   576  TIM1_IER  = (0x5254)
                           005255   577  TIM1_SR1  = (0x5255)
                           005256   578  TIM1_SR2  = (0x5256)
                           005257   579  TIM1_EGR  = (0x5257)
                           005258   580  TIM1_CCMR1  = (0x5258)
                           005259   581  TIM1_CCMR2  = (0x5259)
                           00525A   582  TIM1_CCMR3  = (0x525A)
                           00525B   583  TIM1_CCMR4  = (0x525B)
                           00525C   584  TIM1_CCER1  = (0x525C)
                           00525D   585  TIM1_CCER2  = (0x525D)
                           00525E   586  TIM1_CNTRH  = (0x525E)
                           00525F   587  TIM1_CNTRL  = (0x525F)
                           005260   588  TIM1_PSCRH  = (0x5260)
                           005261   589  TIM1_PSCRL  = (0x5261)
                           005262   590  TIM1_ARRH  = (0x5262)
                           005263   591  TIM1_ARRL  = (0x5263)
                           005264   592  TIM1_RCR  = (0x5264)
                           005265   593  TIM1_CCR1H  = (0x5265)
                           005266   594  TIM1_CCR1L  = (0x5266)
                           005267   595  TIM1_CCR2H  = (0x5267)
                           005268   596  TIM1_CCR2L  = (0x5268)
                           005269   597  TIM1_CCR3H  = (0x5269)
                           00526A   598  TIM1_CCR3L  = (0x526A)
                           00526B   599  TIM1_CCR4H  = (0x526B)
                           00526C   600  TIM1_CCR4L  = (0x526C)
                           00526D   601  TIM1_BKR  = (0x526D)
                           00526E   602  TIM1_DTR  = (0x526E)
                           00526F   603  TIM1_OISR  = (0x526F)
                                    604 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    605 ; Timer Control Register bits
                           000007   606  TIM_CR1_ARPE = (7)
                           000006   607  TIM_CR1_CMSH = (6)
                           000005   608  TIM_CR1_CMSL = (5)
                           000004   609  TIM_CR1_DIR = (4)
                           000003   610  TIM_CR1_OPM = (3)
                           000002   611  TIM_CR1_URS = (2)
                           000001   612  TIM_CR1_UDIS = (1)
                           000000   613  TIM_CR1_CEN = (0)
                                    614 
                           000006   615  TIM1_CR2_MMS2 = (6)
                           000005   616  TIM1_CR2_MMS1 = (5)
                           000004   617  TIM1_CR2_MMS0 = (4)
                           000002   618  TIM1_CR2_COMS = (2)
                           000000   619  TIM1_CR2_CCPC = (0)
                                    620 
                                    621 ; Timer Slave Mode Control bits
                           000007   622  TIM1_SMCR_MSM = (7)
                           000006   623  TIM1_SMCR_TS2 = (6)
                           000005   624  TIM1_SMCR_TS1 = (5)
                           000004   625  TIM1_SMCR_TS0 = (4)
                           000002   626  TIM1_SMCR_SMS2 = (2)
                           000001   627  TIM1_SMCR_SMS1 = (1)
                           000000   628  TIM1_SMCR_SMS0 = (0)
                                    629 
                                    630 ; Timer External Trigger Enable bits
                           000007   631  TIM1_ETR_ETP = (7)
                           000006   632  TIM1_ETR_ECE = (6)
                           000005   633  TIM1_ETR_ETPS1 = (5)
                           000004   634  TIM1_ETR_ETPS0 = (4)
                           000003   635  TIM1_ETR_ETF3 = (3)
                           000002   636  TIM1_ETR_ETF2 = (2)
                           000001   637  TIM1_ETR_ETF1 = (1)
                           000000   638  TIM1_ETR_ETF0 = (0)
                                    639 
                                    640 ; Timer Interrupt Enable bits
                           000007   641  TIM1_IER_BIE = (7)
                           000006   642  TIM1_IER_TIE = (6)
                           000005   643  TIM1_IER_COMIE = (5)
                           000004   644  TIM1_IER_CC4IE = (4)
                           000003   645  TIM1_IER_CC3IE = (3)
                           000002   646  TIM1_IER_CC2IE = (2)
                           000001   647  TIM1_IER_CC1IE = (1)
                           000000   648  TIM1_IER_UIE = (0)
                                    649 
                                    650 ; Timer Status Register bits
                           000007   651  TIM1_SR1_BIF = (7)
                           000006   652  TIM1_SR1_TIF = (6)
                           000005   653  TIM1_SR1_COMIF = (5)
                           000004   654  TIM1_SR1_CC4IF = (4)
                           000003   655  TIM1_SR1_CC3IF = (3)
                           000002   656  TIM1_SR1_CC2IF = (2)
                           000001   657  TIM1_SR1_CC1IF = (1)
                           000000   658  TIM1_SR1_UIF = (0)
                                    659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000004   660  TIM1_SR2_CC4OF = (4)
                           000003   661  TIM1_SR2_CC3OF = (3)
                           000002   662  TIM1_SR2_CC2OF = (2)
                           000001   663  TIM1_SR2_CC1OF = (1)
                                    664 
                                    665 ; Timer Event Generation Register bits
                           000007   666  TIM1_EGR_BG = (7)
                           000006   667  TIM1_EGR_TG = (6)
                           000005   668  TIM1_EGR_COMG = (5)
                           000004   669  TIM1_EGR_CC4G = (4)
                           000003   670  TIM1_EGR_CC3G = (3)
                           000002   671  TIM1_EGR_CC2G = (2)
                           000001   672  TIM1_EGR_CC1G = (1)
                           000000   673  TIM1_EGR_UG = (0)
                                    674 
                                    675 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   676  TIM1_CCMR1_OC1CE = (7)
                           000006   677  TIM1_CCMR1_OC1M2 = (6)
                           000005   678  TIM1_CCMR1_OC1M1 = (5)
                           000004   679  TIM1_CCMR1_OC1M0 = (4)
                           000003   680  TIM1_CCMR1_OC1PE = (3)
                           000002   681  TIM1_CCMR1_OC1FE = (2)
                           000001   682  TIM1_CCMR1_CC1S1 = (1)
                           000000   683  TIM1_CCMR1_CC1S0 = (0)
                                    684 
                                    685 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   686  TIM1_CCMR1_IC1F3 = (7)
                           000006   687  TIM1_CCMR1_IC1F2 = (6)
                           000005   688  TIM1_CCMR1_IC1F1 = (5)
                           000004   689  TIM1_CCMR1_IC1F0 = (4)
                           000003   690  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   691  TIM1_CCMR1_IC1PSC0 = (2)
                                    692 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   693  TIM1_CCMR1_CC1S0 = (0)
                                    694 
                                    695 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   696  TIM1_CCMR2_OC2CE = (7)
                           000006   697  TIM1_CCMR2_OC2M2 = (6)
                           000005   698  TIM1_CCMR2_OC2M1 = (5)
                           000004   699  TIM1_CCMR2_OC2M0 = (4)
                           000003   700  TIM1_CCMR2_OC2PE = (3)
                           000002   701  TIM1_CCMR2_OC2FE = (2)
                           000001   702  TIM1_CCMR2_CC2S1 = (1)
                           000000   703  TIM1_CCMR2_CC2S0 = (0)
                                    704 
                                    705 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   706  TIM1_CCMR2_IC2F3 = (7)
                           000006   707  TIM1_CCMR2_IC2F2 = (6)
                           000005   708  TIM1_CCMR2_IC2F1 = (5)
                           000004   709  TIM1_CCMR2_IC2F0 = (4)
                           000003   710  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   711  TIM1_CCMR2_IC2PSC0 = (2)
                                    712 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   713  TIM1_CCMR2_CC2S0 = (0)
                                    714 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    715 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   716  TIM1_CCMR3_OC3CE = (7)
                           000006   717  TIM1_CCMR3_OC3M2 = (6)
                           000005   718  TIM1_CCMR3_OC3M1 = (5)
                           000004   719  TIM1_CCMR3_OC3M0 = (4)
                           000003   720  TIM1_CCMR3_OC3PE = (3)
                           000002   721  TIM1_CCMR3_OC3FE = (2)
                           000001   722  TIM1_CCMR3_CC3S1 = (1)
                           000000   723  TIM1_CCMR3_CC3S0 = (0)
                                    724 
                                    725 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   726  TIM1_CCMR3_IC3F3 = (7)
                           000006   727  TIM1_CCMR3_IC3F2 = (6)
                           000005   728  TIM1_CCMR3_IC3F1 = (5)
                           000004   729  TIM1_CCMR3_IC3F0 = (4)
                           000003   730  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   731  TIM1_CCMR3_IC3PSC0 = (2)
                                    732 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   733  TIM1_CCMR3_CC3S0 = (0)
                                    734 
                                    735 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   736  TIM1_CCMR4_OC4CE = (7)
                           000006   737  TIM1_CCMR4_OC4M2 = (6)
                           000005   738  TIM1_CCMR4_OC4M1 = (5)
                           000004   739  TIM1_CCMR4_OC4M0 = (4)
                           000003   740  TIM1_CCMR4_OC4PE = (3)
                           000002   741  TIM1_CCMR4_OC4FE = (2)
                           000001   742  TIM1_CCMR4_CC4S1 = (1)
                           000000   743  TIM1_CCMR4_CC4S0 = (0)
                                    744 
                                    745 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   746  TIM1_CCMR4_IC4F3 = (7)
                           000006   747  TIM1_CCMR4_IC4F2 = (6)
                           000005   748  TIM1_CCMR4_IC4F1 = (5)
                           000004   749  TIM1_CCMR4_IC4F0 = (4)
                           000003   750  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   751  TIM1_CCMR4_IC4PSC0 = (2)
                                    752 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   753  TIM1_CCMR4_CC4S0 = (0)
                                    754 
                                    755 ; Timer 2 - 16-bit timer
                           005300   756  TIM2_CR1  = (0x5300)
                           005301   757  TIM2_IER  = (0x5301)
                           005302   758  TIM2_SR1  = (0x5302)
                           005303   759  TIM2_SR2  = (0x5303)
                           005304   760  TIM2_EGR  = (0x5304)
                           005305   761  TIM2_CCMR1  = (0x5305)
                           005306   762  TIM2_CCMR2  = (0x5306)
                           005307   763  TIM2_CCMR3  = (0x5307)
                           005308   764  TIM2_CCER1  = (0x5308)
                           005309   765  TIM2_CCER2  = (0x5309)
                           00530A   766  TIM2_CNTRH  = (0x530A)
                           00530B   767  TIM2_CNTRL  = (0x530B)
                           00530C   768  TIM2_PSCR  = (0x530C)
                           00530D   769  TIM2_ARRH  = (0x530D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           00530E   770  TIM2_ARRL  = (0x530E)
                           00530F   771  TIM2_CCR1H  = (0x530F)
                           005310   772  TIM2_CCR1L  = (0x5310)
                           005311   773  TIM2_CCR2H  = (0x5311)
                           005312   774  TIM2_CCR2L  = (0x5312)
                           005313   775  TIM2_CCR3H  = (0x5313)
                           005314   776  TIM2_CCR3L  = (0x5314)
                                    777 
                                    778 ; Timer 3
                           005320   779  TIM3_CR1  = (0x5320)
                           005321   780  TIM3_IER  = (0x5321)
                           005322   781  TIM3_SR1  = (0x5322)
                           005323   782  TIM3_SR2  = (0x5323)
                           005324   783  TIM3_EGR  = (0x5324)
                           005325   784  TIM3_CCMR1  = (0x5325)
                           005326   785  TIM3_CCMR2  = (0x5326)
                           005327   786  TIM3_CCER1  = (0x5327)
                           005328   787  TIM3_CNTRH  = (0x5328)
                           005329   788  TIM3_CNTRL  = (0x5329)
                           00532A   789  TIM3_PSCR  = (0x532A)
                           00532B   790  TIM3_ARRH  = (0x532B)
                           00532C   791  TIM3_ARRL  = (0x532C)
                           00532D   792  TIM3_CCR1H  = (0x532D)
                           00532E   793  TIM3_CCR1L  = (0x532E)
                           00532F   794  TIM3_CCR2H  = (0x532F)
                           005330   795  TIM3_CCR2L  = (0x5330)
                                    796 
                                    797 ; TIM3_CR1  fields
                           000000   798  TIM3_CR1_CEN = (0)
                           000001   799  TIM3_CR1_UDIS = (1)
                           000002   800  TIM3_CR1_URS = (2)
                           000003   801  TIM3_CR1_OPM = (3)
                           000007   802  TIM3_CR1_ARPE = (7)
                                    803 ; TIM3_CCR2  fields
                           000000   804  TIM3_CCMR2_CC2S_POS = (0)
                           000003   805  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   806  TIM3_CCMR2_OC2M_POS = (4)  
                                    807 ; TIM3_CCER1 fields
                           000000   808  TIM3_CCER1_CC1E = (0)
                           000001   809  TIM3_CCER1_CC1P = (1)
                           000004   810  TIM3_CCER1_CC2E = (4)
                           000005   811  TIM3_CCER1_CC2P = (5)
                                    812 ; TIM3_CCER2 fields
                           000000   813  TIM3_CCER2_CC3E = (0)
                           000001   814  TIM3_CCER2_CC3P = (1)
                                    815 
                                    816 ; Timer 4
                           005340   817  TIM4_CR1  = (0x5340)
                           005341   818  TIM4_IER  = (0x5341)
                           005342   819  TIM4_SR  = (0x5342)
                           005343   820  TIM4_EGR  = (0x5343)
                           005344   821  TIM4_CNTR  = (0x5344)
                           005345   822  TIM4_PSCR  = (0x5345)
                           005346   823  TIM4_ARR  = (0x5346)
                                    824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    825 ; Timer 4 bitmasks
                                    826 
                           000007   827  TIM4_CR1_ARPE = (7)
                           000003   828  TIM4_CR1_OPM = (3)
                           000002   829  TIM4_CR1_URS = (2)
                           000001   830  TIM4_CR1_UDIS = (1)
                           000000   831  TIM4_CR1_CEN = (0)
                                    832 
                           000000   833  TIM4_IER_UIE = (0)
                                    834 
                           000000   835  TIM4_SR_UIF = (0)
                                    836 
                           000000   837  TIM4_EGR_UG = (0)
                                    838 
                           000002   839  TIM4_PSCR_PSC2 = (2)
                           000001   840  TIM4_PSCR_PSC1 = (1)
                           000000   841  TIM4_PSCR_PSC0 = (0)
                                    842 
                           000000   843  TIM4_PSCR_1 = 0
                           000001   844  TIM4_PSCR_2 = 1
                           000002   845  TIM4_PSCR_4 = 2
                           000003   846  TIM4_PSCR_8 = 3
                           000004   847  TIM4_PSCR_16 = 4
                           000005   848  TIM4_PSCR_32 = 5
                           000006   849  TIM4_PSCR_64 = 6
                           000007   850  TIM4_PSCR_128 = 7
                                    851 
                                    852 ; ADC2
                           005400   853  ADC_CSR  = (0x5400)
                           005401   854  ADC_CR1  = (0x5401)
                           005402   855  ADC_CR2  = (0x5402)
                           005403   856  ADC_CR3  = (0x5403)
                           005404   857  ADC_DRH  = (0x5404)
                           005405   858  ADC_DRL  = (0x5405)
                           005406   859  ADC_TDRH  = (0x5406)
                           005407   860  ADC_TDRL  = (0x5407)
                                    861  
                                    862 ; ADC bitmasks
                                    863 
                           000007   864  ADC_CSR_EOC = (7)
                           000006   865  ADC_CSR_AWD = (6)
                           000005   866  ADC_CSR_EOCIE = (5)
                           000004   867  ADC_CSR_AWDIE = (4)
                           000003   868  ADC_CSR_CH3 = (3)
                           000002   869  ADC_CSR_CH2 = (2)
                           000001   870  ADC_CSR_CH1 = (1)
                           000000   871  ADC_CSR_CH0 = (0)
                                    872 
                           000006   873  ADC_CR1_SPSEL2 = (6)
                           000005   874  ADC_CR1_SPSEL1 = (5)
                           000004   875  ADC_CR1_SPSEL0 = (4)
                           000001   876  ADC_CR1_CONT = (1)
                           000000   877  ADC_CR1_ADON = (0)
                                    878 
                           000006   879  ADC_CR2_EXTTRIG = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   880  ADC_CR2_EXTSEL1 = (5)
                           000004   881  ADC_CR2_EXTSEL0 = (4)
                           000003   882  ADC_CR2_ALIGN = (3)
                           000001   883  ADC_CR2_SCAN = (1)
                                    884 
                           000007   885  ADC_CR3_DBUF = (7)
                           000006   886  ADC_CR3_DRH = (6)
                                    887 
                                    888 ; beCAN
                           005420   889  CAN_MCR = (0x5420)
                           005421   890  CAN_MSR = (0x5421)
                           005422   891  CAN_TSR = (0x5422)
                           005423   892  CAN_TPR = (0x5423)
                           005424   893  CAN_RFR = (0x5424)
                           005425   894  CAN_IER = (0x5425)
                           005426   895  CAN_DGR = (0x5426)
                           005427   896  CAN_FPSR = (0x5427)
                           005428   897  CAN_P0 = (0x5428)
                           005429   898  CAN_P1 = (0x5429)
                           00542A   899  CAN_P2 = (0x542A)
                           00542B   900  CAN_P3 = (0x542B)
                           00542C   901  CAN_P4 = (0x542C)
                           00542D   902  CAN_P5 = (0x542D)
                           00542E   903  CAN_P6 = (0x542E)
                           00542F   904  CAN_P7 = (0x542F)
                           005430   905  CAN_P8 = (0x5430)
                           005431   906  CAN_P9 = (0x5431)
                           005432   907  CAN_PA = (0x5432)
                           005433   908  CAN_PB = (0x5433)
                           005434   909  CAN_PC = (0x5434)
                           005435   910  CAN_PD = (0x5435)
                           005436   911  CAN_PE = (0x5436)
                           005437   912  CAN_PF = (0x5437)
                                    913 
                                    914 
                                    915 ; CPU
                           007F00   916  CPU_A  = (0x7F00)
                           007F01   917  CPU_PCE  = (0x7F01)
                           007F02   918  CPU_PCH  = (0x7F02)
                           007F03   919  CPU_PCL  = (0x7F03)
                           007F04   920  CPU_XH  = (0x7F04)
                           007F05   921  CPU_XL  = (0x7F05)
                           007F06   922  CPU_YH  = (0x7F06)
                           007F07   923  CPU_YL  = (0x7F07)
                           007F08   924  CPU_SPH  = (0x7F08)
                           007F09   925  CPU_SPL   = (0x7F09)
                           007F0A   926  CPU_CCR   = (0x7F0A)
                                    927 
                                    928 ; global configuration register
                           007F60   929  CFG_GCR   = (0x7F60)
                                    930 
                                    931 ; interrupt control registers
                           007F70   932  ITC_SPR1   = (0x7F70)
                           007F71   933  ITC_SPR2   = (0x7F71)
                           007F72   934  ITC_SPR3   = (0x7F72)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           007F73   935  ITC_SPR4   = (0x7F73)
                           007F74   936  ITC_SPR5   = (0x7F74)
                           007F75   937  ITC_SPR6   = (0x7F75)
                           007F76   938  ITC_SPR7   = (0x7F76)
                           007F77   939  ITC_SPR8   = (0x7F77)
                                    940 
                                    941 ; SWIM, control and status register
                           007F80   942  SWIM_CSR   = (0x7F80)
                                    943 ; debug registers
                           007F90   944  DM_BK1RE   = (0x7F90)
                           007F91   945  DM_BK1RH   = (0x7F91)
                           007F92   946  DM_BK1RL   = (0x7F92)
                           007F93   947  DM_BK2RE   = (0x7F93)
                           007F94   948  DM_BK2RH   = (0x7F94)
                           007F95   949  DM_BK2RL   = (0x7F95)
                           007F96   950  DM_CR1   = (0x7F96)
                           007F97   951  DM_CR2   = (0x7F97)
                           007F98   952  DM_CSR1   = (0x7F98)
                           007F99   953  DM_CSR2   = (0x7F99)
                           007F9A   954  DM_ENFCTR   = (0x7F9A)
                                    955 
                                    956 ; Interrupt Numbers
                           000000   957  INT_TLI = 0
                           000001   958  INT_AWU = 1
                           000002   959  INT_CLK = 2
                           000003   960  INT_EXTI0 = 3
                           000004   961  INT_EXTI1 = 4
                           000005   962  INT_EXTI2 = 5
                           000006   963  INT_EXTI3 = 6
                           000007   964  INT_EXTI4 = 7
                           000008   965  INT_CAN_RX = 8
                           000009   966  INT_CAN_TX = 9
                           00000A   967  INT_SPI = 10
                           00000B   968  INT_TIM1_OVF = 11
                           00000C   969  INT_TIM1_CCM = 12
                           00000D   970  INT_TIM2_OVF = 13
                           00000E   971  INT_TIM2_CCM = 14
                           00000F   972  INT_TIM3_OVF = 15
                           000010   973  INT_TIM3_CCM = 16
                           000011   974  INT_UART1_TX_COMPLETED = 17
                           000012   975  INT_AUART1_RX_FULL = 18
                           000013   976  INT_I2C = 19
                           000014   977  INT_UART3_TX_COMPLETED = 20
                           000015   978  INT_UART3_RX_FULL = 21
                           000016   979  INT_ADC2 = 22
                           000017   980  INT_TIM4_OVF = 23
                           000018   981  INT_FLASH = 24
                                    982 
                                    983 ; Interrupt Vectors
                           008000   984  INT_VECTOR_RESET = 0x8000
                           008004   985  INT_VECTOR_TRAP = 0x8004
                           008008   986  INT_VECTOR_TLI = 0x8008
                           00800C   987  INT_VECTOR_AWU = 0x800C
                           008010   988  INT_VECTOR_CLK = 0x8010
                           008014   989  INT_VECTOR_EXTI0 = 0x8014
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           008018   990  INT_VECTOR_EXTI1 = 0x8018
                           00801C   991  INT_VECTOR_EXTI2 = 0x801C
                           008020   992  INT_VECTOR_EXTI3 = 0x8020
                           008024   993  INT_VECTOR_EXTI4 = 0x8024
                           008028   994  INT_VECTOR_CAN_RX = 0x8028
                           00802C   995  INT_VECTOR_CAN_TX = 0x802c
                           008030   996  INT_VECTOR_SPI = 0x8030
                           008034   997  INT_VECTOR_TIM1_OVF = 0x8034
                           008038   998  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C   999  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1000  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1001  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1002  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1003  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1004  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1005  INT_VECTOR_I2C = 0x8054
                           008058  1006  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1007  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1008  INT_VECTOR_ADC2 = 0x8060
                           008064  1009  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1010  INT_VECTOR_FLASH = 0x8068
                                   1011 
                                   1012  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                      7 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                      9 
                                     10 ;-------------------------------------------------------
                                     11 ; History:
                                     12 ;	2019-10-28  starting work on version 0.2 to remove
                                     13 ; 				version 0.1 adressing range limitation.
                                     14 ;
                                     15 ;-------------------------------------------------------
                                     16 
                                     17 ;-------------------------------------------------------
                                     18 ;     vt100 CTRL_x  values
                                     19 ;-------------------------------------------------------
                           000001    20 		CTRL_A = 1
                           000002    21 		CTRL_B = 2
                           000003    22 		CTRL_C = 3
                           000004    23 		CTRL_D = 4
                           000005    24 		CTRL_E = 5
                           000006    25 		CTRL_F = 6
                           000007    26 		CTRL_G = 7
                           000008    27 		CTRL_H = 8
                           000009    28 		CTRL_I = 9
                           00000A    29 		CTRL_J = 10
                           00000B    30 		CTRL_K = 11
                           00000C    31 		CTRL_L = 12
                           00000D    32 		CTRL_M = 13
                           00000E    33 		CTRL_N = 14
                           00000F    34 		CTRL_O = 15
                           000010    35 		CTRL_P = 16
                           000011    36 		CTRL_Q = 17
                           000012    37 		CTRL_R = 18
                           000013    38 		CTRL_S = 19
                           000014    39 		CTRL_T = 20
                           000015    40 		CTRL_U = 21
                           000016    41 		CTRL_V = 22
                           000017    42 		CTRL_W = 23
                           000018    43 		CTRL_X = 24
                           000019    44 		CTRL_Y = 25
                           00001A    45 		CTRL_Z = 26
                           00001B    46 		ESC = 27
                           00000A    47 		NL = CTRL_J
                           00000D    48 		CR = CTRL_M
                           000008    49 		BSP = CTRL_H
                           000020    50 		SPACE = 32
                                     51 		
                                     52 ;--------------------------------------------------------
                                     53 ;      MACROS
                                     54 ;--------------------------------------------------------
                                     55 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     56 		bset PC_CR1,#LED2_BIT
                                     57 		bset PC_CR2,#LED2_BIT
                                     58 		bset PC_DDR,#LED2_BIT
                                     59 		.endm
                                     60 		
                                     61 		.macro _ledon ; turn on green LED 
                                     62 		bset PC_ODR,#LED2_BIT
                                     63 		.endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     64 		
                                     65 		.macro _ledoff ; turn off green LED
                                     66 		bres PC_ODR,#LED2_BIT
                                     67 		.endm
                                     68 		
                                     69 		.macro _ledtoggle ; invert green LED state
                                     70 		ld a,#LED2_MASK
                                     71 		xor a,PC_ODR
                                     72 		ld PC_ODR,a
                                     73 		.endm
                                     74 		
                                     75 		
                                     76 		.macro  _int_enable ; enable interrupts
                                     77 		 rim
                                     78 		.endm
                                     79 		
                                     80 		.macro _int_disable ; disable interrupts
                                     81 		sim
                                     82 		.endm
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ;        OPTION BYTES
                                     86 ;--------------------------------------------------------
                                     87 ;		.area 	OPTION (ABS)
                                     88 ;		.org 0x4800
                                     89 ;		.byte 0     ; 0x4800 ; OPT0 read out protection 
                                     90 ;		.byte 0,255 ; 0x4801 - 0x4802 OPT1 user boot code
                                     91 ;       .byte 0,255 ; 0x4803 - 0x4804 OPT2 alt. fct remapping 
                                     92 ;       .byte 0,255 ; 0x4805 - 0x4806 OPT3 watchdog options
                                     93 ;       .byte 0,255 ; 0x4807 - 0x4808 OPT4 clock options
                                     94 ;       .byte 0,255 ; 0x4809 - 0x480a OPT5 HSE clock startup
                                     95 ;       .byte 0,255 ; 0x480b - 0x480c OPT6 reserved
                                     96 ;       .byte 0,255 ; 0x480d - 0x480e OPT7 flash wait state
                                     97 		.area BOOTLOADER (ABS)
      00487E                         98 		.org 0x487e
                                     99 ;       .byte 0,255 ; 0x487e - 0x487f rom bootloader checkpoint
                                    100 		
                                    101 ;--------------------------------------------------------
                                    102 ;some constants used by this program.
                                    103 ;--------------------------------------------------------
                           000100   104 		STACK_SIZE = 256 ; call stack size
                           001700   105 		STACK_BASE = RAM_SIZE-STACK_SIZE ; lowest address of stack
                           0017FF   106 		STACK_TOP = RAM_SIZE-1 ; stack top at end of ram
                           000050   107 		TIB_SIZE = 80 ; transaction input buffer size
                           000050   108 		PAD_SIZE = 80 ; workding pad size
                                    109 		; vesrion major.minor
                           000000   110 		VERS_MAJOR = 0 ; major version number
                           000002   111 		VERS_MINOR = 2 ; minor version number
                                    112 
                                    113 ;--------------------------------------------------------
                                    114 ;   application variables 
                                    115 ;---------------------------------------------------------		
                                    116         .area DATA
                                    117 ;ticks  .blkw 1 ; system ticks at every millisecond        
                                    118 ;cntdwn:	.blkw 1 ; millisecond count down timer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000000                        119 rx_char: .blkb 1 ; last uart received char
      000001                        120 in.w:     .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000002                        121 in:		.blkb 1; parser position in tib
      000003                        122 count:  .blkb 1; length of string in tib
      000004                        123 idx_x:  .blkw 1; index for table pointed by x
      000006                        124 idx_y:  .blkw 1; index for table pointed by y
      000008                        125 tib:	.blkb TIB_SIZE ; transaction input buffer
      000058                        126 pad:	.blkb PAD_SIZE ; working pad
      0000A8                        127 acc24:  .blkb 3; 24 bits accumulator
      0000AB                        128 farptr: .blkb 3; 24 bits pointer
      0000AE                        129 ram_free_base: .blkw 1
      0000B0                        130 flash_free_base: .blkw 1
                                    131 
                                    132 		.area USER_RAM_BASE
                                    133 ;--------------------------------------------------------
                                    134 ;   the following RAM is not used by MONA
                                    135 ;--------------------------------------------------------
      000000                        136  _user_ram:		
                                    137 
                                    138 ;--------------------------------------------------------
                                    139 ;  stack segment
                                    140 ;--------------------------------------------------------
                                    141        .area SSEG  (ABS)
      001700                        142 	   .org RAM_SIZE-STACK_SIZE
      001700                        143  __stack_bottom:
      001700                        144 	   .ds  256
                                    145 
                                    146 ;--------------------------------------------------------
                                    147 ; interrupt vector 
                                    148 ;--------------------------------------------------------
                                    149 	.area HOME
      000000                        150 __interrupt_vect:
      000000 82 00 00 9E            151 	int init0 ;RESET vector
      000004 82 00 01 08            152 	int NonHandledInterrupt ;TRAP  software interrupt
      000008 82 00 01 08            153 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 01 08            154 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 01 08            155 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 01 08            156 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 01 08            157 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 01 08            158 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 01 08            159 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 01 08            160 	int NonHandledInterrupt ;int7 EXTI4 port E external interrupts
      000028 82 00 01 08            161 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 01 08            162 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 01 08            163 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 01 08            164 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 01 08            165 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 01 08            166 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 01 08            167 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 01 08            168 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 01 08            169 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 01 08            170 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 01 08            171 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 01 08            172 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 01 08            173 	int NonHandledInterrupt ;int20 UART3 TX completed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00005C 82 00 01 0D            174 	int uart_rx_isr         ;int21 UART3 RX full
      000060 82 00 01 08            175 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 01 08            176 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 01 08            177 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 01 08            178 	int NonHandledInterrupt ;int25  not used
      000070 82 00 01 08            179 	int NonHandledInterrupt ;int26  not used
      000074 82 00 01 08            180 	int NonHandledInterrupt ;int27  not used
      000078 82 00 01 08            181 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 01 08            182 	int NonHandledInterrupt ;int29  not used
                                    183 
                                    184 	.area CODE
                                    185 
                                    186 	;initialize clock to use HSE 8 Mhz crystal
      000000                        187 clock_init:	
      000000 72 12 50 C5      [ 1]  188 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000004 A6 B4            [ 1]  189 	ld a,#CLK_SWR_HSE
      000006 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000009 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00000C 26 FB            [ 1]  192 	jrne 1$
      00000E 81               [ 4]  193 	ret
                                    194 
                                    195 		; initialize TIMER4 ticks counter
                                    196 ;timer4_init:
                                    197 ;	clr ticks
                                    198 ;	clr cntdwn
                                    199 ;	ld a,#TIM4_PSCR_128 
                                    200 ;	ld TIM4_PSCR,a
                                    201 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    202 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    203 ;	ld a,#125
                                    204 ;	ld TIM4_ARR,a ; 1 msec interval
                                    205 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    206 ;	ld TIM4_CR1,a
                                    207 ;	ret
                                    208 
                                    209 ; initialize UART3, 115200 8N1
      00000F                        210 uart3_init:
                                    211 	; configure tx pin
      00000F 72 1A 50 11      [ 1]  212 	bset PD_DDR,#BIT5 ; tx pin
      000013 72 1A 50 12      [ 1]  213 	bset PD_CR1,#BIT5 ; push-pull output
      000017 72 1A 50 13      [ 1]  214 	bset PD_CR2,#BIT5 ; fast output
                                    215 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001B 35 05 52 43      [ 1]  216 	mov UART3_BRR2,#0x05 ; must be loaded first
      00001F 35 04 52 42      [ 1]  217 	mov UART3_BRR1,#0x4
      000023 35 2C 52 45      [ 1]  218 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      000027 81               [ 4]  219 	ret
                                    220 	
                                    221 	; pause in milliseconds
                                    222     ; input:  y delay
                                    223     ; output: none
                                    224 ;pause:
                                    225 ;	 ldw cntdwn,y
                                    226 ;1$: ldw y,cntdwn
                                    227 ;	 jrne 1$
                                    228 ;    ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                    229 
                                    230 ;-------------------------
                                    231 ;  zero all free ram
                                    232 ;-------------------------
      000028                        233 clear_all_free_ram:
      000028 AE 00 00         [ 2]  234 	ldw x,#0
      00002B                        235 1$:	
      00002B 7F               [ 1]  236 	clr (x)
      00002C 5C               [ 1]  237 	incw x
      00002D A3 17 FD         [ 2]  238 	cpw x,#STACK_TOP-2
      000030 23 F9            [ 2]  239 	jrule 1$
      000032 81               [ 4]  240 	ret
                                    241 
                                    242 
                                    243 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    244 ;  information printed at reset
                                    245 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000033                        246 print_mona_info:
      000033 A6 0C            [ 1]  247 	ld a,#CTRL_L
      000035 CD 01 24         [ 4]  248 	call uart_tx
      000038 90 AE 07 A3      [ 2]  249 	ldw y,#VERSION
      00003C CD 01 2E         [ 4]  250 	call uart_print
      00003F A6 00            [ 1]  251 	ld a, #VERS_MAJOR
      000041 AB 30            [ 1]  252 	add a,#'0
      000043 CD 01 24         [ 4]  253 	call uart_tx
      000046 A6 2E            [ 1]  254 	ld a,#'.'
      000048 CD 01 24         [ 4]  255 	call uart_tx
      00004B A6 02            [ 1]  256 	ld a, #VERS_MINOR
      00004D AB 30            [ 1]  257 	add a,#'0
      00004F CD 01 24         [ 4]  258 	call uart_tx
      000052 90 AE 07 B2      [ 2]  259 	ldw y,#CPU_MODEL
      000056 CD 01 2E         [ 4]  260 	call uart_print
      000059 90 AE 07 EB      [ 2]  261 	ldw y,#RAM_FREE_MSG
      00005D CD 01 2E         [ 4]  262 	call uart_print
      000060 72 5F 00 A8      [ 1]  263 	clr acc24
      000064 55 00 AE 00 A9   [ 1]  264 	mov acc24+1,ram_free_base
      000069 55 00 AF 00 AA   [ 1]  265 	mov acc24+2,ram_free_base+1 
      00006E A6 10            [ 1]  266 	ld a,#16
      000070 CD 03 3A         [ 4]  267 	call itoa
      000073 CD 01 2E         [ 4]  268 	call uart_print
      000076 90 AE 07 F6      [ 2]  269 	ldw y,#RAM_LAST_FREE_MSG
      00007A CD 01 2E         [ 4]  270 	call uart_print
      00007D 90 AE 07 FF      [ 2]  271 	ldw y,#FLASH_FREE_MSG
      000081 CD 01 2E         [ 4]  272 	call uart_print
      000084 A6 10            [ 1]  273 	ld a,#16
      000086 55 00 B0 00 A9   [ 1]  274 	mov acc24+1,flash_free_base
      00008B 55 00 B1 00 AA   [ 1]  275 	mov acc24+2,flash_free_base+1 
      000090 CD 03 3A         [ 4]  276 	call itoa
      000093 CD 01 2E         [ 4]  277 	call uart_print
      000096 90 AE 08 0C      [ 2]  278 	ldw y,#EEPROM_MSG
      00009A CD 01 2E         [ 4]  279 	call uart_print
      00009D 81               [ 4]  280 	ret
                                    281 
      00009E                        282 init0:
                                    283 	; initialize SP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00009E AE 17 FF         [ 2]  284 	ldw x,#STACK_TOP
      0000A1 94               [ 1]  285 	ldw sp,x
      0000A2 CD 00 00         [ 4]  286 	call clock_init
      0000A5 CD 00 28         [ 4]  287 	call clear_all_free_ram
                                    288 ;	clr ticks
                                    289 ;	clr cntdwn
      0000A8 A6 FF            [ 1]  290 	ld a,#255
      0000AA C7 00 00         [ 1]  291 	ld rx_char,a
                                    292 ;	call timer4_init
      0000AD CD 00 0F         [ 4]  293 	call uart3_init
      0000B0                        294 	_ledenable
      0000B0 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#LED2_BIT
      0000B4 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#LED2_BIT
      0000B8 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#LED2_BIT
      0000BC                        295 	_ledoff
      0000BC 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#LED2_BIT
      0000C0 72 5F 00 01      [ 1]  296 	clr in.w ; must always be 0
                                    297 	; initialize free_ram_base variable
      0000C4 90 AE 00 00      [ 2]  298 	ldw y,#_user_ram ;#ram_free_base
                                    299 	; align on 16 bytes boundary
      0000C8 72 A9 00 0F      [ 2]  300 	addw y,#0xf
      0000CC 90 9F            [ 1]  301 	ld a,yl
      0000CE A4 F0            [ 1]  302 	and a,#0xf0
      0000D0 90 97            [ 1]  303 	ld yl,a
      0000D2 90 CF 00 AE      [ 2]  304 	ldw ram_free_base,y
                                    305 	; initialize flash_free_base variable
      0000D6 90 AE 0A 04      [ 2]  306 	ldw y,#flash_free
                                    307 	; align on 128 bytes boundary (block size)
      0000DA 72 A9 00 7F      [ 2]  308 	addw y,#0x7f
      0000DE 90 9F            [ 1]  309 	ld a,yl
      0000E0 A4 80            [ 1]  310 	and a,#0x80
      0000E2 90 97            [ 1]  311 	ld yl,a
      0000E4 90 CF 00 B0      [ 2]  312 	ldw flash_free_base,y
                                    313 
                                    314 ;------------------------
                                    315 ; program main function
                                    316 ;------------------------
      0000E8                        317 main:	
                                    318 ; enable interrupts
      0000E8                        319 	_int_enable 
      0000E8 9A               [ 1]    1 		 rim
                                    320 ; information printed at mcu reset.	
      0000E9 CD 00 33         [ 4]  321 	call print_mona_info
                                    322 ; Read Execute Print Loop
                                    323 ; MONA spend is time in this loop
      0000EC                        324 repl: 
                                    325 ; move terminal cursor to next line
      0000EC A6 0A            [ 1]  326 	ld a,#NL 
      0000EE CD 01 24         [ 4]  327 	call uart_tx
                                    328 ; print prompt sign	 
      0000F1 A6 3E            [ 1]  329 	ld a,#'>
      0000F3 CD 01 24         [ 4]  330 	call uart_tx
                                    331 ; read command line	
      0000F6 CD 01 74         [ 4]  332 	call readln 
                                    333 ;if empty line -> ignore it, loop.	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0000F9 72 5D 00 03      [ 1]  334 	tnz count
      0000FD 27 ED            [ 1]  335 	jreq repl
                                    336 ; initialize parser and call eval function	  
      0000FF 72 5F 00 02      [ 1]  337 	clr in
      000103 CD 05 25         [ 4]  338 	call eval
                                    339 ; start over	
      000106 20 E4            [ 2]  340 	jra repl  ; loop
                                    341 	 
                                    342 ;------------------------------------
                                    343 ;	interrupt NonHandledInterrupt
                                    344 ;   non handled interrupt reset MCU
                                    345 ;------------------------------------
      000108                        346 NonHandledInterrupt:
      000108 A6 80            [ 1]  347 	ld a,#0x80
      00010A C7 50 D1         [ 1]  348 	ld WWDG_CR,a
                                    349 	;iret
                                    350 
                                    351 ;------------------------------------
                                    352 ; TIMER4 interrupt service routine
                                    353 ;------------------------------------
                                    354 ;timer4_isr:
                                    355 ;	ldw y,ticks
                                    356 ;	incw y
                                    357 ;	ldw ticks,y
                                    358 ;	ldw y,cntdwn
                                    359 ;	jreq 1$
                                    360 ;	decw y
                                    361 ;	ldw cntdwn,y
                                    362 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    363 ;	iret
                                    364 
                                    365 ;------------------------------------
                                    366 ; uart3 receive interrupt service
                                    367 ;------------------------------------
      00010D                        368 uart_rx_isr:
                                    369 ; local variables
                           000002   370   UART_STATUS = 2
                           000001   371   UART_DATA = 1
                                    372 ; read uart registers and save them in local variables  
      00010D C6 52 40         [ 1]  373   ld a, UART3_SR
      000110 88               [ 1]  374   push a  ; local variable UART_STATUS
      000111 C6 52 41         [ 1]  375   ld a,UART3_DR
      000114 88               [ 1]  376   push a ; local variable UART_DATA
                                    377 ; test uart status register
                                    378 ; bit RXNE must 1
                                    379 ; bits OR|FE|NF must be 0	
      000115 7B 02            [ 1]  380   ld a, (UART_STATUS,sp)
                                    381 ; keep only significant bits
      000117 A4 2E            [ 1]  382   and a, #((1<<UART_SR_RXNE)|(1<<UART_SR_OR)|(1<<UART_SR_FE)|(1<<UART_SR_NF))
                                    383 ; A value shoudl be == (1<<UART_SR_RNXE)  
      000119 A1 20            [ 1]  384   cp a, #(1<<UART_SR_RXNE)
      00011B 26 05            [ 1]  385   jrne 1$
                                    386 ; no receive error accept it.  
      00011D 7B 01            [ 1]  387   ld a,(UART_DATA,sp)
      00011F C7 00 00         [ 1]  388   ld rx_char,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000122                        389 1$: 
                                    390 ; drop local variables
      000122 85               [ 2]  391   popw X	
      000123 80               [11]  392   iret
                                    393 
                                    394 ;------------------------------------
                                    395 ;  serial port communication routines
                                    396 ;------------------------------------
                                    397 ;------------------------------------
                                    398 ; transmit character in a via UART3
                                    399 ; character to transmit on (3,sp)
                                    400 ;------------------------------------
      000124                        401 uart_tx:
      000124 72 5D 52 40      [ 1]  402 	tnz UART3_SR
      000128 2A FA            [ 1]  403 	jrpl uart_tx
      00012A C7 52 41         [ 1]  404 	ld UART3_DR,a
      00012D 81               [ 4]  405     ret
                                    406 
                                    407 ;------------------------------------
                                    408 ; send string via UART2
                                    409 ; y is pointer to str
                                    410 ;------------------------------------
      00012E                        411 uart_print:
      00012E 90 F6            [ 1]  412 	ld a,(y)
      000130 27 07            [ 1]  413 	jreq 1$
      000132 CD 01 24         [ 4]  414 	call uart_tx
      000135 90 5C            [ 1]  415 	incw y
      000137 20 F5            [ 2]  416 	jra uart_print
      000139 81               [ 4]  417 1$: ret
                                    418 
                                    419 ;------------------------------------
                                    420 ; check if char available
                                    421 ;------------------------------------
      00013A                        422 uart_qchar:
      00013A A6 FF            [ 1]  423 	ld a,#255
      00013C C1 00 00         [ 1]  424 	cp a,rx_char
      00013F 81               [ 4]  425     ret
                                    426 
                                    427 ;------------------------------------
                                    428 ; return char in A to queue
                                    429 ;------------------------------------
      000140                        430 ungetchar: 
      000140                        431 	_int_disable
      000140 9B               [ 1]    1 		sim
      000141 C7 00 00         [ 1]  432 	ld rx_char,a
      000144                        433     _int_enable
      000144 9A               [ 1]    1 		 rim
      000145 81               [ 4]  434     ret
                                    435     
                                    436 ;------------------------------------
                                    437 ; wait for character from uart3
                                    438 ;------------------------------------
      000146                        439 uart_getchar:
      000146 A6 FF            [ 1]  440 	ld a,#255
      000148 C1 00 00         [ 1]  441 	cp a,rx_char
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00014B 27 F9            [ 1]  442 	jreq uart_getchar
      00014D                        443 	_int_disable
      00014D 9B               [ 1]    1 		sim
      00014E C6 00 00         [ 1]  444 	ld a, rx_char
      000151 88               [ 1]  445 	push a
      000152 A6 FF            [ 1]  446 	ld a,#-1
      000154 C7 00 00         [ 1]  447 	ld rx_char,a
      000157                        448 	_int_enable
      000157 9A               [ 1]    1 		 rim
      000158 84               [ 1]  449 	pop a
      000159 81               [ 4]  450 	ret
                                    451 
                                    452 ;------------------------------------
                                    453 ; delete n character from input line
                                    454 ;------------------------------------
      00015A                        455 uart_delete:
      00015A 88               [ 1]  456 	push a ; n 
      00015B                        457 del_loop:
      00015B 0D 01            [ 1]  458 	tnz (1,sp)
      00015D 27 13            [ 1]  459 	jreq 1$
      00015F A6 08            [ 1]  460 	ld a,#BSP
      000161 CD 01 24         [ 4]  461 	call uart_tx
      000164 A6 20            [ 1]  462     ld a,#SPACE
      000166 CD 01 24         [ 4]  463     call uart_tx
      000169 A6 08            [ 1]  464     ld a,#BSP
      00016B CD 01 24         [ 4]  465     call uart_tx
      00016E 0A 01            [ 1]  466     dec (1,sp)
      000170 20 E9            [ 2]  467     jra del_loop
      000172 84               [ 1]  468 1$: pop a
      000173 81               [ 4]  469 	ret 
                                    470 
                                    471 ;------------------------------------
                                    472 ; read a line of text from terminal
                                    473 ; input:
                                    474 ;	none
                                    475 ; local variable on stack:
                                    476 ;	LEN (1,sp)
                                    477 ;   RXCHAR (2,sp)
                                    478 ; output:
                                    479 ;   text in tib  buffer
                                    480 ;   len in count variable
                                    481 ;------------------------------------
      000174                        482 readln:
                                    483 	; local variables
                           000001   484 	LEN = 1  ; accepted line length
                           000002   485 	RXCHAR = 2 ; last char received
      000174 4B 00            [ 1]  486 	push #0  ; RXCHAR 
      000176 4B 00            [ 1]  487 	push #0  ; LEN
      000178 90 AE 00 08      [ 2]  488  	ldw y,#tib ; input buffer
      00017C                        489 readln_loop:
      00017C CD 01 46         [ 4]  490 	call uart_getchar
      00017F 6B 02            [ 1]  491 	ld (RXCHAR,sp),a
      000181 A1 03            [ 1]  492 	cp a,#CTRL_C
      000183 26 03            [ 1]  493 	jrne 2$
      000185 CC 02 00         [ 2]  494 	jp cancel
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000188 A1 12            [ 1]  495 2$:	cp a,#CTRL_R
      00018A 27 50            [ 1]  496 	jreq reprint
      00018C A1 0D            [ 1]  497 	cp a,#CR
      00018E 26 03            [ 1]  498 	jrne 1$
      000190 CC 02 0A         [ 2]  499 	jp readln_quit
      000193 A1 0A            [ 1]  500 1$:	cp a,#NL
      000195 27 73            [ 1]  501 	jreq readln_quit
      000197 A1 08            [ 1]  502 	cp a,#BSP
      000199 27 1B            [ 1]  503 	jreq del_back
      00019B A1 04            [ 1]  504 	cp a,#CTRL_D
      00019D 27 06            [ 1]  505 	jreq del_line
      00019F A1 20            [ 1]  506 	cp a,#SPACE
      0001A1 2A 24            [ 1]  507 	jrpl accept_char
      0001A3 20 D7            [ 2]  508 	jra readln_loop
      0001A5                        509 del_line:
      0001A5 7B 01            [ 1]  510 	ld a,(LEN,sp)
      0001A7 CD 01 5A         [ 4]  511 	call uart_delete
      0001AA 90 AE 00 08      [ 2]  512 	ldw y,#tib
      0001AE 72 5F 00 03      [ 1]  513 	clr count
      0001B2 0F 01            [ 1]  514 	clr (LEN,sp)
      0001B4 20 C6            [ 2]  515 	jra readln_loop
      0001B6                        516 del_back:
      0001B6 0D 01            [ 1]  517     tnz (LEN,sp)
      0001B8 27 C2            [ 1]  518     jreq readln_loop
      0001BA 0A 01            [ 1]  519     dec (LEN,sp)
      0001BC 90 5A            [ 2]  520     decw y
      0001BE 90 7F            [ 1]  521     clr  (y)
      0001C0 A6 01            [ 1]  522     ld a,#1
      0001C2 CD 01 5A         [ 4]  523     call uart_delete
      0001C5 20 B5            [ 2]  524     jra readln_loop	
      0001C7                        525 accept_char:
      0001C7 A6 4F            [ 1]  526 	ld a,#TIB_SIZE-1
      0001C9 11 01            [ 1]  527 	cp a, (1,sp)
      0001CB 27 AF            [ 1]  528 	jreq readln_loop
      0001CD 7B 02            [ 1]  529 	ld a,(RXCHAR,sp)
      0001CF 90 F7            [ 1]  530 	ld (y),a
      0001D1 0C 01            [ 1]  531 	inc (LEN,sp)
      0001D3 90 5C            [ 1]  532 	incw y
      0001D5 90 7F            [ 1]  533 	clr (y)
      0001D7 CD 01 24         [ 4]  534 	call uart_tx
      0001DA 20 A0            [ 2]  535 	jra readln_loop
      0001DC                        536 reprint:
      0001DC 0D 01            [ 1]  537 	tnz (LEN,sp)
      0001DE 26 9C            [ 1]  538 	jrne readln_loop
      0001E0 72 5D 00 03      [ 1]  539 	tnz count
      0001E4 27 96            [ 1]  540 	jreq readln_loop
      0001E6 90 AE 00 08      [ 2]  541 	ldw y,#tib
      0001EA 90 89            [ 2]  542 	pushw y
      0001EC CD 01 2E         [ 4]  543 	call uart_print
      0001EF 90 85            [ 2]  544 	popw y
      0001F1 C6 00 03         [ 1]  545 	ld a,count
      0001F4 6B 01            [ 1]  546 	ld (LEN,sp),a
      0001F6 90 9F            [ 1]  547 	ld a,yl
      0001F8 CB 00 03         [ 1]  548 	add a,count
      0001FB 90 97            [ 1]  549 	ld yl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0001FD CC 01 7C         [ 2]  550 	jp readln_loop
      000200                        551 cancel:
      000200 72 5F 00 08      [ 1]  552 	clr tib
      000204 72 5F 00 03      [ 1]  553 	clr count
      000208 20 05            [ 2]  554 	jra readln_quit2
      00020A                        555 readln_quit:
      00020A 7B 01            [ 1]  556 	ld a,(LEN,sp)
      00020C C7 00 03         [ 1]  557 	ld count,a
      00020F                        558 readln_quit2:
      00020F 5B 02            [ 2]  559 	addw sp,#2
      000211 A6 0A            [ 1]  560 	ld a,#NL
      000213 CD 01 24         [ 4]  561 	call uart_tx
      000216 81               [ 4]  562 	ret
                                    563 	
                                    564 ;------------------------------------
                                    565 ; skip character c in tib starting from 'in'
                                    566 ; input: 
                                    567 ;    a character to skip
                                    568 ; output:  'in' ajusted to new position
                                    569 ;------------------------------------
      000217                        570 skip:
                           000001   571 	C = 1 ; local var
      000217 88               [ 1]  572 	push a
      000218 90 AE 00 08      [ 2]  573 	ldw y,#tib
      00021C 91 D6 01         [ 4]  574 1$:	ld a,([in.w],y)
      00021F 27 0A            [ 1]  575 	jreq 2$
      000221 11 01            [ 1]  576 	cp a,(C,sp)
      000223 26 06            [ 1]  577 	jrne 2$
      000225 72 5C 00 02      [ 1]  578 	inc in
      000229 20 F1            [ 2]  579 	jra 1$
      00022B 84               [ 1]  580 2$: pop a
      00022C 81               [ 4]  581 	ret
                                    582 	
                                    583 ;------------------------------------
                                    584 ; scan tib for charater 'c' starting from 'in'
                                    585 ; input:
                                    586 ;    a character to skip
                                    587 ;------------------------------------
      00022D                        588 scan: 
                           000001   589 	C = 1 ; local var
      00022D 88               [ 1]  590 	push a
      00022E 90 AE 00 08      [ 2]  591 	ldw y,#tib
      000232 91 D6 01         [ 4]  592 1$:	ld a,([in.w],y)
      000235 27 0A            [ 1]  593 	jreq 2$
      000237 11 01            [ 1]  594 	cp a,(C,sp)
      000239 27 06            [ 1]  595 	jreq 2$
      00023B 72 5C 00 02      [ 1]  596 	inc in
      00023F 20 F1            [ 2]  597 	jra 1$
      000241 84               [ 1]  598 2$: pop a
      000242 81               [ 4]  599 	ret
                                    600 
                                    601 ;------------------------------------
                                    602 ; scan tib for next word
                                    603 ; move word in 'pad'
                                    604 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000243                        605 next_word:	
                           000001   606 	FIRST = 1
                           000002   607 	XSAVE = 2
      000243 52 03            [ 2]  608 	sub sp,#3
      000245 1F 02            [ 2]  609 	ldw (XSAVE,sp),x ; save x
      000247 A6 20            [ 1]  610 	ld a,#SPACE
      000249 CD 02 17         [ 4]  611 	call skip
      00024C C6 00 02         [ 1]  612 	ld a,in
      00024F 6B 01            [ 1]  613 	ld (FIRST,sp),a
      000251 A6 20            [ 1]  614 	ld a,#SPACE
      000253 CD 02 2D         [ 4]  615 	call scan
                                    616 	; copy word in pad
      000256 AE 00 08         [ 2]  617 	ldw x,#tib  ; source
      000259 72 5F 00 04      [ 1]  618 	clr idx_x
      00025D 7B 01            [ 1]  619 	ld a,(FIRST,sp)
      00025F C7 00 05         [ 1]  620 	ld idx_x+1,a
      000262 90 AE 00 58      [ 2]  621 	ldw y,#pad
      000266 72 5F 00 06      [ 1]  622 	clr idx_y
      00026A 72 5F 00 07      [ 1]  623 	clr idx_y+1
      00026E C6 00 02         [ 1]  624 	ld a,in
      000271 10 01            [ 1]  625 	sub a,(FIRST,sp)
      000273 CD 02 7B         [ 4]  626 	call strcpyn
      000276 1E 02            [ 2]  627 	ldw x,(XSAVE,sp)
      000278 5B 03            [ 2]  628 	addw sp,#3
      00027A 81               [ 4]  629 	ret
                                    630 	
                                    631 	
                                    632 ;------------------------------------
                                    633 ; copy n character from (x) to (y)
                                    634 ; input:
                                    635 ;   	x   source pointer
                                    636 ;       idx_x index in (x)
                                    637 ;       y   destination pointer
                                    638 ;       idx_y  index in (y)
                                    639 ;       a   number of character to copy
                                    640 ;------------------------------------
      00027B                        641 strcpyn:
                           000001   642 	N = 1 ; local variable count
      00027B 88               [ 1]  643 	push a
      00027C 7B 01            [ 1]  644 1$: ld a,(N,sp)		
      00027E 27 13            [ 1]  645 	jreq 2$ 
      000280 72 D6 00 04      [ 4]  646 	ld a,([idx_x],x)
      000284 91 D7 06         [ 4]  647 	ld ([idx_y],y),a
      000287 72 5C 00 05      [ 1]  648 	inc idx_x+1
      00028B 72 5C 00 07      [ 1]  649 	inc idx_y+1
      00028F 0A 01            [ 1]  650 	dec (N,sp)
      000291 20 E9            [ 2]  651 	jra 1$
      000293 91 6F 06         [ 4]  652 2$: clr ([idx_y],y)
      000296 84               [ 1]  653 	pop a
      000297 81               [ 4]  654 	ret
                                    655 
                                    656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    657 ;        arithmetic operations
                                    658 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    660 ;--------------------------------------
                                    661 ; unsigned multiply uint24_t by uint8_t
                                    662 ; use to convert numerical string to uint24_t
                                    663 ; input:
                                    664 ;	acc24	uint24_t 
                                    665 ;   A		uint8_t
                                    666 ; output:
                                    667 ;   acc24   A*acc24
                                    668 ;-------------------------------------
                                    669 ; local variables offset  on sp
                           000003   670 	U8   = 3   ; A pushed on stack
                           000002   671 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   672 	OVFH = 1  ; multiplication overflow high byte
                           000003   673 	LOCAL_SIZE = 3
      000298                        674 mulu24_8:
      000298 89               [ 2]  675 	pushw x    ; save X
                                    676 	; local variables
      000299 88               [ 1]  677 	push a     ; U8
      00029A 5F               [ 1]  678 	clrw x     ; initialize overflow to 0
      00029B 89               [ 2]  679 	pushw x    ; multiplication overflow
                                    680 ; multiply low byte.
      00029C C6 00 AA         [ 1]  681 	ld a,acc24+2
      00029F 97               [ 1]  682 	ld xl,a
      0002A0 7B 03            [ 1]  683 	ld a,(U8,sp)
      0002A2 42               [ 4]  684 	mul x,a
      0002A3 9F               [ 1]  685 	ld a,xl
      0002A4 C7 00 AA         [ 1]  686 	ld acc24+2,a
      0002A7 9E               [ 1]  687 	ld a, xh
      0002A8 6B 02            [ 1]  688 	ld (OVFL,sp),a
                                    689 ; multipy middle byte
      0002AA C6 00 A9         [ 1]  690 	ld a,acc24+1
      0002AD 97               [ 1]  691 	ld xl,a
      0002AE 7B 03            [ 1]  692 	ld a, (U8,sp)
      0002B0 42               [ 4]  693 	mul x,a
                                    694 ; add overflow to this partial product
      0002B1 72 FB 01         [ 2]  695 	addw x,(OVFH,sp)
      0002B4 9F               [ 1]  696 	ld a,xl
      0002B5 C7 00 A9         [ 1]  697 	ld acc24+1,a
      0002B8 4F               [ 1]  698 	clr a
      0002B9 A9 00            [ 1]  699 	adc a,#0
      0002BB 6B 01            [ 1]  700 	ld (OVFH,sp),a
      0002BD 9E               [ 1]  701 	ld a,xh
      0002BE 6B 02            [ 1]  702 	ld (OVFL,sp),a
                                    703 ; multiply most signficant byte	
      0002C0 C6 00 A8         [ 1]  704 	ld a, acc24
      0002C3 97               [ 1]  705 	ld xl, a
      0002C4 7B 03            [ 1]  706 	ld a, (U8,sp)
      0002C6 42               [ 4]  707 	mul x,a
      0002C7 72 FB 01         [ 2]  708 	addw x, (OVFH,sp)
      0002CA 9F               [ 1]  709 	ld a, xl
      0002CB C7 00 A8         [ 1]  710 	ld acc24,a
      0002CE 5B 03            [ 2]  711     addw sp,#LOCAL_SIZE
      0002D0 85               [ 2]  712 	popw x
      0002D1 81               [ 4]  713 	ret
                                    714 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    715 ;-------------------------------------
                                    716 ; divide uint24_t by uint8_t
                                    717 ; used to convert uint24_t to string
                                    718 ; input:
                                    719 ;	acc24	dividend
                                    720 ;   A 		divisor
                                    721 ; output:
                                    722 ;   acc24	quotient
                                    723 ;   A		remainder
                                    724 ;------------------------------------- 
                                    725 ; offset  on sp of arguments and locals
                           000001   726 	U8   = 1   ; divisor on stack
                           000001   727 	LOCAL_SIZE =1
      0002D2                        728 divu24_8:
      0002D2 89               [ 2]  729 	pushw x ; save x
      0002D3 88               [ 1]  730 	push a 
                                    731 	; ld dividend UU:MM bytes in X
      0002D4 C6 00 A8         [ 1]  732 	ld a, acc24
      0002D7 95               [ 1]  733 	ld xh,a
      0002D8 C6 00 A9         [ 1]  734 	ld a,acc24+1
      0002DB 97               [ 1]  735 	ld xl,a
      0002DC 7B 01            [ 1]  736 	ld a,(U8,SP) ; divisor
      0002DE 62               [ 2]  737 	div x,a ; UU:MM/U8
      0002DF 88               [ 1]  738 	push a  ;save remainder
      0002E0 9E               [ 1]  739 	ld a,xh
      0002E1 C7 00 A8         [ 1]  740 	ld acc24,a
      0002E4 9F               [ 1]  741 	ld a,xl
      0002E5 C7 00 A9         [ 1]  742 	ld acc24+1,a
      0002E8 84               [ 1]  743 	pop a
      0002E9 95               [ 1]  744 	ld xh,a
      0002EA C6 00 AA         [ 1]  745 	ld a,acc24+2
      0002ED 97               [ 1]  746 	ld xl,a
      0002EE 7B 01            [ 1]  747 	ld a,(U8,sp) ; divisor
      0002F0 62               [ 2]  748 	div x,a  ; R:LL/U8
      0002F1 6B 01            [ 1]  749 	ld (U8,sp),a ; save remainder
      0002F3 9F               [ 1]  750 	ld a,xl
      0002F4 C7 00 AA         [ 1]  751 	ld acc24+2,a
      0002F7 84               [ 1]  752 	pop a
      0002F8 85               [ 2]  753 	popw x
      0002F9 81               [ 4]  754 	ret
                                    755 
                                    756 ;------------------------------------
                                    757 ;  two's complement acc24
                                    758 ;  input:
                                    759 ;		acc24 variable
                                    760 ;  output:
                                    761 ;		acc24 variable
                                    762 ;-------------------------------------
      0002FA                        763 neg_acc24:
      0002FA 72 53 00 AA      [ 1]  764 	cpl acc24+2
      0002FE 72 53 00 A9      [ 1]  765 	cpl acc24+1
      000302 72 53 00 A8      [ 1]  766 	cpl acc24
      000306 A6 01            [ 1]  767 	ld a,#1
      000308 CB 00 AA         [ 1]  768 	add a,acc24+2
      00030B C7 00 AA         [ 1]  769 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00030E 4F               [ 1]  770 	clr a
      00030F C9 00 A9         [ 1]  771 	adc a,acc24+1
      000312 C7 00 A9         [ 1]  772 	ld acc24+1,a 
      000315 4F               [ 1]  773 	clr a 
      000316 C9 00 A8         [ 1]  774 	adc a,acc24 
      000319 C7 00 A8         [ 1]  775 	ld acc24,a 
      00031C 81               [ 4]  776 	ret
                                    777 
                                    778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    779 ; incremente acc24 
                                    780 ; input:
                                    781 ;   X 		adresse de la variable 
                                    782 ;   A		incrÃ©ment
                                    783 ; output:
                                    784 ;	aucun 
                                    785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00031D                        786 inc_var24:
      00031D EB 02            [ 1]  787 	add a, (2,x)
      00031F E7 02            [ 1]  788 	ld (2,x),a
      000321 4F               [ 1]  789 	clr a
      000322 E9 01            [ 1]  790 	adc a,(1,x)
      000324 E7 01            [ 1]  791 	ld (1,x),a 
      000326 4F               [ 1]  792 	clr a 
      000327 F9               [ 1]  793 	adc a,(x)
      000328 F7               [ 1]  794 	ld (x),a
      000329 81               [ 4]  795 	ret 
                                    796 	
                                    797 
                                    798 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    799 ; copy 24 bits variable 
                                    800 ; input:
                                    801 ;	X 		address var source
                                    802 ;   y		address var destination
                                    803 ; output:
                                    804 ;   dest = src
                                    805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        806 copy_var24:
      00032A E6 00            [ 1]  807 	ld a,(0,x)
      00032C 90 E7 00         [ 1]  808 	ld (0,y),a 
      00032F E6 01            [ 1]  809 	ld a,(1,x)
      000331 90 E7 01         [ 1]  810 	ld (1,y),a 
      000334 E6 02            [ 1]  811 	ld a,(2,x)
      000336 90 E7 02         [ 1]  812 	ld (2,y),a 
      000339 81               [ 4]  813 	ret
                                    814 
                                    815 ;------------------------------------
                                    816 ; convert integer to string
                                    817 ; input:
                                    818 ;   A	  	base
                                    819 ;	acc24	integer to convert
                                    820 ; output:
                                    821 ;   y  		pointer to string
                                    822 ;------------------------------------
                           000001   823 	SIGN=1  ; local variable 
                           000002   824 	BASE=2  ; local variable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000002   825 	LOCAL_SIZE=2  ;locals size
      00033A                        826 itoa:
      00033A 89               [ 2]  827 	pushw x
      00033B 52 02            [ 2]  828 	sub sp,#LOCAL_SIZE
      00033D 6B 02            [ 1]  829 	ld (BASE,sp), a  ; base
      00033F 0F 01            [ 1]  830 	clr (SIGN,sp)    ; sign
      000341 A1 0A            [ 1]  831 	cp a,#10
      000343 26 0A            [ 1]  832 	jrne 1$
                                    833 	; base 10 string display with negative sign if bit 7==1
      000345 72 0F 00 A8 05   [ 2]  834 	btjf acc24,#7,1$
      00034A 03 01            [ 1]  835 	cpl (SIGN,sp)
      00034C CD 02 FA         [ 4]  836 	call neg_acc24
      00034F                        837 1$:
                                    838 ; initialize string pointer 
      00034F 90 AE 00 A7      [ 2]  839 	ldw y,#pad+PAD_SIZE-1
      000353 90 7F            [ 1]  840 	clr (y)
      000355 90 5A            [ 2]  841 	decw y
      000357 A6 20            [ 1]  842 	ld a,#SPACE
      000359 90 F7            [ 1]  843 	ld (y),a
      00035B                        844 itoa_loop:
      00035B 7B 02            [ 1]  845     ld a,(BASE,sp)
      00035D CD 02 D2         [ 4]  846     call divu24_8 ; acc24/A 
      000360 AB 30            [ 1]  847     add a,#'0  ; remainder of division
      000362 A1 3A            [ 1]  848     cp a,#'9+1
      000364 2B 02            [ 1]  849     jrmi 2$
      000366 AB 07            [ 1]  850     add a,#7 
      000368 90 5A            [ 2]  851 2$: decw y
      00036A 90 F7            [ 1]  852     ld (y),a
                                    853 	; if acc24==0 conversion done
      00036C C6 00 A8         [ 1]  854 	ld a,acc24
      00036F CA 00 A9         [ 1]  855 	or a,acc24+1
      000372 CA 00 AA         [ 1]  856 	or a,acc24+2
      000375 26 E4            [ 1]  857     jrne itoa_loop
                                    858 	;conversion done, next add '$' or '-' as required
      000377 7B 02            [ 1]  859 	ld a,(BASE,sp)
      000379 A1 10            [ 1]  860 	cp a,#16
      00037B 26 1B            [ 1]  861 	jrne 9$
      00037D CD 04 4F         [ 4]  862     call strlen
      000380 A1 03            [ 1]  863     cp a,#3
      000382 27 0C            [ 1]  864     jreq 8$
      000384 25 04            [ 1]  865     jrult 7$
      000386 A1 05            [ 1]  866 	cp a,#5
      000388 27 06            [ 1]  867 	jreq 8$
      00038A 90 5A            [ 2]  868 7$: decw y
      00038C A6 30            [ 1]  869     ld a,#'0
      00038E 90 F7            [ 1]  870     ld (y),a
      000390 90 5A            [ 2]  871 8$:	decw y
      000392 A6 24            [ 1]  872 	ld a,#'$
      000394 90 F7            [ 1]  873 	ld (y),a
      000396 20 0A            [ 2]  874 	jra 10$
      000398 7B 01            [ 1]  875 9$: ld a,(SIGN,sp)
      00039A 27 06            [ 1]  876     jreq 10$
      00039C 90 5A            [ 2]  877     decw y
      00039E A6 2D            [ 1]  878     ld a,#'-
      0003A0 90 F7            [ 1]  879     ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0003A2                        880 10$:
      0003A2 5B 02            [ 2]  881 	addw sp,#LOCAL_SIZE
      0003A4 85               [ 2]  882 	popw x
      0003A5 81               [ 4]  883 	ret
                                    884 
                                    885 ;------------------------------------
                                    886 ; check if character in {'0'..'9'}
                                    887 ; input:
                                    888 ;    A  character to test
                                    889 ; output:
                                    890 ;    A  0|1
                                    891 ;------------------------------------
      0003A6                        892 is_digit:
      0003A6 A1 30            [ 1]  893 	cp a,#'0
      0003A8 2A 02            [ 1]  894 	jrpl 1$
      0003AA 4F               [ 1]  895 0$:	clr a
      0003AB 81               [ 4]  896 	ret
      0003AC A1 39            [ 1]  897 1$: cp a,#'9
      0003AE 22 FA            [ 1]  898     jrugt 0$
      0003B0 A6 01            [ 1]  899     ld a,#1
      0003B2 81               [ 4]  900     ret
                                    901 	
                                    902 ;------------------------------------
                                    903 ; check if character in {'0'..'9','A'..'F'}
                                    904 ; input:
                                    905 ;   a  character to test
                                    906 ; output:
                                    907 ;   a   0|1 
                                    908 ;------------------------------------
      0003B3                        909 is_hex:
      0003B3 88               [ 1]  910 	push a
      0003B4 CD 03 A6         [ 4]  911 	call is_digit
      0003B7 A1 01            [ 1]  912 	cp a,#1
      0003B9 26 03            [ 1]  913 	jrne 1$
      0003BB 5B 01            [ 2]  914 	addw sp,#1
      0003BD 81               [ 4]  915 	ret
      0003BE 84               [ 1]  916 1$:	pop a
      0003BF A1 61            [ 1]  917 	cp a,#'a
      0003C1 2B 02            [ 1]  918 	jrmi 2$
      0003C3 A0 20            [ 1]  919 	sub a,#32
      0003C5 A1 41            [ 1]  920 2$: cp a,#'A
      0003C7 2A 02            [ 1]  921     jrpl 3$
      0003C9 4F               [ 1]  922 0$: clr a
      0003CA 81               [ 4]  923     ret
      0003CB A1 46            [ 1]  924 3$: cp a,#'F
      0003CD 22 FA            [ 1]  925     jrugt 0$
      0003CF A6 01            [ 1]  926     ld a,#1
      0003D1 81               [ 4]  927     ret
                                    928             	
                                    929 ;------------------------------------
                                    930 ; convert alpha to uppercase
                                    931 ; input:
                                    932 ;    a  character to convert
                                    933 ; output:
                                    934 ;    a  uppercase character
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                    935 ;------------------------------------
      0003D2                        936 a_upper:
      0003D2 A1 61            [ 1]  937 	cp a,#'a
      0003D4 2A 01            [ 1]  938 	jrpl 1$
      0003D6 81               [ 4]  939 0$:	ret
      0003D7 A1 7A            [ 1]  940 1$: cp a,#'z	
      0003D9 22 FB            [ 1]  941 	jrugt 0$
      0003DB A0 20            [ 1]  942 	sub a,#32
      0003DD 81               [ 4]  943 	ret
                                    944 	
                                    945 ;------------------------------------
                                    946 ; convert pad content in integer
                                    947 ; input:
                                    948 ;    pad		.asciz to convert
                                    949 ; output:
                                    950 ;    acc24      int24_t
                                    951 ;------------------------------------
                                    952 	; local variables
                           000001   953 	SIGN=1 ; 1 byte, 
                           000002   954 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   955 	TEMP=3 ; 1 byte, temporary storage
                           000003   956 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      0003DE                        957 atoi:
      0003DE 89               [ 2]  958 	pushw x ;save x
      0003DF 52 03            [ 2]  959 	sub sp,#LOCAL_SIZE
                                    960 	; acc24=0 
      0003E1 72 5F 00 A8      [ 1]  961 	clr acc24    
      0003E5 72 5F 00 A9      [ 1]  962 	clr acc24+1
      0003E9 72 5F 00 AA      [ 1]  963 	clr acc24+2
      0003ED C6 00 58         [ 1]  964 	ld a, pad 
      0003F0 27 59            [ 1]  965 	jreq atoi_exit
      0003F2 0F 01            [ 1]  966 	clr (SIGN,sp)
      0003F4 A6 0A            [ 1]  967 	ld a,#10
      0003F6 6B 02            [ 1]  968 	ld (BASE,sp),a ; default base decimal
      0003F8 AE 00 58         [ 2]  969 	ldw x,#pad ; pointer to string to convert
      0003FB F6               [ 1]  970 	ld a,(x)
      0003FC 27 47            [ 1]  971 	jreq 9$  ; completed if 0
      0003FE A1 2D            [ 1]  972 	cp a,#'-
      000400 26 04            [ 1]  973 	jrne 1$
      000402 03 01            [ 1]  974 	cpl (SIGN,sp)
      000404 20 08            [ 2]  975 	jra 2$
      000406 A1 24            [ 1]  976 1$: cp a,#'$
      000408 26 06            [ 1]  977 	jrne 3$
      00040A A6 10            [ 1]  978 	ld a,#16
      00040C 6B 02            [ 1]  979 	ld (BASE,sp),a
      00040E 5C               [ 1]  980 2$:	incw x
      00040F F6               [ 1]  981 	ld a,(x)
      000410                        982 3$:	
      000410 A1 61            [ 1]  983 	cp a,#'a
      000412 2B 02            [ 1]  984 	jrmi 4$
      000414 A0 20            [ 1]  985 	sub a,#32
      000416 A1 30            [ 1]  986 4$:	cp a,#'0
      000418 2B 2B            [ 1]  987 	jrmi 9$
      00041A A0 30            [ 1]  988 	sub a,#'0
      00041C A1 0A            [ 1]  989 	cp a,#10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      00041E 2B 06            [ 1]  990 	jrmi 5$
      000420 A0 07            [ 1]  991 	sub a,#7
      000422 11 02            [ 1]  992 	cp a,(BASE,sp)
      000424 2A 1F            [ 1]  993 	jrpl 9$
      000426 6B 03            [ 1]  994 5$:	ld (TEMP,sp),a
      000428 7B 02            [ 1]  995 	ld a,(BASE,sp)
      00042A CD 02 98         [ 4]  996 	call mulu24_8
      00042D 7B 03            [ 1]  997 	ld a,(TEMP,sp)
      00042F CB 00 AA         [ 1]  998 	add a,acc24+2
      000432 C7 00 AA         [ 1]  999 	ld acc24+2,a
      000435 4F               [ 1] 1000 	clr a
      000436 C9 00 A9         [ 1] 1001 	adc a,acc24+1
      000439 C7 00 A9         [ 1] 1002 	ld acc24+1,a
      00043C 4F               [ 1] 1003 	clr a
      00043D C9 00 A8         [ 1] 1004 	adc a,acc24
      000440 C7 00 A8         [ 1] 1005 	ld acc24,a
      000443 20 C9            [ 2] 1006 	jra 2$
      000445 0D 01            [ 1] 1007 9$:	tnz (SIGN,sp)
      000447 27 02            [ 1] 1008     jreq atoi_exit
      000449 90 50            [ 2] 1009     negw y
      00044B                       1010 atoi_exit: 
      00044B 5B 03            [ 2] 1011 	addw sp,#LOCAL_SIZE
      00044D 85               [ 2] 1012 	popw x ; restore x
      00044E 81               [ 4] 1013 	ret
                                   1014 
                                   1015 ;------------------------------------
                                   1016 ;strlen  return .asciz string length
                                   1017 ; input:
                                   1018 ;	y  	pointer to string
                                   1019 ; output:
                                   1020 ;	a   length  < 256
                                   1021 ;------------------------------------
      00044F                       1022 strlen:
                           000001  1023 	LEN=1
      00044F 90 89            [ 2] 1024     pushw y
      000451 4B 00            [ 1] 1025     push #0
      000453 90 F6            [ 1] 1026 0$: ld a,(y)
      000455 27 06            [ 1] 1027     jreq 1$
      000457 0C 01            [ 1] 1028     inc (LEN,sp)
      000459 90 5C            [ 1] 1029     incw y
      00045B 20 F6            [ 2] 1030     jra 0$
      00045D 84               [ 1] 1031 1$: pop a
      00045E 90 85            [ 2] 1032     popw y
      000460 81               [ 4] 1033     ret
                                   1034 
                                   1035 
                                   1036 
                                   1037 ;------------------------------------
                                   1038 ; peek addr, print byte at this address 
                                   1039 ; input:
                                   1040 ;	 farptr   address to peek
                                   1041 ;    X		  farptr index 	
                                   1042 ;    A   	  numeric base for convertion
                                   1043 ; output:
                                   1044 ;    print byte value at this address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   1045 ;------------------------------------
      000461                       1046 peek:
      000461 90 89            [ 2] 1047 	pushw y
      000463 88               [ 1] 1048     push a   ; base numÃ©rique pour la conversion
                                   1049 	; A=farptr[x]
      000464 92 AF 00 AB      [ 5] 1050 	ldf a,([farptr],x)
      000468 C7 00 AA         [ 1] 1051     ld acc24+2,a
      00046B 72 5F 00 A8      [ 1] 1052     clr acc24 
      00046F 72 5F 00 A9      [ 1] 1053 	clr acc24+1 
      000473 84               [ 1] 1054 	pop a ; base numÃ©rique pour la conversion 
      000474 CD 03 3A         [ 4] 1055     call itoa  ; conversion entier en  .asciz
      000477 CD 01 2E         [ 4] 1056     call uart_print
      00047A 90 85            [ 2] 1057     popw y
      00047C 81               [ 4] 1058     ret	
                                   1059 	
                                   1060 ;------------------------------------
                                   1061 ; expect a number from command line next argument
                                   1062 ;  input:
                                   1063 ;	  none
                                   1064 ;  output:
                                   1065 ;    acc24   int24_t 
                                   1066 ;------------------------------------
      00047D                       1067 number:
      00047D CD 02 43         [ 4] 1068 	call next_word
      000480 CD 03 DE         [ 4] 1069 	call atoi
      000483 81               [ 4] 1070 	ret
                                   1071 
                                   1072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1073 ; write a byte in memory
                                   1074 ; input:
                                   1075 ;    a  		byte to write
                                   1076 ;    farptr  	address
                                   1077 ;    x          farptr[x]
                                   1078 ; output:
                                   1079 ;    none
                                   1080 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1081 	; variables locales
                           000001  1082 	BTW = 1   ; byte to write offset on stack
                           000002  1083 	OPT = 2   ; OPTION flag offset on stack
                           000002  1084 	LOCAL_SIZE = 2
      000484                       1085 write_byte:
      000484 90 89            [ 2] 1086 	pushw y
      000486 52 02            [ 2] 1087 	sub sp,#LOCAL_SIZE  ; rÃ©servation d'espace pour variables locales  
      000488 6B 01            [ 1] 1088 	ld (BTW,sp),a ; byte to write 
      00048A 0F 02            [ 1] 1089 	clr (OPT,sp)  ; OPTION flag
                                   1090 	; put addr[15:0] in Y, for bounds check.
      00048C C6 00 AC         [ 1] 1091 	ld a, farptr+1
      00048F 90 95            [ 1] 1092 	ld yh,a
      000491 C6 00 AD         [ 1] 1093 	ld a, farptr+2
      000494 90 97            [ 1] 1094 	ld yl,a  ; Y=addr15:0
                                   1095 	; check addr[23:16], if <> 0 then it is extened flash memory
      000496 72 5D 00 AB      [ 1] 1096 	tnz farptr 
      00049A 26 26            [ 1] 1097 	jrne write_flash
      00049C 90 C3 00 B0      [ 2] 1098     cpw y,flash_free_base
      0004A0 24 20            [ 1] 1099     jruge write_flash
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0004A2 90 A3 50 00      [ 2] 1100     cpw y,#SFR_BASE
      0004A6 24 12            [ 1] 1101 	jruge write_ram
      0004A8 90 A3 40 00      [ 2] 1102 	cpw y,#EEPROM_BASE  
      0004AC 24 34            [ 1] 1103     jruge write_eeprom
      0004AE 90 C3 00 AE      [ 2] 1104 	cpw y,ram_free_base
      0004B2 25 6C            [ 1] 1105     jrult write_exit
      0004B4 90 A3 17 00      [ 2] 1106     cpw y,#STACK_BASE
      0004B8 24 66            [ 1] 1107     jruge write_exit
                                   1108 
                                   1109 ;write RAM and SFR 
      0004BA                       1110 write_ram:
      0004BA 7B 01            [ 1] 1111 	ld a,(BTW,sp)
      0004BC 92 A7 00 AB      [ 4] 1112 	ldf ([farptr],x),a
      0004C0 20 5E            [ 2] 1113 	jra write_exit
                                   1114 
                                   1115 ; write program memory
      0004C2                       1116 write_flash:
      0004C2 35 56 50 62      [ 1] 1117 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0004C6 35 AE 50 62      [ 1] 1118 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0004CA 72 03 50 5F FB   [ 2] 1119 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0004CF                       1120 1$:	_int_disable
      0004CF 9B               [ 1]    1 		sim
      0004D0 7B 01            [ 1] 1121 	ld a,(BTW,sp)
      0004D2 92 A7 00 AB      [ 4] 1122 	ldf ([farptr],x),a ; farptr[x]=A
      0004D6 72 05 50 5F FB   [ 2] 1123 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0004DB                       1124     _int_enable
      0004DB 9A               [ 1]    1 		 rim
      0004DC 72 13 50 5F      [ 1] 1125     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004E0 20 3E            [ 2] 1126     jra write_exit
                                   1127 
                                   1128 ; write eeprom and option
      0004E2                       1129 write_eeprom:
                                   1130 	; check for data eeprom or option eeprom
      0004E2 90 A3 48 00      [ 2] 1131 	cpw y,#OPTION_BASE
      0004E6 2B 08            [ 1] 1132 	jrmi 1$
      0004E8 90 A3 48 80      [ 2] 1133 	cpw y,#OPTION_END+1
      0004EC 2A 02            [ 1] 1134 	jrpl 1$
      0004EE 03 02            [ 1] 1135 	cpl (OPT,sp)
      0004F0 35 AE 50 64      [ 1] 1136 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0004F4 35 56 50 64      [ 1] 1137     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0004F8 0D 02            [ 1] 1138     tnz (OPT,sp)
      0004FA 27 08            [ 1] 1139     jreq 2$
                                   1140 	; pour modifier une option il faut modifier ces 2 bits
      0004FC 72 1E 50 5B      [ 1] 1141     bset FLASH_CR2,#FLASH_CR2_OPT
      000500 72 1F 50 5C      [ 1] 1142     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000504 72 07 50 5F FB   [ 2] 1143 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000509 7B 01            [ 1] 1144     ld a,(BTW,sp)
      00050B 92 A7 00 AB      [ 4] 1145     ldf ([farptr],x),a
      00050F 0D 02            [ 1] 1146     tnz (OPT,sp)
      000511 27 08            [ 1] 1147     jreq 3$
      000513 5C               [ 1] 1148     incw x
      000514 7B 01            [ 1] 1149     ld a,(BTW,sp)
      000516 43               [ 1] 1150     cpl a
      000517 92 A7 00 AB      [ 4] 1151     ldf ([farptr],x),a
      00051B 72 05 50 5F FB   [ 2] 1152 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000520                       1153 write_exit:
                                   1154 ; ne pas oublier de rÃ©ajuster sp 
                                   1155 ; et de restaurer les register empilÃ©s.
      000520 5B 02            [ 2] 1156 	addw sp,#LOCAL_SIZE 
      000522 90 85            [ 2] 1157 	popw y
      000524 81               [ 4] 1158     ret
                                   1159         
                                   1160 		  
                                   1161 ;------------------------------------
                                   1162 ; evaluate command string in tib
                                   1163 ; list of commands
                                   1164 ;   @  addr display content at address
                                   1165 ;   !  addr byte [byte ]* store bytes at address
                                   1166 ;   ?  diplay command help
                                   1167 ;   b  n    convert n in the other base
                                   1168 ;	c  addr bitmask  clear  bits at address
                                   1169 ;   h  addr hex dump memory starting at address
                                   1170 ;   m  src dest count,  move memory block
                                   1171 ;   r  reset MCU
                                   1172 ;   s  addr bitmask  set a bits at address
                                   1173 ;   t  addr bitmask  toggle bits at address
                                   1174 ;   x  addr execute  code at address  
                                   1175 ;------------------------------------
      000525                       1176 eval:
      000525 C6 00 02         [ 1] 1177 	ld a, in
      000528 C1 00 03         [ 1] 1178 	cp a, count
      00052B 26 01            [ 1] 1179 	jrne 0$
      00052D 81               [ 4] 1180 	ret ; nothing to evaluate
      00052E CD 02 43         [ 4] 1181 0$:	call next_word
      000531 90 AE 00 58      [ 2] 1182 	ldw y,#pad
      000535 90 F6            [ 1] 1183     ld a,(y)	
      000537 A1 40            [ 1] 1184 	cp a,#'@
      000539 26 03            [ 1] 1185 	jrne 1$
      00053B CC 05 8F         [ 2] 1186 	jp fetch
      00053E A1 21            [ 1] 1187 1$:	cp a,#'!
      000540 26 03            [ 1] 1188 	jrne 10$
      000542 CC 05 C5         [ 2] 1189 	jp store
      000545                       1190 10$:
      000545 A1 3F            [ 1] 1191 	cp a,#'?
      000547 26 03            [ 1] 1192 	jrne 15$
      000549 CC 05 F0         [ 2] 1193 	jp help
      00054C                       1194 15$: 
      00054C A1 62            [ 1] 1195 	cp a,#'b
      00054E 26 03            [ 1] 1196     jrne 2$
      000550 CC 05 F8         [ 2] 1197     jp base_convert	
      000553 A1 63            [ 1] 1198 2$:	cp a,#'c
      000555 26 03            [ 1] 1199 	jrne 3$
      000557 CC 06 0F         [ 2] 1200 	jp clear_bits
      00055A A1 68            [ 1] 1201 3$:	cp a,#'h
      00055C 26 03            [ 1] 1202 	jrne 4$
      00055E CC 06 3F         [ 2] 1203 	jp hexdump
      000561 A1 6D            [ 1] 1204 4$:	cp a,#'m
      000563 26 03            [ 1] 1205 	jrne 5$
      000565 CC 06 C2         [ 2] 1206 	jp move_memory
      000568 A1 72            [ 1] 1207 5$: cp a,#'r
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00056A 26 03            [ 1] 1208     jrne 6$
      00056C CD 01 08         [ 4] 1209 	call NonHandledInterrupt	
      00056F A1 73            [ 1] 1210 6$:	cp a,#'s
      000571 26 03            [ 1] 1211 	jrne 7$
      000573 CC 07 2B         [ 2] 1212 	jp set_bits
      000576 A1 74            [ 1] 1213 7$:	cp a,#'t
      000578 26 03            [ 1] 1214 	jrne 8$
      00057A CC 07 57         [ 2] 1215 	jp toggle_bits
      00057D A1 78            [ 1] 1216 8$:	cp a,#'x
      00057F 26 03            [ 1] 1217 	jrne 9$
      000581 CC 07 83         [ 2] 1218 	jp execute
      000584 CD 01 2E         [ 4] 1219 9$:	call uart_print
      000587 90 AE 08 6E      [ 2] 1220 	ldw y,#BAD_CMD
      00058B CD 01 2E         [ 4] 1221 	call uart_print
      00058E 81               [ 4] 1222 	ret
                                   1223 	
                                   1224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1225 ;;      MONA commands 
                                   1226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1227 
                                   1228 ;------------------------------------
                                   1229 ; @ addr, fetch a byte and display it.
                                   1230 ;------------------------------------
      00058F                       1231 fetch:
      00058F 89               [ 2] 1232 	pushw x
      000590 90 89            [ 2] 1233 	pushw y
      000592 CD 04 7D         [ 4] 1234 	call number
      000595 C6 00 58         [ 1] 1235 	ld a,pad
      000598 27 27            [ 1] 1236 	jreq fetch_exit ; pas d'adresse 
      00059A AE 00 A8         [ 2] 1237 	ldw x,#acc24
      00059D 90 AE 00 AB      [ 2] 1238 	ldw y,#farptr
      0005A1 CD 03 2A         [ 4] 1239 	call copy_var24
      0005A4 90 AE 00 58      [ 2] 1240 	ldw y,#pad
      0005A8 CD 01 2E         [ 4] 1241 	call uart_print
      0005AB A6 3D            [ 1] 1242 	ld a,#'=
      0005AD CD 01 24         [ 4] 1243 	call uart_tx	
      0005B0 C6 00 58         [ 1] 1244 	ld a,pad
      0005B3 A1 24            [ 1] 1245 	cp a,#'$
      0005B5 27 04            [ 1] 1246 	jreq 1$
      0005B7 A6 0A            [ 1] 1247 	ld a,#10
      0005B9 20 02            [ 2] 1248 	jra 2$
      0005BB A6 10            [ 1] 1249 1$: ld a,#16	
      0005BD 5F               [ 1] 1250 2$:	clrw x  ; pour farptr[0]
      0005BE CD 04 61         [ 4] 1251 	call peek
      0005C1                       1252 fetch_exit:	
      0005C1 90 85            [ 2] 1253 	popw y
      0005C3 85               [ 2] 1254 	popw x 
      0005C4 81               [ 4] 1255 	ret
                                   1256 	
                                   1257 ;------------------------------------
                                   1258 ; ! addr byte [byte ]*, store byte(s)
                                   1259 ;------------------------------------
      0005C5                       1260 store:
      0005C5 89               [ 2] 1261 	pushw x 
      0005C6 90 89            [ 2] 1262 	pushw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0005C8 CD 04 7D         [ 4] 1263 	call number
      0005CB C6 00 58         [ 1] 1264 	ld a,pad 
      0005CE 27 1C            [ 1] 1265 	jreq store_exit ; pas d'argument adresse 
      0005D0 AE 00 A8         [ 2] 1266 	ldw x,#acc24
      0005D3 90 AE 00 AB      [ 2] 1267 	ldw y,#farptr
      0005D7 CD 03 2A         [ 4] 1268 	call copy_var24  ; farptr=acc24 
      0005DA 5F               [ 1] 1269 	clrw x ; index pour farptr[x]
      0005DB CD 04 7D         [ 4] 1270 1$: call number
      0005DE C6 00 58         [ 1] 1271 	ld a, pad
      0005E1 27 09            [ 1] 1272 	jreq store_exit ; pas d'octet Ã  Ã©crire.	
      0005E3 C6 00 AA         [ 1] 1273 	ld a,acc24+2 ; octet Ã  Ã©crire.
      0005E6 CD 04 84         [ 4] 1274 	call write_byte
      0005E9 5C               [ 1] 1275 	incw x ; x++
      0005EA 20 EF            [ 2] 1276 	jra 1$
      0005EC                       1277 store_exit:	
      0005EC 90 85            [ 2] 1278 	popw y
      0005EE 85               [ 2] 1279 	popw x
      0005EF 81               [ 4] 1280 	ret
                                   1281 
                                   1282 ;------------------------------------
                                   1283 ; ? , display command information
                                   1284 ;------------------------------------
      0005F0                       1285 help:
      0005F0 90 AE 08 81      [ 2] 1286 	ldw y, #HELP
      0005F4 CD 01 2E         [ 4] 1287 	call uart_print
      0005F7 81               [ 4] 1288 	ret
                                   1289 	; convert from one numeric base to the other
                                   1290 	;  b n|$n
      0005F8                       1291 base_convert:
      0005F8 CD 04 7D         [ 4] 1292     call number
      0005FB C6 00 58         [ 1] 1293     ld a,pad
      0005FE A1 24            [ 1] 1294     cp a,#'$
      000600 26 04            [ 1] 1295     jrne 1$
      000602 A6 0A            [ 1] 1296     ld a,#10
      000604 20 02            [ 2] 1297     jra 2$
      000606 A6 10            [ 1] 1298 1$: ld a,#16
      000608 CD 03 3A         [ 4] 1299 2$: call itoa
      00060B CD 01 2E         [ 4] 1300     call uart_print
      00060E 81               [ 4] 1301     ret
                                   1302         	
                                   1303 ;------------------------------------
                                   1304 ; c addr mask, clear bitmask 
                                   1305 ;------------------------------------
      00060F                       1306 clear_bits:
      00060F 89               [ 2] 1307 	pushw x 
      000610 90 89            [ 2] 1308 	pushw y 
      000612 CD 04 7D         [ 4] 1309 	call number
      000615 C6 00 58         [ 1] 1310 	ld a, pad 
      000618 27 21            [ 1] 1311 	jreq 9$ ; pas d'adresse 
      00061A AE 00 A8         [ 2] 1312 	ldw x, #acc24 
      00061D 90 AE 00 AB      [ 2] 1313 	ldw y, #farptr 
      000621 CD 03 2A         [ 4] 1314 	call copy_var24 
      000624 CD 04 7D         [ 4] 1315 	call number
      000627 C6 00 58         [ 1] 1316 	ld a, pad 
      00062A 27 0F            [ 1] 1317 	jreq 9$ ; pas de masque 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00062C 72 53 00 AA      [ 1] 1318 	cpl acc24+2 ; inverse masque de bits 
      000630 92 BC 00 AB      [ 5] 1319 	ldf a,[farptr]
      000634 C4 00 AA         [ 1] 1320 	and a,acc24+2
      000637 5F               [ 1] 1321 	clrw x 
      000638 CD 04 84         [ 4] 1322 	call write_byte 
      00063B 90 85            [ 2] 1323 9$:	popw y 
      00063D 85               [ 2] 1324 	popw x
      00063E 81               [ 4] 1325     ret
                                   1326     
                                   1327 ;------------------------------------
                                   1328 ; h addr, memory dump in hexadecimal 
                                   1329 ; stop after each row, SPACE continue, other stop
                                   1330 ;------------------------------------
                           000008  1331 	ROW_CNT = 8 ; nombre d'octets par ligne 
                           000001  1332 	IDX=1 ; index pour farptr[x]
                           000002  1333 	LOCAL_SIZE=2
      00063F                       1334 hexdump: 
      00063F 52 02            [ 2] 1335 	sub sp,#LOCAL_SIZE
      000641 CD 02 43         [ 4] 1336 	call next_word
      000644 C6 00 58         [ 1] 1337 	ld a, pad 
      000647 27 76            [ 1] 1338 	jreq hdump_exit ; adresse manquante
      000649 A6 10            [ 1] 1339 	ld a,#16
      00064B CD 03 DE         [ 4] 1340 	call atoi ; acc24=addr 
                                   1341 	; farptr = addr 
      00064E AE 00 A8         [ 2] 1342 	ldw x,#acc24
      000651 90 AE 00 AB      [ 2] 1343 	ldw y,#farptr
      000655 CD 03 2A         [ 4] 1344 	call copy_var24
      000658                       1345 row_init:
      000658 5F               [ 1] 1346 	clrw x 
      000659 1F 01            [ 2] 1347 	ldw (IDX,sp),x
                                   1348 	; affiche l'adresse en dÃ©but de ligne 
      00065B AE 00 AB         [ 2] 1349 	ldw x,#farptr
      00065E 90 AE 00 A8      [ 2] 1350 	ldw y,#acc24
      000662 CD 03 2A         [ 4] 1351 	call copy_var24
      000665 A6 10            [ 1] 1352 	ld a,#16
      000667 CD 03 3A         [ 4] 1353 	call itoa
      00066A CD 01 2E         [ 4] 1354 	call uart_print
      00066D A6 20            [ 1] 1355 	ld a,#SPACE
      00066F CD 01 24         [ 4] 1356 	call uart_tx
      000672 90 AE 00 58      [ 2] 1357 	ldw y, #pad
      000676 1E 01            [ 2] 1358 	ldw x,(IDX,sp)
      000678                       1359 row:
      000678 A6 10            [ 1] 1360 	ld a,#16
      00067A CD 04 61         [ 4] 1361 	call peek
      00067D 92 AF 00 AB      [ 5] 1362 	ldf a,([farptr],x)
      000681 A1 20            [ 1] 1363 	cp a,#SPACE
      000683 2A 02            [ 1] 1364 	jrpl 1$
      000685 A6 20            [ 1] 1365 	ld a,#SPACE
      000687 A1 80            [ 1] 1366 1$:	cp a,#128
      000689 2B 02            [ 1] 1367     jrmi 2$
      00068B A6 20            [ 1] 1368     ld a,#SPACE
      00068D 90 F7            [ 1] 1369 2$: ld (y),a
      00068F 90 5C            [ 1] 1370 	incw y 
      000691 5C               [ 1] 1371 	incw x
      000692 A3 00 08         [ 2] 1372 	cpw x,#ROW_CNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000695 26 E1            [ 1] 1373 	jrne row
      000697 A6 08            [ 1] 1374 	ld a,#ROW_CNT 
      000699 AE 00 AB         [ 2] 1375 	ldw x,#farptr
      00069C CD 03 1D         [ 4] 1376 	call inc_var24
      00069F A6 20            [ 1] 1377 	ld a,#SPACE
      0006A1 CD 01 24         [ 4] 1378 	call uart_tx
      0006A4 4F               [ 1] 1379 	clr a
      0006A5 90 F7            [ 1] 1380 	ld (y),a
      0006A7 A6 20            [ 1] 1381 	ld a,#SPACE 
      0006A9 CD 01 24         [ 4] 1382 	call uart_tx  
      0006AC 90 AE 00 58      [ 2] 1383 	ldw y,#pad
      0006B0 CD 01 2E         [ 4] 1384 	call uart_print
      0006B3 A6 0A            [ 1] 1385 	ld a,#NL
      0006B5 CD 01 24         [ 4] 1386 	call uart_tx
      0006B8 CD 01 46         [ 4] 1387 	call uart_getchar
      0006BB A1 20            [ 1] 1388 	cp a,#SPACE
      0006BD 27 99            [ 1] 1389 	jreq row_init
      0006BF                       1390 hdump_exit:	
      0006BF 5B 02            [ 2] 1391     addw sp,#LOCAL_SIZE
      0006C1 81               [ 4] 1392     ret
                                   1393     
                                   1394 ;------------------------------------
                                   1395 ; m src dest count, move memory block
                                   1396 ;------------------------------------
                           000001  1397     COUNT=1
                           000003  1398     SOURCE=3
                           000005  1399 	LOCAL_SIZE=5    
      0006C2                       1400 move_memory:
      0006C2 52 05            [ 2] 1401 	sub sp,#LOCAL_SIZE
      0006C4 CD 04 7D         [ 4] 1402 	call number 
      0006C7 C6 00 58         [ 1] 1403 	ld a, pad 
      0006CA 27 5C            [ 1] 1404 	jreq move_exit ; pas d'arguments 
                                   1405 	; save source address on stack
      0006CC C6 00 AA         [ 1] 1406 	ld a, acc24+2
      0006CF 6B 05            [ 1] 1407 	ld (SOURCE+2,sp),a
      0006D1 C6 00 A9         [ 1] 1408 	ld a, acc24+1
      0006D4 6B 04            [ 1] 1409 	ld (SOURCE+1,sp),a
      0006D6 C6 00 A8         [ 1] 1410 	ld a,acc24
      0006D9 6B 03            [ 1] 1411 	ld (SOURCE,sp),a
      0006DB CD 04 7D         [ 4] 1412 	call number
      0006DE C6 00 58         [ 1] 1413 	ld a,pad
      0006E1 27 45            [ 1] 1414 	jreq move_exit ; dest count manquant 
                                   1415 	; copy dest address in farptr
      0006E3 55 00 AA 00 AD   [ 1] 1416 	mov farptr+2,acc24+2
      0006E8 55 00 A9 00 AC   [ 1] 1417 	mov farptr+1,acc24+1
      0006ED 55 00 A8 00 AB   [ 1] 1418 	mov farptr,acc24
      0006F2 CD 04 7D         [ 4] 1419     call number 
      0006F5 C6 00 58         [ 1] 1420 	ld a, pad 
      0006F8 27 2E            [ 1] 1421 	jreq move_exit ; count manquant 
      0006FA C6 00 A9         [ 1] 1422 	ld a, acc24+1 
      0006FD 90 95            [ 1] 1423 	ld yh, a
      0006FF C6 00 AA         [ 1] 1424 	ld a, acc24+2 
      000702 90 97            [ 1] 1425 	ld yl,a  ; Y = count
      000704 17 01            [ 2] 1426 	ldw (COUNT,sp),y
                                   1427 	; put back source in acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000706 7B 03            [ 1] 1428 	ld a,(SOURCE,sp)
      000708 C7 00 A8         [ 1] 1429 	ld acc24,a
      00070B 7B 04            [ 1] 1430 	ld a,(SOURCE+1,sp) 
      00070D C7 00 A9         [ 1] 1431 	ld acc24+1,a 
      000710 7B 05            [ 1] 1432 	ld a,(SOURCE+2,sp)
      000712 C7 00 AA         [ 1] 1433 	ld acc24+2,a
      000715 5F               [ 1] 1434 	clrw x
      000716                       1435 move_loop:
      000716 92 AF 00 A8      [ 5] 1436     ldf a,([acc24],x)
      00071A CD 04 84         [ 4] 1437 	call write_byte
      00071D 5C               [ 1] 1438     incw x
      00071E 16 01            [ 2] 1439 	ldw y, (COUNT,sp)
      000720 90 5A            [ 2] 1440 	decw y
      000722 27 04            [ 1] 1441 	jreq move_exit
      000724 17 01            [ 2] 1442     ldw (COUNT,sp),y
      000726 20 EE            [ 2] 1443     jra move_loop
      000728                       1444 move_exit:
      000728 5B 05            [ 2] 1445     addw sp,#LOCAL_SIZE
      00072A 81               [ 4] 1446     ret
                                   1447     
                                   1448 ;------------------------------------
                                   1449 ;  s addr mask, set bitmask 
                                   1450 ;------------------------------------
      00072B                       1451 set_bits:
      00072B 89               [ 2] 1452 	pushw x 
      00072C 90 89            [ 2] 1453 	pushw y 
      00072E CD 04 7D         [ 4] 1454 	call number 
      000731 C6 00 58         [ 1] 1455 	ld a, pad 
      000734 27 1D            [ 1] 1456 	jreq 9$ ; arguments manquant
      000736 AE 00 A8         [ 2] 1457 	ldw x, #acc24
      000739 90 AE 00 AB      [ 2] 1458 	ldw y, #farptr 
      00073D CD 03 2A         [ 4] 1459 	call copy_var24 
      000740 CD 04 7D         [ 4] 1460 	call number  
      000743 C6 00 58         [ 1] 1461 	ld a, pad 
      000746 27 0B            [ 1] 1462 	jreq 9$ ; mask manquant
      000748 92 BC 00 AB      [ 5] 1463 	ldf a,[farptr]
      00074C CA 00 AA         [ 1] 1464 	or a, acc24+2
      00074F 5F               [ 1] 1465 	clrw x 
      000750 CD 04 84         [ 4] 1466 	call write_byte 
      000753                       1467 9$:
      000753 90 85            [ 2] 1468 	popw y 
      000755 85               [ 2] 1469 	popw x 
      000756 81               [ 4] 1470     ret
                                   1471     
                                   1472 ;------------------------------------
                                   1473 ; t addr mask, toggle bitmask
                                   1474 ;------------------------------------
      000757                       1475 toggle_bits:
      000757 89               [ 2] 1476 	pushw x 
      000758 90 89            [ 2] 1477 	pushw y 
      00075A CD 04 7D         [ 4] 1478 	call number
      00075D C6 00 58         [ 1] 1479 	ld a, pad
      000760 27 1D            [ 1] 1480 	jreq 9$  ; pas d'adresse 
      000762 AE 00 A8         [ 2] 1481 	ldw x,#acc24 
      000765 90 AE 00 AB      [ 2] 1482 	ldw y,#farptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000769 CD 03 2A         [ 4] 1483 	call copy_var24
      00076C CD 04 7D         [ 4] 1484     call number
      00076F C6 00 58         [ 1] 1485 	ld a, pad 
      000772 27 0B            [ 1] 1486 	jreq 9$ ; pas de masque 
      000774 92 BC 00 AB      [ 5] 1487 	ldf a,[farptr]
      000778 C8 00 AA         [ 1] 1488     xor a,acc24+2
      00077B 5F               [ 1] 1489     clrw x 
      00077C CD 04 84         [ 4] 1490 	call write_byte 
      00077F                       1491 9$:
      00077F 90 85            [ 2] 1492 	popw y
      000781 85               [ 2] 1493  	popw x 
      000782 81               [ 4] 1494     ret
                                   1495     
                                   1496 ;------------------------------------
                                   1497 ; x addr, execute programme
                                   1498 ; addr < $10000 (<65536)
                                   1499 ;------------------------------------
      000783                       1500 execute:
      000783 CD 04 7D         [ 4] 1501 	call number
      000786 C6 00 58         [ 1] 1502 	ld a, pad 
      000789 27 17            [ 1] 1503 	jreq 9$ ; addr manquante 
      00078B 72 5D 00 A8      [ 1] 1504 	tnz acc24
      00078F 26 11            [ 1] 1505 	jrne 9$ ; adresse > 0xFFFF ; adresse invalide.
      000791 C6 00 A9         [ 1] 1506 	ld a, acc24+1
      000794 90 95            [ 1] 1507 	ld yh,a 
      000796 CA 00 AA         [ 1] 1508 	or a, acc24+2 
      000799 27 07            [ 1] 1509 	jreq 9$ ; pointeur NULL 
      00079B C6 00 AA         [ 1] 1510 	ld a,acc24+2 
      00079E 90 97            [ 1] 1511 	ld yl,a 
      0007A0 90 FC            [ 2] 1512 	jp (y)
      0007A2                       1513 9$:
      0007A2 81               [ 4] 1514     ret
                                   1515 
                                   1516 ;------------------------
                                   1517 ;  run time CONSTANTS
                                   1518 ;------------------------
                                   1519 ; messages strings
                                   1520 ;------------------------	
      0007A3 0A 4D 4F 4E 41 20 56  1521 VERSION:	.asciz "\nMONA VERSION "
             45 52 53 49 4F 4E 20
             00
      0007B2 0A 73 74 6D 38 73 32  1522 CPU_MODEL:  .asciz "\nstm8s208rb     memory map\n----------------------------\n"
             30 38 72 62 20 20 20
             20 20 6D 65 6D 6F 72
             79 20 6D 61 70 0A 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 0A
             00
      0007EB 72 61 6D 20 66 72 65  1523 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      0007F6 2D 20 24 31 36 46 46  1524 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      0007FF 66 72 65 65 20 66 6C  1525 FLASH_FREE_MSG: .asciz "free flash: "
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



             61 73 68 3A 20 00
      00080C 20 2D 20 24 32 37 46  1526 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      000816 65 65 70 72 6F 6D 3A  1527             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      00082C 6F 70 74 69 6F 6E 3A  1528             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      000842 53 46 52 3A 20 24 35  1529             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      000855 62 6F 6F 74 20 52 4F  1530             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
             46 46 0A 00
      00086E 20 69 73 20 6E 6F 74  1531 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      000881 63 6F 6D 6D 61 6E 64  1532 HELP: .ascii "commands:\n"
             73 3A 0A
      00088B 40 20 61 64 64 72 2C  1533 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      0008AE 21 20 61 64 64 72 20  1534 	  .ascii "! addr byte [byte ]*, store bytes at addr++\n"
             62 79 74 65 20 5B 62
             79 74 65 20 5D 2A 2C
             20 73 74 6F 72 65 20
             62 79 74 65 73 20 61
             74 20 61 64 64 72 2B
             2B 0A
      0008DA 3F 2C 20 64 69 70 6C  1535 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      0008F1 62 20 6E 7C 24 6E 2C  1536 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      000915 63 20 61 64 64 72 20  1537 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
             74 20 61 64 64 72 65
             73 73 0A
      00093B 68 20 61 64 64 72 2C  1538 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      000967 6D 20 73 72 63 20 64  1539 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      00098B 72 20 72 65 73 65 74  1540 	  .ascii "r reset MCU\n"
             20 4D 43 55 0A
      000997 73 20 61 64 64 72 20  1541 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
      0009BB 74 20 61 64 64 72 20  1542 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      0009E2 78 20 61 64 64 72 2C  1543 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
                                   1544 
                                   1545 ; following flash memory is not used by MONA
      000A04                       1546 flash_free:
                                   1547 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   8 BAD_CMD    00086E R
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BSP     =  000008     |     BTN1_BIT=  000004     |     BTN1_MAS=  000010 
    BTN1_POR=  005015     |     BTW     =  000001     |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CFG_GCR =  007F60     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |   8 CPU_MODE   0007B2 R   |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]

Symbol Table

    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |   8 EEPROM_M   00080C R   |     EEPROM_S=  000800 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |   8 FLASH_FR   0007FF R
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  8 HELP       000881 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |     IDX     =  000001 
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000001     |     LOCAL_SI=  000005 
    N       =  000001     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   8 NonHandl   000108 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000050     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]

Symbol Table

    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   8 RAM_FREE   0007EB R   |   8 RAM_LAST   0007F6 R
    RAM_SIZE=  001800     |     ROP     =  004800     |     ROW_CNT =  000008 
    RST_SR  =  0050B3     |     RXCHAR  =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SIGN    =  000001     |     SOURCE  =  000003 
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    STACK_BA=  001700     |     STACK_SI=  000100     |     STACK_TO=  0017FF 
    SWIM_CSR=  007F80     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    U8      =  000001     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PS=  00523A     |     UART1_SR=  005230 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_SR=  005240 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DAT=  000001 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UART_STA=  000002 
    UBC     =  004801     |   8 VERSION    0007A3 R   |     VERS_MAJ=  000000 
    VERS_MIN=  000002     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XSAVE   =  000002 
  7 __interr   000000 R   |   6 __stack_   001700 R   |   4 _user_ra   000000 R
  8 a_upper    0003D2 R   |   3 acc24      0000A8 R   |   8 accept_c   0001C7 R
  8 atoi       0003DE R   |   8 atoi_exi   00044B R   |   8 base_con   0005F8 R
  8 cancel     000200 R   |   8 clear_al   000028 R   |   8 clear_bi   00060F R
  8 clock_in   000000 R   |   8 copy_var   00032A R   |   3 count      000003 R
  8 del_back   0001B6 R   |   8 del_line   0001A5 R   |   8 del_loop   00015B R
  8 divu24_8   0002D2 R   |   8 eval       000525 R   |   8 execute    000783 R
  3 farptr     0000AB R   |   8 fetch      00058F R   |   8 fetch_ex   0005C1 R
  8 flash_fr   000A04 R   |   3 flash_fr   0000B0 R   |   8 hdump_ex   0006BF R
  8 help       0005F0 R   |   8 hexdump    00063F R   |   3 idx_x      000004 R
  3 idx_y      000006 R   |   3 in         000002 R   |   3 in.w       000001 R
  8 inc_var2   00031D R   |   8 init0      00009E R   |   8 is_digit   0003A6 R
  8 is_hex     0003B3 R   |   8 itoa       00033A R   |   8 itoa_loo   00035B R
  8 main       0000E8 R   |   8 move_exi   000728 R   |   8 move_loo   000716 R
  8 move_mem   0006C2 R   |   8 mulu24_8   000298 R   |   8 neg_acc2   0002FA R
  8 next_wor   000243 R   |   8 number     00047D R   |   3 pad        000058 R
  8 peek       000461 R   |   8 print_mo   000033 R   |   3 ram_free   0000AE R
  8 readln     000174 R   |   8 readln_l   00017C R   |   8 readln_q   00020A R
  8 readln_q   00020F R   |   8 repl       0000EC R   |   8 reprint    0001DC R
  8 row        000678 R   |   8 row_init   000658 R   |   3 rx_char    000000 R
  8 scan       00022D R   |   8 set_bits   00072B R   |   8 skip       000217 R
  8 store      0005C5 R   |   8 store_ex   0005EC R   |   8 strcpyn    00027B R
  8 strlen     00044F R   |   3 tib        000008 R   |   8 toggle_b   000757 R
  8 uart3_in   00000F R   |   8 uart_del   00015A R   |   8 uart_get   000146 R
  8 uart_pri   00012E R   |   8 uart_qch   00013A R   |   8 uart_rx_   00010D R
  8 uart_tx    000124 R   |   8 ungetcha   000140 R   |   8 write_by   000484 R
  8 write_ee   0004E2 R   |   8 write_ex   000520 R   |   8 write_fl   0004C2 R
  8 write_ra   0004BA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 BOOTLOAD   size      0   flags    8
   2 BOOTLOAD   size      0   flags    8
   3 DATA       size     B2   flags    0
   4 USER_RAM   size      0   flags    0
   5 SSEG       size      0   flags    8
   6 SSEG1      size    100   flags    8
   7 HOME       size     80   flags    0
   8 CODE       size    A04   flags    0


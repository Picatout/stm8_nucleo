ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;  MONA   MONitor written in Assembly
                                      2 	.module MONA 
                                      3     .optsdcc -mstm8
                                      4 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                      5 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB ÂµC registers map
                                      4 ; sdas file
                                      5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      6 	.module stm8s208rb
                                      7 	
                                      8 ;;;;;;;;;;
                                      9 ; bit mask
                                     10 ;;;;;;;;;;
                           000000    11  BIT0 = (0)
                           000001    12  BIT1 = (1)
                           000002    13  BIT2 = (2)
                           000003    14  BIT3 = (3)
                           000004    15  BIT4 = (4)
                           000005    16  BIT5 = (5)
                           000006    17  BIT6 = (6)
                           000007    18  BIT7 = (7)
                                     19 
                                     20 ; clock frequency using HSE without division
                           7A1200    21  Fmaster = 8000000;UL
                                     22 
                                     23 ; controller memory regions
                           001800    24  RAM_SIZE = (0x1800) ; 6KB 
                           000800    25  EEPROM_SIZE = (0x800) ; 2KB
                                     26 ; STM8S208RB have 128K flash
                           020000    27  FLASH_SIZE = (0x20000)
                                     28 
                           000000    29  RAM_BASE = (0)
                           0017FF    30  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    31  EEPROM_BASE = (0x4000)
                           0047FF    32  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    33  SFR_BASE = (0x5000)
                           0057FF    34  SFR_END = (0x57FF)
                           006000    35  BOOT_ROM_BASE = (0x6000)
                           007FFF    36  BOOT_ROM_END = (0x7fff)
                           008000    37  FLASH_BASE = (0x8000)
                           027FFF    38  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    39  OPTION_BASE = (0x4800)
                           00487F    40  OPTION_END = (0x487F)
                           0048CD    41  DEVID_BASE = (0x48CD)
                           0048D8    42  DEVID_END = (0x48D8)
                           007F00    43  DEBUG_BASE = (0X7F00)
                           007FFF    44  DEBUG_END = (0X7FFF)
                                     45 
                                     46 ; options bytes
                                     47 ; this one can be programmed only from SWIM  (ICP)
                           004800    48  OPT0  = (0x4800)
                                     49 ; these can be programmed at runtime (IAP)
                           004801    50  OPT1  = (0x4801)
                           004802    51  NOPT1  = (0x4802)
                           004803    52  OPT2  = (0x4803)
                           004804    53  NOPT2  = (0x4804)
                           004805    54  OPT3  = (0x4805)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                           004806    55  NOPT3  = (0x4806)
                           004807    56  OPT4  = (0x4807)
                           004808    57  NOPT4  = (0x4808)
                           004809    58  OPT5  = (0x4809)
                           00480A    59  NOPT5  = (0x480A)
                           00480B    60  OPT6  = (0x480B)
                           00480C    61  NOPT6 = (0x480C)
                           00480D    62  OPT7 = (0x480D)
                           00480E    63  NOPT7 = (0x480E)
                           00487E    64  OPTBL  = (0x487E)
                           00487F    65  NOPTBL  = (0x487F)
                                     66 ; option registers usage
                                     67 ; read out protection, value 0xAA enable ROP
                           004800    68  ROP = OPT0  
                                     69 ; user boot code, {0..0x3e} 512 bytes row
                           004801    70  UBC = OPT1
                           004802    71  NUBC = NOPT1
                                     72 ; alternate function register
                           004803    73  AFR = OPT2
                           004804    74  NAFR = NOPT2
                                     75 ; miscelinous options
                           004805    76  WDGOPT = OPT3
                           004806    77  NWDGOPT = NOPT3
                                     78 ; clock options
                           004807    79  CLKOPT = OPT4
                           004808    80  NCLKOPT = NOPT4
                                     81 ; HSE clock startup delay
                           004809    82  HSECNT = OPT5
                           00480A    83  NHSECNT = NOPT5
                                     84 ; flash wait state
                           00480D    85 FLASH_WS = OPT7
                           00480E    86 NFLASH_WS = NOPT7
                                     87 
                                     88 ; watchdog options bits
                           000003    89   WDGOPT_LSIEN   =  BIT3
                           000002    90   WDGOPT_IWDG_HW =  BIT2
                           000001    91   WDGOPT_WWDG_HW =  BIT1
                           000000    92   WDGOPT_WWDG_HALT = BIT0
                                     93 ; NWDGOPT bits
                           FFFFFFFC    94   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD    95   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE    96   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF    97   NWDGOPT_WWDG_HALT = ~BIT0
                                     98 
                                     99 ; CLKOPT bits
                           000003   100  CLKOPT_EXT_CLK  = BIT3
                           000002   101  CLKOPT_CKAWUSEL = BIT2
                           000001   102  CLKOPT_PRS_C1   = BIT1
                           000000   103  CLKOPT_PRS_C0   = BIT0
                                    104 
                                    105 ; AFR option, remapable functions
                           000007   106  AFR7_BEEP    = BIT7
                           000006   107  AFR6_I2C     = BIT6
                           000005   108  AFR5_TIM1    = BIT5
                           000004   109  AFR4_TIM1    = BIT4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000003   110  AFR3_TIM1    = BIT3
                           000002   111  AFR2_CCO     = BIT2
                           000001   112  AFR1_TIM2    = BIT1
                           000000   113  AFR0_ADC     = BIT0
                                    114 
                                    115 ; device ID = (read only)
                           0048CD   116  DEVID_XL  = (0x48CD)
                           0048CE   117  DEVID_XH  = (0x48CE)
                           0048CF   118  DEVID_YL  = (0x48CF)
                           0048D0   119  DEVID_YH  = (0x48D0)
                           0048D1   120  DEVID_WAF  = (0x48D1)
                           0048D2   121  DEVID_LOT0  = (0x48D2)
                           0048D3   122  DEVID_LOT1  = (0x48D3)
                           0048D4   123  DEVID_LOT2  = (0x48D4)
                           0048D5   124  DEVID_LOT3  = (0x48D5)
                           0048D6   125  DEVID_LOT4  = (0x48D6)
                           0048D7   126  DEVID_LOT5  = (0x48D7)
                           0048D8   127  DEVID_LOT6  = (0x48D8)
                                    128 
                                    129 
                                    130 ; port bit
                           000000   131  PIN0 = (0)
                           000001   132  PIN1 = (1)
                           000002   133  PIN2 = (2)
                           000003   134  PIN3 = (3)
                           000004   135  PIN4 = (4)
                           000005   136  PIN5 = (5)
                           000006   137  PIN6 = (6)
                           000007   138  PIN7 = (7)
                                    139 
                           005000   140 GPIO_BASE = (0x5000)
                           000005   141 GPIO_SIZE = (5)
                                    142 ; PORTS SFR OFFSET
                           000000   143 PA = 0
                           000005   144 PB = 5
                           00000A   145 PC = 10
                           00000F   146 PD = 15
                           000014   147 PE = 20
                           000019   148 PF = 25
                           00001E   149 PG = 30
                                    150 
                                    151 ; GPIO
                           005000   152  PA_ODR  = (0x5000)
                           005001   153  PA_IDR  = (0x5001)
                           005002   154  PA_DDR  = (0x5002)
                           005003   155  PA_CR1  = (0x5003)
                           005004   156  PA_CR2  = (0x5004)
                                    157 
                           005005   158  PB_ODR  = (0x5005)
                           005006   159  PB_IDR  = (0x5006)
                           005007   160  PB_DDR  = (0x5007)
                           005008   161  PB_CR1  = (0x5008)
                           005009   162  PB_CR2  = (0x5009)
                                    163 
                           00500A   164  PC_ODR  = (0x500A)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           00500B   165  PC_IDR  = (0x500B)
                           00500C   166  PC_DDR  = (0x500C)
                           00500D   167  PC_CR1  = (0x500D)
                           00500E   168  PC_CR2  = (0x500E)
                                    169 
                           00500F   170  PD_ODR  = (0x500F)
                           005010   171  PD_IDR  = (0x5010)
                           005011   172  PD_DDR  = (0x5011)
                           005012   173  PD_CR1  = (0x5012)
                           005013   174  PD_CR2  = (0x5013)
                                    175 
                           005014   176  PE_ODR  = (0x5014)
                           005015   177  PE_IDR  = (0x5015)
                           005016   178  PE_DDR  = (0x5016)
                           005017   179  PE_CR1  = (0x5017)
                           005018   180  PE_CR2  = (0x5018)
                                    181 
                           005019   182  PF_ODR  = (0x5019)
                           00501A   183  PF_IDR  = (0x501A)
                           00501B   184  PF_DDR  = (0x501B)
                           00501C   185  PF_CR1  = (0x501C)
                           00501D   186  PF_CR2  = (0x501D)
                                    187 
                           00501E   188  PG_ODR  = (0x501E)
                           00501F   189  PG_IDR  = (0x501F)
                           005020   190  PG_DDR  = (0x5020)
                           005021   191  PG_CR1  = (0x5021)
                           005022   192  PG_CR2  = (0x5022)
                                    193 
                                    194 ; input modes CR1
                           000000   195  INPUT_FLOAT = (0)
                           000001   196  INPUT_PULLUP = (1)
                                    197 ; output mode CR1
                           000000   198  OUTPUT_OD = (0)
                           000001   199  OUTPUT_PP = (1)
                                    200 ; input modes CR2
                           000000   201  INPUT_DI = (0)
                           000001   202  INPUT_EI = (1)
                                    203 ; output speed CR2
                           000000   204  OUTPUT_SLOW = (0)
                           000001   205  OUTPUT_FAST = (1)
                                    206 
                                    207 
                                    208 ; Flash
                           00505A   209  FLASH_CR1  = (0x505A)
                           00505B   210  FLASH_CR2  = (0x505B)
                           00505C   211  FLASH_NCR2  = (0x505C)
                           00505D   212  FLASH_FPR  = (0x505D)
                           00505E   213  FLASH_NFPR  = (0x505E)
                           00505F   214  FLASH_IAPSR  = (0x505F)
                           005062   215  FLASH_PUKR  = (0x5062)
                           005064   216  FLASH_DUKR  = (0x5064)
                                    217 ; data memory unlock keys
                           0000AE   218  FLASH_DUKR_KEY1 = (0xae)
                           000056   219  FLASH_DUKR_KEY2 = (0x56)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    220 ; flash memory unlock keys
                           000056   221  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   222  FLASH_PUKR_KEY2 = (0xae)
                                    223 ; FLASH_CR1 bits
                           000003   224  FLASH_CR1_HALT = BIT3
                           000002   225  FLASH_CR1_AHALT = BIT2
                           000001   226  FLASH_CR1_IE = BIT1
                           000000   227  FLASH_CR1_FIX = BIT0
                                    228 ; FLASH_CR2 bits
                           000007   229  FLASH_CR2_OPT = BIT7
                           000006   230  FLASH_CR2_WPRG = BIT6
                           000005   231  FLASH_CR2_ERASE = BIT5
                           000004   232  FLASH_CR2_FPRG = BIT4
                           000000   233  FLASH_CR2_PRG = BIT0
                                    234 ; FLASH_FPR bits
                           000005   235  FLASH_FPR_WPB5 = BIT5
                           000004   236  FLASH_FPR_WPB4 = BIT4
                           000003   237  FLASH_FPR_WPB3 = BIT3
                           000002   238  FLASH_FPR_WPB2 = BIT2
                           000001   239  FLASH_FPR_WPB1 = BIT1
                           000000   240  FLASH_FPR_WPB0 = BIT0
                                    241 ; FLASH_NFPR bits
                           000005   242  FLASH_NFPR_NWPB5 = BIT5
                           000004   243  FLASH_NFPR_NWPB4 = BIT4
                           000003   244  FLASH_NFPR_NWPB3 = BIT3
                           000002   245  FLASH_NFPR_NWPB2 = BIT2
                           000001   246  FLASH_NFPR_NWPB1 = BIT1
                           000000   247  FLASH_NFPR_NWPB0 = BIT0
                                    248 ; FLASH_IAPSR bits
                           000006   249  FLASH_IAPSR_HVOFF = BIT6
                           000003   250  FLASH_IAPSR_DUL = BIT3
                           000002   251  FLASH_IAPSR_EOP = BIT2
                           000001   252  FLASH_IAPSR_PUL = BIT1
                           000000   253  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    254 
                                    255 ; Interrupt control
                           0050A0   256  EXTI_CR1  = (0x50A0)
                           0050A1   257  EXTI_CR2  = (0x50A1)
                                    258 
                                    259 ; Reset Status
                           0050B3   260  RST_SR  = (0x50B3)
                                    261 
                                    262 ; Clock Registers
                           0050C0   263  CLK_ICKR  = (0x50c0)
                           0050C1   264  CLK_ECKR  = (0x50c1)
                           0050C3   265  CLK_CMSR  = (0x50C3)
                           0050C4   266  CLK_SWR  = (0x50C4)
                           0050C5   267  CLK_SWCR  = (0x50C5)
                           0050C6   268  CLK_CKDIVR  = (0x50C6)
                           0050C7   269  CLK_PCKENR1  = (0x50C7)
                           0050C8   270  CLK_CSSR  = (0x50C8)
                           0050C9   271  CLK_CCOR  = (0x50C9)
                           0050CA   272  CLK_PCKENR2  = (0x50CA)
                           0050CC   273  CLK_HSITRIMR  = (0x50CC)
                           0050CD   274  CLK_SWIMCCR  = (0x50CD)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    275 
                                    276 ; Peripherals clock gating
                                    277 ; CLK_PCKENR1 
                           000007   278  CLK_PCKENR1_TIM1 = (7)
                           000006   279  CLK_PCKENR1_TIM3 = (6)
                           000005   280  CLK_PCKENR1_TIM2 = (5)
                           000004   281  CLK_PCKENR1_TIM4 = (4)
                           000003   282  CLK_PCKENR1_UART3 = (3)
                           000002   283  CLK_PCKENR1_UART1 = (2)
                           000001   284  CLK_PCKENR1_SPI = (1)
                           000000   285  CLK_PCKENR1_I2C = (0)
                                    286 ; CLK_PCKENR2
                           000007   287  CLK_PCKENR2_CAN = (7)
                           000003   288  CLK_PCKENR2_ADC = (3)
                           000002   289  CLK_PCKENR2_AWU = (2)
                                    290 
                                    291 ; Clock bits
                           000005   292  CLK_ICKR_REGAH = (5)
                           000004   293  CLK_ICKR_LSIRDY = (4)
                           000003   294  CLK_ICKR_LSIEN = (3)
                           000002   295  CLK_ICKR_FHW = (2)
                           000001   296  CLK_ICKR_HSIRDY = (1)
                           000000   297  CLK_ICKR_HSIEN = (0)
                                    298 
                           000001   299  CLK_ECKR_HSERDY = (1)
                           000000   300  CLK_ECKR_HSEEN = (0)
                                    301 ; clock source
                           0000E1   302  CLK_SWR_HSI = 0xE1
                           0000D2   303  CLK_SWR_LSI = 0xD2
                           0000B4   304  CLK_SWR_HSE = 0xB4
                                    305 
                           000003   306  CLK_SWCR_SWIF = (3)
                           000002   307  CLK_SWCR_SWIEN = (2)
                           000001   308  CLK_SWCR_SWEN = (1)
                           000000   309  CLK_SWCR_SWBSY = (0)
                                    310 
                           000004   311  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   312  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   313  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   314  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   315  CLK_CKDIVR_CPUDIV0 = (0)
                                    316 
                                    317 ; Watchdog
                           0050D1   318  WWDG_CR  = (0x50D1)
                           0050D2   319  WWDG_WR  = (0x50D2)
                           0050E0   320  IWDG_KR  = (0x50E0)
                           0050E1   321  IWDG_PR  = (0x50E1)
                           0050E2   322  IWDG_RLR  = (0x50E2)
                           0050F0   323  AWU_CSR1  = (0x50F0)
                           0050F1   324  AWU_APR  = (0x50F1)
                           0050F2   325  AWU_TBR  = (0x50F2)
                                    326 
                                    327 ; Beep
                           0050F3   328  BEEP_CSR  = (0x50F3)
                                    329 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    330 ; SPI
                           005200   331  SPI_CR1  = (0x5200)
                           005201   332  SPI_CR2  = (0x5201)
                           005202   333  SPI_ICR  = (0x5202)
                           005203   334  SPI_SR  = (0x5203)
                           005204   335  SPI_DR  = (0x5204)
                           005205   336  SPI_CRCPR  = (0x5205)
                           005206   337  SPI_RXCRCR  = (0x5206)
                           005207   338  SPI_TXCRCR  = (0x5207)
                                    339 
                                    340 ; I2C
                           005210   341  I2C_CR1  = (0x5210)
                           005211   342  I2C_CR2  = (0x5211)
                           005212   343  I2C_FREQR  = (0x5212)
                           005213   344  I2C_OARL  = (0x5213)
                           005214   345  I2C_OARH  = (0x5214)
                           005216   346  I2C_DR  = (0x5216)
                           005217   347  I2C_SR1  = (0x5217)
                           005218   348  I2C_SR2  = (0x5218)
                           005219   349  I2C_SR3  = (0x5219)
                           00521A   350  I2C_ITR  = (0x521A)
                           00521B   351  I2C_CCRL  = (0x521B)
                           00521C   352  I2C_CCRH  = (0x521C)
                           00521D   353  I2C_TRISER  = (0x521D)
                           00521E   354  I2C_PECR  = (0x521E)
                                    355 
                           000007   356  I2C_CR1_NOSTRETCH = (7)
                           000006   357  I2C_CR1_ENGC = (6)
                           000000   358  I2C_CR1_PE = (0)
                                    359 
                           000007   360  I2C_CR2_SWRST = (7)
                           000003   361  I2C_CR2_POS = (3)
                           000002   362  I2C_CR2_ACK = (2)
                           000001   363  I2C_CR2_STOP = (1)
                           000000   364  I2C_CR2_START = (0)
                                    365 
                           000000   366  I2C_OARL_ADD0 = (0)
                                    367 
                           000009   368  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   369  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    370 
                           000007   371  I2C_OARH_ADDMODE = (7)
                           000006   372  I2C_OARH_ADDCONF = (6)
                           000002   373  I2C_OARH_ADD9 = (2)
                           000001   374  I2C_OARH_ADD8 = (1)
                                    375 
                           000007   376  I2C_SR1_TXE = (7)
                           000006   377  I2C_SR1_RXNE = (6)
                           000004   378  I2C_SR1_STOPF = (4)
                           000003   379  I2C_SR1_ADD10 = (3)
                           000002   380  I2C_SR1_BTF = (2)
                           000001   381  I2C_SR1_ADDR = (1)
                           000000   382  I2C_SR1_SB = (0)
                                    383 
                           000005   384  I2C_SR2_WUFH = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000003   385  I2C_SR2_OVR = (3)
                           000002   386  I2C_SR2_AF = (2)
                           000001   387  I2C_SR2_ARLO = (1)
                           000000   388  I2C_SR2_BERR = (0)
                                    389 
                           000007   390  I2C_SR3_DUALF = (7)
                           000004   391  I2C_SR3_GENCALL = (4)
                           000002   392  I2C_SR3_TRA = (2)
                           000001   393  I2C_SR3_BUSY = (1)
                           000000   394  I2C_SR3_MSL = (0)
                                    395 
                           000002   396  I2C_ITR_ITBUFEN = (2)
                           000001   397  I2C_ITR_ITEVTEN = (1)
                           000000   398  I2C_ITR_ITERREN = (0)
                                    399 
                                    400 ; Precalculated values, all in KHz
                           000080   401  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   402  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    403 ;
                                    404 ; Fast I2C mode max rise time = 300ns
                                    405 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    406 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    407 
                           000005   408  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    409 
                           0000C0   410  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   411  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   412  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    413 
                           000080   414  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   415  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   416  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    417 
                           000000   418  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   419  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    420 ;
                                    421 ; Standard I2C mode max rise time = 1000ns
                                    422 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    423 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    424 
                           000011   425  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    426 
                           000000   427  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   428  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   429  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    430 
                           000001   431  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   432  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   433  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    434 
                           000001   435  I2C_READ = 1
                           000000   436  I2C_WRITE = 0
                                    437 
                                    438 ; baudrate constant for brr_value table access
                           000000   439 B2400=0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           000001   440 B4800=1
                           000002   441 B9600=2
                           000003   442 B19200=3
                           000004   443 B38400=4
                           000005   444 B57600=5
                           000006   445 B115200=6
                           000007   446 B230400=7
                           000008   447 B460800=8
                           000009   448 B921600=9
                                    449 
                                    450 ; UART1 
                           005230   451  UART1_SR    = (0x5230)
                           005231   452  UART1_DR    = (0x5231)
                           005232   453  UART1_BRR1  = (0x5232)
                           005233   454  UART1_BRR2  = (0x5233)
                           005234   455  UART1_CR1   = (0x5234)
                           005235   456  UART1_CR2   = (0x5235)
                           005236   457  UART1_CR3   = (0x5236)
                           005237   458  UART1_CR4   = (0x5237)
                           005238   459  UART1_CR5   = (0x5238)
                           005239   460  UART1_GTR   = (0x5239)
                           00523A   461  UART1_PSCR  = (0x523A)
                                    462 
                                    463 ; UART3
                           005240   464  UART3_SR    = (0x5240)
                           005241   465  UART3_DR    = (0x5241)
                           005242   466  UART3_BRR1  = (0x5242)
                           005243   467  UART3_BRR2  = (0x5243)
                           005244   468  UART3_CR1   = (0x5244)
                           005245   469  UART3_CR2   = (0x5245)
                           005246   470  UART3_CR3   = (0x5246)
                           005247   471  UART3_CR4   = (0x5247)
                           004249   472  UART3_CR6   = (0x4249)
                                    473 
                                    474 ; UART Status Register bits
                           000007   475  UART_SR_TXE = (7)
                           000006   476  UART_SR_TC = (6)
                           000005   477  UART_SR_RXNE = (5)
                           000004   478  UART_SR_IDLE = (4)
                           000003   479  UART_SR_OR = (3)
                           000002   480  UART_SR_NF = (2)
                           000001   481  UART_SR_FE = (1)
                           000000   482  UART_SR_PE = (0)
                                    483 
                                    484 ; Uart Control Register bits
                           000007   485  UART_CR1_R8 = (7)
                           000006   486  UART_CR1_T8 = (6)
                           000005   487  UART_CR1_UARTD = (5)
                           000004   488  UART_CR1_M = (4)
                           000003   489  UART_CR1_WAKE = (3)
                           000002   490  UART_CR1_PCEN = (2)
                           000001   491  UART_CR1_PS = (1)
                           000000   492  UART_CR1_PIEN = (0)
                                    493 
                           000007   494  UART_CR2_TIEN = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           000006   495  UART_CR2_TCIEN = (6)
                           000005   496  UART_CR2_RIEN = (5)
                           000004   497  UART_CR2_ILIEN = (4)
                           000003   498  UART_CR2_TEN = (3)
                           000002   499  UART_CR2_REN = (2)
                           000001   500  UART_CR2_RWU = (1)
                           000000   501  UART_CR2_SBK = (0)
                                    502 
                           000006   503  UART_CR3_LINEN = (6)
                           000005   504  UART_CR3_STOP1 = (5)
                           000004   505  UART_CR3_STOP0 = (4)
                           000003   506  UART_CR3_CLKEN = (3)
                           000002   507  UART_CR3_CPOL = (2)
                           000001   508  UART_CR3_CPHA = (1)
                           000000   509  UART_CR3_LBCL = (0)
                                    510 
                           000006   511  UART_CR4_LBDIEN = (6)
                           000005   512  UART_CR4_LBDL = (5)
                           000004   513  UART_CR4_LBDF = (4)
                           000003   514  UART_CR4_ADD3 = (3)
                           000002   515  UART_CR4_ADD2 = (2)
                           000001   516  UART_CR4_ADD1 = (1)
                           000000   517  UART_CR4_ADD0 = (0)
                                    518 
                           000005   519  UART_CR5_SCEN = (5)
                           000004   520  UART_CR5_NACK = (4)
                           000003   521  UART_CR5_HDSEL = (3)
                           000002   522  UART_CR5_IRLP = (2)
                           000001   523  UART_CR5_IREN = (1)
                                    524 ; LIN mode config register
                           000007   525  UART_CR6_LDUM = (7)
                           000005   526  UART_CR6_LSLV = (5)
                           000004   527  UART_CR6_LASE = (4)
                           000002   528  UART_CR6_LHDIEN = (2) 
                           000001   529  UART_CR6_LHDF = (1)
                           000000   530  UART_CR6_LSF = (0)
                                    531 
                                    532 ; TIMERS
                                    533 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   534  TIM1_CR1  = (0x5250)
                           005251   535  TIM1_CR2  = (0x5251)
                           005252   536  TIM1_SMCR  = (0x5252)
                           005253   537  TIM1_ETR  = (0x5253)
                           005254   538  TIM1_IER  = (0x5254)
                           005255   539  TIM1_SR1  = (0x5255)
                           005256   540  TIM1_SR2  = (0x5256)
                           005257   541  TIM1_EGR  = (0x5257)
                           005258   542  TIM1_CCMR1  = (0x5258)
                           005259   543  TIM1_CCMR2  = (0x5259)
                           00525A   544  TIM1_CCMR3  = (0x525A)
                           00525B   545  TIM1_CCMR4  = (0x525B)
                           00525C   546  TIM1_CCER1  = (0x525C)
                           00525D   547  TIM1_CCER2  = (0x525D)
                           00525E   548  TIM1_CNTRH  = (0x525E)
                           00525F   549  TIM1_CNTRL  = (0x525F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005260   550  TIM1_PSCRH  = (0x5260)
                           005261   551  TIM1_PSCRL  = (0x5261)
                           005262   552  TIM1_ARRH  = (0x5262)
                           005263   553  TIM1_ARRL  = (0x5263)
                           005264   554  TIM1_RCR  = (0x5264)
                           005265   555  TIM1_CCR1H  = (0x5265)
                           005266   556  TIM1_CCR1L  = (0x5266)
                           005267   557  TIM1_CCR2H  = (0x5267)
                           005268   558  TIM1_CCR2L  = (0x5268)
                           005269   559  TIM1_CCR3H  = (0x5269)
                           00526A   560  TIM1_CCR3L  = (0x526A)
                           00526B   561  TIM1_CCR4H  = (0x526B)
                           00526C   562  TIM1_CCR4L  = (0x526C)
                           00526D   563  TIM1_BKR  = (0x526D)
                           00526E   564  TIM1_DTR  = (0x526E)
                           00526F   565  TIM1_OISR  = (0x526F)
                                    566 
                                    567 ; Timer Control Register bits
                           000007   568  TIM_CR1_ARPE = (7)
                           000006   569  TIM_CR1_CMSH = (6)
                           000005   570  TIM_CR1_CMSL = (5)
                           000004   571  TIM_CR1_DIR = (4)
                           000003   572  TIM_CR1_OPM = (3)
                           000002   573  TIM_CR1_URS = (2)
                           000001   574  TIM_CR1_UDIS = (1)
                           000000   575  TIM_CR1_CEN = (0)
                                    576 
                           000006   577  TIM1_CR2_MMS2 = (6)
                           000005   578  TIM1_CR2_MMS1 = (5)
                           000004   579  TIM1_CR2_MMS0 = (4)
                           000002   580  TIM1_CR2_COMS = (2)
                           000000   581  TIM1_CR2_CCPC = (0)
                                    582 
                                    583 ; Timer Slave Mode Control bits
                           000007   584  TIM1_SMCR_MSM = (7)
                           000006   585  TIM1_SMCR_TS2 = (6)
                           000005   586  TIM1_SMCR_TS1 = (5)
                           000004   587  TIM1_SMCR_TS0 = (4)
                           000002   588  TIM1_SMCR_SMS2 = (2)
                           000001   589  TIM1_SMCR_SMS1 = (1)
                           000000   590  TIM1_SMCR_SMS0 = (0)
                                    591 
                                    592 ; Timer External Trigger Enable bits
                           000007   593  TIM1_ETR_ETP = (7)
                           000006   594  TIM1_ETR_ECE = (6)
                           000005   595  TIM1_ETR_ETPS1 = (5)
                           000004   596  TIM1_ETR_ETPS0 = (4)
                           000003   597  TIM1_ETR_ETF3 = (3)
                           000002   598  TIM1_ETR_ETF2 = (2)
                           000001   599  TIM1_ETR_ETF1 = (1)
                           000000   600  TIM1_ETR_ETF0 = (0)
                                    601 
                                    602 ; Timer Interrupt Enable bits
                           000007   603  TIM1_IER_BIE = (7)
                           000006   604  TIM1_IER_TIE = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000005   605  TIM1_IER_COMIE = (5)
                           000004   606  TIM1_IER_CC4IE = (4)
                           000003   607  TIM1_IER_CC3IE = (3)
                           000002   608  TIM1_IER_CC2IE = (2)
                           000001   609  TIM1_IER_CC1IE = (1)
                           000000   610  TIM1_IER_UIE = (0)
                                    611 
                                    612 ; Timer Status Register bits
                           000007   613  TIM1_SR1_BIF = (7)
                           000006   614  TIM1_SR1_TIF = (6)
                           000005   615  TIM1_SR1_COMIF = (5)
                           000004   616  TIM1_SR1_CC4IF = (4)
                           000003   617  TIM1_SR1_CC3IF = (3)
                           000002   618  TIM1_SR1_CC2IF = (2)
                           000001   619  TIM1_SR1_CC1IF = (1)
                           000000   620  TIM1_SR1_UIF = (0)
                                    621 
                           000004   622  TIM1_SR2_CC4OF = (4)
                           000003   623  TIM1_SR2_CC3OF = (3)
                           000002   624  TIM1_SR2_CC2OF = (2)
                           000001   625  TIM1_SR2_CC1OF = (1)
                                    626 
                                    627 ; Timer Event Generation Register bits
                           000007   628  TIM1_EGR_BG = (7)
                           000006   629  TIM1_EGR_TG = (6)
                           000005   630  TIM1_EGR_COMG = (5)
                           000004   631  TIM1_EGR_CC4G = (4)
                           000003   632  TIM1_EGR_CC3G = (3)
                           000002   633  TIM1_EGR_CC2G = (2)
                           000001   634  TIM1_EGR_CC1G = (1)
                           000000   635  TIM1_EGR_UG = (0)
                                    636 
                                    637 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   638  TIM1_CCMR1_OC1CE = (7)
                           000006   639  TIM1_CCMR1_OC1M2 = (6)
                           000005   640  TIM1_CCMR1_OC1M1 = (5)
                           000004   641  TIM1_CCMR1_OC1M0 = (4)
                           000003   642  TIM1_CCMR1_OC1PE = (3)
                           000002   643  TIM1_CCMR1_OC1FE = (2)
                           000001   644  TIM1_CCMR1_CC1S1 = (1)
                           000000   645  TIM1_CCMR1_CC1S0 = (0)
                                    646 
                                    647 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   648  TIM1_CCMR1_IC1F3 = (7)
                           000006   649  TIM1_CCMR1_IC1F2 = (6)
                           000005   650  TIM1_CCMR1_IC1F1 = (5)
                           000004   651  TIM1_CCMR1_IC1F0 = (4)
                           000003   652  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   653  TIM1_CCMR1_IC1PSC0 = (2)
                                    654 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   655  TIM1_CCMR1_CC1S0 = (0)
                                    656 
                                    657 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   658  TIM1_CCMR2_OC2CE = (7)
                           000006   659  TIM1_CCMR2_OC2M2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000005   660  TIM1_CCMR2_OC2M1 = (5)
                           000004   661  TIM1_CCMR2_OC2M0 = (4)
                           000003   662  TIM1_CCMR2_OC2PE = (3)
                           000002   663  TIM1_CCMR2_OC2FE = (2)
                           000001   664  TIM1_CCMR2_CC2S1 = (1)
                           000000   665  TIM1_CCMR2_CC2S0 = (0)
                                    666 
                                    667 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   668  TIM1_CCMR2_IC2F3 = (7)
                           000006   669  TIM1_CCMR2_IC2F2 = (6)
                           000005   670  TIM1_CCMR2_IC2F1 = (5)
                           000004   671  TIM1_CCMR2_IC2F0 = (4)
                           000003   672  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   673  TIM1_CCMR2_IC2PSC0 = (2)
                                    674 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   675  TIM1_CCMR2_CC2S0 = (0)
                                    676 
                                    677 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   678  TIM1_CCMR3_OC3CE = (7)
                           000006   679  TIM1_CCMR3_OC3M2 = (6)
                           000005   680  TIM1_CCMR3_OC3M1 = (5)
                           000004   681  TIM1_CCMR3_OC3M0 = (4)
                           000003   682  TIM1_CCMR3_OC3PE = (3)
                           000002   683  TIM1_CCMR3_OC3FE = (2)
                           000001   684  TIM1_CCMR3_CC3S1 = (1)
                           000000   685  TIM1_CCMR3_CC3S0 = (0)
                                    686 
                                    687 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   688  TIM1_CCMR3_IC3F3 = (7)
                           000006   689  TIM1_CCMR3_IC3F2 = (6)
                           000005   690  TIM1_CCMR3_IC3F1 = (5)
                           000004   691  TIM1_CCMR3_IC3F0 = (4)
                           000003   692  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   693  TIM1_CCMR3_IC3PSC0 = (2)
                                    694 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   695  TIM1_CCMR3_CC3S0 = (0)
                                    696 
                                    697 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   698  TIM1_CCMR4_OC4CE = (7)
                           000006   699  TIM1_CCMR4_OC4M2 = (6)
                           000005   700  TIM1_CCMR4_OC4M1 = (5)
                           000004   701  TIM1_CCMR4_OC4M0 = (4)
                           000003   702  TIM1_CCMR4_OC4PE = (3)
                           000002   703  TIM1_CCMR4_OC4FE = (2)
                           000001   704  TIM1_CCMR4_CC4S1 = (1)
                           000000   705  TIM1_CCMR4_CC4S0 = (0)
                                    706 
                                    707 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   708  TIM1_CCMR4_IC4F3 = (7)
                           000006   709  TIM1_CCMR4_IC4F2 = (6)
                           000005   710  TIM1_CCMR4_IC4F1 = (5)
                           000004   711  TIM1_CCMR4_IC4F0 = (4)
                           000003   712  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   713  TIM1_CCMR4_IC4PSC0 = (2)
                                    714 ;  TIM1_CCMR4_CC4S1 = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   715  TIM1_CCMR4_CC4S0 = (0)
                                    716 
                                    717 ; Timer 2 - 16-bit timer
                           005300   718  TIM2_CR1  = (0x5300)
                           005301   719  TIM2_IER  = (0x5301)
                           005302   720  TIM2_SR1  = (0x5302)
                           005303   721  TIM2_SR2  = (0x5303)
                           005304   722  TIM2_EGR  = (0x5304)
                           005305   723  TIM2_CCMR1  = (0x5305)
                           005306   724  TIM2_CCMR2  = (0x5306)
                           005307   725  TIM2_CCMR3  = (0x5307)
                           005308   726  TIM2_CCER1  = (0x5308)
                           005309   727  TIM2_CCER2  = (0x5309)
                           00530A   728  TIM2_CNTRH  = (0x530A)
                           00530B   729  TIM2_CNTRL  = (0x530B)
                           00530C   730  TIM2_PSCR  = (0x530C)
                           00530D   731  TIM2_ARRH  = (0x530D)
                           00530E   732  TIM2_ARRL  = (0x530E)
                           00530F   733  TIM2_CCR1H  = (0x530F)
                           005310   734  TIM2_CCR1L  = (0x5310)
                           005311   735  TIM2_CCR2H  = (0x5311)
                           005312   736  TIM2_CCR2L  = (0x5312)
                           005313   737  TIM2_CCR3H  = (0x5313)
                           005314   738  TIM2_CCR3L  = (0x5314)
                                    739 
                                    740 ; Timer 3
                           005320   741  TIM3_CR1  = (0x5320)
                           005321   742  TIM3_IER  = (0x5321)
                           005322   743  TIM3_SR1  = (0x5322)
                           005323   744  TIM3_SR2  = (0x5323)
                           005324   745  TIM3_EGR  = (0x5324)
                           005325   746  TIM3_CCMR1  = (0x5325)
                           005326   747  TIM3_CCMR2  = (0x5326)
                           005327   748  TIM3_CCER1  = (0x5327)
                           005328   749  TIM3_CNTRH  = (0x5328)
                           005329   750  TIM3_CNTRL  = (0x5329)
                           00532A   751  TIM3_PSCR  = (0x532A)
                           00532B   752  TIM3_ARRH  = (0x532B)
                           00532C   753  TIM3_ARRL  = (0x532C)
                           00532D   754  TIM3_CCR1H  = (0x532D)
                           00532E   755  TIM3_CCR1L  = (0x532E)
                           00532F   756  TIM3_CCR2H  = (0x532F)
                           005330   757  TIM3_CCR2L  = (0x5330)
                                    758 
                                    759 ; TIM3_CR1  fields
                           000000   760  TIM3_CR1_CEN = (0)
                           000001   761  TIM3_CR1_UDIS = (1)
                           000002   762  TIM3_CR1_URS = (2)
                           000003   763  TIM3_CR1_OPM = (3)
                           000007   764  TIM3_CR1_ARPE = (7)
                                    765 ; TIM3_CCR2  fields
                           000000   766  TIM3_CCMR2_CC2S_POS = (0)
                           000003   767  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   768  TIM3_CCMR2_OC2M_POS = (4)  
                                    769 ; TIM3_CCER1 fields
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   770  TIM3_CCER1_CC1E = (0)
                           000001   771  TIM3_CCER1_CC1P = (1)
                           000004   772  TIM3_CCER1_CC2E = (4)
                           000005   773  TIM3_CCER1_CC2P = (5)
                                    774 ; TIM3_CCER2 fields
                           000000   775  TIM3_CCER2_CC3E = (0)
                           000001   776  TIM3_CCER2_CC3P = (1)
                                    777 
                                    778 ; Timer 4
                           005340   779  TIM4_CR1  = (0x5340)
                           005341   780  TIM4_IER  = (0x5341)
                           005342   781  TIM4_SR  = (0x5342)
                           005343   782  TIM4_EGR  = (0x5343)
                           005344   783  TIM4_CNTR  = (0x5344)
                           005345   784  TIM4_PSCR  = (0x5345)
                           005346   785  TIM4_ARR  = (0x5346)
                                    786 
                                    787 ; Timer 4 bitmasks
                                    788 
                           000007   789  TIM4_CR1_ARPE = (7)
                           000003   790  TIM4_CR1_OPM = (3)
                           000002   791  TIM4_CR1_URS = (2)
                           000001   792  TIM4_CR1_UDIS = (1)
                           000000   793  TIM4_CR1_CEN = (0)
                                    794 
                           000000   795  TIM4_IER_UIE = (0)
                                    796 
                           000000   797  TIM4_SR_UIF = (0)
                                    798 
                           000000   799  TIM4_EGR_UG = (0)
                                    800 
                           000002   801  TIM4_PSCR_PSC2 = (2)
                           000001   802  TIM4_PSCR_PSC1 = (1)
                           000000   803  TIM4_PSCR_PSC0 = (0)
                                    804 
                           000000   805  TIM4_PSCR_1 = 0
                           000001   806  TIM4_PSCR_2 = 1
                           000002   807  TIM4_PSCR_4 = 2
                           000003   808  TIM4_PSCR_8 = 3
                           000004   809  TIM4_PSCR_16 = 4
                           000005   810  TIM4_PSCR_32 = 5
                           000006   811  TIM4_PSCR_64 = 6
                           000007   812  TIM4_PSCR_128 = 7
                                    813 
                                    814 ; ADC2
                           005400   815  ADC_CSR  = (0x5400)
                           005401   816  ADC_CR1  = (0x5401)
                           005402   817  ADC_CR2  = (0x5402)
                           005403   818  ADC_CR3  = (0x5403)
                           005404   819  ADC_DRH  = (0x5404)
                           005405   820  ADC_DRL  = (0x5405)
                           005406   821  ADC_TDRH  = (0x5406)
                           005407   822  ADC_TDRL  = (0x5407)
                                    823  
                                    824 ; ADC bitmasks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    825 
                           000007   826  ADC_CSR_EOC = (7)
                           000006   827  ADC_CSR_AWD = (6)
                           000005   828  ADC_CSR_EOCIE = (5)
                           000004   829  ADC_CSR_AWDIE = (4)
                           000003   830  ADC_CSR_CH3 = (3)
                           000002   831  ADC_CSR_CH2 = (2)
                           000001   832  ADC_CSR_CH1 = (1)
                           000000   833  ADC_CSR_CH0 = (0)
                                    834 
                           000006   835  ADC_CR1_SPSEL2 = (6)
                           000005   836  ADC_CR1_SPSEL1 = (5)
                           000004   837  ADC_CR1_SPSEL0 = (4)
                           000001   838  ADC_CR1_CONT = (1)
                           000000   839  ADC_CR1_ADON = (0)
                                    840 
                           000006   841  ADC_CR2_EXTTRIG = (6)
                           000005   842  ADC_CR2_EXTSEL1 = (5)
                           000004   843  ADC_CR2_EXTSEL0 = (4)
                           000003   844  ADC_CR2_ALIGN = (3)
                           000001   845  ADC_CR2_SCAN = (1)
                                    846 
                           000007   847  ADC_CR3_DBUF = (7)
                           000006   848  ADC_CR3_DRH = (6)
                                    849 
                                    850 ; beCAN
                           005420   851  CAN_MCR = (0x5420)
                           005421   852  CAN_MSR = (0x5421)
                           005422   853  CAN_TSR = (0x5422)
                           005423   854  CAN_TPR = (0x5423)
                           005424   855  CAN_RFR = (0x5424)
                           005425   856  CAN_IER = (0x5425)
                           005426   857  CAN_DGR = (0x5426)
                           005427   858  CAN_FPSR = (0x5427)
                           005428   859  CAN_P0 = (0x5428)
                           005429   860  CAN_P1 = (0x5429)
                           00542A   861  CAN_P2 = (0x542A)
                           00542B   862  CAN_P3 = (0x542B)
                           00542C   863  CAN_P4 = (0x542C)
                           00542D   864  CAN_P5 = (0x542D)
                           00542E   865  CAN_P6 = (0x542E)
                           00542F   866  CAN_P7 = (0x542F)
                           005430   867  CAN_P8 = (0x5430)
                           005431   868  CAN_P9 = (0x5431)
                           005432   869  CAN_PA = (0x5432)
                           005433   870  CAN_PB = (0x5433)
                           005434   871  CAN_PC = (0x5434)
                           005435   872  CAN_PD = (0x5435)
                           005436   873  CAN_PE = (0x5436)
                           005437   874  CAN_PF = (0x5437)
                                    875 
                                    876 
                                    877 ; CPU
                           007F00   878  CPU_A  = (0x7F00)
                           007F01   879  CPU_PCE  = (0x7F01)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           007F02   880  CPU_PCH  = (0x7F02)
                           007F03   881  CPU_PCL  = (0x7F03)
                           007F04   882  CPU_XH  = (0x7F04)
                           007F05   883  CPU_XL  = (0x7F05)
                           007F06   884  CPU_YH  = (0x7F06)
                           007F07   885  CPU_YL  = (0x7F07)
                           007F08   886  CPU_SPH  = (0x7F08)
                           007F09   887  CPU_SPL   = (0x7F09)
                           007F0A   888  CPU_CCR   = (0x7F0A)
                                    889 
                                    890 ; global configuration register
                           007F60   891  CFG_GCR   = (0x7F60)
                                    892 
                                    893 ; interrupt control registers
                           007F70   894  ITC_SPR1   = (0x7F70)
                           007F71   895  ITC_SPR2   = (0x7F71)
                           007F72   896  ITC_SPR3   = (0x7F72)
                           007F73   897  ITC_SPR4   = (0x7F73)
                           007F74   898  ITC_SPR5   = (0x7F74)
                           007F75   899  ITC_SPR6   = (0x7F75)
                           007F76   900  ITC_SPR7   = (0x7F76)
                           007F77   901  ITC_SPR8   = (0x7F77)
                                    902 
                                    903 ; SWIM, control and status register
                           007F80   904  SWIM_CSR   = (0x7F80)
                                    905 ; debug registers
                           007F90   906  DM_BK1RE   = (0x7F90)
                           007F91   907  DM_BK1RH   = (0x7F91)
                           007F92   908  DM_BK1RL   = (0x7F92)
                           007F93   909  DM_BK2RE   = (0x7F93)
                           007F94   910  DM_BK2RH   = (0x7F94)
                           007F95   911  DM_BK2RL   = (0x7F95)
                           007F96   912  DM_CR1   = (0x7F96)
                           007F97   913  DM_CR2   = (0x7F97)
                           007F98   914  DM_CSR1   = (0x7F98)
                           007F99   915  DM_CSR2   = (0x7F99)
                           007F9A   916  DM_ENFCTR   = (0x7F9A)
                                    917 
                                    918 ; Interrupt Numbers
                           000000   919  INT_TLI = 0
                           000001   920  INT_AWU = 1
                           000002   921  INT_CLK = 2
                           000003   922  INT_EXTI0 = 3
                           000004   923  INT_EXTI1 = 4
                           000005   924  INT_EXTI2 = 5
                           000006   925  INT_EXTI3 = 6
                           000007   926  INT_EXTI4 = 7
                           000008   927  INT_CAN_RX = 8
                           000009   928  INT_CAN_TX = 9
                           00000A   929  INT_SPI = 10
                           00000B   930  INT_TIM1_OVF = 11
                           00000C   931  INT_TIM1_CCM = 12
                           00000D   932  INT_TIM2_OVF = 13
                           00000E   933  INT_TIM2_CCM = 14
                           00000F   934  INT_TIM3_OVF = 15
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000010   935  INT_TIM3_CCM = 16
                           000011   936  INT_UART1_TX_COMPLETED = 17
                           000012   937  INT_AUART1_RX_FULL = 18
                           000013   938  INT_I2C = 19
                           000014   939  INT_UART3_TX_COMPLETED = 20
                           000015   940  INT_UART3_RX_FULL = 21
                           000016   941  INT_ADC2 = 22
                           000017   942  INT_TIM4_OVF = 23
                           000018   943  INT_FLASH = 24
                                    944 
                                    945 ; Interrupt Vectors
                           008000   946  INT_VECTOR_RESET = 0x8000
                           008004   947  INT_VECTOR_TRAP = 0x8004
                           008008   948  INT_VECTOR_TLI = 0x8008
                           00800C   949  INT_VECTOR_AWU = 0x800C
                           008010   950  INT_VECTOR_CLK = 0x8010
                           008014   951  INT_VECTOR_EXTI0 = 0x8014
                           008018   952  INT_VECTOR_EXTI1 = 0x8018
                           00801C   953  INT_VECTOR_EXTI2 = 0x801C
                           008020   954  INT_VECTOR_EXTI3 = 0x8020
                           008024   955  INT_VECTOR_EXTI4 = 0x8024
                           008028   956  INT_VECTOR_CAN_RX = 0x8028
                           00802C   957  INT_VECTOR_CAN_TX = 0x802c
                           008030   958  INT_VECTOR_SPI = 0x8030
                           008034   959  INT_VECTOR_TIM1_OVF = 0x8034
                           008038   960  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C   961  INT_VECTOR_TIM2_OVF = 0x803C
                           008040   962  INT_VECTOR_TIM2_CCM = 0x8040
                           008044   963  INT_VECTOR_TIM3_OVF = 0x8044
                           008048   964  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C   965  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050   966  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054   967  INT_VECTOR_I2C = 0x8054
                           008058   968  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C   969  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060   970  INT_VECTOR_ADC2 = 0x8060
                           008064   971  INT_VECTOR_TIM4_OVF = 0x8064
                           008068   972  INT_VECTOR_FLASH = 0x8068
                                    973 
                                    974  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                      6 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                      8 
                                      9 ;-------------------------------------------------------
                                     10 ;     vt100 CTRL_x  values
                                     11 ;-------------------------------------------------------
                           000001    12 		CTRL_A = 1
                           000002    13 		CTRL_B = 2
                           000003    14 		CTRL_C = 3
                           000004    15 		CTRL_D = 4
                           000005    16 		CTRL_E = 5
                           000006    17 		CTRL_F = 6
                           000007    18 		CTRL_G = 7
                           000008    19 		CTRL_H = 8
                           000009    20 		CTRL_I = 9
                           00000A    21 		CTRL_J = 10
                           00000B    22 		CTRL_K = 11
                           00000C    23 		CTRL_L = 12
                           00000D    24 		CTRL_M = 13
                           00000E    25 		CTRL_N = 14
                           00000F    26 		CTRL_O = 15
                           000010    27 		CTRL_P = 16
                           000011    28 		CTRL_Q = 17
                           000012    29 		CTRL_R = 18
                           000013    30 		CTRL_S = 19
                           000014    31 		CTRL_T = 20
                           000015    32 		CTRL_U = 21
                           000016    33 		CTRL_V = 22
                           000017    34 		CTRL_W = 23
                           000018    35 		CTRL_X = 24
                           000019    36 		CTRL_Y = 25
                           00001A    37 		CTRL_Z = 26
                           00001B    38 		ESC = 27
                           00000A    39 		NL = CTRL_J
                           00000D    40 		CR = CTRL_M
                           000008    41 		BSP = CTRL_H
                           000020    42 		SPACE = 32
                                     43 		
                                     44 ;--------------------------------------------------------
                                     45 ;      MACROS
                                     46 ;--------------------------------------------------------
                                     47 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     48 		bset PC_CR1,#BIT5
                                     49 		bset PC_CR2,#BIT5
                                     50 		bset PC_DDR,#BIT5
                                     51 		.endm
                                     52 		
                                     53 		.macro _ledon ; turn on green LED 
                                     54 		bset PC_ODR,#BIT5
                                     55 		.endm
                                     56 		
                                     57 		.macro _ledoff ; turn off green LED
                                     58 		bres PC_ODR,#BIT5
                                     59 		.endm
                                     60 		
                                     61 		.macro _ledtoggle ; invert green LED state
                                     62 		ld a,#(1<<BIT5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                     63 		xor a,PC_ODR
                                     64 		ld PC_ODR,a
                                     65 		.endm
                                     66 		
                                     67 		
                                     68 		.macro  _interrupts ; enable interrupts
                                     69 		 rim
                                     70 		.endm
                                     71 		
                                     72 		.macro _no_interrupts ; disable interrupts
                                     73 		sim
                                     74 		.endm
                                     75 
                                     76 ;--------------------------------------------------------
                                     77 ;        OPTION BYTES
                                     78 ;--------------------------------------------------------
                                     79 ;		.area 	OPTION (ABS)
                                     80 ;		.org 0x4800
                                     81 ;		.byte 0,0,255,0,255,0,255,0,255,0,255
                                     82 		
                                     83 ;--------------------------------------------------------
                                     84 ; ram uninitialized variables
                                     85 ;--------------------------------------------------------
                           0017FF    86 		STACK_BASE = RAM_SIZE-1 ; stack at end of ram
                           000050    87 		TIB_SIZE = 80
                           000050    88 		PAD_SIZE = 80
                                     89         .area DATA
                                     90 ;ticks  .blkw 1 ; system ticks at every millisecond        
                                     91 ;cntdwn:	.blkw 1 ; millisecond count down timer
      000000                         92 rx_char: .blkb 1 ; last uart received char
      000001                         93 in.w:     .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000002                         94 in:		.blkb 1; parser position in tib
      000003                         95 count:  .blkb 1; length of string in tib
      000004                         96 idx_x:  .blkw 1; index for table pointed by x
      000006                         97 idx_y:  .blkw 1; index for table pointed by y
      000008                         98 tib:	.blkb TIB_SIZE ; transaction input buffer
      000058                         99 pad:	.blkb PAD_SIZE ; working pad
      0000A8                        100 acc16:  .blkw 1; 16 bits accumulator
      0000AA                        101 ram_free_base: .blkw 1
      0000AC                        102 flash_free_base: .blkw 1
                                    103 		
                                    104 ;--------------------------------------------------------
                                    105 ; ram data
                                    106 ;--------------------------------------------------------
                                    107         .area INITIALIZED
                                    108         
                                    109 ;--------------------------------------------------------
                                    110 ; interrupt vector 
                                    111 ;--------------------------------------------------------
                                    112 	.area HOME
      000000                        113 __interrupt_vect:
      000000 82 00 00 28            114 	int init0 ;RESET vector
      000004 82 00 00 D4            115 	int NonHandledInterrupt ;TRAP  software interrupt
      000008 82 00 00 D4            116 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 D4            117 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000010 82 00 00 D4            118 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 D4            119 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 00 D4            120 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 00 D4            121 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 00 D4            122 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 00 D4            123 	int NonHandledInterrupt ;int7 EXTI4 port E external interrupts
      000028 82 00 00 D4            124 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 D4            125 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 D4            126 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 D4            127 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 D4            128 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 D4            129 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 D4            130 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 D4            131 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 D4            132 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 D4            133 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 D4            134 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 D4            135 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 D4            136 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 D5            137 	int uart_rx_isr         ;int21 UART3 RX full
      000060 82 00 00 D4            138 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 D4            139 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 00 D4            140 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 D4            141 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 D4            142 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 D4            143 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 D4            144 	int NonHandledInterrupt ;int28  not used
                                    145 
                                    146 	.area CODE
                                    147 
                                    148 	;initialize clock to HSE 16Mhz
      000000                        149 clock_init:	
      000000 72 12 50 C5      [ 1]  150 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000004 A6 B4            [ 1]  151 	ld a,#CLK_SWR_HSE
      000006 C7 50 C4         [ 1]  152 	ld CLK_SWR,a
      000009 C1 50 C3         [ 1]  153 1$:	cp a,CLK_CMSR
      00000C 26 FB            [ 1]  154 	jrne 1$
      00000E 81               [ 4]  155 	ret
                                    156 
                                    157 		; initialize TIMER4 ticks counter
                                    158 ;timer4_init:
                                    159 ;	clr ticks
                                    160 ;	clr cntdwn
                                    161 ;	ld a,#TIM4_PSCR_128 
                                    162 ;	ld TIM4_PSCR,a
                                    163 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    164 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    165 ;	ld a,#125
                                    166 ;	ld TIM4_ARR,a ; 1 msec interval
                                    167 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    168 ;	ld TIM4_CR1,a
                                    169 ;	ret
                                    170 
                                    171 	; initialize UART3, 115200 8N1
      00000F                        172 uart3_init:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                    173 ;	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
                                    174 	; configure tx pin
      00000F 72 1A 50 11      [ 1]  175 	bset PD_DDR,#PIN5 ; tx pin
      000013 72 1A 50 12      [ 1]  176 	bset PD_CR1,#PIN5 ; push-pull output
      000017 72 1A 50 13      [ 1]  177 	bset PD_CR2,#PIN5 ; fast output
                                    178 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001B 35 05 52 43      [ 1]  179 	mov UART3_BRR2,#0x05 ; must be loaded first
      00001F 35 04 52 42      [ 1]  180 	mov UART3_BRR1,#0x4
      000023 35 2C 52 45      [ 1]  181 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      000027 81               [ 4]  182 	ret
                                    183 	
                                    184 	; pause in milliseconds
                                    185     ; input:  y delay
                                    186     ; output: none
                                    187 ;pause:
                                    188 ;	ldw cntdwn,y
                                    189 ;1$:	ldw y,cntdwn
                                    190 ;	jrne 1$
                                    191 ;    ret
                                    192     
      000028                        193 init0:
      000028                        194 	_no_interrupts
      000028 9B               [ 1]    1 		sim
      000029 CD 00 00         [ 4]  195 	call clock_init
                                    196 ;	clr ticks
                                    197 ;	clr cntdwn
      00002C A6 FF            [ 1]  198 	ld a,#255
      00002E C7 00 00         [ 1]  199 	ld rx_char,a
                                    200 ;	call timer4_init
      000031 CD 00 0F         [ 4]  201 	call uart3_init
      000034                        202 	_ledenable
      000034 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#BIT5
      000038 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#BIT5
      00003C 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#BIT5
      000040                        203 	_ledoff
      000040 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#BIT5
      000044 72 5F 00 01      [ 1]  204 	clr in.w ; must always be 0
                                    205 	; clear stack
      000048 AE 17 FF         [ 2]  206 	ldw x,#STACK_BASE
      00004B                        207 clear_ram0:
      00004B 7F               [ 1]  208 	clr (x)
      00004C 5C               [ 2]  209 	incw x
      00004D A3 17 FE         [ 2]  210 	cpw x,#STACK_BASE-1	
      000050 23 F9            [ 2]  211 	jrule clear_ram0
                                    212 
                                    213 	; initialize SP
      000052 AE 07 FE         [ 2]  214 	ldw x,#0x7FE
      000055 94               [ 1]  215 	ldw sp,x
                                    216 	; initialize free_ram_base 
      000056 90 AE 00 AA      [ 2]  217 	ldw y,#ram_free_base
      00005A 72 A9 00 0F      [ 2]  218 	addw y,#0xf
      00005E 90 9F            [ 1]  219 	ld a,yl
      000060 A4 F0            [ 1]  220 	and a,#0xf0
      000062 90 97            [ 1]  221 	ld yl,a
      000064 90 CF 00 AA      [ 2]  222 	ldw ram_free_base,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                    223 	; initialize flash_free_base
      000068 90 AE 08 24      [ 2]  224 	ldw y,#flash_free
      00006C 72 A9 00 FF      [ 2]  225 	addw y,#0xff
      000070 4F               [ 1]  226 	clr a
      000071 90 97            [ 1]  227 	ld yl,a
      000073 90 CF 00 AC      [ 2]  228 	ldw flash_free_base,y
      000077                        229 main:
      000077                        230 	_interrupts
      000077 9A               [ 1]    1 		 rim
      000078 A6 0C            [ 1]  231 	ld a,#0xc
      00007A CD 00 E7         [ 4]  232 	call uart_tx
      00007D 90 AE 05 CF      [ 2]  233 	ldw y,#VERSION
      000081 CD 00 F1         [ 4]  234 	call uart_print
      000084 90 AE 06 17      [ 2]  235 	ldw y,#RAM_FREE_MSG
      000088 CD 00 F1         [ 4]  236 	call uart_print
      00008B 90 CE 00 AA      [ 2]  237 	ldw y,ram_free_base
      00008F A6 10            [ 1]  238 	ld a,#16
      000091 CD 02 5B         [ 4]  239 	call itoa
      000094 CD 00 F1         [ 4]  240 	call uart_print
      000097 90 AE 06 22      [ 2]  241 	ldw y,#RAM_LAST_FREE_MSG
      00009B CD 00 F1         [ 4]  242 	call uart_print
      00009E 90 AE 06 2B      [ 2]  243 	ldw y,#FLASH_FREE_MSG
      0000A2 CD 00 F1         [ 4]  244 	call uart_print
      0000A5 A6 10            [ 1]  245 	ld a,#16
      0000A7 90 CE 00 AC      [ 2]  246 	ldw y,flash_free_base
      0000AB CD 02 5B         [ 4]  247 	call itoa
      0000AE CD 00 F1         [ 4]  248 	call uart_print
      0000B1 90 AE 06 38      [ 2]  249 	ldw y,#EEPROM_MSG
      0000B5 CD 00 F1         [ 4]  250 	call uart_print
                                    251 	; read execute print loop
      0000B8                        252 repl:
      0000B8 A6 0A            [ 1]  253 	ld a,#NL
      0000BA CD 00 E7         [ 4]  254 	call uart_tx
      0000BD A6 3E            [ 1]  255 	ld a,#'>
      0000BF CD 00 E7         [ 4]  256 	call uart_tx
      0000C2 CD 01 37         [ 4]  257 	call readln
      0000C5 72 5D 00 03      [ 1]  258 	tnz count
      0000C9 27 ED            [ 1]  259 	jreq repl
      0000CB 72 5F 00 02      [ 1]  260 	clr in
      0000CF CD 04 46         [ 4]  261 	call eval
      0000D2 20 E4            [ 2]  262 	jra repl
                                    263 	 
                                    264 
                                    265 ;	interrupt NonHandledInterrupt
      0000D4                        266 NonHandledInterrupt:
      0000D4 80               [11]  267 	iret
                                    268 
                                    269 	; TIMER4 interrupt service
                                    270 ;timer4_isr:
                                    271 ;	ldw y,ticks
                                    272 ;	incw y
                                    273 ;	ldw ticks,y
                                    274 ;	ldw y,cntdwn
                                    275 ;	jreq 1$
                                    276 ;	decw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                    277 ;	ldw cntdwn,y
                                    278 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    279 ;	iret
                                    280 
                                    281 	; uart3 receive interrupt service
      0000D5                        282 uart_rx_isr:
      0000D5 88               [ 1]  283     push a
      0000D6 C6 52 40         [ 1]  284     ld a, UART3_SR
      0000D9 6B 01            [ 1]  285     ld (1,sp),a
      0000DB C6 52 41         [ 1]  286 	ld a, UART3_DR
      0000DE 0D 01            [ 1]  287 	tnz (1,sp)
      0000E0 27 03            [ 1]  288 	jreq 1$
      0000E2 C7 00 00         [ 1]  289     ld rx_char,a
      0000E5 84               [ 1]  290 1$: pop a
      0000E6 80               [11]  291 	iret
                                    292 	
                                    293 
                                    294 	; transmit character in a via UART3
                                    295 	; character to transmit on (3,sp)
      0000E7                        296 uart_tx:
      0000E7 72 5D 52 40      [ 1]  297 	tnz UART3_SR
      0000EB 2A FA            [ 1]  298 	jrpl uart_tx
      0000ED C7 52 41         [ 1]  299 	ld UART3_DR,a
      0000F0 81               [ 4]  300     ret
                                    301 
                                    302 	; send string via UART2
                                    303 	; y is pointer to str
      0000F1                        304 uart_print:
      0000F1 90 F6            [ 1]  305 	ld a,(y)
      0000F3 27 07            [ 1]  306 	jreq 1$
      0000F5 CD 00 E7         [ 4]  307 	call uart_tx
      0000F8 90 5C            [ 2]  308 	incw y
      0000FA 20 F5            [ 2]  309 	jra uart_print
      0000FC 81               [ 4]  310 1$: ret
                                    311 
                                    312 	 ; check if char available
      0000FD                        313 uart_qchar:
      0000FD A6 FF            [ 1]  314 	ld a,#255
      0000FF C1 00 00         [ 1]  315 	cp a,rx_char
      000102 81               [ 4]  316     ret
                                    317 
      000103                        318 ungetchar: ; return char ina A to queue
      000103                        319 	_no_interrupts
      000103 9B               [ 1]    1 		sim
      000104 C7 00 00         [ 1]  320 	ld rx_char,a
      000107                        321     _interrupts
      000107 9A               [ 1]    1 		 rim
      000108 81               [ 4]  322     ret
                                    323     
                                    324 	 ; return character from uart2
      000109                        325 uart_getchar:
      000109 A6 FF            [ 1]  326 	ld a,#255
      00010B C1 00 00         [ 1]  327 	cp a,rx_char
      00010E 27 F9            [ 1]  328 	jreq uart_getchar
      000110                        329 	_no_interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000110 9B               [ 1]    1 		sim
      000111 C6 00 00         [ 1]  330 	ld a, rx_char
      000114 88               [ 1]  331 	push a
      000115 A6 FF            [ 1]  332 	ld a,#-1
      000117 C7 00 00         [ 1]  333 	ld rx_char,a
      00011A                        334 	_interrupts
      00011A 9A               [ 1]    1 		 rim
      00011B 84               [ 1]  335 	pop a
      00011C 81               [ 4]  336 	ret
                                    337 
                                    338 	; delete n character from input line
      00011D                        339 uart_delete:
      00011D 88               [ 1]  340 	push a ; n 
      00011E                        341 del_loop:
      00011E 0D 01            [ 1]  342 	tnz (1,sp)
      000120 27 13            [ 1]  343 	jreq 1$
      000122 A6 08            [ 1]  344 	ld a,#BSP
      000124 CD 00 E7         [ 4]  345 	call uart_tx
      000127 A6 20            [ 1]  346     ld a,#SPACE
      000129 CD 00 E7         [ 4]  347     call uart_tx
      00012C A6 08            [ 1]  348     ld a,#BSP
      00012E CD 00 E7         [ 4]  349     call uart_tx
      000131 0A 01            [ 1]  350     dec (1,sp)
      000133 20 E9            [ 2]  351     jra del_loop
      000135 84               [ 1]  352 1$: pop a
      000136 81               [ 4]  353 	ret 
                                    354 
                                    355 
                                    356     ;lecture d'une ligne de texte
                                    357     ; dans le tib
      000137                        358 readln:
                                    359 	; local variables
                           000001   360 	LEN = 1  ; accepted line length
                           000002   361 	RXCHAR = 2 ; last char received
      000137 4B 00            [ 1]  362 	push #0  ; RXCHAR 
      000139 4B 00            [ 1]  363 	push #0  ; LEN
      00013B 90 AE 00 08      [ 2]  364  	ldw y,#tib ; input buffer
      00013F                        365 readln_loop:
      00013F CD 01 09         [ 4]  366 	call uart_getchar
      000142 6B 02            [ 1]  367 	ld (RXCHAR,sp),a
      000144 A1 03            [ 1]  368 	cp a,#CTRL_C
      000146 26 03            [ 1]  369 	jrne 2$
      000148 CC 01 C3         [ 2]  370 	jp cancel
      00014B A1 12            [ 1]  371 2$:	cp a,#CTRL_R
      00014D 27 50            [ 1]  372 	jreq reprint
      00014F A1 0D            [ 1]  373 	cp a,#CR
      000151 26 03            [ 1]  374 	jrne 1$
      000153 CC 01 CD         [ 2]  375 	jp readln_quit
      000156 A1 0A            [ 1]  376 1$:	cp a,#NL
      000158 27 73            [ 1]  377 	jreq readln_quit
      00015A A1 08            [ 1]  378 	cp a,#BSP
      00015C 27 1B            [ 1]  379 	jreq del_back
      00015E A1 04            [ 1]  380 	cp a,#CTRL_D
      000160 27 06            [ 1]  381 	jreq del_line
      000162 A1 20            [ 1]  382 	cp a,#SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000164 2A 24            [ 1]  383 	jrpl accept_char
      000166 20 D7            [ 2]  384 	jra readln_loop
      000168                        385 del_line:
      000168 7B 01            [ 1]  386 	ld a,(LEN,sp)
      00016A CD 01 1D         [ 4]  387 	call uart_delete
      00016D 90 AE 00 08      [ 2]  388 	ldw y,#tib
      000171 72 5F 00 03      [ 1]  389 	clr count
      000175 0F 01            [ 1]  390 	clr (LEN,sp)
      000177 20 C6            [ 2]  391 	jra readln_loop
      000179                        392 del_back:
      000179 0D 01            [ 1]  393     tnz (LEN,sp)
      00017B 27 C2            [ 1]  394     jreq readln_loop
      00017D 0A 01            [ 1]  395     dec (LEN,sp)
      00017F 90 5A            [ 2]  396     decw y
      000181 90 7F            [ 1]  397     clr  (y)
      000183 A6 01            [ 1]  398     ld a,#1
      000185 CD 01 1D         [ 4]  399     call uart_delete
      000188 20 B5            [ 2]  400     jra readln_loop	
      00018A                        401 accept_char:
      00018A A6 4F            [ 1]  402 	ld a,#TIB_SIZE-1
      00018C 11 01            [ 1]  403 	cp a, (1,sp)
      00018E 27 AF            [ 1]  404 	jreq readln_loop
      000190 7B 02            [ 1]  405 	ld a,(RXCHAR,sp)
      000192 90 F7            [ 1]  406 	ld (y),a
      000194 0C 01            [ 1]  407 	inc (LEN,sp)
      000196 90 5C            [ 2]  408 	incw y
      000198 90 7F            [ 1]  409 	clr (y)
      00019A CD 00 E7         [ 4]  410 	call uart_tx
      00019D 20 A0            [ 2]  411 	jra readln_loop
      00019F                        412 reprint:
      00019F 0D 01            [ 1]  413 	tnz (LEN,sp)
      0001A1 26 9C            [ 1]  414 	jrne readln_loop
      0001A3 72 5D 00 03      [ 1]  415 	tnz count
      0001A7 27 96            [ 1]  416 	jreq readln_loop
      0001A9 90 AE 00 08      [ 2]  417 	ldw y,#tib
      0001AD 90 89            [ 2]  418 	pushw y
      0001AF CD 00 F1         [ 4]  419 	call uart_print
      0001B2 90 85            [ 2]  420 	popw y
      0001B4 C6 00 03         [ 1]  421 	ld a,count
      0001B7 6B 01            [ 1]  422 	ld (LEN,sp),a
      0001B9 90 9F            [ 1]  423 	ld a,yl
      0001BB CB 00 03         [ 1]  424 	add a,count
      0001BE 90 97            [ 1]  425 	ld yl,a
      0001C0 CC 01 3F         [ 2]  426 	jp readln_loop
      0001C3                        427 cancel:
      0001C3 72 5F 00 08      [ 1]  428 	clr tib
      0001C7 72 5F 00 03      [ 1]  429 	clr count
      0001CB 20 05            [ 2]  430 	jra readln_quit2
      0001CD                        431 readln_quit:
      0001CD 7B 01            [ 1]  432 	ld a,(LEN,sp)
      0001CF C7 00 03         [ 1]  433 	ld count,a
      0001D2                        434 readln_quit2:
      0001D2 5B 02            [ 2]  435 	addw sp,#2
      0001D4 A6 0A            [ 1]  436 	ld a,#NL
      0001D6 CD 00 E7         [ 4]  437 	call uart_tx
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0001D9 81               [ 4]  438 	ret
                                    439 	
                                    440 	; skip character c in tib starting from 'in'
                                    441 	; input: 
                                    442 	;    a character to skip
                                    443 	; output:  'in' ajusted to new position
      0001DA                        444 skip:
                           000001   445 	C = 1 ; local var
      0001DA 88               [ 1]  446 	push a
      0001DB 90 AE 00 08      [ 2]  447 	ldw y,#tib
      0001DF 91 D6 01         [ 4]  448 1$:	ld a,([in.w],y)
      0001E2 27 0A            [ 1]  449 	jreq 2$
      0001E4 11 01            [ 1]  450 	cp a,(C,sp)
      0001E6 26 06            [ 1]  451 	jrne 2$
      0001E8 72 5C 00 02      [ 1]  452 	inc in
      0001EC 20 F1            [ 2]  453 	jra 1$
      0001EE 84               [ 1]  454 2$: pop a
      0001EF 81               [ 4]  455 	ret
                                    456 	
                                    457 	; scan tib for charater 'c' starting from 'in'
                                    458 	; input:
                                    459 	;    a character to skip
      0001F0                        460 scan: 
                           000001   461 	C = 1 ; local var
      0001F0 88               [ 1]  462 	push a
      0001F1 90 AE 00 08      [ 2]  463 	ldw y,#tib
      0001F5 91 D6 01         [ 4]  464 1$:	ld a,([in.w],y)
      0001F8 27 0A            [ 1]  465 	jreq 2$
      0001FA 11 01            [ 1]  466 	cp a,(C,sp)
      0001FC 27 06            [ 1]  467 	jreq 2$
      0001FE 72 5C 00 02      [ 1]  468 	inc in
      000202 20 F1            [ 2]  469 	jra 1$
      000204 84               [ 1]  470 2$: pop a
      000205 81               [ 4]  471 	ret
                                    472 
                                    473 	; scan tib for next word
                                    474 	; move word in 'pad'
      000206                        475 next_word:	
                           000001   476 	FIRST = 1
                           000002   477 	XSAVE = 2
      000206 52 03            [ 2]  478 	sub sp,#3
      000208 1F 02            [ 2]  479 	ldw (XSAVE,sp),x ; save x
      00020A A6 20            [ 1]  480 	ld a,#SPACE
      00020C CD 01 DA         [ 4]  481 	call skip
      00020F C6 00 02         [ 1]  482 	ld a,in
      000212 6B 01            [ 1]  483 	ld (FIRST,sp),a
      000214 A6 20            [ 1]  484 	ld a,#SPACE
      000216 CD 01 F0         [ 4]  485 	call scan
                                    486 	; copy word in pad
      000219 AE 00 08         [ 2]  487 	ldw x,#tib  ; source
      00021C 72 5F 00 04      [ 1]  488 	clr idx_x
      000220 7B 01            [ 1]  489 	ld a,(FIRST,sp)
      000222 C7 00 05         [ 1]  490 	ld idx_x+1,a
      000225 90 AE 00 58      [ 2]  491 	ldw y,#pad
      000229 72 5F 00 06      [ 1]  492 	clr idx_y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00022D 72 5F 00 07      [ 1]  493 	clr idx_y+1
      000231 C6 00 02         [ 1]  494 	ld a,in
      000234 10 01            [ 1]  495 	sub a,(FIRST,sp)
      000236 CD 02 3E         [ 4]  496 	call strcpyn
      000239 1E 02            [ 2]  497 	ldw x,(XSAVE,sp)
      00023B 5B 03            [ 2]  498 	addw sp,#3
      00023D 81               [ 4]  499 	ret
                                    500 	
                                    501 	
                                    502 	; copy n character from (x) to (y)
                                    503 	; input:
                                    504 	;   	x   source pointer
                                    505 	;       idx_x index in (x)
                                    506 	;       y   destination pointer
                                    507 	;       idx_y  index in (y)
                                    508 	;       a   number of character to copy
      00023E                        509 strcpyn:
                           000001   510 	N = 1 ; local variable count
      00023E 88               [ 1]  511 	push a
      00023F 7B 01            [ 1]  512 1$: ld a,(N,sp)		
      000241 27 13            [ 1]  513 	jreq 2$ 
      000243 72 D6 00 04      [ 4]  514 	ld a,([idx_x],x)
      000247 91 D7 06         [ 4]  515 	ld ([idx_y],y),a
      00024A 72 5C 00 05      [ 1]  516 	inc idx_x+1
      00024E 72 5C 00 07      [ 1]  517 	inc idx_y+1
      000252 0A 01            [ 1]  518 	dec (N,sp)
      000254 20 E9            [ 2]  519 	jra 1$
      000256 91 6F 06         [ 4]  520 2$: clr ([idx_y],y)
      000259 84               [ 1]  521 	pop a
      00025A 81               [ 4]  522 	ret
                                    523 		
                                    524 	; convert integer to string
                                    525 	; input:
                                    526 	;   a  base
                                    527 	;	y  integer to convert
                                    528 	; output:
                                    529 	;   y  pointer to string
      00025B                        530 itoa:
                           000001   531 	SIGN=1
                           000002   532 	BASE=2
                           000002   533 	LOCAL_SIZE=2
      00025B 89               [ 2]  534 	pushw x
      00025C 88               [ 1]  535 	push a  ; base
      00025D 4B 00            [ 1]  536 	push #0 ; sign
      00025F A1 0A            [ 1]  537 	cp a,#10
      000261 26 0D            [ 1]  538 	jrne 1$
      000263 90 CF 00 A8      [ 2]  539 	ldw acc16,y
      000267 72 0F 00 A8 04   [ 2]  540 	btjf acc16,#7,1$
      00026C 03 01            [ 1]  541 	cpl (SIGN,sp)
      00026E 90 50            [ 2]  542 	negw y
                                    543 	; initialize string pointer 
      000270 AE 00 4F         [ 2]  544 1$:	ldw x,#PAD_SIZE-1
      000273 CF 00 A8         [ 2]  545 	ldw acc16,x
      000276 AE 00 58         [ 2]  546 	ldw x,#pad
      000279 72 BB 00 A8      [ 2]  547 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00027D 7F               [ 1]  548 	clr (x)
      00027E 5A               [ 2]  549 	decw x
      00027F A6 20            [ 1]  550 	ld a,#SPACE
      000281 F7               [ 1]  551 	ld (x),a
      000282 72 5F 00 A8      [ 1]  552 	clr acc16
      000286 72 5F 00 A9      [ 1]  553 	clr acc16+1
      00028A                        554 itoa_loop:
      00028A 7B 02            [ 1]  555     ld a,(BASE,sp)
      00028C 90 62            [ 2]  556     div y,a
      00028E AB 30            [ 1]  557     add a,#'0
      000290 A1 3A            [ 1]  558     cp a,#'9+1
      000292 2B 02            [ 1]  559     jrmi 2$
      000294 AB 07            [ 1]  560     add a,#7 
      000296 5A               [ 2]  561 2$: decw x
      000297 F7               [ 1]  562     ld (x),a
      000298 90 C3 00 A8      [ 2]  563     cpw y,acc16
      00029C 26 EC            [ 1]  564     jrne itoa_loop
                                    565 	; copy string pointer in y
      00029E CF 00 A8         [ 2]  566     ldw acc16,x
      0002A1 90 CE 00 A8      [ 2]  567     ldw y,acc16
      0002A5 7B 02            [ 1]  568 	ld a,(BASE,sp)
      0002A7 A1 10            [ 1]  569 	cp a,#16
      0002A9 26 1B            [ 1]  570 	jrne 9$
      0002AB CD 03 82         [ 4]  571     call strlen
      0002AE A1 03            [ 1]  572     cp a,#3
      0002B0 27 0C            [ 1]  573     jreq 8$
      0002B2 25 04            [ 1]  574     jrult 7$
      0002B4 A1 05            [ 1]  575 	cp a,#5
      0002B6 27 06            [ 1]  576 	jreq 8$
      0002B8 90 5A            [ 2]  577 7$: decw y
      0002BA A6 30            [ 1]  578     ld a,#'0
      0002BC 90 F7            [ 1]  579     ld (y),a
      0002BE 90 5A            [ 2]  580 8$:	decw y
      0002C0 A6 24            [ 1]  581 	ld a,#'$
      0002C2 90 F7            [ 1]  582 	ld (y),a
      0002C4 20 0A            [ 2]  583 	jra 10$
      0002C6 7B 01            [ 1]  584 9$: ld a,(SIGN,sp)
      0002C8 27 06            [ 1]  585     jreq 10$
      0002CA 90 5A            [ 2]  586     decw y
      0002CC A6 2D            [ 1]  587     ld a,#'-
      0002CE 90 F7            [ 1]  588     ld (y),a
      0002D0                        589 10$:
      0002D0 5B 02            [ 2]  590 	addw sp,#LOCAL_SIZE
      0002D2 85               [ 2]  591 	popw x
      0002D3 81               [ 4]  592 	ret
                                    593 
                                    594 	;multiply Y=A*Y	
                                    595 	; input:
                                    596 	;    Y uint16_t
                                    597 	;    A uint8_t
                                    598 	; output:
                                    599 	;   Y uint16_t product modulo 65535
      0002D4                        600 mul16x8:
      0002D4 89               [ 2]  601 	pushw x ; save x
      0002D5 CE 00 A8         [ 2]  602 	ldw x, acc16 ; save it
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0002D8 89               [ 2]  603 	pushw x
      0002D9 93               [ 1]  604 	ldw x,y
      0002DA 42               [ 4]  605 	mul x,a ; a*yl
      0002DB CF 00 A8         [ 2]  606 	ldw acc16,x
      0002DE 90 5E            [ 1]  607 	swapw y
      0002E0 90 42            [ 4]  608 	mul y,a ; a*yh
                                    609 	; y*=256
      0002E2 90 5E            [ 1]  610 	swapw y
      0002E4 4F               [ 1]  611 	clr a
      0002E5 90 97            [ 1]  612 	ld yl,a
      0002E7 72 B9 00 A8      [ 2]  613 	addw y,acc16
      0002EB 85               [ 2]  614 	popw x ; restore acc16
      0002EC CF 00 A8         [ 2]  615 	ldw acc16,x
      0002EF 85               [ 2]  616 	popw x ; restore x
      0002F0 81               [ 4]  617 	ret
                                    618 
                                    619 	; check if character in {'0'..'9'}
                                    620 	; input:
                                    621 	;    a  character to test
                                    622 	; output:
                                    623 	;    a  0|1
      0002F1                        624 is_digit:
      0002F1 A1 30            [ 1]  625 	cp a,#'0
      0002F3 2A 02            [ 1]  626 	jrpl 1$
      0002F5 4F               [ 1]  627 0$:	clr a
      0002F6 81               [ 4]  628 	ret
      0002F7 A1 39            [ 1]  629 1$: cp a,#'9
      0002F9 22 FA            [ 1]  630     jrugt 0$
      0002FB A6 01            [ 1]  631     ld a,#1
      0002FD 81               [ 4]  632     ret
                                    633 	
                                    634 	; check if character in {'0'..'9','A'..'F'}
                                    635 	; input:
                                    636 	;   a  character to test
                                    637 	; output:
                                    638 	;   a   0|1 
      0002FE                        639 is_hex:
      0002FE 88               [ 1]  640 	push a
      0002FF CD 02 F1         [ 4]  641 	call is_digit
      000302 A1 01            [ 1]  642 	cp a,#1
      000304 26 03            [ 1]  643 	jrne 1$
      000306 5B 01            [ 2]  644 	addw sp,#1
      000308 81               [ 4]  645 	ret
      000309 84               [ 1]  646 1$:	pop a
      00030A A1 61            [ 1]  647 	cp a,#'a
      00030C 2B 02            [ 1]  648 	jrmi 2$
      00030E A0 20            [ 1]  649 	sub a,#32
      000310 A1 41            [ 1]  650 2$: cp a,#'A
      000312 2A 02            [ 1]  651     jrpl 3$
      000314 4F               [ 1]  652 0$: clr a
      000315 81               [ 4]  653     ret
      000316 A1 46            [ 1]  654 3$: cp a,#'F
      000318 22 FA            [ 1]  655     jrugt 0$
      00031A A6 01            [ 1]  656     ld a,#1
      00031C 81               [ 4]  657     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    658             	
                                    659 	; convert alpha to uppercase
                                    660 	; input:
                                    661 	;    a  character to convert
                                    662 	; output:
                                    663 	;    a  uppercase character
      00031D                        664 a_upper:
      00031D A1 61            [ 1]  665 	cp a,#'a
      00031F 2A 01            [ 1]  666 	jrpl 1$
      000321 81               [ 4]  667 0$:	ret
      000322 A1 7A            [ 1]  668 1$: cp a,#'z	
      000324 22 FB            [ 1]  669 	jrugt 0$
      000326 A0 20            [ 1]  670 	sub a,#32
      000328 81               [ 4]  671 	ret
                                    672 	
                                    673 	; convert pad content in integer
                                    674 	; input:
                                    675 	;    pad
                                    676 	; output:
                                    677 	;    y
      000329                        678 atoi:
                                    679 	; local variables
                           000001   680 	SIGN=1 ; 1 byte, 
                           000002   681 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   682 	TEMP=3 ; 1 byte, temporary storage
                           000003   683 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      000329 89               [ 2]  684 	pushw x ;save x
      00032A 52 03            [ 2]  685 	sub sp,#LOCAL_SIZE
      00032C 0F 01            [ 1]  686 	clr (SIGN,sp)
      00032E A6 0A            [ 1]  687 	ld a,#10
      000330 6B 02            [ 1]  688 	ld (BASE,sp),a ; default base decimal
      000332 AE 00 58         [ 2]  689 	ldw x,#pad ; pointer to string to convert
      000335 90 5F            [ 1]  690 	clrw y    ; convertion result
      000337 F6               [ 1]  691 	ld a,(x)
      000338 27 3E            [ 1]  692 	jreq 9$
      00033A A1 2D            [ 1]  693 	cp a,#'-
      00033C 26 04            [ 1]  694 	jrne 1$
      00033E 03 01            [ 1]  695 	cpl (SIGN,sp)
      000340 20 08            [ 2]  696 	jra 2$
      000342 A1 24            [ 1]  697 1$: cp a,#'$
      000344 26 06            [ 1]  698 	jrne 3$
      000346 A6 10            [ 1]  699 	ld a,#16
      000348 6B 02            [ 1]  700 	ld (BASE,sp),a
      00034A 5C               [ 2]  701 2$:	incw x
      00034B F6               [ 1]  702 	ld a,(x)
      00034C                        703 3$:	
      00034C A1 61            [ 1]  704 	cp a,#'a
      00034E 2B 02            [ 1]  705 	jrmi 4$
      000350 A0 20            [ 1]  706 	sub a,#32
      000352 A1 30            [ 1]  707 4$:	cp a,#'0
      000354 2B 22            [ 1]  708 	jrmi 9$
      000356 A0 30            [ 1]  709 	sub a,#'0
      000358 A1 0A            [ 1]  710 	cp a,#10
      00035A 2B 06            [ 1]  711 	jrmi 5$
      00035C A0 07            [ 1]  712 	sub a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00035E 11 02            [ 1]  713 	cp a,(BASE,sp)
      000360 2A 16            [ 1]  714 	jrpl 9$
      000362 6B 03            [ 1]  715 5$:	ld (TEMP,sp),a
      000364 7B 02            [ 1]  716 	ld a,(BASE,sp)
      000366 CD 02 D4         [ 4]  717 	call mul16x8
      000369 7B 03            [ 1]  718 	ld a,(TEMP,sp)
      00036B C7 00 A9         [ 1]  719 	ld acc16+1,a
      00036E 72 5F 00 A8      [ 1]  720 	clr acc16
      000372 72 B9 00 A8      [ 2]  721 	addw y,acc16
      000376 20 D2            [ 2]  722 	jra 2$
      000378 0D 01            [ 1]  723 9$:	tnz (SIGN,sp)
      00037A 27 02            [ 1]  724     jreq 11$
      00037C 90 50            [ 2]  725     negw y
      00037E 5B 03            [ 2]  726 11$: addw sp,#LOCAL_SIZE
      000380 85               [ 2]  727 	popw x ; restore x
      000381 81               [ 4]  728 	ret
                                    729 
                                    730 	;strlen  return ASCIIZ string length
                                    731 	; input:
                                    732 	;	y  pointer to string
                                    733 	; output:
                                    734 	;	a   length  < 256
      000382                        735 strlen:
                           000001   736 	LEN=1
      000382 90 89            [ 2]  737     pushw y
      000384 4B 00            [ 1]  738     push #0
      000386 90 F6            [ 1]  739 0$: ld a,(y)
      000388 27 06            [ 1]  740     jreq 1$
      00038A 0C 01            [ 1]  741     inc (LEN,sp)
      00038C 90 5C            [ 2]  742     incw y
      00038E 20 F6            [ 2]  743     jra 0$
      000390 84               [ 1]  744 1$: pop a
      000391 90 85            [ 2]  745     popw y
      000393 81               [ 4]  746     ret
                                    747 	
                                    748 	; peek addr, print byte at this address 
                                    749 	; input:
                                    750 	;	 y   address to peek
                                    751 	;    a   numeric base for convertion
                                    752 	; output:
                                    753 	;    print byte value at this address
      000394                        754 peek:
      000394 90 89            [ 2]  755 	pushw y
      000396 88               [ 1]  756     push a
      000397 90 F6            [ 1]  757     ld a,(y)
      000399 90 97            [ 1]  758     ld yl,a
      00039B 4F               [ 1]  759     clr a
      00039C 90 95            [ 1]  760     ld yh,a
      00039E 84               [ 1]  761     pop a
      00039F CD 02 5B         [ 4]  762     call itoa
      0003A2 CD 00 F1         [ 4]  763     call uart_print
      0003A5 90 85            [ 2]  764     popw y
      0003A7 81               [ 4]  765     ret	
                                    766 	
                                    767 	; get a number from command line next argument
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    768 	;  input:
                                    769 	;	  none
                                    770 	;  output:
                                    771 	;    y   uint16_t 
      0003A8                        772 number:
      0003A8 CD 02 06         [ 4]  773 	call next_word
      0003AB CD 03 29         [ 4]  774 	call atoi
      0003AE 81               [ 4]  775 	ret
                                    776 	
                                    777 	; write a byte in memory
                                    778 	; input:
                                    779 	;    a  byte to write
                                    780 	;    y  address 
                                    781 	; output:
                                    782 	;    none
      0003AF                        783 write_byte:
      0003AF 90 A3 80 00      [ 2]  784     cpw y,#FLASH_BASE
      0003B3 2A 2E            [ 1]  785     jrpl write_flash
      0003B5 90 A3 40 00      [ 2]  786     cpw y,#EEPROM_BASE
      0003B9 2B 06            [ 1]  787 	jrmi 1$
      0003BB 90 A3 48 80      [ 2]  788 	cpw y,#OPTION_END+1  
      0003BF 2B 44            [ 1]  789     jrmi write_eeprom
      0003C1 90 C3 00 AA      [ 2]  790 1$: cpw y,ram_free_base
      0003C5 2A 01            [ 1]  791     jrpl 2$
      0003C7 81               [ 4]  792     ret
      0003C8 90 A3 17 FF      [ 2]  793 2$: cpw y,#STACK_BASE
      0003CC 2B 03            [ 1]  794     jrmi 3$
      0003CE CC 03 D4         [ 2]  795     jp write_sfr    
      0003D1 90 F7            [ 1]  796 3$: ld (y),a
      0003D3 81               [ 4]  797 	ret
                                    798 	; write SFR
      0003D4                        799 write_sfr:
      0003D4 90 A3 50 00      [ 2]  800 	cpw y,#SFR_BASE
      0003D8 2B 08            [ 1]  801 	jrmi 2$
      0003DA 90 A3 58 00      [ 2]  802 	cpw y,#SFR_END+1
      0003DE 2A 02            [ 1]  803 	jrpl 2$
      0003E0 90 F7            [ 1]  804 	ld (y),a
      0003E2 81               [ 4]  805 2$:	ret
                                    806 	; write program memory
      0003E3                        807 write_flash:
      0003E3 90 C3 00 AC      [ 2]  808 	cpw y,flash_free_base
      0003E7 2A 01            [ 1]  809 	jrpl 0$
      0003E9 81               [ 4]  810 	ret
      0003EA 35 56 50 62      [ 1]  811 0$:	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0003EE 35 AE 50 62      [ 1]  812 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0003F2 72 03 50 5F FB   [ 2]  813 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0003F7                        814 1$:	_no_interrupts
      0003F7 9B               [ 1]    1 		sim
      0003F8 90 F7            [ 1]  815 	ld (y),a
      0003FA 72 05 50 5F FB   [ 2]  816 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0003FF                        817     _interrupts
      0003FF 9A               [ 1]    1 		 rim
      000400 72 13 50 5F      [ 1]  818     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000404 81               [ 4]  819     ret
                                    820     ; write eeprom and option
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000405                        821 write_eeprom:
                           000002   822 	OPT=2
                           000001   823 	BYTE=1
                           000002   824 	LOCAL_SIZE=2
      000405 4B 00            [ 1]  825 	push #0
      000407 88               [ 1]  826 	push a
                                    827 	; check for data eeprom or option eeprom
      000408 90 A3 48 00      [ 2]  828 	cpw y,#OPTION_BASE
      00040C 2B 08            [ 1]  829 	jrmi 1$
      00040E 90 A3 48 80      [ 2]  830 	cpw y,#OPTION_END+1
      000412 2A 02            [ 1]  831 	jrpl 1$
      000414 03 02            [ 1]  832 	cpl (OPT,sp)
      000416 35 AE 50 64      [ 1]  833 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      00041A 35 56 50 64      [ 1]  834     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      00041E 7B 02            [ 1]  835     ld a,(OPT,sp)
      000420 27 08            [ 1]  836     jreq 2$
      000422 72 1E 50 5B      [ 1]  837     bset FLASH_CR2,#FLASH_CR2_OPT
      000426 72 1F 50 5C      [ 1]  838     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00042A 72 07 50 5F FB   [ 2]  839 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00042F 7B 01            [ 1]  840     ld a,(BYTE,sp)
      000431 90 F7            [ 1]  841     ld (y),a
      000433 90 5C            [ 2]  842     incw y
      000435 7B 02            [ 1]  843     ld a,(OPT,sp)
      000437 27 05            [ 1]  844     jreq 3$
      000439 7B 01            [ 1]  845     ld a,(BYTE,sp)
      00043B 43               [ 1]  846     cpl a
      00043C 90 F7            [ 1]  847     ld (y),a
      00043E 72 05 50 5F FB   [ 2]  848 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000443 5B 02            [ 2]  849 	addw sp,#LOCAL_SIZE
      000445 81               [ 4]  850     ret
                                    851         
                                    852 		  
                                    853 	; evaluate command string in tib
                                    854 	; list of commands
                                    855 	;   @  addr display content at address
                                    856 	;   !  addr byte [byte ]* store bytes at address
                                    857 	;   ?  diplay command help
                                    858 	;   b  n    convert n in the other base
                                    859 	;	c  addr bitmask  clear  bits at address
                                    860 	;   h  addr hex dump memory starting at address
                                    861 	;   m  src dest count,  move memory block
                                    862 	;   s  addr bitmask  set a bits at address
                                    863 	;   t  addr bitmask  toggle bits at address
                                    864 	;   x  addr execute  code at address  
      000446                        865 eval:
      000446 C6 00 02         [ 1]  866 	ld a, in
      000449 C1 00 03         [ 1]  867 	cp a, count
      00044C 26 01            [ 1]  868 	jrne 0$
      00044E 81               [ 4]  869 	ret ; nothing to evaluate
      00044F CD 02 06         [ 4]  870 0$:	call next_word
      000452 90 AE 00 58      [ 2]  871 	ldw y,#pad
      000456 90 F6            [ 1]  872     ld a,(y)	
      000458 A1 40            [ 1]  873 	cp a,#'@
      00045A 26 03            [ 1]  874 	jrne 1$
      00045C CC 04 A9         [ 2]  875 	jp fetch
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00045F A1 21            [ 1]  876 1$:	cp a,#'!
      000461 26 03            [ 1]  877 	jrne 10$
      000463 CC 04 CD         [ 2]  878 	jp store
      000466                        879 10$:
      000466 A1 3F            [ 1]  880 	cp a,#'?
      000468 26 03            [ 1]  881 	jrne 15$
      00046A CC 04 EF         [ 2]  882 	jp help
      00046D                        883 15$: 
      00046D A1 62            [ 1]  884 	cp a,#'b
      00046F 26 03            [ 1]  885     jrne 2$
      000471 CC 04 F7         [ 2]  886     jp base_convert	
      000474 A1 63            [ 1]  887 2$:	cp a,#'c
      000476 26 03            [ 1]  888 	jrne 3$
      000478 CC 05 0E         [ 2]  889 	jp clear_bits
      00047B A1 68            [ 1]  890 3$:	cp a,#'h
      00047D 26 03            [ 1]  891 	jrne 4$
      00047F CC 05 20         [ 2]  892 	jp hexdump
      000482 A1 6D            [ 1]  893 4$:	cp a,#'m
      000484 26 03            [ 1]  894 	jrne 5$
      000486 CC 05 7B         [ 2]  895 	jp move_memory
      000489 A1 73            [ 1]  896 5$:	cp a,#'s
      00048B 26 03            [ 1]  897 	jrne 6$
      00048D CC 05 A8         [ 2]  898 	jp set_bits
      000490 A1 74            [ 1]  899 6$:	cp a,#'t
      000492 26 03            [ 1]  900 	jrne 7$
      000494 CC 05 B9         [ 2]  901 	jp toggle_bits
      000497 A1 78            [ 1]  902 7$:	cp a,#'x
      000499 26 03            [ 1]  903 	jrne 8$
      00049B CC 05 CA         [ 2]  904 	jp execute
      00049E CD 00 F1         [ 4]  905 8$:	call uart_print
      0004A1 90 AE 06 9A      [ 2]  906 	ldw y,#BAD_CMD
      0004A5 CD 00 F1         [ 4]  907 	call uart_print
      0004A8 81               [ 4]  908 	ret
                                    909 	
                                    910 	; fetch a byte and display it,  @  addr
      0004A9                        911 fetch:
      0004A9 CD 03 A8         [ 4]  912 	call number 
      0004AC 90 89            [ 2]  913 	pushw y
      0004AE 90 AE 00 58      [ 2]  914 	ldw y,#pad
      0004B2 CD 00 F1         [ 4]  915 	call uart_print
      0004B5 A6 3D            [ 1]  916 	ld a,#'=
      0004B7 CD 00 E7         [ 4]  917 	call uart_tx	
      0004BA 90 85            [ 2]  918 	popw y
      0004BC C6 00 58         [ 1]  919 	ld a,pad
      0004BF A1 24            [ 1]  920 	cp a,#'$
      0004C1 27 04            [ 1]  921 	jreq 1$
      0004C3 A6 0A            [ 1]  922 	ld a,#10
      0004C5 20 02            [ 2]  923 	jra 2$
      0004C7 A6 10            [ 1]  924 1$: ld a,#16	
      0004C9 CD 03 94         [ 4]  925 2$:	call peek
      0004CC 81               [ 4]  926 	ret
                                    927 	
                                    928 	; store bytes,   !  addr byte [byte ]*
      0004CD                        929 store:
                           000001   930 	MADDR=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0004CD CD 03 A8         [ 4]  931 	call number
      0004D0 90 89            [ 2]  932 	pushw y
      0004D2 CD 03 A8         [ 4]  933 1$:	call number
      0004D5 90 9F            [ 1]  934 	ld a,yl
      0004D7 16 01            [ 2]  935 	ldw y,(MADDR,sp)
      0004D9 CD 03 AF         [ 4]  936 	call write_byte
      0004DC C6 00 02         [ 1]  937 	ld a,in
      0004DF C1 00 03         [ 1]  938 	cp a,count
      0004E2 27 08            [ 1]  939 	jreq 2$
      0004E4 16 01            [ 2]  940 	ldw y,(MADDR,sp)
      0004E6 90 5C            [ 2]  941 	incw y
      0004E8 17 01            [ 2]  942 	ldw (MADDR,sp),y
      0004EA 20 E6            [ 2]  943 	jra 1$
      0004EC 90 85            [ 2]  944 2$:	popw y
      0004EE 81               [ 4]  945 	ret
                                    946 	; ? , display command information
      0004EF                        947 help:
      0004EF 90 AE 06 AD      [ 2]  948 	ldw y, #HELP
      0004F3 CD 00 F1         [ 4]  949 	call uart_print
      0004F6 81               [ 4]  950 	ret
                                    951 	; convert from one numeric base to the other
                                    952 	;  b n|$n
      0004F7                        953 base_convert:
      0004F7 CD 03 A8         [ 4]  954     call number
      0004FA C6 00 58         [ 1]  955     ld a,pad
      0004FD A1 24            [ 1]  956     cp a,#'$
      0004FF 26 04            [ 1]  957     jrne 1$
      000501 A6 0A            [ 1]  958     ld a,#10
      000503 20 02            [ 2]  959     jra 2$
      000505 A6 10            [ 1]  960 1$: ld a,#16
      000507 CD 02 5B         [ 4]  961 2$: call itoa
      00050A CD 00 F1         [ 4]  962     call uart_print
      00050D 81               [ 4]  963     ret
                                    964         	
                                    965 	; clear bitmask, c addr mask
      00050E                        966 clear_bits:
      00050E CD 03 A8         [ 4]  967 	call number
      000511 90 89            [ 2]  968 	pushw y
      000513 CD 03 A8         [ 4]  969 	call number
      000516 90 9F            [ 1]  970 	ld a,yl
      000518 43               [ 1]  971 	cpl a
      000519 90 85            [ 2]  972 	popw y
      00051B 90 F4            [ 1]  973 	and a,(y)
      00051D 90 F7            [ 1]  974 	ld (y),a
      00051F 81               [ 4]  975     ret
                                    976     
                                    977     ; hexadecimal dump memory, h addr
                                    978     ; stop after each row, SPACE continue, other stop
      000520                        979 hexdump: 
                           000001   980 	MADDR = 1
                           000003   981 	CNTR = 3 ; loop counter
                           000003   982 	LOCAL_SIZE=3
      000520 52 03            [ 2]  983 	sub sp,#LOCAL_SIZE
      000522 CD 03 A8         [ 4]  984 	call number
      000525 17 01            [ 2]  985     ldw (MADDR,sp),y ; save address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000527                        986 row_init:
      000527 AE 00 58         [ 2]  987 	ldw x,#pad
      00052A A6 10            [ 1]  988 	ld a,#16
      00052C CD 02 5B         [ 4]  989 	call itoa
      00052F CD 00 F1         [ 4]  990 	call uart_print
      000532 A6 20            [ 1]  991 	ld a,#SPACE
      000534 CD 00 E7         [ 4]  992 	call uart_tx
      000537 A6 08            [ 1]  993     ld a,#8
      000539 6B 03            [ 1]  994     ld (CNTR,sp),a
      00053B                        995 row:
      00053B A6 10            [ 1]  996 	ld a,#16
      00053D 16 01            [ 2]  997 	ldw y,(MADDR,sp)
      00053F CD 03 94         [ 4]  998 	call peek
      000542 90 F6            [ 1]  999 	ld a,(y)
      000544 A1 20            [ 1] 1000 	cp a,#SPACE
      000546 2A 02            [ 1] 1001 	jrpl 1$
      000548 A6 20            [ 1] 1002 	ld a,#SPACE
      00054A A1 80            [ 1] 1003 1$:	cp a,#128
      00054C 2B 02            [ 1] 1004     jrmi 2$
      00054E A6 20            [ 1] 1005     ld a,#SPACE
      000550 F7               [ 1] 1006 2$: ld (x),a
      000551 5C               [ 2] 1007 	incw x
      000552 90 5C            [ 2] 1008 	incw y
      000554 17 01            [ 2] 1009 	ldw (MADDR,sp),y
      000556 0A 03            [ 1] 1010 	dec (CNTR,sp)
      000558 26 E1            [ 1] 1011 	jrne row
      00055A A6 20            [ 1] 1012 	ld a,#SPACE
      00055C CD 00 E7         [ 4] 1013 	call uart_tx
      00055F 4F               [ 1] 1014 	clr a
      000560 F7               [ 1] 1015 	ld (x),a
      000561 90 89            [ 2] 1016 	pushw y
      000563 90 AE 00 58      [ 2] 1017 	ldw y,#pad
      000567 CD 00 F1         [ 4] 1018 	call uart_print
      00056A 90 85            [ 2] 1019 	popw y
      00056C A6 0A            [ 1] 1020 	ld a,#NL
      00056E CD 00 E7         [ 4] 1021 	call uart_tx
      000571 CD 01 09         [ 4] 1022 	call uart_getchar
      000574 A1 20            [ 1] 1023 	cp a,#SPACE
      000576 27 AF            [ 1] 1024 	jreq row_init
      000578 5B 03            [ 2] 1025     addw sp,#LOCAL_SIZE
      00057A 81               [ 4] 1026     ret
                                   1027     
                                   1028     ; move memory block, m src dest count
      00057B                       1029 move_memory:
                           000003  1030     SRC=3
                           000001  1031     DEST=1
                           000004  1032     LOCAL_SIZE=4    
      00057B CD 03 A8         [ 4] 1033     call number
      00057E 90 89            [ 2] 1034     pushw y  ; source
      000580 CD 03 A8         [ 4] 1035     call number
      000583 90 89            [ 2] 1036     pushw y  ; destination
      000585 CD 03 A8         [ 4] 1037     call number 
      000588 90 CF 00 A8      [ 2] 1038     ldw acc16,y ; counter
      00058C 1E 03            [ 2] 1039     ldw x,(SRC,sp)  ; source
      00058E                       1040 move_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      00058E 16 01            [ 2] 1041     ldw y,(DEST,sp)  ; destination
      000590 F6               [ 1] 1042     ld a,(x)
      000591 CD 03 AF         [ 4] 1043     call write_byte
      000594 5C               [ 2] 1044     incw x
      000595 90 5C            [ 2] 1045     incw y
      000597 17 01            [ 2] 1046     ldw (DEST,sp),y
      000599 90 CE 00 A8      [ 2] 1047     ldw y,acc16
      00059D 90 5A            [ 2] 1048     decw y
      00059F 90 CF 00 A8      [ 2] 1049     ldw acc16,y
      0005A3 26 E9            [ 1] 1050     jrne move_loop
      0005A5 5B 04            [ 2] 1051     addw sp,#LOCAL_SIZE
      0005A7 81               [ 4] 1052     ret
                                   1053     
                                   1054     ; clear bitmask,  c addr mask
      0005A8                       1055 set_bits:
      0005A8 CD 03 A8         [ 4] 1056 	call number
      0005AB 90 89            [ 2] 1057 	pushw y
      0005AD CD 03 A8         [ 4] 1058 	call number
      0005B0 90 9F            [ 1] 1059 	ld a,yl
      0005B2 90 85            [ 2] 1060 	popw y
      0005B4 90 FA            [ 1] 1061 	or a,(y)
      0005B6 90 F7            [ 1] 1062 	ld (y),a
      0005B8 81               [ 4] 1063     ret
                                   1064     
                                   1065     ; toggle bitmask,  t addr mask
      0005B9                       1066 toggle_bits:
      0005B9 CD 03 A8         [ 4] 1067 	call number
      0005BC 90 89            [ 2] 1068     pushw y
      0005BE CD 03 A8         [ 4] 1069     call number
      0005C1 90 9F            [ 1] 1070     ld a,yl
      0005C3 90 85            [ 2] 1071     popw y
      0005C5 90 F8            [ 1] 1072     xor a,(y)
      0005C7 90 F7            [ 1] 1073     ld (y),a
      0005C9 81               [ 4] 1074     ret
                                   1075     
                                   1076     ; execute binary code,   x addr
      0005CA                       1077 execute:
      0005CA CD 03 A8         [ 4] 1078 	call number
      0005CD 90 FC            [ 2] 1079 	jp (y)
                                   1080 	
                                   1081 
                                   1082 	
                                   1083 ;------------------------
                                   1084 ;  run time CONSTANTS
                                   1085 ;------------------------	
      0005CF 4D 4F 4E 41 20 56 45  1086 VERSION:	.asciz "MONA VERSION 0.1\nstm8s208rb     memory map\n---------------------------\n"
             52 53 49 4F 4E 20 30
             2E 31 0A 73 74 6D 38
             73 32 30 38 72 62 20
             20 20 20 20 6D 65 6D
             6F 72 79 20 6D 61 70
             0A 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



             0A 00
      000617 72 61 6D 20 66 72 65  1087 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      000622 2D 20 24 31 36 46 46  1088 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      00062B 66 72 65 65 20 66 6C  1089 FLASH_FREE_MSG: .asciz "free flash: "
             61 73 68 3A 20 00
      000638 20 2D 20 24 32 37 46  1090 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      000642 65 65 70 72 6F 6D 3A  1091             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      000658 6F 70 74 69 6F 6E 3A  1092             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      00066E 53 46 52 3A 20 24 35  1093             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      000681 62 6F 6F 74 20 52 4F  1094             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
             46 46 0A 00
      00069A 20 69 73 20 6E 6F 74  1095 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      0006AD 63 6F 6D 6D 61 6E 64  1096 HELP: .ascii "commands:\n"
             73 3A 0A
      0006B7 40 20 61 64 64 72 2C  1097 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      0006DA 21 20 61 64 64 72 20  1098 	  .ascii "! addr byte [byte ]*, store bytes at addr++\n"
             62 79 74 65 20 5B 62
             79 74 65 20 5D 2A 2C
             20 73 74 6F 72 65 20
             62 79 74 65 73 20 61
             74 20 61 64 64 72 2B
             2B 0A
      000706 3F 2C 20 64 69 70 6C  1099 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      00071D 62 20 6E 7C 24 6E 2C  1100 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      000741 63 20 61 64 64 72 20  1101 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



             74 20 61 64 64 72 65
             73 73 0A
      000767 68 20 61 64 64 72 2C  1102 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      000793 6D 20 73 72 63 20 64  1103 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      0007B7 73 20 61 64 64 72 20  1104 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
      0007DB 74 20 61 64 64 72 20  1105 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      000802 78 20 61 64 64 72 2C  1106 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
                                   1107 
      000824                       1108 flash_free:
                                   1109 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2     |     B115200 =  000006 
    B19200  =  000003     |     B230400 =  000007     |     B2400   =  000000 
    B38400  =  000004     |     B460800 =  000008     |     B4800   =  000001 
    B57600  =  000005     |     B921600 =  000009     |     B9600   =  000002 
  4 BAD_CMD    00069A R   |     BASE    =  000002     |     BEEP_CSR=  0050F3 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BSP     =  000008     |     BYTE    =  000001 
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CFG_GCR =  007F60     |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CNTR    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]

Symbol Table

    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |   4 EEPROM_M   000638 R
    EEPROM_S=  000800     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FIRST   =  000001     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |   4 FLASH_FR   00062B R   |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    Fmaster =  7A1200     |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  4 HELP       0006AD R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]

Symbol Table

    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    LEN     =  000001     |     LOCAL_SI=  000004     |     MADDR   =  000001 
    N       =  000001     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   4 NonHandl   0000D4 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     PA      =  000000     |     PAD_SIZE=  000050 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PIN0    =  000000 
    PIN1    =  000001     |     PIN2    =  000002     |     PIN3    =  000003 
    PIN4    =  000004     |     PIN5    =  000005     |     PIN6    =  000006 
    PIN7    =  000007     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]

Symbol Table

  4 RAM_FREE   000617 R   |   4 RAM_LAST   000622 R   |     RAM_SIZE=  001800 
    ROP     =  004800     |     RST_SR  =  0050B3     |     RXCHAR  =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SIGN    =  000001 
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SRC     =  000003     |     STACK_BA=  0017FF     |     SWIM_CSR=  007F80 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PS=  00523A 
    UART1_SR=  005230     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_SR=  005240     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 VERSION    0005CF R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XSAVE   =  000002 
  3 __interr   000000 R   |   4 a_upper    00031D R   |   1 acc16      0000A8 R
  4 accept_c   00018A R   |   4 atoi       000329 R   |   4 base_con   0004F7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]

Symbol Table

  4 cancel     0001C3 R   |   4 clear_bi   00050E R   |   4 clear_ra   00004B R
  4 clock_in   000000 R   |   1 count      000003 R   |   4 del_back   000179 R
  4 del_line   000168 R   |   4 del_loop   00011E R   |   4 eval       000446 R
  4 execute    0005CA R   |   4 fetch      0004A9 R   |   4 flash_fr   000824 R
  1 flash_fr   0000AC R   |   4 help       0004EF R   |   4 hexdump    000520 R
  1 idx_x      000004 R   |   1 idx_y      000006 R   |   1 in         000002 R
  1 in.w       000001 R   |   4 init0      000028 R   |   4 is_digit   0002F1 R
  4 is_hex     0002FE R   |   4 itoa       00025B R   |   4 itoa_loo   00028A R
  4 main       000077 R   |   4 move_loo   00058E R   |   4 move_mem   00057B R
  4 mul16x8    0002D4 R   |   4 next_wor   000206 R   |   4 number     0003A8 R
  1 pad        000058 R   |   4 peek       000394 R   |   1 ram_free   0000AA R
  4 readln     000137 R   |   4 readln_l   00013F R   |   4 readln_q   0001CD R
  4 readln_q   0001D2 R   |   4 repl       0000B8 R   |   4 reprint    00019F R
  4 row        00053B R   |   4 row_init   000527 R   |   1 rx_char    000000 R
  4 scan       0001F0 R   |   4 set_bits   0005A8 R   |   4 skip       0001DA R
  4 store      0004CD R   |   4 strcpyn    00023E R   |   4 strlen     000382 R
  1 tib        000008 R   |   4 toggle_b   0005B9 R   |   4 uart3_in   00000F R
  4 uart_del   00011D R   |   4 uart_get   000109 R   |   4 uart_pri   0000F1 R
  4 uart_qch   0000FD R   |   4 uart_rx_   0000D5 R   |   4 uart_tx    0000E7 R
  4 ungetcha   000103 R   |   4 write_by   0003AF R   |   4 write_ee   000405 R
  4 write_fl   0003E3 R   |   4 write_sf   0003D4 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     AE   flags    0
   2 INITIALI   size      0   flags    0
   3 HOME       size     7C   flags    0
   4 CODE       size    824   flags    0


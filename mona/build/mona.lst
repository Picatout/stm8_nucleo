ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;  MONA   MONitor written in Assembly
                                      2 	.module MONA 
                                      3     .optsdcc -mstm8
                                      4 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                      5 	.include "../inc/nucleo_8s208.inc"
                                      1 ; NUCLEO-8S208RB board specific definitions
                                      2 
                                      3 ; mcu on board is stm8s208rbt6
                                      4 
                                      5 ; crystal on board is 8Mhz
                           7A1200     6 FHSE = 8000000
                                      7 
                                      8 ; LED2 is user LED
                                      9 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    10 LED2_PORT = 0x500a ;port C
                           000005    11 LED2_BIT = 5
                           000020    12 LED2_MASK = (1<<5) ;bit 5 mask
                                     13 
                                     14 ; B1 is user button
                                     15 ; connected to PE4
                                     16 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005014    17 BTN1_PORT = 0x5014 ; port E
                           000004    18 BTN1_BIT = 4
                           000010    19 BTN1_MASK = (1<<4) ;bit 4 mask
                                     20 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                      6 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB ÂµC registers map
                                      4 ; sdas file
                                      5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      6 	.module stm8s208rb
                                      7 
                                      8 ;;;;;;;;;;;;
                                      9 ; bits
                                     10 ;;;;;;;;;;;;
                           000000    11  BIT0 = 0
                           000001    12  BIT1 = 1
                           000002    13  BIT2 = 2
                           000003    14  BIT3 = 3
                           000004    15  BIT4 = 4
                           000005    16  BIT5 = 5
                           000006    17  BIT6 = 6
                           000007    18  BIT7 = 7
                                     19  	
                                     20 ;;;;;;;;;;;;
                                     21 ; bits masks
                                     22 ;;;;;;;;;;;;
                           000001    23  B0_MASK = (1<<0)
                           000002    24  B1_MASK = (1<<1)
                           000004    25  B2_MASK = (1<<2)
                           000008    26  B3_MASK = (1<<3)
                           000010    27  B4_MASK = (1<<4)
                           000020    28  B5_MASK = (1<<5)
                           000040    29  B6_MASK = (1<<6)
                           000080    30  B7_MASK = (1<<7)
                                     31 
                                     32 ; HSI oscillator frequency 16Mhz
                           F42400    33  FHSI = 16000000
                                     34 ; LSI oscillator frequency 128Khz
                           01F400    35  FLSI = 128000 
                                     36 
                                     37 ; controller memory regions
                           001800    38  RAM_SIZE = (0x1800) ; 6KB 
                           000800    39  EEPROM_SIZE = (0x800) ; 2KB
                                     40 ; STM8S208RB have 128K flash
                           020000    41  FLASH_SIZE = (0x20000)
                                     42 
                           000000    43  RAM_BASE = (0)
                           0017FF    44  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    45  EEPROM_BASE = (0x4000)
                           0047FF    46  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    47  SFR_BASE = (0x5000)
                           0057FF    48  SFR_END = (0x57FF)
                           006000    49  BOOT_ROM_BASE = (0x6000)
                           007FFF    50  BOOT_ROM_END = (0x7fff)
                           008000    51  FLASH_BASE = (0x8000)
                           027FFF    52  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    53  OPTION_BASE = (0x4800)
                           00487F    54  OPTION_END = (0x487F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           0048CD    55  DEVID_BASE = (0x48CD)
                           0048D8    56  DEVID_END = (0x48D8)
                           007F00    57  DEBUG_BASE = (0X7F00)
                           007FFF    58  DEBUG_END = (0X7FFF)
                                     59 
                                     60 ; options bytes
                                     61 ; this one can be programmed only from SWIM  (ICP)
                           004800    62  OPT0  = (0x4800)
                                     63 ; these can be programmed at runtime (IAP)
                           004801    64  OPT1  = (0x4801)
                           004802    65  NOPT1  = (0x4802)
                           004803    66  OPT2  = (0x4803)
                           004804    67  NOPT2  = (0x4804)
                           004805    68  OPT3  = (0x4805)
                           004806    69  NOPT3  = (0x4806)
                           004807    70  OPT4  = (0x4807)
                           004808    71  NOPT4  = (0x4808)
                           004809    72  OPT5  = (0x4809)
                           00480A    73  NOPT5  = (0x480A)
                           00480B    74  OPT6  = (0x480B)
                           00480C    75  NOPT6 = (0x480C)
                           00480D    76  OPT7 = (0x480D)
                           00480E    77  NOPT7 = (0x480E)
                           00487E    78  OPTBL  = (0x487E)
                           00487F    79  NOPTBL  = (0x487F)
                                     80 ; option registers usage
                                     81 ; read out protection, value 0xAA enable ROP
                           004800    82  ROP = OPT0  
                                     83 ; user boot code, {0..0x3e} 512 bytes row
                           004801    84  UBC = OPT1
                           004802    85  NUBC = NOPT1
                                     86 ; alternate function register
                           004803    87  AFR = OPT2
                           004804    88  NAFR = NOPT2
                                     89 ; miscelinous options
                           004805    90  WDGOPT = OPT3
                           004806    91  NWDGOPT = NOPT3
                                     92 ; clock options
                           004807    93  CLKOPT = OPT4
                           004808    94  NCLKOPT = NOPT4
                                     95 ; HSE clock startup delay
                           004809    96  HSECNT = OPT5
                           00480A    97  NHSECNT = NOPT5
                                     98 ; flash wait state
                           00480D    99 FLASH_WS = OPT7
                           00480E   100 NFLASH_WS = NOPT7
                                    101 
                                    102 ; watchdog options bits
                           000003   103   WDGOPT_LSIEN   =  BIT3
                           000002   104   WDGOPT_IWDG_HW =  BIT2
                           000001   105   WDGOPT_WWDG_HW =  BIT1
                           000000   106   WDGOPT_WWDG_HALT = BIT0
                                    107 ; NWDGOPT bits
                           FFFFFFFC   108   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   109   NWDGOPT_IWDG_HW  = ~BIT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           FFFFFFFE   110   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   111   NWDGOPT_WWDG_HALT = ~BIT0
                                    112 
                                    113 ; CLKOPT bits
                           000003   114  CLKOPT_EXT_CLK  = BIT3
                           000002   115  CLKOPT_CKAWUSEL = BIT2
                           000001   116  CLKOPT_PRS_C1   = BIT1
                           000000   117  CLKOPT_PRS_C0   = BIT0
                                    118 
                                    119 ; AFR option, remapable functions
                           000007   120  AFR7_BEEP    = BIT7
                           000006   121  AFR6_I2C     = BIT6
                           000005   122  AFR5_TIM1    = BIT5
                           000004   123  AFR4_TIM1    = BIT4
                           000003   124  AFR3_TIM1    = BIT3
                           000002   125  AFR2_CCO     = BIT2
                           000001   126  AFR1_TIM2    = BIT1
                           000000   127  AFR0_ADC     = BIT0
                                    128 
                                    129 ; device ID = (read only)
                           0048CD   130  DEVID_XL  = (0x48CD)
                           0048CE   131  DEVID_XH  = (0x48CE)
                           0048CF   132  DEVID_YL  = (0x48CF)
                           0048D0   133  DEVID_YH  = (0x48D0)
                           0048D1   134  DEVID_WAF  = (0x48D1)
                           0048D2   135  DEVID_LOT0  = (0x48D2)
                           0048D3   136  DEVID_LOT1  = (0x48D3)
                           0048D4   137  DEVID_LOT2  = (0x48D4)
                           0048D5   138  DEVID_LOT3  = (0x48D5)
                           0048D6   139  DEVID_LOT4  = (0x48D6)
                           0048D7   140  DEVID_LOT5  = (0x48D7)
                           0048D8   141  DEVID_LOT6  = (0x48D8)
                                    142 
                                    143 
                           005000   144 GPIO_BASE = (0x5000)
                           000005   145 GPIO_SIZE = (5)
                                    146 ; PORTS SFR OFFSET
                           000000   147 PA = 0
                           000005   148 PB = 5
                           00000A   149 PC = 10
                           00000F   150 PD = 15
                           000014   151 PE = 20
                           000019   152 PF = 25
                           00001E   153 PG = 30
                                    154 
                                    155 ; GPIO
                                    156 ; gpio register offset to base
                           000000   157  GPIO_ODR = 0
                           000001   158  GPIO_IDR = 1
                           000002   159  GPIO_DDR = 2
                           000003   160  GPIO_CR1 = 3
                           000004   161  GPIO_CR2 = 4
                                    162 
                                    163 ; port A
                           005000   164  PA_BASE = (0X5000)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           005000   165  PA_ODR  = (0x5000)
                           005001   166  PA_IDR  = (0x5001)
                           005002   167  PA_DDR  = (0x5002)
                           005003   168  PA_CR1  = (0x5003)
                           005004   169  PA_CR2  = (0x5004)
                                    170 ; port B
                           005005   171  PB_BASE = (0X5005)
                           005005   172  PB_ODR  = (0x5005)
                           005006   173  PB_IDR  = (0x5006)
                           005007   174  PB_DDR  = (0x5007)
                           005008   175  PB_CR1  = (0x5008)
                           005009   176  PB_CR2  = (0x5009)
                                    177 ; port C
                           00500A   178  PC_BASE = (0X500A)
                           00500A   179  PC_ODR  = (0x500A)
                           00500B   180  PC_IDR  = (0x500B)
                           00500C   181  PC_DDR  = (0x500C)
                           00500D   182  PC_CR1  = (0x500D)
                           00500E   183  PC_CR2  = (0x500E)
                                    184 ; port D
                           00500F   185  PD_BASE = (0X500F)
                           00500F   186  PD_ODR  = (0x500F)
                           005010   187  PD_IDR  = (0x5010)
                           005011   188  PD_DDR  = (0x5011)
                           005012   189  PD_CR1  = (0x5012)
                           005013   190  PD_CR2  = (0x5013)
                                    191 ; port E
                           005014   192  PE_BASE = (0X5014)
                           005014   193  PE_ODR  = (0x5014)
                           005015   194  PE_IDR  = (0x5015)
                           005016   195  PE_DDR  = (0x5016)
                           005017   196  PE_CR1  = (0x5017)
                           005018   197  PE_CR2  = (0x5018)
                                    198 ; port F
                           005019   199  PF_BASE = (0X5019)
                           005019   200  PF_ODR  = (0x5019)
                           00501A   201  PF_IDR  = (0x501A)
                           00501B   202  PF_DDR  = (0x501B)
                           00501C   203  PF_CR1  = (0x501C)
                           00501D   204  PF_CR2  = (0x501D)
                                    205 ; port G
                           00501E   206  PG_BASE = (0X501E)
                           00501E   207  PG_ODR  = (0x501E)
                           00501F   208  PG_IDR  = (0x501F)
                           005020   209  PG_DDR  = (0x5020)
                           005021   210  PG_CR1  = (0x5021)
                           005022   211  PG_CR2  = (0x5022)
                                    212 ; port H not present on LQFP48/LQFP64 package
                           005023   213  PH_BASE = (0X5023)
                           005023   214  PH_ODR  = (0x5023)
                           005024   215  PH_IDR  = (0x5024)
                           005025   216  PH_DDR  = (0x5025)
                           005026   217  PH_CR1  = (0x5026)
                           005027   218  PH_CR2  = (0x5027)
                                    219 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005028   220  PI_BASE = (0X5028)
                           005028   221  PI_ODR  = (0x5028)
                           005029   222  PI_IDR  = (0x5029)
                           00502A   223  PI_DDR  = (0x502a)
                           00502B   224  PI_CR1  = (0x502b)
                           00502C   225  PI_CR2  = (0x502c)
                                    226 
                                    227 ; input modes CR1
                           000000   228  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   229  INPUT_PULLUP = (1)
                                    230 ; output mode CR1
                           000000   231  OUTPUT_OD = (0) ; open drain
                           000001   232  OUTPUT_PP = (1) ; push pull
                                    233 ; input modes CR2
                           000000   234  INPUT_DI = (0)
                           000001   235  INPUT_EI = (1)
                                    236 ; output speed CR2
                           000000   237  OUTPUT_SLOW = (0)
                           000001   238  OUTPUT_FAST = (1)
                                    239 
                                    240 
                                    241 ; Flash memory
                           00505A   242  FLASH_CR1  = (0x505A)
                           00505B   243  FLASH_CR2  = (0x505B)
                           00505C   244  FLASH_NCR2  = (0x505C)
                           00505D   245  FLASH_FPR  = (0x505D)
                           00505E   246  FLASH_NFPR  = (0x505E)
                           00505F   247  FLASH_IAPSR  = (0x505F)
                           005062   248  FLASH_PUKR  = (0x5062)
                           005064   249  FLASH_DUKR  = (0x5064)
                                    250 ; data memory unlock keys
                           0000AE   251  FLASH_DUKR_KEY1 = (0xae)
                           000056   252  FLASH_DUKR_KEY2 = (0x56)
                                    253 ; flash memory unlock keys
                           000056   254  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   255  FLASH_PUKR_KEY2 = (0xae)
                                    256 ; FLASH_CR1 bits
                           000003   257  FLASH_CR1_HALT = BIT3
                           000002   258  FLASH_CR1_AHALT = BIT2
                           000001   259  FLASH_CR1_IE = BIT1
                           000000   260  FLASH_CR1_FIX = BIT0
                                    261 ; FLASH_CR2 bits
                           000007   262  FLASH_CR2_OPT = BIT7
                           000006   263  FLASH_CR2_WPRG = BIT6
                           000005   264  FLASH_CR2_ERASE = BIT5
                           000004   265  FLASH_CR2_FPRG = BIT4
                           000000   266  FLASH_CR2_PRG = BIT0
                                    267 ; FLASH_FPR bits
                           000005   268  FLASH_FPR_WPB5 = BIT5
                           000004   269  FLASH_FPR_WPB4 = BIT4
                           000003   270  FLASH_FPR_WPB3 = BIT3
                           000002   271  FLASH_FPR_WPB2 = BIT2
                           000001   272  FLASH_FPR_WPB1 = BIT1
                           000000   273  FLASH_FPR_WPB0 = BIT0
                                    274 ; FLASH_NFPR bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000005   275  FLASH_NFPR_NWPB5 = BIT5
                           000004   276  FLASH_NFPR_NWPB4 = BIT4
                           000003   277  FLASH_NFPR_NWPB3 = BIT3
                           000002   278  FLASH_NFPR_NWPB2 = BIT2
                           000001   279  FLASH_NFPR_NWPB1 = BIT1
                           000000   280  FLASH_NFPR_NWPB0 = BIT0
                                    281 ; FLASH_IAPSR bits
                           000006   282  FLASH_IAPSR_HVOFF = BIT6
                           000003   283  FLASH_IAPSR_DUL = BIT3
                           000002   284  FLASH_IAPSR_EOP = BIT2
                           000001   285  FLASH_IAPSR_PUL = BIT1
                           000000   286  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    287 
                                    288 ; Interrupt control
                           0050A0   289  EXTI_CR1  = (0x50A0)
                           0050A1   290  EXTI_CR2  = (0x50A1)
                                    291 
                                    292 ; Reset Status
                           0050B3   293  RST_SR  = (0x50B3)
                                    294 
                                    295 ; Clock Registers
                           0050C0   296  CLK_ICKR  = (0x50c0)
                           0050C1   297  CLK_ECKR  = (0x50c1)
                           0050C3   298  CLK_CMSR  = (0x50C3)
                           0050C4   299  CLK_SWR  = (0x50C4)
                           0050C5   300  CLK_SWCR  = (0x50C5)
                           0050C6   301  CLK_CKDIVR  = (0x50C6)
                           0050C7   302  CLK_PCKENR1  = (0x50C7)
                           0050C8   303  CLK_CSSR  = (0x50C8)
                           0050C9   304  CLK_CCOR  = (0x50C9)
                           0050CA   305  CLK_PCKENR2  = (0x50CA)
                           0050CC   306  CLK_HSITRIMR  = (0x50CC)
                           0050CD   307  CLK_SWIMCCR  = (0x50CD)
                                    308 
                                    309 ; Peripherals clock gating
                                    310 ; CLK_PCKENR1 
                           000007   311  CLK_PCKENR1_TIM1 = (7)
                           000006   312  CLK_PCKENR1_TIM3 = (6)
                           000005   313  CLK_PCKENR1_TIM2 = (5)
                           000004   314  CLK_PCKENR1_TIM4 = (4)
                           000003   315  CLK_PCKENR1_UART3 = (3)
                           000002   316  CLK_PCKENR1_UART1 = (2)
                           000001   317  CLK_PCKENR1_SPI = (1)
                           000000   318  CLK_PCKENR1_I2C = (0)
                                    319 ; CLK_PCKENR2
                           000007   320  CLK_PCKENR2_CAN = (7)
                           000003   321  CLK_PCKENR2_ADC = (3)
                           000002   322  CLK_PCKENR2_AWU = (2)
                                    323 
                                    324 ; Clock bits
                           000005   325  CLK_ICKR_REGAH = (5)
                           000004   326  CLK_ICKR_LSIRDY = (4)
                           000003   327  CLK_ICKR_LSIEN = (3)
                           000002   328  CLK_ICKR_FHW = (2)
                           000001   329  CLK_ICKR_HSIRDY = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000000   330  CLK_ICKR_HSIEN = (0)
                                    331 
                           000001   332  CLK_ECKR_HSERDY = (1)
                           000000   333  CLK_ECKR_HSEEN = (0)
                                    334 ; clock source
                           0000E1   335  CLK_SWR_HSI = 0xE1
                           0000D2   336  CLK_SWR_LSI = 0xD2
                           0000B4   337  CLK_SWR_HSE = 0xB4
                                    338 
                           000003   339  CLK_SWCR_SWIF = (3)
                           000002   340  CLK_SWCR_SWIEN = (2)
                           000001   341  CLK_SWCR_SWEN = (1)
                           000000   342  CLK_SWCR_SWBSY = (0)
                                    343 
                           000004   344  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   345  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   346  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   347  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   348  CLK_CKDIVR_CPUDIV0 = (0)
                                    349 
                                    350 ; Watchdog
                           0050D1   351  WWDG_CR  = (0x50D1)
                           0050D2   352  WWDG_WR  = (0x50D2)
                           0050E0   353  IWDG_KR  = (0x50E0)
                           0050E1   354  IWDG_PR  = (0x50E1)
                           0050E2   355  IWDG_RLR  = (0x50E2)
                           0050F0   356  AWU_CSR1  = (0x50F0)
                           0050F1   357  AWU_APR  = (0x50F1)
                           0050F2   358  AWU_TBR  = (0x50F2)
                                    359 
                                    360 ; Beeper
                                    361 ; beeper output is alternate function AFR7 on PD4
                                    362 ; connected to CN9-6
                           0050F3   363  BEEP_CSR  = (0x50F3)
                           00000F   364  BEEP_PORT = PD
                           000004   365  BEEP_BIT = 4
                           000010   366  BEEP_MASK = B4_MASK
                                    367 
                                    368 ; SPI
                           005200   369  SPI_CR1  = (0x5200)
                           005201   370  SPI_CR2  = (0x5201)
                           005202   371  SPI_ICR  = (0x5202)
                           005203   372  SPI_SR  = (0x5203)
                           005204   373  SPI_DR  = (0x5204)
                           005205   374  SPI_CRCPR  = (0x5205)
                           005206   375  SPI_RXCRCR  = (0x5206)
                           005207   376  SPI_TXCRCR  = (0x5207)
                                    377 
                                    378 ; I2C
                           005210   379  I2C_CR1  = (0x5210)
                           005211   380  I2C_CR2  = (0x5211)
                           005212   381  I2C_FREQR  = (0x5212)
                           005213   382  I2C_OARL  = (0x5213)
                           005214   383  I2C_OARH  = (0x5214)
                           005216   384  I2C_DR  = (0x5216)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005217   385  I2C_SR1  = (0x5217)
                           005218   386  I2C_SR2  = (0x5218)
                           005219   387  I2C_SR3  = (0x5219)
                           00521A   388  I2C_ITR  = (0x521A)
                           00521B   389  I2C_CCRL  = (0x521B)
                           00521C   390  I2C_CCRH  = (0x521C)
                           00521D   391  I2C_TRISER  = (0x521D)
                           00521E   392  I2C_PECR  = (0x521E)
                                    393 
                           000007   394  I2C_CR1_NOSTRETCH = (7)
                           000006   395  I2C_CR1_ENGC = (6)
                           000000   396  I2C_CR1_PE = (0)
                                    397 
                           000007   398  I2C_CR2_SWRST = (7)
                           000003   399  I2C_CR2_POS = (3)
                           000002   400  I2C_CR2_ACK = (2)
                           000001   401  I2C_CR2_STOP = (1)
                           000000   402  I2C_CR2_START = (0)
                                    403 
                           000000   404  I2C_OARL_ADD0 = (0)
                                    405 
                           000009   406  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   407  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    408 
                           000007   409  I2C_OARH_ADDMODE = (7)
                           000006   410  I2C_OARH_ADDCONF = (6)
                           000002   411  I2C_OARH_ADD9 = (2)
                           000001   412  I2C_OARH_ADD8 = (1)
                                    413 
                           000007   414  I2C_SR1_TXE = (7)
                           000006   415  I2C_SR1_RXNE = (6)
                           000004   416  I2C_SR1_STOPF = (4)
                           000003   417  I2C_SR1_ADD10 = (3)
                           000002   418  I2C_SR1_BTF = (2)
                           000001   419  I2C_SR1_ADDR = (1)
                           000000   420  I2C_SR1_SB = (0)
                                    421 
                           000005   422  I2C_SR2_WUFH = (5)
                           000003   423  I2C_SR2_OVR = (3)
                           000002   424  I2C_SR2_AF = (2)
                           000001   425  I2C_SR2_ARLO = (1)
                           000000   426  I2C_SR2_BERR = (0)
                                    427 
                           000007   428  I2C_SR3_DUALF = (7)
                           000004   429  I2C_SR3_GENCALL = (4)
                           000002   430  I2C_SR3_TRA = (2)
                           000001   431  I2C_SR3_BUSY = (1)
                           000000   432  I2C_SR3_MSL = (0)
                                    433 
                           000002   434  I2C_ITR_ITBUFEN = (2)
                           000001   435  I2C_ITR_ITEVTEN = (1)
                           000000   436  I2C_ITR_ITERREN = (0)
                                    437 
                                    438 ; Precalculated values, all in KHz
                           000080   439  I2C_CCRH_16MHZ_FAST_400 = 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           00000D   440  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    441 ;
                                    442 ; Fast I2C mode max rise time = 300ns
                                    443 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    444 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    445 
                           000005   446  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    447 
                           0000C0   448  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   449  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   450  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    451 
                           000080   452  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   453  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   454  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    455 
                           000000   456  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   457  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    458 ;
                                    459 ; Standard I2C mode max rise time = 1000ns
                                    460 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    461 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    462 
                           000011   463  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    464 
                           000000   465  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   466  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   467  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    468 
                           000001   469  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   470  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   471  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    472 
                           000001   473  I2C_READ = 1
                           000000   474  I2C_WRITE = 0
                                    475 
                                    476 ; baudrate constant for brr_value table access
                           000000   477 B2400=0
                           000001   478 B4800=1
                           000002   479 B9600=2
                           000003   480 B19200=3
                           000004   481 B38400=4
                           000005   482 B57600=5
                           000006   483 B115200=6
                           000007   484 B230400=7
                           000008   485 B460800=8
                           000009   486 B921600=9
                                    487 
                                    488 ; UART1 
                           005230   489  UART1_SR    = (0x5230)
                           005231   490  UART1_DR    = (0x5231)
                           005232   491  UART1_BRR1  = (0x5232)
                           005233   492  UART1_BRR2  = (0x5233)
                           005234   493  UART1_CR1   = (0x5234)
                           005235   494  UART1_CR2   = (0x5235)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005236   495  UART1_CR3   = (0x5236)
                           005237   496  UART1_CR4   = (0x5237)
                           005238   497  UART1_CR5   = (0x5238)
                           005239   498  UART1_GTR   = (0x5239)
                           00523A   499  UART1_PSCR  = (0x523A)
                                    500 
                                    501 ; UART3
                           005240   502  UART3_SR    = (0x5240)
                           005241   503  UART3_DR    = (0x5241)
                           005242   504  UART3_BRR1  = (0x5242)
                           005243   505  UART3_BRR2  = (0x5243)
                           005244   506  UART3_CR1   = (0x5244)
                           005245   507  UART3_CR2   = (0x5245)
                           005246   508  UART3_CR3   = (0x5246)
                           005247   509  UART3_CR4   = (0x5247)
                           004249   510  UART3_CR6   = (0x4249)
                                    511 
                                    512 ; UART Status Register bits
                           000007   513  UART_SR_TXE = (7)
                           000006   514  UART_SR_TC = (6)
                           000005   515  UART_SR_RXNE = (5)
                           000004   516  UART_SR_IDLE = (4)
                           000003   517  UART_SR_OR = (3)
                           000002   518  UART_SR_NF = (2)
                           000001   519  UART_SR_FE = (1)
                           000000   520  UART_SR_PE = (0)
                                    521 
                                    522 ; Uart Control Register bits
                           000007   523  UART_CR1_R8 = (7)
                           000006   524  UART_CR1_T8 = (6)
                           000005   525  UART_CR1_UARTD = (5)
                           000004   526  UART_CR1_M = (4)
                           000003   527  UART_CR1_WAKE = (3)
                           000002   528  UART_CR1_PCEN = (2)
                           000001   529  UART_CR1_PS = (1)
                           000000   530  UART_CR1_PIEN = (0)
                                    531 
                           000007   532  UART_CR2_TIEN = (7)
                           000006   533  UART_CR2_TCIEN = (6)
                           000005   534  UART_CR2_RIEN = (5)
                           000004   535  UART_CR2_ILIEN = (4)
                           000003   536  UART_CR2_TEN = (3)
                           000002   537  UART_CR2_REN = (2)
                           000001   538  UART_CR2_RWU = (1)
                           000000   539  UART_CR2_SBK = (0)
                                    540 
                           000006   541  UART_CR3_LINEN = (6)
                           000005   542  UART_CR3_STOP1 = (5)
                           000004   543  UART_CR3_STOP0 = (4)
                           000003   544  UART_CR3_CLKEN = (3)
                           000002   545  UART_CR3_CPOL = (2)
                           000001   546  UART_CR3_CPHA = (1)
                           000000   547  UART_CR3_LBCL = (0)
                                    548 
                           000006   549  UART_CR4_LBDIEN = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000005   550  UART_CR4_LBDL = (5)
                           000004   551  UART_CR4_LBDF = (4)
                           000003   552  UART_CR4_ADD3 = (3)
                           000002   553  UART_CR4_ADD2 = (2)
                           000001   554  UART_CR4_ADD1 = (1)
                           000000   555  UART_CR4_ADD0 = (0)
                                    556 
                           000005   557  UART_CR5_SCEN = (5)
                           000004   558  UART_CR5_NACK = (4)
                           000003   559  UART_CR5_HDSEL = (3)
                           000002   560  UART_CR5_IRLP = (2)
                           000001   561  UART_CR5_IREN = (1)
                                    562 ; LIN mode config register
                           000007   563  UART_CR6_LDUM = (7)
                           000005   564  UART_CR6_LSLV = (5)
                           000004   565  UART_CR6_LASE = (4)
                           000002   566  UART_CR6_LHDIEN = (2) 
                           000001   567  UART_CR6_LHDF = (1)
                           000000   568  UART_CR6_LSF = (0)
                                    569 
                                    570 ; TIMERS
                                    571 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   572  TIM1_CR1  = (0x5250)
                           005251   573  TIM1_CR2  = (0x5251)
                           005252   574  TIM1_SMCR  = (0x5252)
                           005253   575  TIM1_ETR  = (0x5253)
                           005254   576  TIM1_IER  = (0x5254)
                           005255   577  TIM1_SR1  = (0x5255)
                           005256   578  TIM1_SR2  = (0x5256)
                           005257   579  TIM1_EGR  = (0x5257)
                           005258   580  TIM1_CCMR1  = (0x5258)
                           005259   581  TIM1_CCMR2  = (0x5259)
                           00525A   582  TIM1_CCMR3  = (0x525A)
                           00525B   583  TIM1_CCMR4  = (0x525B)
                           00525C   584  TIM1_CCER1  = (0x525C)
                           00525D   585  TIM1_CCER2  = (0x525D)
                           00525E   586  TIM1_CNTRH  = (0x525E)
                           00525F   587  TIM1_CNTRL  = (0x525F)
                           005260   588  TIM1_PSCRH  = (0x5260)
                           005261   589  TIM1_PSCRL  = (0x5261)
                           005262   590  TIM1_ARRH  = (0x5262)
                           005263   591  TIM1_ARRL  = (0x5263)
                           005264   592  TIM1_RCR  = (0x5264)
                           005265   593  TIM1_CCR1H  = (0x5265)
                           005266   594  TIM1_CCR1L  = (0x5266)
                           005267   595  TIM1_CCR2H  = (0x5267)
                           005268   596  TIM1_CCR2L  = (0x5268)
                           005269   597  TIM1_CCR3H  = (0x5269)
                           00526A   598  TIM1_CCR3L  = (0x526A)
                           00526B   599  TIM1_CCR4H  = (0x526B)
                           00526C   600  TIM1_CCR4L  = (0x526C)
                           00526D   601  TIM1_BKR  = (0x526D)
                           00526E   602  TIM1_DTR  = (0x526E)
                           00526F   603  TIM1_OISR  = (0x526F)
                                    604 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    605 ; Timer Control Register bits
                           000007   606  TIM_CR1_ARPE = (7)
                           000006   607  TIM_CR1_CMSH = (6)
                           000005   608  TIM_CR1_CMSL = (5)
                           000004   609  TIM_CR1_DIR = (4)
                           000003   610  TIM_CR1_OPM = (3)
                           000002   611  TIM_CR1_URS = (2)
                           000001   612  TIM_CR1_UDIS = (1)
                           000000   613  TIM_CR1_CEN = (0)
                                    614 
                           000006   615  TIM1_CR2_MMS2 = (6)
                           000005   616  TIM1_CR2_MMS1 = (5)
                           000004   617  TIM1_CR2_MMS0 = (4)
                           000002   618  TIM1_CR2_COMS = (2)
                           000000   619  TIM1_CR2_CCPC = (0)
                                    620 
                                    621 ; Timer Slave Mode Control bits
                           000007   622  TIM1_SMCR_MSM = (7)
                           000006   623  TIM1_SMCR_TS2 = (6)
                           000005   624  TIM1_SMCR_TS1 = (5)
                           000004   625  TIM1_SMCR_TS0 = (4)
                           000002   626  TIM1_SMCR_SMS2 = (2)
                           000001   627  TIM1_SMCR_SMS1 = (1)
                           000000   628  TIM1_SMCR_SMS0 = (0)
                                    629 
                                    630 ; Timer External Trigger Enable bits
                           000007   631  TIM1_ETR_ETP = (7)
                           000006   632  TIM1_ETR_ECE = (6)
                           000005   633  TIM1_ETR_ETPS1 = (5)
                           000004   634  TIM1_ETR_ETPS0 = (4)
                           000003   635  TIM1_ETR_ETF3 = (3)
                           000002   636  TIM1_ETR_ETF2 = (2)
                           000001   637  TIM1_ETR_ETF1 = (1)
                           000000   638  TIM1_ETR_ETF0 = (0)
                                    639 
                                    640 ; Timer Interrupt Enable bits
                           000007   641  TIM1_IER_BIE = (7)
                           000006   642  TIM1_IER_TIE = (6)
                           000005   643  TIM1_IER_COMIE = (5)
                           000004   644  TIM1_IER_CC4IE = (4)
                           000003   645  TIM1_IER_CC3IE = (3)
                           000002   646  TIM1_IER_CC2IE = (2)
                           000001   647  TIM1_IER_CC1IE = (1)
                           000000   648  TIM1_IER_UIE = (0)
                                    649 
                                    650 ; Timer Status Register bits
                           000007   651  TIM1_SR1_BIF = (7)
                           000006   652  TIM1_SR1_TIF = (6)
                           000005   653  TIM1_SR1_COMIF = (5)
                           000004   654  TIM1_SR1_CC4IF = (4)
                           000003   655  TIM1_SR1_CC3IF = (3)
                           000002   656  TIM1_SR1_CC2IF = (2)
                           000001   657  TIM1_SR1_CC1IF = (1)
                           000000   658  TIM1_SR1_UIF = (0)
                                    659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000004   660  TIM1_SR2_CC4OF = (4)
                           000003   661  TIM1_SR2_CC3OF = (3)
                           000002   662  TIM1_SR2_CC2OF = (2)
                           000001   663  TIM1_SR2_CC1OF = (1)
                                    664 
                                    665 ; Timer Event Generation Register bits
                           000007   666  TIM1_EGR_BG = (7)
                           000006   667  TIM1_EGR_TG = (6)
                           000005   668  TIM1_EGR_COMG = (5)
                           000004   669  TIM1_EGR_CC4G = (4)
                           000003   670  TIM1_EGR_CC3G = (3)
                           000002   671  TIM1_EGR_CC2G = (2)
                           000001   672  TIM1_EGR_CC1G = (1)
                           000000   673  TIM1_EGR_UG = (0)
                                    674 
                                    675 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   676  TIM1_CCMR1_OC1CE = (7)
                           000006   677  TIM1_CCMR1_OC1M2 = (6)
                           000005   678  TIM1_CCMR1_OC1M1 = (5)
                           000004   679  TIM1_CCMR1_OC1M0 = (4)
                           000003   680  TIM1_CCMR1_OC1PE = (3)
                           000002   681  TIM1_CCMR1_OC1FE = (2)
                           000001   682  TIM1_CCMR1_CC1S1 = (1)
                           000000   683  TIM1_CCMR1_CC1S0 = (0)
                                    684 
                                    685 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   686  TIM1_CCMR1_IC1F3 = (7)
                           000006   687  TIM1_CCMR1_IC1F2 = (6)
                           000005   688  TIM1_CCMR1_IC1F1 = (5)
                           000004   689  TIM1_CCMR1_IC1F0 = (4)
                           000003   690  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   691  TIM1_CCMR1_IC1PSC0 = (2)
                                    692 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   693  TIM1_CCMR1_CC1S0 = (0)
                                    694 
                                    695 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   696  TIM1_CCMR2_OC2CE = (7)
                           000006   697  TIM1_CCMR2_OC2M2 = (6)
                           000005   698  TIM1_CCMR2_OC2M1 = (5)
                           000004   699  TIM1_CCMR2_OC2M0 = (4)
                           000003   700  TIM1_CCMR2_OC2PE = (3)
                           000002   701  TIM1_CCMR2_OC2FE = (2)
                           000001   702  TIM1_CCMR2_CC2S1 = (1)
                           000000   703  TIM1_CCMR2_CC2S0 = (0)
                                    704 
                                    705 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   706  TIM1_CCMR2_IC2F3 = (7)
                           000006   707  TIM1_CCMR2_IC2F2 = (6)
                           000005   708  TIM1_CCMR2_IC2F1 = (5)
                           000004   709  TIM1_CCMR2_IC2F0 = (4)
                           000003   710  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   711  TIM1_CCMR2_IC2PSC0 = (2)
                                    712 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   713  TIM1_CCMR2_CC2S0 = (0)
                                    714 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    715 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   716  TIM1_CCMR3_OC3CE = (7)
                           000006   717  TIM1_CCMR3_OC3M2 = (6)
                           000005   718  TIM1_CCMR3_OC3M1 = (5)
                           000004   719  TIM1_CCMR3_OC3M0 = (4)
                           000003   720  TIM1_CCMR3_OC3PE = (3)
                           000002   721  TIM1_CCMR3_OC3FE = (2)
                           000001   722  TIM1_CCMR3_CC3S1 = (1)
                           000000   723  TIM1_CCMR3_CC3S0 = (0)
                                    724 
                                    725 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   726  TIM1_CCMR3_IC3F3 = (7)
                           000006   727  TIM1_CCMR3_IC3F2 = (6)
                           000005   728  TIM1_CCMR3_IC3F1 = (5)
                           000004   729  TIM1_CCMR3_IC3F0 = (4)
                           000003   730  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   731  TIM1_CCMR3_IC3PSC0 = (2)
                                    732 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   733  TIM1_CCMR3_CC3S0 = (0)
                                    734 
                                    735 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   736  TIM1_CCMR4_OC4CE = (7)
                           000006   737  TIM1_CCMR4_OC4M2 = (6)
                           000005   738  TIM1_CCMR4_OC4M1 = (5)
                           000004   739  TIM1_CCMR4_OC4M0 = (4)
                           000003   740  TIM1_CCMR4_OC4PE = (3)
                           000002   741  TIM1_CCMR4_OC4FE = (2)
                           000001   742  TIM1_CCMR4_CC4S1 = (1)
                           000000   743  TIM1_CCMR4_CC4S0 = (0)
                                    744 
                                    745 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   746  TIM1_CCMR4_IC4F3 = (7)
                           000006   747  TIM1_CCMR4_IC4F2 = (6)
                           000005   748  TIM1_CCMR4_IC4F1 = (5)
                           000004   749  TIM1_CCMR4_IC4F0 = (4)
                           000003   750  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   751  TIM1_CCMR4_IC4PSC0 = (2)
                                    752 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   753  TIM1_CCMR4_CC4S0 = (0)
                                    754 
                                    755 ; Timer 2 - 16-bit timer
                           005300   756  TIM2_CR1  = (0x5300)
                           005301   757  TIM2_IER  = (0x5301)
                           005302   758  TIM2_SR1  = (0x5302)
                           005303   759  TIM2_SR2  = (0x5303)
                           005304   760  TIM2_EGR  = (0x5304)
                           005305   761  TIM2_CCMR1  = (0x5305)
                           005306   762  TIM2_CCMR2  = (0x5306)
                           005307   763  TIM2_CCMR3  = (0x5307)
                           005308   764  TIM2_CCER1  = (0x5308)
                           005309   765  TIM2_CCER2  = (0x5309)
                           00530A   766  TIM2_CNTRH  = (0x530A)
                           00530B   767  TIM2_CNTRL  = (0x530B)
                           00530C   768  TIM2_PSCR  = (0x530C)
                           00530D   769  TIM2_ARRH  = (0x530D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           00530E   770  TIM2_ARRL  = (0x530E)
                           00530F   771  TIM2_CCR1H  = (0x530F)
                           005310   772  TIM2_CCR1L  = (0x5310)
                           005311   773  TIM2_CCR2H  = (0x5311)
                           005312   774  TIM2_CCR2L  = (0x5312)
                           005313   775  TIM2_CCR3H  = (0x5313)
                           005314   776  TIM2_CCR3L  = (0x5314)
                                    777 
                                    778 ; Timer 3
                           005320   779  TIM3_CR1  = (0x5320)
                           005321   780  TIM3_IER  = (0x5321)
                           005322   781  TIM3_SR1  = (0x5322)
                           005323   782  TIM3_SR2  = (0x5323)
                           005324   783  TIM3_EGR  = (0x5324)
                           005325   784  TIM3_CCMR1  = (0x5325)
                           005326   785  TIM3_CCMR2  = (0x5326)
                           005327   786  TIM3_CCER1  = (0x5327)
                           005328   787  TIM3_CNTRH  = (0x5328)
                           005329   788  TIM3_CNTRL  = (0x5329)
                           00532A   789  TIM3_PSCR  = (0x532A)
                           00532B   790  TIM3_ARRH  = (0x532B)
                           00532C   791  TIM3_ARRL  = (0x532C)
                           00532D   792  TIM3_CCR1H  = (0x532D)
                           00532E   793  TIM3_CCR1L  = (0x532E)
                           00532F   794  TIM3_CCR2H  = (0x532F)
                           005330   795  TIM3_CCR2L  = (0x5330)
                                    796 
                                    797 ; TIM3_CR1  fields
                           000000   798  TIM3_CR1_CEN = (0)
                           000001   799  TIM3_CR1_UDIS = (1)
                           000002   800  TIM3_CR1_URS = (2)
                           000003   801  TIM3_CR1_OPM = (3)
                           000007   802  TIM3_CR1_ARPE = (7)
                                    803 ; TIM3_CCR2  fields
                           000000   804  TIM3_CCMR2_CC2S_POS = (0)
                           000003   805  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   806  TIM3_CCMR2_OC2M_POS = (4)  
                                    807 ; TIM3_CCER1 fields
                           000000   808  TIM3_CCER1_CC1E = (0)
                           000001   809  TIM3_CCER1_CC1P = (1)
                           000004   810  TIM3_CCER1_CC2E = (4)
                           000005   811  TIM3_CCER1_CC2P = (5)
                                    812 ; TIM3_CCER2 fields
                           000000   813  TIM3_CCER2_CC3E = (0)
                           000001   814  TIM3_CCER2_CC3P = (1)
                                    815 
                                    816 ; Timer 4
                           005340   817  TIM4_CR1  = (0x5340)
                           005341   818  TIM4_IER  = (0x5341)
                           005342   819  TIM4_SR  = (0x5342)
                           005343   820  TIM4_EGR  = (0x5343)
                           005344   821  TIM4_CNTR  = (0x5344)
                           005345   822  TIM4_PSCR  = (0x5345)
                           005346   823  TIM4_ARR  = (0x5346)
                                    824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    825 ; Timer 4 bitmasks
                                    826 
                           000007   827  TIM4_CR1_ARPE = (7)
                           000003   828  TIM4_CR1_OPM = (3)
                           000002   829  TIM4_CR1_URS = (2)
                           000001   830  TIM4_CR1_UDIS = (1)
                           000000   831  TIM4_CR1_CEN = (0)
                                    832 
                           000000   833  TIM4_IER_UIE = (0)
                                    834 
                           000000   835  TIM4_SR_UIF = (0)
                                    836 
                           000000   837  TIM4_EGR_UG = (0)
                                    838 
                           000002   839  TIM4_PSCR_PSC2 = (2)
                           000001   840  TIM4_PSCR_PSC1 = (1)
                           000000   841  TIM4_PSCR_PSC0 = (0)
                                    842 
                           000000   843  TIM4_PSCR_1 = 0
                           000001   844  TIM4_PSCR_2 = 1
                           000002   845  TIM4_PSCR_4 = 2
                           000003   846  TIM4_PSCR_8 = 3
                           000004   847  TIM4_PSCR_16 = 4
                           000005   848  TIM4_PSCR_32 = 5
                           000006   849  TIM4_PSCR_64 = 6
                           000007   850  TIM4_PSCR_128 = 7
                                    851 
                                    852 ; ADC2
                           005400   853  ADC_CSR  = (0x5400)
                           005401   854  ADC_CR1  = (0x5401)
                           005402   855  ADC_CR2  = (0x5402)
                           005403   856  ADC_CR3  = (0x5403)
                           005404   857  ADC_DRH  = (0x5404)
                           005405   858  ADC_DRL  = (0x5405)
                           005406   859  ADC_TDRH  = (0x5406)
                           005407   860  ADC_TDRL  = (0x5407)
                                    861  
                                    862 ; ADC bitmasks
                                    863 
                           000007   864  ADC_CSR_EOC = (7)
                           000006   865  ADC_CSR_AWD = (6)
                           000005   866  ADC_CSR_EOCIE = (5)
                           000004   867  ADC_CSR_AWDIE = (4)
                           000003   868  ADC_CSR_CH3 = (3)
                           000002   869  ADC_CSR_CH2 = (2)
                           000001   870  ADC_CSR_CH1 = (1)
                           000000   871  ADC_CSR_CH0 = (0)
                                    872 
                           000006   873  ADC_CR1_SPSEL2 = (6)
                           000005   874  ADC_CR1_SPSEL1 = (5)
                           000004   875  ADC_CR1_SPSEL0 = (4)
                           000001   876  ADC_CR1_CONT = (1)
                           000000   877  ADC_CR1_ADON = (0)
                                    878 
                           000006   879  ADC_CR2_EXTTRIG = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   880  ADC_CR2_EXTSEL1 = (5)
                           000004   881  ADC_CR2_EXTSEL0 = (4)
                           000003   882  ADC_CR2_ALIGN = (3)
                           000001   883  ADC_CR2_SCAN = (1)
                                    884 
                           000007   885  ADC_CR3_DBUF = (7)
                           000006   886  ADC_CR3_DRH = (6)
                                    887 
                                    888 ; beCAN
                           005420   889  CAN_MCR = (0x5420)
                           005421   890  CAN_MSR = (0x5421)
                           005422   891  CAN_TSR = (0x5422)
                           005423   892  CAN_TPR = (0x5423)
                           005424   893  CAN_RFR = (0x5424)
                           005425   894  CAN_IER = (0x5425)
                           005426   895  CAN_DGR = (0x5426)
                           005427   896  CAN_FPSR = (0x5427)
                           005428   897  CAN_P0 = (0x5428)
                           005429   898  CAN_P1 = (0x5429)
                           00542A   899  CAN_P2 = (0x542A)
                           00542B   900  CAN_P3 = (0x542B)
                           00542C   901  CAN_P4 = (0x542C)
                           00542D   902  CAN_P5 = (0x542D)
                           00542E   903  CAN_P6 = (0x542E)
                           00542F   904  CAN_P7 = (0x542F)
                           005430   905  CAN_P8 = (0x5430)
                           005431   906  CAN_P9 = (0x5431)
                           005432   907  CAN_PA = (0x5432)
                           005433   908  CAN_PB = (0x5433)
                           005434   909  CAN_PC = (0x5434)
                           005435   910  CAN_PD = (0x5435)
                           005436   911  CAN_PE = (0x5436)
                           005437   912  CAN_PF = (0x5437)
                                    913 
                                    914 
                                    915 ; CPU
                           007F00   916  CPU_A  = (0x7F00)
                           007F01   917  CPU_PCE  = (0x7F01)
                           007F02   918  CPU_PCH  = (0x7F02)
                           007F03   919  CPU_PCL  = (0x7F03)
                           007F04   920  CPU_XH  = (0x7F04)
                           007F05   921  CPU_XL  = (0x7F05)
                           007F06   922  CPU_YH  = (0x7F06)
                           007F07   923  CPU_YL  = (0x7F07)
                           007F08   924  CPU_SPH  = (0x7F08)
                           007F09   925  CPU_SPL   = (0x7F09)
                           007F0A   926  CPU_CCR   = (0x7F0A)
                                    927 
                                    928 ; global configuration register
                           007F60   929  CFG_GCR   = (0x7F60)
                                    930 
                                    931 ; interrupt control registers
                           007F70   932  ITC_SPR1   = (0x7F70)
                           007F71   933  ITC_SPR2   = (0x7F71)
                           007F72   934  ITC_SPR3   = (0x7F72)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           007F73   935  ITC_SPR4   = (0x7F73)
                           007F74   936  ITC_SPR5   = (0x7F74)
                           007F75   937  ITC_SPR6   = (0x7F75)
                           007F76   938  ITC_SPR7   = (0x7F76)
                           007F77   939  ITC_SPR8   = (0x7F77)
                                    940 
                                    941 ; SWIM, control and status register
                           007F80   942  SWIM_CSR   = (0x7F80)
                                    943 ; debug registers
                           007F90   944  DM_BK1RE   = (0x7F90)
                           007F91   945  DM_BK1RH   = (0x7F91)
                           007F92   946  DM_BK1RL   = (0x7F92)
                           007F93   947  DM_BK2RE   = (0x7F93)
                           007F94   948  DM_BK2RH   = (0x7F94)
                           007F95   949  DM_BK2RL   = (0x7F95)
                           007F96   950  DM_CR1   = (0x7F96)
                           007F97   951  DM_CR2   = (0x7F97)
                           007F98   952  DM_CSR1   = (0x7F98)
                           007F99   953  DM_CSR2   = (0x7F99)
                           007F9A   954  DM_ENFCTR   = (0x7F9A)
                                    955 
                                    956 ; Interrupt Numbers
                           000000   957  INT_TLI = 0
                           000001   958  INT_AWU = 1
                           000002   959  INT_CLK = 2
                           000003   960  INT_EXTI0 = 3
                           000004   961  INT_EXTI1 = 4
                           000005   962  INT_EXTI2 = 5
                           000006   963  INT_EXTI3 = 6
                           000007   964  INT_EXTI4 = 7
                           000008   965  INT_CAN_RX = 8
                           000009   966  INT_CAN_TX = 9
                           00000A   967  INT_SPI = 10
                           00000B   968  INT_TIM1_OVF = 11
                           00000C   969  INT_TIM1_CCM = 12
                           00000D   970  INT_TIM2_OVF = 13
                           00000E   971  INT_TIM2_CCM = 14
                           00000F   972  INT_TIM3_OVF = 15
                           000010   973  INT_TIM3_CCM = 16
                           000011   974  INT_UART1_TX_COMPLETED = 17
                           000012   975  INT_AUART1_RX_FULL = 18
                           000013   976  INT_I2C = 19
                           000014   977  INT_UART3_TX_COMPLETED = 20
                           000015   978  INT_UART3_RX_FULL = 21
                           000016   979  INT_ADC2 = 22
                           000017   980  INT_TIM4_OVF = 23
                           000018   981  INT_FLASH = 24
                                    982 
                                    983 ; Interrupt Vectors
                           008000   984  INT_VECTOR_RESET = 0x8000
                           008004   985  INT_VECTOR_TRAP = 0x8004
                           008008   986  INT_VECTOR_TLI = 0x8008
                           00800C   987  INT_VECTOR_AWU = 0x800C
                           008010   988  INT_VECTOR_CLK = 0x8010
                           008014   989  INT_VECTOR_EXTI0 = 0x8014
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           008018   990  INT_VECTOR_EXTI1 = 0x8018
                           00801C   991  INT_VECTOR_EXTI2 = 0x801C
                           008020   992  INT_VECTOR_EXTI3 = 0x8020
                           008024   993  INT_VECTOR_EXTI4 = 0x8024
                           008028   994  INT_VECTOR_CAN_RX = 0x8028
                           00802C   995  INT_VECTOR_CAN_TX = 0x802c
                           008030   996  INT_VECTOR_SPI = 0x8030
                           008034   997  INT_VECTOR_TIM1_OVF = 0x8034
                           008038   998  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C   999  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1000  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1001  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1002  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1003  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1004  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1005  INT_VECTOR_I2C = 0x8054
                           008058  1006  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1007  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1008  INT_VECTOR_ADC2 = 0x8060
                           008064  1009  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1010  INT_VECTOR_FLASH = 0x8068
                                   1011 
                                   1012  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                      7 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                      9 
                                     10 ;-------------------------------------------------------
                                     11 ; History:
                                     12 ;	2019-10-28  starting work on version 0.2 to remove
                                     13 ; 				version 0.1 adressing limitation.
                                     14 ;
                                     15 ;-------------------------------------------------------
                                     16 
                                     17 ;-------------------------------------------------------
                                     18 ;     vt100 CTRL_x  values
                                     19 ;-------------------------------------------------------
                           000001    20 		CTRL_A = 1
                           000002    21 		CTRL_B = 2
                           000003    22 		CTRL_C = 3
                           000004    23 		CTRL_D = 4
                           000005    24 		CTRL_E = 5
                           000006    25 		CTRL_F = 6
                           000007    26 		CTRL_G = 7
                           000008    27 		CTRL_H = 8
                           000009    28 		CTRL_I = 9
                           00000A    29 		CTRL_J = 10
                           00000B    30 		CTRL_K = 11
                           00000C    31 		CTRL_L = 12
                           00000D    32 		CTRL_M = 13
                           00000E    33 		CTRL_N = 14
                           00000F    34 		CTRL_O = 15
                           000010    35 		CTRL_P = 16
                           000011    36 		CTRL_Q = 17
                           000012    37 		CTRL_R = 18
                           000013    38 		CTRL_S = 19
                           000014    39 		CTRL_T = 20
                           000015    40 		CTRL_U = 21
                           000016    41 		CTRL_V = 22
                           000017    42 		CTRL_W = 23
                           000018    43 		CTRL_X = 24
                           000019    44 		CTRL_Y = 25
                           00001A    45 		CTRL_Z = 26
                           00001B    46 		ESC = 27
                           00000A    47 		NL = CTRL_J
                           00000D    48 		CR = CTRL_M
                           000008    49 		BSP = CTRL_H
                           000020    50 		SPACE = 32
                                     51 		
                                     52 ;--------------------------------------------------------
                                     53 ;      MACROS
                                     54 ;--------------------------------------------------------
                                     55 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     56 		bset PC_CR1,#LED2_BIT
                                     57 		bset PC_CR2,#LED2_BIT
                                     58 		bset PC_DDR,#LED2_BIT
                                     59 		.endm
                                     60 		
                                     61 		.macro _ledon ; turn on green LED 
                                     62 		bset PC_ODR,#LED2_BIT
                                     63 		.endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     64 		
                                     65 		.macro _ledoff ; turn off green LED
                                     66 		bres PC_ODR,#LED2_BIT
                                     67 		.endm
                                     68 		
                                     69 		.macro _ledtoggle ; invert green LED state
                                     70 		ld a,#LED2_MASK
                                     71 		xor a,PC_ODR
                                     72 		ld PC_ODR,a
                                     73 		.endm
                                     74 		
                                     75 		
                                     76 		.macro  _interrupts ; enable interrupts
                                     77 		 rim
                                     78 		.endm
                                     79 		
                                     80 		.macro _no_interrupts ; disable interrupts
                                     81 		sim
                                     82 		.endm
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ;        OPTION BYTES
                                     86 ;--------------------------------------------------------
                                     87 ;		.area 	OPTION (ABS)
                                     88 ;		.org 0x4800
                                     89 ;		.byte 0     ; 0x4800 ; OPT0 read out protection 
                                     90 ;		.byte 0,255 ; 0x4801 - 0x4802 OPT1 user boot code
                                     91 ;       .byte 0,255 ; 0x4803 - 0x4804 OPT2 alt. fct remapping 
                                     92 ;       .byte 0,255 ; 0x4805 - 0x4806 OPT3 watchdog options
                                     93 ;       .byte 0,255 ; 0x4807 - 0x4808 OPT4 clock options
                                     94 ;       .byte 0,255 ; 0x4809 - 0x480a OPT5 HSE clock startup
                                     95 ;       .byte 0,255 ; 0x480b - 0x480c OPT6 reserved
                                     96 ;       .byte 0,255 ; 0x480d - 0x480e OPT7 flash wait state
                                     97 		.area BOOTLOADER (ABS)
      00487E                         98 		.org 0x487e
                                     99 ;       .byte 0,255 ; 0x487e - 0x487f rom bootloader checkpoint
                                    100 		
                                    101 ;--------------------------------------------------------
                                    102 ;some sont constants used by this program.
                                    103 ;--------------------------------------------------------
                           000100   104 		STACK_SIZE = 256 ; call stack size
                           001700   105 		STACK_BASE = RAM_SIZE-STACK_SIZE ; lowest address of stack
                           0017FF   106 		STACK_TOP = RAM_SIZE-1 ; stack top at end of ram
                           000050   107 		TIB_SIZE = 80 ; transaction input buffer size
                           000050   108 		PAD_SIZE = 80 ; workding pad size
                                    109 		; vesrion major.minor
                           000000   110 		VERS_MAJOR = 0 ; major version number
                           000002   111 		VERS_MINOR = 2 ; minor version number
                                    112 
                                    113 ;--------------------------------------------------------
                                    114 ;   application variables 
                                    115 ;---------------------------------------------------------		
                                    116         .area DATA
                                    117 ;ticks  .blkw 1 ; system ticks at every millisecond        
                                    118 ;cntdwn:	.blkw 1 ; millisecond count down timer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000000                        119 rx_char: .blkb 1 ; last uart received char
      000001                        120 in.w:     .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000002                        121 in:		.blkb 1; parser position in tib
      000003                        122 count:  .blkb 1; length of string in tib
      000004                        123 idx_x:  .blkw 1; index for table pointed by x
      000006                        124 idx_y:  .blkw 1; index for table pointed by y
      000008                        125 tib:	.blkb TIB_SIZE ; transaction input buffer
      000058                        126 pad:	.blkb PAD_SIZE ; working pad
      0000A8                        127 acc24:  .blkb 3; 24 bits accumulator
      0000AB                        128 addr24: .blkb 3; 24 bits adress pointer.
      0000AE                        129 ram_free_base: .blkw 1
      0000B0                        130 flash_free_base: .blkw 1
                                    131 
                                    132 		.area USER_RAM_BASE
                                    133 ;--------------------------------------------------------
                                    134 ;   the following RAM is not used by MONA
                                    135 ;--------------------------------------------------------
      000000                        136  _user_ram:		
                                    137 
                                    138 ;--------------------------------------------------------
                                    139 ;  stack segment
                                    140 ;--------------------------------------------------------
                                    141        .area SSEG  (ABS)
      001700                        142 	   .org RAM_SIZE-STACK_SIZE
      001700                        143  __stack_bottom:
      001700                        144 	   .ds  256
                                    145 
                                    146 ;--------------------------------------------------------
                                    147 ; interrupt vector 
                                    148 ;--------------------------------------------------------
                                    149 	.area HOME
      000000                        150 __interrupt_vect:
      000000 82 00 00 33            151 	int init0 ;RESET vector
      000004 82 00 00 CD            152 	int NonHandledInterrupt ;TRAP  software interrupt
      000008 82 00 00 CD            153 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 CD            154 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 CD            155 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 CD            156 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 00 CD            157 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 00 CD            158 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 00 CD            159 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 00 CD            160 	int NonHandledInterrupt ;int7 EXTI4 port E external interrupts
      000028 82 00 00 CD            161 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 CD            162 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 CD            163 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 CD            164 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 CD            165 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 CD            166 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 CD            167 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 CD            168 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 CD            169 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 CD            170 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 CD            171 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 CD            172 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 CD            173 	int NonHandledInterrupt ;int20 UART3 TX completed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00005C 82 00 00 D2            174 	int uart_rx_isr         ;int21 UART3 RX full
      000060 82 00 00 CD            175 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 CD            176 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 00 CD            177 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 CD            178 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 CD            179 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 CD            180 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 CD            181 	int NonHandledInterrupt ;int28  not used
                                    182 
                                    183 	.area CODE
                                    184 
                                    185 	;initialize clock to HSE 16Mhz
      000000                        186 clock_init:	
      000000 72 12 50 C5      [ 1]  187 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000004 A6 B4            [ 1]  188 	ld a,#CLK_SWR_HSE
      000006 C7 50 C4         [ 1]  189 	ld CLK_SWR,a
      000009 C1 50 C3         [ 1]  190 1$:	cp a,CLK_CMSR
      00000C 26 FB            [ 1]  191 	jrne 1$
      00000E 81               [ 4]  192 	ret
                                    193 
                                    194 		; initialize TIMER4 ticks counter
                                    195 ;timer4_init:
                                    196 ;	clr ticks
                                    197 ;	clr cntdwn
                                    198 ;	ld a,#TIM4_PSCR_128 
                                    199 ;	ld TIM4_PSCR,a
                                    200 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    201 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    202 ;	ld a,#125
                                    203 ;	ld TIM4_ARR,a ; 1 msec interval
                                    204 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    205 ;	ld TIM4_CR1,a
                                    206 ;	ret
                                    207 
                                    208 ; initialize UART3, 115200 8N1
      00000F                        209 uart3_init:
                                    210 ;	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
                                    211 	; configure tx pin
      00000F 72 1A 50 11      [ 1]  212 	bset PD_DDR,#BIT5 ; tx pin
      000013 72 1A 50 12      [ 1]  213 	bset PD_CR1,#BIT5 ; push-pull output
      000017 72 1A 50 13      [ 1]  214 	bset PD_CR2,#BIT5 ; fast output
                                    215 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001B 35 05 52 43      [ 1]  216 	mov UART3_BRR2,#0x05 ; must be loaded first
      00001F 35 04 52 42      [ 1]  217 	mov UART3_BRR1,#0x4
      000023 35 2C 52 45      [ 1]  218 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      000027 81               [ 4]  219 	ret
                                    220 	
                                    221 	; pause in milliseconds
                                    222     ; input:  y delay
                                    223     ; output: none
                                    224 ;pause:
                                    225 ;	 ldw cntdwn,y
                                    226 ;1$: ldw y,cntdwn
                                    227 ;	 jrne 1$
                                    228 ;    ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                    229 
                                    230 ;-------------------------
                                    231 ;  zero all free ram
                                    232 ;-------------------------
      000028                        233 clear_all_free_ram:
      000028 AE 00 00         [ 2]  234 	ldw x,#0
      00002B                        235 1$:	
      00002B 7F               [ 1]  236 	clr (x)
      00002C 5C               [ 1]  237 	incw x
      00002D A3 17 FD         [ 2]  238 	cpw x,#STACK_TOP-2
      000030 23 F9            [ 2]  239 	jrule 1$
      000032 81               [ 4]  240 	ret
                                    241 
      000033                        242 init0:
                                    243 	; initialize SP
      000033 AE 17 FF         [ 2]  244 	ldw x,#STACK_TOP
      000036 94               [ 1]  245 	ldw sp,x
      000037 CD 00 00         [ 4]  246 	call clock_init
      00003A CD 00 28         [ 4]  247 	call clear_all_free_ram
                                    248 ;	clr ticks
                                    249 ;	clr cntdwn
      00003D A6 FF            [ 1]  250 	ld a,#255
      00003F C7 00 00         [ 1]  251 	ld rx_char,a
                                    252 ;	call timer4_init
      000042 CD 00 0F         [ 4]  253 	call uart3_init
      000045                        254 	_ledenable
      000045 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#LED2_BIT
      000049 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#LED2_BIT
      00004D 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#LED2_BIT
      000051                        255 	_ledoff
      000051 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#LED2_BIT
      000055 72 5F 00 01      [ 1]  256 	clr in.w ; must always be 0
                                    257 	; initialize free_ram_base variable
      000059 90 AE 00 00      [ 2]  258 	ldw y,#_user_ram ;#ram_free_base
                                    259 ;	addw y,#0xf
                                    260 ;	ld a,yl
                                    261 ;	and a,#0xf0
                                    262 ;	ld yl,a
      00005D 90 CF 00 AE      [ 2]  263 	ldw ram_free_base,y
                                    264 	; initialize flash_free_base variable
      000061 90 AE 08 92      [ 2]  265 	ldw y,#flash_free
      000065 72 A9 00 FF      [ 2]  266 	addw y,#0xff
      000069 4F               [ 1]  267 	clr a
      00006A 90 97            [ 1]  268 	ld yl,a
      00006C 90 CF 00 B0      [ 2]  269 	ldw flash_free_base,y
                                    270 
                                    271 ;------------------------
                                    272 ; program main function
                                    273 ;------------------------
      000070                        274 main:	
                                    275 ; enable interrupts
      000070                        276 	_interrupts 
      000070 9A               [ 1]    1 		 rim
                                    277 ; print startup message.
      000071 A6 0C            [ 1]  278 	ld a,#0xc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000073 CD 00 E9         [ 4]  279 	call uart_tx
      000076 90 AE 06 31      [ 2]  280 	ldw y,#VERSION
      00007A CD 00 F3         [ 4]  281 	call uart_print
      00007D 90 AE 06 79      [ 2]  282 	ldw y,#RAM_FREE_MSG
      000081 CD 00 F3         [ 4]  283 	call uart_print
      000084 90 CE 00 AE      [ 2]  284 	ldw y,ram_free_base
      000088 A6 10            [ 1]  285 	ld a,#16
      00008A CD 02 B6         [ 4]  286 	call itoa
      00008D CD 00 F3         [ 4]  287 	call uart_print
      000090 90 AE 06 84      [ 2]  288 	ldw y,#RAM_LAST_FREE_MSG
      000094 CD 00 F3         [ 4]  289 	call uart_print
      000097 90 AE 06 8D      [ 2]  290 	ldw y,#FLASH_FREE_MSG
      00009B CD 00 F3         [ 4]  291 	call uart_print
      00009E A6 10            [ 1]  292 	ld a,#16
      0000A0 90 CE 00 B0      [ 2]  293 	ldw y,flash_free_base
      0000A4 CD 02 B6         [ 4]  294 	call itoa
      0000A7 CD 00 F3         [ 4]  295 	call uart_print
      0000AA 90 AE 06 9A      [ 2]  296 	ldw y,#EEPROM_MSG
      0000AE CD 00 F3         [ 4]  297 	call uart_print
                                    298 ; Read Execute Print Loop
                                    299 ; MONA spend is time in this loop
      0000B1                        300 repl: 
                                    301 ; move terminal cursor to next line
      0000B1 A6 0A            [ 1]  302 	ld a,#NL 
      0000B3 CD 00 E9         [ 4]  303 	call uart_tx
                                    304 ; print prompt sign	 
      0000B6 A6 3E            [ 1]  305 	ld a,#'>
      0000B8 CD 00 E9         [ 4]  306 	call uart_tx
                                    307 ; read command line	
      0000BB CD 01 39         [ 4]  308 	call readln 
                                    309 ;if empty line -> ignore it, loop.	
      0000BE 72 5D 00 03      [ 1]  310 	tnz count
      0000C2 27 ED            [ 1]  311 	jreq repl
                                    312 ; initialize parser and call eval function	  
      0000C4 72 5F 00 02      [ 1]  313 	clr in
      0000C8 CD 04 A1         [ 4]  314 	call eval
                                    315 ; start over	
      0000CB 20 E4            [ 2]  316 	jra repl  ; loop
                                    317 	 
                                    318 ;------------------------------------
                                    319 ;	interrupt NonHandledInterrupt
                                    320 ;   non handled interrupt reset MCU
                                    321 ;------------------------------------
      0000CD                        322 NonHandledInterrupt:
      0000CD A6 80            [ 1]  323 	ld a,#0x80
      0000CF C7 50 D1         [ 1]  324 	ld WWDG_CR,a
                                    325 	;iret
                                    326 
                                    327 ;------------------------------------
                                    328 ; TIMER4 interrupt service routine
                                    329 ;------------------------------------
                                    330 ;timer4_isr:
                                    331 ;	ldw y,ticks
                                    332 ;	incw y
                                    333 ;	ldw ticks,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    334 ;	ldw y,cntdwn
                                    335 ;	jreq 1$
                                    336 ;	decw y
                                    337 ;	ldw cntdwn,y
                                    338 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    339 ;	iret
                                    340 
                                    341 ;------------------------------------
                                    342 ; uart3 receive interrupt service
                                    343 ;------------------------------------
      0000D2                        344 uart_rx_isr:
                                    345 ; local variables
                           000002   346   UART_STATUS = 2
                           000001   347   UART_DATA = 1
                                    348 ; read uart registers and save them in local variables  
      0000D2 C6 52 40         [ 1]  349   ld a, UART3_SR
      0000D5 88               [ 1]  350   push a  ; local variable UART_STATUS
      0000D6 C6 52 41         [ 1]  351   ld a,UART3_DR
      0000D9 88               [ 1]  352   push a ; local variable UART_DATA
                                    353 ; test uart status register
                                    354 ; bit RXNE must 1
                                    355 ; bits OR|FE|NF must be 0	
      0000DA 7B 02            [ 1]  356   ld a, (UART_STATUS,sp)
                                    357 ; keep only significant bits
      0000DC A4 2E            [ 1]  358   and a, #((1<<UART_SR_RXNE)|(1<<UART_SR_OR)|(1<<UART_SR_FE)|(1<<UART_SR_NF))
                                    359 ; A value shoudl be == (1<<UART_SR_RNXE)  
      0000DE A1 20            [ 1]  360   cp a, #(1<<UART_SR_RXNE)
      0000E0 26 05            [ 1]  361   jrne 1$
                                    362 ; no receive error accept it.  
      0000E2 7B 01            [ 1]  363   ld a,(UART_DATA,sp)
      0000E4 C7 00 00         [ 1]  364   ld rx_char,a
      0000E7                        365 1$: 
                                    366 ; drop local variables
      0000E7 85               [ 2]  367   popw X	
      0000E8 80               [11]  368   iret
                                    369 
                                    370 ;------------------------------------
                                    371 ;  serial port communication routines
                                    372 ;------------------------------------
                                    373 ;------------------------------------
                                    374 ; transmit character in a via UART3
                                    375 ; character to transmit on (3,sp)
                                    376 ;------------------------------------
      0000E9                        377 uart_tx:
      0000E9 72 5D 52 40      [ 1]  378 	tnz UART3_SR
      0000ED 2A FA            [ 1]  379 	jrpl uart_tx
      0000EF C7 52 41         [ 1]  380 	ld UART3_DR,a
      0000F2 81               [ 4]  381     ret
                                    382 
                                    383 ;------------------------------------
                                    384 ; send string via UART2
                                    385 ; y is pointer to str
                                    386 ;------------------------------------
      0000F3                        387 uart_print:
      0000F3 90 F6            [ 1]  388 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0000F5 27 07            [ 1]  389 	jreq 1$
      0000F7 CD 00 E9         [ 4]  390 	call uart_tx
      0000FA 90 5C            [ 1]  391 	incw y
      0000FC 20 F5            [ 2]  392 	jra uart_print
      0000FE 81               [ 4]  393 1$: ret
                                    394 
                                    395 ;------------------------------------
                                    396 ; check if char available
                                    397 ;------------------------------------
      0000FF                        398 uart_qchar:
      0000FF A6 FF            [ 1]  399 	ld a,#255
      000101 C1 00 00         [ 1]  400 	cp a,rx_char
      000104 81               [ 4]  401     ret
                                    402 
                                    403 ;------------------------------------
                                    404 ; return char in A to queue
                                    405 ;------------------------------------
      000105                        406 ungetchar: 
      000105                        407 	_no_interrupts
      000105 9B               [ 1]    1 		sim
      000106 C7 00 00         [ 1]  408 	ld rx_char,a
      000109                        409     _interrupts
      000109 9A               [ 1]    1 		 rim
      00010A 81               [ 4]  410     ret
                                    411     
                                    412 ;------------------------------------
                                    413 ; return character from uart3
                                    414 ;------------------------------------
      00010B                        415 uart_getchar:
      00010B A6 FF            [ 1]  416 	ld a,#255
      00010D C1 00 00         [ 1]  417 	cp a,rx_char
      000110 27 F9            [ 1]  418 	jreq uart_getchar
      000112                        419 	_no_interrupts
      000112 9B               [ 1]    1 		sim
      000113 C6 00 00         [ 1]  420 	ld a, rx_char
      000116 88               [ 1]  421 	push a
      000117 A6 FF            [ 1]  422 	ld a,#-1
      000119 C7 00 00         [ 1]  423 	ld rx_char,a
      00011C                        424 	_interrupts
      00011C 9A               [ 1]    1 		 rim
      00011D 84               [ 1]  425 	pop a
      00011E 81               [ 4]  426 	ret
                                    427 
                                    428 ;------------------------------------
                                    429 ; delete n character from input line
                                    430 ;------------------------------------
      00011F                        431 uart_delete:
      00011F 88               [ 1]  432 	push a ; n 
      000120                        433 del_loop:
      000120 0D 01            [ 1]  434 	tnz (1,sp)
      000122 27 13            [ 1]  435 	jreq 1$
      000124 A6 08            [ 1]  436 	ld a,#BSP
      000126 CD 00 E9         [ 4]  437 	call uart_tx
      000129 A6 20            [ 1]  438     ld a,#SPACE
      00012B CD 00 E9         [ 4]  439     call uart_tx
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00012E A6 08            [ 1]  440     ld a,#BSP
      000130 CD 00 E9         [ 4]  441     call uart_tx
      000133 0A 01            [ 1]  442     dec (1,sp)
      000135 20 E9            [ 2]  443     jra del_loop
      000137 84               [ 1]  444 1$: pop a
      000138 81               [ 4]  445 	ret 
                                    446 
                                    447 ;------------------------------------
                                    448 ; read a line of text from terminal
                                    449 ; input:
                                    450 ;	none
                                    451 ; local variable on stack:
                                    452 ;	LEN (1,sp)
                                    453 ;   RXCHAR (2,sp)
                                    454 ; output:
                                    455 ;   text in tib  buffer
                                    456 ;   len in count variable
                                    457 ;------------------------------------
      000139                        458 readln:
                                    459 	; local variables
                           000001   460 	LEN = 1  ; accepted line length
                           000002   461 	RXCHAR = 2 ; last char received
      000139 4B 00            [ 1]  462 	push #0  ; RXCHAR 
      00013B 4B 00            [ 1]  463 	push #0  ; LEN
      00013D 90 AE 00 08      [ 2]  464  	ldw y,#tib ; input buffer
      000141                        465 readln_loop:
      000141 CD 01 0B         [ 4]  466 	call uart_getchar
      000144 6B 02            [ 1]  467 	ld (RXCHAR,sp),a
      000146 A1 03            [ 1]  468 	cp a,#CTRL_C
      000148 26 03            [ 1]  469 	jrne 2$
      00014A CC 01 C5         [ 2]  470 	jp cancel
      00014D A1 12            [ 1]  471 2$:	cp a,#CTRL_R
      00014F 27 50            [ 1]  472 	jreq reprint
      000151 A1 0D            [ 1]  473 	cp a,#CR
      000153 26 03            [ 1]  474 	jrne 1$
      000155 CC 01 CF         [ 2]  475 	jp readln_quit
      000158 A1 0A            [ 1]  476 1$:	cp a,#NL
      00015A 27 73            [ 1]  477 	jreq readln_quit
      00015C A1 08            [ 1]  478 	cp a,#BSP
      00015E 27 1B            [ 1]  479 	jreq del_back
      000160 A1 04            [ 1]  480 	cp a,#CTRL_D
      000162 27 06            [ 1]  481 	jreq del_line
      000164 A1 20            [ 1]  482 	cp a,#SPACE
      000166 2A 24            [ 1]  483 	jrpl accept_char
      000168 20 D7            [ 2]  484 	jra readln_loop
      00016A                        485 del_line:
      00016A 7B 01            [ 1]  486 	ld a,(LEN,sp)
      00016C CD 01 1F         [ 4]  487 	call uart_delete
      00016F 90 AE 00 08      [ 2]  488 	ldw y,#tib
      000173 72 5F 00 03      [ 1]  489 	clr count
      000177 0F 01            [ 1]  490 	clr (LEN,sp)
      000179 20 C6            [ 2]  491 	jra readln_loop
      00017B                        492 del_back:
      00017B 0D 01            [ 1]  493     tnz (LEN,sp)
      00017D 27 C2            [ 1]  494     jreq readln_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00017F 0A 01            [ 1]  495     dec (LEN,sp)
      000181 90 5A            [ 2]  496     decw y
      000183 90 7F            [ 1]  497     clr  (y)
      000185 A6 01            [ 1]  498     ld a,#1
      000187 CD 01 1F         [ 4]  499     call uart_delete
      00018A 20 B5            [ 2]  500     jra readln_loop	
      00018C                        501 accept_char:
      00018C A6 4F            [ 1]  502 	ld a,#TIB_SIZE-1
      00018E 11 01            [ 1]  503 	cp a, (1,sp)
      000190 27 AF            [ 1]  504 	jreq readln_loop
      000192 7B 02            [ 1]  505 	ld a,(RXCHAR,sp)
      000194 90 F7            [ 1]  506 	ld (y),a
      000196 0C 01            [ 1]  507 	inc (LEN,sp)
      000198 90 5C            [ 1]  508 	incw y
      00019A 90 7F            [ 1]  509 	clr (y)
      00019C CD 00 E9         [ 4]  510 	call uart_tx
      00019F 20 A0            [ 2]  511 	jra readln_loop
      0001A1                        512 reprint:
      0001A1 0D 01            [ 1]  513 	tnz (LEN,sp)
      0001A3 26 9C            [ 1]  514 	jrne readln_loop
      0001A5 72 5D 00 03      [ 1]  515 	tnz count
      0001A9 27 96            [ 1]  516 	jreq readln_loop
      0001AB 90 AE 00 08      [ 2]  517 	ldw y,#tib
      0001AF 90 89            [ 2]  518 	pushw y
      0001B1 CD 00 F3         [ 4]  519 	call uart_print
      0001B4 90 85            [ 2]  520 	popw y
      0001B6 C6 00 03         [ 1]  521 	ld a,count
      0001B9 6B 01            [ 1]  522 	ld (LEN,sp),a
      0001BB 90 9F            [ 1]  523 	ld a,yl
      0001BD CB 00 03         [ 1]  524 	add a,count
      0001C0 90 97            [ 1]  525 	ld yl,a
      0001C2 CC 01 41         [ 2]  526 	jp readln_loop
      0001C5                        527 cancel:
      0001C5 72 5F 00 08      [ 1]  528 	clr tib
      0001C9 72 5F 00 03      [ 1]  529 	clr count
      0001CD 20 05            [ 2]  530 	jra readln_quit2
      0001CF                        531 readln_quit:
      0001CF 7B 01            [ 1]  532 	ld a,(LEN,sp)
      0001D1 C7 00 03         [ 1]  533 	ld count,a
      0001D4                        534 readln_quit2:
      0001D4 5B 02            [ 2]  535 	addw sp,#2
      0001D6 A6 0A            [ 1]  536 	ld a,#NL
      0001D8 CD 00 E9         [ 4]  537 	call uart_tx
      0001DB 81               [ 4]  538 	ret
                                    539 	
                                    540 ;------------------------------------
                                    541 ; skip character c in tib starting from 'in'
                                    542 ; input: 
                                    543 ;    a character to skip
                                    544 ; output:  'in' ajusted to new position
                                    545 ;------------------------------------
      0001DC                        546 skip:
                           000001   547 	C = 1 ; local var
      0001DC 88               [ 1]  548 	push a
      0001DD 90 AE 00 08      [ 2]  549 	ldw y,#tib
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0001E1 91 D6 01         [ 4]  550 1$:	ld a,([in.w],y)
      0001E4 27 0A            [ 1]  551 	jreq 2$
      0001E6 11 01            [ 1]  552 	cp a,(C,sp)
      0001E8 26 06            [ 1]  553 	jrne 2$
      0001EA 72 5C 00 02      [ 1]  554 	inc in
      0001EE 20 F1            [ 2]  555 	jra 1$
      0001F0 84               [ 1]  556 2$: pop a
      0001F1 81               [ 4]  557 	ret
                                    558 	
                                    559 ;------------------------------------
                                    560 ; scan tib for charater 'c' starting from 'in'
                                    561 ; input:
                                    562 ;    a character to skip
                                    563 ;------------------------------------
      0001F2                        564 scan: 
                           000001   565 	C = 1 ; local var
      0001F2 88               [ 1]  566 	push a
      0001F3 90 AE 00 08      [ 2]  567 	ldw y,#tib
      0001F7 91 D6 01         [ 4]  568 1$:	ld a,([in.w],y)
      0001FA 27 0A            [ 1]  569 	jreq 2$
      0001FC 11 01            [ 1]  570 	cp a,(C,sp)
      0001FE 27 06            [ 1]  571 	jreq 2$
      000200 72 5C 00 02      [ 1]  572 	inc in
      000204 20 F1            [ 2]  573 	jra 1$
      000206 84               [ 1]  574 2$: pop a
      000207 81               [ 4]  575 	ret
                                    576 
                                    577 ;------------------------------------
                                    578 ; scan tib for next word
                                    579 ; move word in 'pad'
                                    580 ;------------------------------------
      000208                        581 next_word:	
                           000001   582 	FIRST = 1
                           000002   583 	XSAVE = 2
      000208 52 03            [ 2]  584 	sub sp,#3
      00020A 1F 02            [ 2]  585 	ldw (XSAVE,sp),x ; save x
      00020C A6 20            [ 1]  586 	ld a,#SPACE
      00020E CD 01 DC         [ 4]  587 	call skip
      000211 C6 00 02         [ 1]  588 	ld a,in
      000214 6B 01            [ 1]  589 	ld (FIRST,sp),a
      000216 A6 20            [ 1]  590 	ld a,#SPACE
      000218 CD 01 F2         [ 4]  591 	call scan
                                    592 	; copy word in pad
      00021B AE 00 08         [ 2]  593 	ldw x,#tib  ; source
      00021E 72 5F 00 04      [ 1]  594 	clr idx_x
      000222 7B 01            [ 1]  595 	ld a,(FIRST,sp)
      000224 C7 00 05         [ 1]  596 	ld idx_x+1,a
      000227 90 AE 00 58      [ 2]  597 	ldw y,#pad
      00022B 72 5F 00 06      [ 1]  598 	clr idx_y
      00022F 72 5F 00 07      [ 1]  599 	clr idx_y+1
      000233 C6 00 02         [ 1]  600 	ld a,in
      000236 10 01            [ 1]  601 	sub a,(FIRST,sp)
      000238 CD 02 40         [ 4]  602 	call strcpyn
      00023B 1E 02            [ 2]  603 	ldw x,(XSAVE,sp)
      00023D 5B 03            [ 2]  604 	addw sp,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00023F 81               [ 4]  605 	ret
                                    606 	
                                    607 	
                                    608 ;------------------------------------
                                    609 ; copy n character from (x) to (y)
                                    610 ; input:
                                    611 ;   	x   source pointer
                                    612 ;       idx_x index in (x)
                                    613 ;       y   destination pointer
                                    614 ;       idx_y  index in (y)
                                    615 ;       a   number of character to copy
                                    616 ;------------------------------------
      000240                        617 strcpyn:
                           000001   618 	N = 1 ; local variable count
      000240 88               [ 1]  619 	push a
      000241 7B 01            [ 1]  620 1$: ld a,(N,sp)		
      000243 27 13            [ 1]  621 	jreq 2$ 
      000245 72 D6 00 04      [ 4]  622 	ld a,([idx_x],x)
      000249 91 D7 06         [ 4]  623 	ld ([idx_y],y),a
      00024C 72 5C 00 05      [ 1]  624 	inc idx_x+1
      000250 72 5C 00 07      [ 1]  625 	inc idx_y+1
      000254 0A 01            [ 1]  626 	dec (N,sp)
      000256 20 E9            [ 2]  627 	jra 1$
      000258 91 6F 06         [ 4]  628 2$: clr ([idx_y],y)
      00025B 84               [ 1]  629 	pop a
      00025C 81               [ 4]  630 	ret
                                    631 
                                    632 ;------------------------------------
                                    633 ; unsigned multiply uint24_t by uint8_t
                                    634 ; input:
                                    635 ;	U24		argument on stack
                                    636 ;   U8		in A
                                    637 ; output:
                                    638 ;   product   on stack replace U24 input
                                    639 ;-------------------------------------
                                    640 ; offset  on sp of arguments and locals
                           000008   641 	U24U = 8   ; U24 most significant byte
                           000009   642 	U24M = 9   ; U24 middle byte
                           00000A   643 	U24L = 10  ; U24 lowest significant byte
                           000003   644 	U8   = 3   ; A pushed on stack
                           000002   645 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   646 	OVFH = 1  ; multiplication overflow high byte, always 0
      00025D                        647 mulu24_8:
      00025D 89               [ 2]  648 	pushw x   
      00025E 88               [ 1]  649 	push a     ; U8
      00025F 5F               [ 1]  650 	clrw x     ; initialize overflow to 0
      000260 89               [ 2]  651 	pushw x    ; multiplication overflow
                                    652 ; multiply low byte.
      000261 7B 0A            [ 1]  653 	ld a,(U24L,sp)
      000263 97               [ 1]  654 	ld xl,a
      000264 7B 03            [ 1]  655 	ld a,(U8,sp)
      000266 42               [ 4]  656 	mul x,a
      000267 9F               [ 1]  657 	ld a,xl
      000268 6B 0A            [ 1]  658 	ld (U24L,sp),a
      00026A 9E               [ 1]  659 	ld a, xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00026B 6B 02            [ 1]  660 	ld (OVFL,sp),a
                                    661 ; multipy second byte
      00026D 7B 09            [ 1]  662 	ld a,(U24M,sp)
      00026F 97               [ 1]  663 	ld xl,a
      000270 7B 03            [ 1]  664 	ld a, (U8,sp)
      000272 42               [ 4]  665 	mul x,a
                                    666 ; add overflow to this partial product
      000273 72 FB 01         [ 2]  667 	addw x,(OVFH,sp)
      000276 9E               [ 1]  668 	ld a,xh
      000277 A9 00            [ 1]  669 	adc a,#0
      000279 6B 02            [ 1]  670 	ld (OVFL,sp),a
      00027B 9F               [ 1]  671 	ld a, xl
      00027C 6B 09            [ 1]  672 	ld (U24M,sp),a
                                    673 ; multiply most signficant digit	
      00027E 7B 08            [ 1]  674 	ld a, (U24U,sp)
      000280 97               [ 1]  675 	ld xl, a
      000281 7B 03            [ 1]  676 	ld a, (U8,sp)
      000283 42               [ 4]  677 	mul x,a
      000284 72 FB 01         [ 2]  678 	addw x, (OVFH,sp)
      000287 9F               [ 1]  679 	ld a, xl
      000288 6B 08            [ 1]  680 	ld (U24U,sp),a
      00028A 5B 03            [ 2]  681     addw sp,#3
      00028C 85               [ 2]  682 	popw x
      00028D 81               [ 4]  683 	ret
                                    684 
                                    685 ;-------------------------------------
                                    686 ; divide uint24_t by uint8_t
                                    687 ; used to convert uint24_t to string
                                    688 ; input:
                                    689 ;	addr24    divident uint24_t
                                    690 ;   A         divisor
                                    691 ; output:
                                    692 ;   addr24    quotient
                                    693 ;   A         remainder  
                                    694 ;------------------------------------- 
      00028E                        695 divu24_8:
      00028E 89               [ 2]  696 	pushw x
      00028F 88               [ 1]  697 	push a ; save divisor
      000290 AE 00 AB         [ 2]  698 	ldw x,#addr24
                                    699 ; check if divident is 0
      000293 F6               [ 1]  700 	ld a,(x)
      000294 EA 01            [ 1]  701 	or a,(1,x)
      000296 EA 02            [ 1]  702 	or a,(2,x)
      000298 27 19            [ 1]  703 	jreq 9$ ; divident==0
                                    704 ; divide 16 most significant bits
      00029A 90 CE 00 AB      [ 2]  705 	ldw y,addr24
      00029E 7B 01            [ 1]  706 	ld a,(1,sp)
      0002A0 90 62            [ 2]  707 	div y,a
      0002A2 FF               [ 2]  708 	ldw (x),Y
      0002A3 90 95            [ 1]  709 	ld yh,a
      0002A5 E6 02            [ 1]  710 	ld a,(2,x)
      0002A7 90 97            [ 1]  711 	ld yl,a
      0002A9 7B 01            [ 1]  712 	ld a,(1,sp)
      0002AB 90 62            [ 2]  713 	div y,a
      0002AD 6B 01            [ 1]  714 	ld (1,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0002AF 90 9F            [ 1]  715 	ld a,yl
      0002B1 E7 02            [ 1]  716 	ld (2,x),a
      0002B3 84               [ 1]  717 9$:	pop a
      0002B4 85               [ 2]  718 	popw x
      0002B5 81               [ 4]  719 	ret
                                    720 
                                    721 ;------------------------------------
                                    722 ; convert integer to string
                                    723 ; input:
                                    724 ;   a  base
                                    725 ;	addr24  integer to convert
                                    726 ; output:
                                    727 ;   y  pointer to string
                                    728 ;------------------------------------
      0002B6                        729 itoa:
                           000001   730 	SIGN=1
                           000002   731 	BASE=2
                           000002   732 	LOCAL_SIZE=2
      0002B6 89               [ 2]  733 	pushw x
      0002B7 88               [ 1]  734 	push a  ; base
      0002B8 4B 00            [ 1]  735 	push #0 ; sign
      0002BA A1 0A            [ 1]  736 	cp a,#10
      0002BC 26 0D            [ 1]  737 	jrne 1$
      0002BE 90 CF 00 A8      [ 2]  738 	ldw acc24,y
      0002C2 72 0F 00 A8 04   [ 2]  739 	btjf acc24,#7,1$
      0002C7 03 01            [ 1]  740 	cpl (SIGN,sp)
      0002C9 90 50            [ 2]  741 	negw y
                                    742 	; initialize string pointer 
      0002CB AE 00 4F         [ 2]  743 1$:	ldw x,#PAD_SIZE-1
      0002CE CF 00 A8         [ 2]  744 	ldw acc24,x
      0002D1 AE 00 58         [ 2]  745 	ldw x,#pad
      0002D4 72 BB 00 A8      [ 2]  746 	addw x,acc24
      0002D8 7F               [ 1]  747 	clr (x)
      0002D9 5A               [ 2]  748 	decw x
      0002DA A6 20            [ 1]  749 	ld a,#SPACE
      0002DC F7               [ 1]  750 	ld (x),a
      0002DD 72 5F 00 A8      [ 1]  751 	clr acc24
      0002E1 72 5F 00 A9      [ 1]  752 	clr acc24+1
      0002E5                        753 itoa_loop:
      0002E5 7B 02            [ 1]  754     ld a,(BASE,sp)
      0002E7 90 62            [ 2]  755     div y,a
      0002E9 AB 30            [ 1]  756     add a,#'0
      0002EB A1 3A            [ 1]  757     cp a,#'9+1
      0002ED 2B 02            [ 1]  758     jrmi 2$
      0002EF AB 07            [ 1]  759     add a,#7 
      0002F1 5A               [ 2]  760 2$: decw x
      0002F2 F7               [ 1]  761     ld (x),a
      0002F3 90 C3 00 A8      [ 2]  762     cpw y,acc24
      0002F7 26 EC            [ 1]  763     jrne itoa_loop
                                    764 	; copy string pointer in y
      0002F9 CF 00 A8         [ 2]  765     ldw acc24,x
      0002FC 90 CE 00 A8      [ 2]  766     ldw y,acc24
      000300 7B 02            [ 1]  767 	ld a,(BASE,sp)
      000302 A1 10            [ 1]  768 	cp a,#16
      000304 26 1B            [ 1]  769 	jrne 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000306 CD 03 DD         [ 4]  770     call strlen
      000309 A1 03            [ 1]  771     cp a,#3
      00030B 27 0C            [ 1]  772     jreq 8$
      00030D 25 04            [ 1]  773     jrult 7$
      00030F A1 05            [ 1]  774 	cp a,#5
      000311 27 06            [ 1]  775 	jreq 8$
      000313 90 5A            [ 2]  776 7$: decw y
      000315 A6 30            [ 1]  777     ld a,#'0
      000317 90 F7            [ 1]  778     ld (y),a
      000319 90 5A            [ 2]  779 8$:	decw y
      00031B A6 24            [ 1]  780 	ld a,#'$
      00031D 90 F7            [ 1]  781 	ld (y),a
      00031F 20 0A            [ 2]  782 	jra 10$
      000321 7B 01            [ 1]  783 9$: ld a,(SIGN,sp)
      000323 27 06            [ 1]  784     jreq 10$
      000325 90 5A            [ 2]  785     decw y
      000327 A6 2D            [ 1]  786     ld a,#'-
      000329 90 F7            [ 1]  787     ld (y),a
      00032B                        788 10$:
      00032B 5B 02            [ 2]  789 	addw sp,#LOCAL_SIZE
      00032D 85               [ 2]  790 	popw x
      00032E 81               [ 4]  791 	ret
                                    792 
                                    793 ;------------------------------------
                                    794 ;multiply Y=A*Y	
                                    795 ; input:
                                    796 ;    Y uint16_t
                                    797 ;    A uint8_t
                                    798 ; output:
                                    799 ;   Y uint16_t product modulo 65535
                                    800 ;------------------------------------
      00032F                        801 mul16x8:
      00032F 89               [ 2]  802 	pushw x ; save x
      000330 CE 00 A8         [ 2]  803 	ldw x, acc24 ; save it
      000333 89               [ 2]  804 	pushw x
      000334 93               [ 1]  805 	ldw x,y
      000335 42               [ 4]  806 	mul x,a ; a*yl
      000336 CF 00 A8         [ 2]  807 	ldw acc24,x
      000339 90 5E            [ 1]  808 	swapw y
      00033B 90 42            [ 4]  809 	mul y,a ; a*yh
                                    810 	; y*=256
      00033D 90 5E            [ 1]  811 	swapw y
      00033F 4F               [ 1]  812 	clr a
      000340 90 97            [ 1]  813 	ld yl,a
      000342 72 B9 00 A8      [ 2]  814 	addw y,acc24
      000346 85               [ 2]  815 	popw x ; restore acc24
      000347 CF 00 A8         [ 2]  816 	ldw acc24,x
      00034A 85               [ 2]  817 	popw x ; restore x
      00034B 81               [ 4]  818 	ret
                                    819 
                                    820 ;------------------------------------
                                    821 ; check if character in {'0'..'9'}
                                    822 ; input:
                                    823 ;    a  character to test
                                    824 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                    825 ;    a  0|1
                                    826 ;------------------------------------
      00034C                        827 is_digit:
      00034C A1 30            [ 1]  828 	cp a,#'0
      00034E 2A 02            [ 1]  829 	jrpl 1$
      000350 4F               [ 1]  830 0$:	clr a
      000351 81               [ 4]  831 	ret
      000352 A1 39            [ 1]  832 1$: cp a,#'9
      000354 22 FA            [ 1]  833     jrugt 0$
      000356 A6 01            [ 1]  834     ld a,#1
      000358 81               [ 4]  835     ret
                                    836 	
                                    837 ;------------------------------------
                                    838 ; check if character in {'0'..'9','A'..'F'}
                                    839 ; input:
                                    840 ;   a  character to test
                                    841 ; output:
                                    842 ;   a   0|1 
                                    843 ;------------------------------------
      000359                        844 is_hex:
      000359 88               [ 1]  845 	push a
      00035A CD 03 4C         [ 4]  846 	call is_digit
      00035D A1 01            [ 1]  847 	cp a,#1
      00035F 26 03            [ 1]  848 	jrne 1$
      000361 5B 01            [ 2]  849 	addw sp,#1
      000363 81               [ 4]  850 	ret
      000364 84               [ 1]  851 1$:	pop a
      000365 A1 61            [ 1]  852 	cp a,#'a
      000367 2B 02            [ 1]  853 	jrmi 2$
      000369 A0 20            [ 1]  854 	sub a,#32
      00036B A1 41            [ 1]  855 2$: cp a,#'A
      00036D 2A 02            [ 1]  856     jrpl 3$
      00036F 4F               [ 1]  857 0$: clr a
      000370 81               [ 4]  858     ret
      000371 A1 46            [ 1]  859 3$: cp a,#'F
      000373 22 FA            [ 1]  860     jrugt 0$
      000375 A6 01            [ 1]  861     ld a,#1
      000377 81               [ 4]  862     ret
                                    863             	
                                    864 ;------------------------------------
                                    865 ; convert alpha to uppercase
                                    866 ; input:
                                    867 ;    a  character to convert
                                    868 ; output:
                                    869 ;    a  uppercase character
                                    870 ;------------------------------------
      000378                        871 a_upper:
      000378 A1 61            [ 1]  872 	cp a,#'a
      00037A 2A 01            [ 1]  873 	jrpl 1$
      00037C 81               [ 4]  874 0$:	ret
      00037D A1 7A            [ 1]  875 1$: cp a,#'z	
      00037F 22 FB            [ 1]  876 	jrugt 0$
      000381 A0 20            [ 1]  877 	sub a,#32
      000383 81               [ 4]  878 	ret
                                    879 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                    880 ;------------------------------------
                                    881 ; convert pad content in integer
                                    882 ; input:
                                    883 ;    pad
                                    884 ; output:
                                    885 ;    y
                                    886 ;------------------------------------
      000384                        887 atoi:
                                    888 	; local variables
                           000001   889 	SIGN=1 ; 1 byte, 
                           000002   890 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   891 	TEMP=3 ; 1 byte, temporary storage
                           000003   892 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      000384 89               [ 2]  893 	pushw x ;save x
      000385 52 03            [ 2]  894 	sub sp,#LOCAL_SIZE
      000387 0F 01            [ 1]  895 	clr (SIGN,sp)
      000389 A6 0A            [ 1]  896 	ld a,#10
      00038B 6B 02            [ 1]  897 	ld (BASE,sp),a ; default base decimal
      00038D AE 00 58         [ 2]  898 	ldw x,#pad ; pointer to string to convert
      000390 90 5F            [ 1]  899 	clrw y    ; convertion result
      000392 F6               [ 1]  900 	ld a,(x)
      000393 27 3E            [ 1]  901 	jreq 9$
      000395 A1 2D            [ 1]  902 	cp a,#'-
      000397 26 04            [ 1]  903 	jrne 1$
      000399 03 01            [ 1]  904 	cpl (SIGN,sp)
      00039B 20 08            [ 2]  905 	jra 2$
      00039D A1 24            [ 1]  906 1$: cp a,#'$
      00039F 26 06            [ 1]  907 	jrne 3$
      0003A1 A6 10            [ 1]  908 	ld a,#16
      0003A3 6B 02            [ 1]  909 	ld (BASE,sp),a
      0003A5 5C               [ 1]  910 2$:	incw x
      0003A6 F6               [ 1]  911 	ld a,(x)
      0003A7                        912 3$:	
      0003A7 A1 61            [ 1]  913 	cp a,#'a
      0003A9 2B 02            [ 1]  914 	jrmi 4$
      0003AB A0 20            [ 1]  915 	sub a,#32
      0003AD A1 30            [ 1]  916 4$:	cp a,#'0
      0003AF 2B 22            [ 1]  917 	jrmi 9$
      0003B1 A0 30            [ 1]  918 	sub a,#'0
      0003B3 A1 0A            [ 1]  919 	cp a,#10
      0003B5 2B 06            [ 1]  920 	jrmi 5$
      0003B7 A0 07            [ 1]  921 	sub a,#7
      0003B9 11 02            [ 1]  922 	cp a,(BASE,sp)
      0003BB 2A 16            [ 1]  923 	jrpl 9$
      0003BD 6B 03            [ 1]  924 5$:	ld (TEMP,sp),a
      0003BF 7B 02            [ 1]  925 	ld a,(BASE,sp)
      0003C1 CD 03 2F         [ 4]  926 	call mul16x8
      0003C4 7B 03            [ 1]  927 	ld a,(TEMP,sp)
      0003C6 C7 00 A9         [ 1]  928 	ld acc24+1,a
      0003C9 72 5F 00 A8      [ 1]  929 	clr acc24
      0003CD 72 B9 00 A8      [ 2]  930 	addw y,acc24
      0003D1 20 D2            [ 2]  931 	jra 2$
      0003D3 0D 01            [ 1]  932 9$:	tnz (SIGN,sp)
      0003D5 27 02            [ 1]  933     jreq 11$
      0003D7 90 50            [ 2]  934     negw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0003D9 5B 03            [ 2]  935 11$: addw sp,#LOCAL_SIZE
      0003DB 85               [ 2]  936 	popw x ; restore x
      0003DC 81               [ 4]  937 	ret
                                    938 
                                    939 ;------------------------------------
                                    940 ;strlen  return ASCIIZ string length
                                    941 ; input:
                                    942 ;	y  pointer to string
                                    943 ; output:
                                    944 ;	a   length  < 256
                                    945 ;------------------------------------
      0003DD                        946 strlen:
                           000001   947 	LEN=1
      0003DD 90 89            [ 2]  948     pushw y
      0003DF 4B 00            [ 1]  949     push #0
      0003E1 90 F6            [ 1]  950 0$: ld a,(y)
      0003E3 27 06            [ 1]  951     jreq 1$
      0003E5 0C 01            [ 1]  952     inc (LEN,sp)
      0003E7 90 5C            [ 1]  953     incw y
      0003E9 20 F6            [ 2]  954     jra 0$
      0003EB 84               [ 1]  955 1$: pop a
      0003EC 90 85            [ 2]  956     popw y
      0003EE 81               [ 4]  957     ret
                                    958 	
                                    959 ;------------------------------------
                                    960 ; peek addr, print byte at this address 
                                    961 ; input:
                                    962 ;	 y   address to peek
                                    963 ;    a   numeric base for convertion
                                    964 ; output:
                                    965 ;    print byte value at this address
                                    966 ;------------------------------------
      0003EF                        967 peek:
      0003EF 90 89            [ 2]  968 	pushw y
      0003F1 88               [ 1]  969     push a
      0003F2 90 F6            [ 1]  970     ld a,(y)
      0003F4 90 97            [ 1]  971     ld yl,a
      0003F6 4F               [ 1]  972     clr a
      0003F7 90 95            [ 1]  973     ld yh,a
      0003F9 84               [ 1]  974     pop a
      0003FA CD 02 B6         [ 4]  975     call itoa
      0003FD CD 00 F3         [ 4]  976     call uart_print
      000400 90 85            [ 2]  977     popw y
      000402 81               [ 4]  978     ret	
                                    979 	
                                    980 ;------------------------------------
                                    981 ; get a number from command line next argument
                                    982 ;  input:
                                    983 ;	  none
                                    984 ;  output:
                                    985 ;    y   uint16_t 
                                    986 ;------------------------------------
      000403                        987 number:
      000403 CD 02 08         [ 4]  988 	call next_word
      000406 CD 03 84         [ 4]  989 	call atoi
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000409 81               [ 4]  990 	ret
                                    991 	
                                    992 	; write a byte in memory
                                    993 	; input:
                                    994 	;    a  byte to write
                                    995 	;    y  address 
                                    996 	; output:
                                    997 	;    none
      00040A                        998 write_byte:
      00040A 90 A3 80 00      [ 2]  999     cpw y,#FLASH_BASE
      00040E 2A 2E            [ 1] 1000     jrpl write_flash
      000410 90 A3 40 00      [ 2] 1001     cpw y,#EEPROM_BASE
      000414 2B 06            [ 1] 1002 	jrmi 1$
      000416 90 A3 48 80      [ 2] 1003 	cpw y,#OPTION_END+1  
      00041A 2B 44            [ 1] 1004     jrmi write_eeprom
      00041C 90 C3 00 AE      [ 2] 1005 1$: cpw y,ram_free_base
      000420 2A 01            [ 1] 1006     jrpl 2$
      000422 81               [ 4] 1007     ret
      000423 90 A3 18 00      [ 2] 1008 2$: cpw y,#STACK_TOP+1
      000427 2B 03            [ 1] 1009     jrmi 3$
      000429 CC 04 2F         [ 2] 1010     jp write_sfr    
      00042C 90 F7            [ 1] 1011 3$: ld (y),a
      00042E 81               [ 4] 1012 	ret
                                   1013 	; write SFR
      00042F                       1014 write_sfr:
      00042F 90 A3 50 00      [ 2] 1015 	cpw y,#SFR_BASE
      000433 2B 08            [ 1] 1016 	jrmi 2$
      000435 90 A3 58 00      [ 2] 1017 	cpw y,#SFR_END+1
      000439 2A 02            [ 1] 1018 	jrpl 2$
      00043B 90 F7            [ 1] 1019 	ld (y),a
      00043D 81               [ 4] 1020 2$:	ret
                                   1021 	; write program memory
      00043E                       1022 write_flash:
      00043E 90 C3 00 B0      [ 2] 1023 	cpw y,flash_free_base
      000442 2A 01            [ 1] 1024 	jrpl 0$
      000444 81               [ 4] 1025 	ret
      000445 35 56 50 62      [ 1] 1026 0$:	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000449 35 AE 50 62      [ 1] 1027 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00044D 72 03 50 5F FB   [ 2] 1028 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000452                       1029 1$:	_no_interrupts
      000452 9B               [ 1]    1 		sim
      000453 90 F7            [ 1] 1030 	ld (y),a
      000455 72 05 50 5F FB   [ 2] 1031 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00045A                       1032     _interrupts
      00045A 9A               [ 1]    1 		 rim
      00045B 72 13 50 5F      [ 1] 1033     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00045F 81               [ 4] 1034     ret
                                   1035     ; write eeprom and option
      000460                       1036 write_eeprom:
                           000002  1037 	OPT=2
                           000001  1038 	BYTE=1
                           000002  1039 	LOCAL_SIZE=2
      000460 4B 00            [ 1] 1040 	push #0
      000462 88               [ 1] 1041 	push a
                                   1042 	; check for data eeprom or option eeprom
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000463 90 A3 48 00      [ 2] 1043 	cpw y,#OPTION_BASE
      000467 2B 08            [ 1] 1044 	jrmi 1$
      000469 90 A3 48 80      [ 2] 1045 	cpw y,#OPTION_END+1
      00046D 2A 02            [ 1] 1046 	jrpl 1$
      00046F 03 02            [ 1] 1047 	cpl (OPT,sp)
      000471 35 AE 50 64      [ 1] 1048 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000475 35 56 50 64      [ 1] 1049     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000479 7B 02            [ 1] 1050     ld a,(OPT,sp)
      00047B 27 08            [ 1] 1051     jreq 2$
      00047D 72 1E 50 5B      [ 1] 1052     bset FLASH_CR2,#FLASH_CR2_OPT
      000481 72 1F 50 5C      [ 1] 1053     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000485 72 07 50 5F FB   [ 2] 1054 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00048A 7B 01            [ 1] 1055     ld a,(BYTE,sp)
      00048C 90 F7            [ 1] 1056     ld (y),a
      00048E 90 5C            [ 1] 1057     incw y
      000490 7B 02            [ 1] 1058     ld a,(OPT,sp)
      000492 27 05            [ 1] 1059     jreq 3$
      000494 7B 01            [ 1] 1060     ld a,(BYTE,sp)
      000496 43               [ 1] 1061     cpl a
      000497 90 F7            [ 1] 1062     ld (y),a
      000499 72 05 50 5F FB   [ 2] 1063 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00049E 5B 02            [ 2] 1064 	addw sp,#LOCAL_SIZE
      0004A0 81               [ 4] 1065     ret
                                   1066         
                                   1067 		  
                                   1068 ;------------------------------------
                                   1069 ; evaluate command string in tib
                                   1070 ; list of commands
                                   1071 ;   @  addr display content at address
                                   1072 ;   !  addr byte [byte ]* store bytes at address
                                   1073 ;   ?  diplay command help
                                   1074 ;   b  n    convert n in the other base
                                   1075 ;	c  addr bitmask  clear  bits at address
                                   1076 ;   h  addr hex dump memory starting at address
                                   1077 ;   m  src dest count,  move memory block
                                   1078 ;   r  reset MCU
                                   1079 ;   s  addr bitmask  set a bits at address
                                   1080 ;   t  addr bitmask  toggle bits at address
                                   1081 ;   x  addr execute  code at address  
                                   1082 ;------------------------------------
      0004A1                       1083 eval:
      0004A1 C6 00 02         [ 1] 1084 	ld a, in
      0004A4 C1 00 03         [ 1] 1085 	cp a, count
      0004A7 26 01            [ 1] 1086 	jrne 0$
      0004A9 81               [ 4] 1087 	ret ; nothing to evaluate
      0004AA CD 02 08         [ 4] 1088 0$:	call next_word
      0004AD 90 AE 00 58      [ 2] 1089 	ldw y,#pad
      0004B1 90 F6            [ 1] 1090     ld a,(y)	
      0004B3 A1 40            [ 1] 1091 	cp a,#'@
      0004B5 26 03            [ 1] 1092 	jrne 1$
      0004B7 CC 05 0B         [ 2] 1093 	jp fetch
      0004BA A1 21            [ 1] 1094 1$:	cp a,#'!
      0004BC 26 03            [ 1] 1095 	jrne 10$
      0004BE CC 05 2F         [ 2] 1096 	jp store
      0004C1                       1097 10$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0004C1 A1 3F            [ 1] 1098 	cp a,#'?
      0004C3 26 03            [ 1] 1099 	jrne 15$
      0004C5 CC 05 51         [ 2] 1100 	jp help
      0004C8                       1101 15$: 
      0004C8 A1 62            [ 1] 1102 	cp a,#'b
      0004CA 26 03            [ 1] 1103     jrne 2$
      0004CC CC 05 59         [ 2] 1104     jp base_convert	
      0004CF A1 63            [ 1] 1105 2$:	cp a,#'c
      0004D1 26 03            [ 1] 1106 	jrne 3$
      0004D3 CC 05 70         [ 2] 1107 	jp clear_bits
      0004D6 A1 68            [ 1] 1108 3$:	cp a,#'h
      0004D8 26 03            [ 1] 1109 	jrne 4$
      0004DA CC 05 82         [ 2] 1110 	jp hexdump
      0004DD A1 6D            [ 1] 1111 4$:	cp a,#'m
      0004DF 26 03            [ 1] 1112 	jrne 5$
      0004E1 CC 05 DD         [ 2] 1113 	jp move_memory
      0004E4 A1 72            [ 1] 1114 5$: cp a,#'r
      0004E6 26 03            [ 1] 1115     jrne 6$
      0004E8 CD 00 CD         [ 4] 1116 	call NonHandledInterrupt	
      0004EB A1 73            [ 1] 1117 6$:	cp a,#'s
      0004ED 26 03            [ 1] 1118 	jrne 7$
      0004EF CC 06 0A         [ 2] 1119 	jp set_bits
      0004F2 A1 74            [ 1] 1120 7$:	cp a,#'t
      0004F4 26 03            [ 1] 1121 	jrne 8$
      0004F6 CC 06 1B         [ 2] 1122 	jp toggle_bits
      0004F9 A1 78            [ 1] 1123 8$:	cp a,#'x
      0004FB 26 03            [ 1] 1124 	jrne 9$
      0004FD CC 06 2C         [ 2] 1125 	jp execute
      000500 CD 00 F3         [ 4] 1126 9$:	call uart_print
      000503 90 AE 06 FC      [ 2] 1127 	ldw y,#BAD_CMD
      000507 CD 00 F3         [ 4] 1128 	call uart_print
      00050A 81               [ 4] 1129 	ret
                                   1130 	
                                   1131 ;------------------------------------
                                   1132 ; fetch a byte and display it,  @  addr
                                   1133 ;------------------------------------
      00050B                       1134 fetch:
      00050B CD 04 03         [ 4] 1135 	call number 
      00050E 90 89            [ 2] 1136 	pushw y
      000510 90 AE 00 58      [ 2] 1137 	ldw y,#pad
      000514 CD 00 F3         [ 4] 1138 	call uart_print
      000517 A6 3D            [ 1] 1139 	ld a,#'=
      000519 CD 00 E9         [ 4] 1140 	call uart_tx	
      00051C 90 85            [ 2] 1141 	popw y
      00051E C6 00 58         [ 1] 1142 	ld a,pad
      000521 A1 24            [ 1] 1143 	cp a,#'$
      000523 27 04            [ 1] 1144 	jreq 1$
      000525 A6 0A            [ 1] 1145 	ld a,#10
      000527 20 02            [ 2] 1146 	jra 2$
      000529 A6 10            [ 1] 1147 1$: ld a,#16	
      00052B CD 03 EF         [ 4] 1148 2$:	call peek
      00052E 81               [ 4] 1149 	ret
                                   1150 	
                                   1151 ;------------------------------------
                                   1152 ; store bytes,   !  addr byte [byte ]*
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1153 ;------------------------------------
      00052F                       1154 store:
                           000001  1155 	MADDR=1
      00052F CD 04 03         [ 4] 1156 	call number
      000532 90 89            [ 2] 1157 	pushw y
      000534 CD 04 03         [ 4] 1158 1$:	call number
      000537 90 9F            [ 1] 1159 	ld a,yl
      000539 16 01            [ 2] 1160 	ldw y,(MADDR,sp)
      00053B CD 04 0A         [ 4] 1161 	call write_byte
      00053E C6 00 02         [ 1] 1162 	ld a,in
      000541 C1 00 03         [ 1] 1163 	cp a,count
      000544 27 08            [ 1] 1164 	jreq 2$
      000546 16 01            [ 2] 1165 	ldw y,(MADDR,sp)
      000548 90 5C            [ 1] 1166 	incw y
      00054A 17 01            [ 2] 1167 	ldw (MADDR,sp),y
      00054C 20 E6            [ 2] 1168 	jra 1$
      00054E 90 85            [ 2] 1169 2$:	popw y
      000550 81               [ 4] 1170 	ret
                                   1171 
                                   1172 ;------------------------------------
                                   1173 ; ? , display command information
                                   1174 ;------------------------------------
      000551                       1175 help:
      000551 90 AE 07 0F      [ 2] 1176 	ldw y, #HELP
      000555 CD 00 F3         [ 4] 1177 	call uart_print
      000558 81               [ 4] 1178 	ret
                                   1179 	; convert from one numeric base to the other
                                   1180 	;  b n|$n
      000559                       1181 base_convert:
      000559 CD 04 03         [ 4] 1182     call number
      00055C C6 00 58         [ 1] 1183     ld a,pad
      00055F A1 24            [ 1] 1184     cp a,#'$
      000561 26 04            [ 1] 1185     jrne 1$
      000563 A6 0A            [ 1] 1186     ld a,#10
      000565 20 02            [ 2] 1187     jra 2$
      000567 A6 10            [ 1] 1188 1$: ld a,#16
      000569 CD 02 B6         [ 4] 1189 2$: call itoa
      00056C CD 00 F3         [ 4] 1190     call uart_print
      00056F 81               [ 4] 1191     ret
                                   1192         	
                                   1193 ;------------------------------------
                                   1194 ; clear bitmask, c addr mask
                                   1195 ;------------------------------------
      000570                       1196 clear_bits:
      000570 CD 04 03         [ 4] 1197 	call number
      000573 90 89            [ 2] 1198 	pushw y
      000575 CD 04 03         [ 4] 1199 	call number
      000578 90 9F            [ 1] 1200 	ld a,yl
      00057A 43               [ 1] 1201 	cpl a
      00057B 90 85            [ 2] 1202 	popw y
      00057D 90 F4            [ 1] 1203 	and a,(y)
      00057F 90 F7            [ 1] 1204 	ld (y),a
      000581 81               [ 4] 1205     ret
                                   1206     
                                   1207 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   1208 ; hexadecimal dump memory, h addr
                                   1209 ; stop after each row, SPACE continue, other stop
                                   1210 ;------------------------------------
      000582                       1211 hexdump: 
                           000001  1212 	MADDR = 1
                           000003  1213 	CNTR = 3 ; loop counter
                           000003  1214 	LOCAL_SIZE=3
      000582 52 03            [ 2] 1215 	sub sp,#LOCAL_SIZE
      000584 CD 04 03         [ 4] 1216 	call number
      000587 17 01            [ 2] 1217     ldw (MADDR,sp),y ; save address
      000589                       1218 row_init:
      000589 AE 00 58         [ 2] 1219 	ldw x,#pad
      00058C A6 10            [ 1] 1220 	ld a,#16
      00058E CD 02 B6         [ 4] 1221 	call itoa
      000591 CD 00 F3         [ 4] 1222 	call uart_print
      000594 A6 20            [ 1] 1223 	ld a,#SPACE
      000596 CD 00 E9         [ 4] 1224 	call uart_tx
      000599 A6 08            [ 1] 1225     ld a,#8
      00059B 6B 03            [ 1] 1226     ld (CNTR,sp),a
      00059D                       1227 row:
      00059D A6 10            [ 1] 1228 	ld a,#16
      00059F 16 01            [ 2] 1229 	ldw y,(MADDR,sp)
      0005A1 CD 03 EF         [ 4] 1230 	call peek
      0005A4 90 F6            [ 1] 1231 	ld a,(y)
      0005A6 A1 20            [ 1] 1232 	cp a,#SPACE
      0005A8 2A 02            [ 1] 1233 	jrpl 1$
      0005AA A6 20            [ 1] 1234 	ld a,#SPACE
      0005AC A1 80            [ 1] 1235 1$:	cp a,#128
      0005AE 2B 02            [ 1] 1236     jrmi 2$
      0005B0 A6 20            [ 1] 1237     ld a,#SPACE
      0005B2 F7               [ 1] 1238 2$: ld (x),a
      0005B3 5C               [ 1] 1239 	incw x
      0005B4 90 5C            [ 1] 1240 	incw y
      0005B6 17 01            [ 2] 1241 	ldw (MADDR,sp),y
      0005B8 0A 03            [ 1] 1242 	dec (CNTR,sp)
      0005BA 26 E1            [ 1] 1243 	jrne row
      0005BC A6 20            [ 1] 1244 	ld a,#SPACE
      0005BE CD 00 E9         [ 4] 1245 	call uart_tx
      0005C1 4F               [ 1] 1246 	clr a
      0005C2 F7               [ 1] 1247 	ld (x),a
      0005C3 90 89            [ 2] 1248 	pushw y
      0005C5 90 AE 00 58      [ 2] 1249 	ldw y,#pad
      0005C9 CD 00 F3         [ 4] 1250 	call uart_print
      0005CC 90 85            [ 2] 1251 	popw y
      0005CE A6 0A            [ 1] 1252 	ld a,#NL
      0005D0 CD 00 E9         [ 4] 1253 	call uart_tx
      0005D3 CD 01 0B         [ 4] 1254 	call uart_getchar
      0005D6 A1 20            [ 1] 1255 	cp a,#SPACE
      0005D8 27 AF            [ 1] 1256 	jreq row_init
      0005DA 5B 03            [ 2] 1257     addw sp,#LOCAL_SIZE
      0005DC 81               [ 4] 1258     ret
                                   1259     
                                   1260 ;------------------------------------
                                   1261 ; move memory block, m src dest count
                                   1262 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0005DD                       1263 move_memory:
                           000003  1264     SRC=3
                           000001  1265     DEST=1
                           000004  1266     LOCAL_SIZE=4    
      0005DD CD 04 03         [ 4] 1267     call number
      0005E0 90 89            [ 2] 1268     pushw y  ; source
      0005E2 CD 04 03         [ 4] 1269     call number
      0005E5 90 89            [ 2] 1270     pushw y  ; destination
      0005E7 CD 04 03         [ 4] 1271     call number 
      0005EA 90 CF 00 A8      [ 2] 1272     ldw acc24,y ; counter
      0005EE 1E 03            [ 2] 1273     ldw x,(SRC,sp)  ; source
      0005F0                       1274 move_loop:
      0005F0 16 01            [ 2] 1275     ldw y,(DEST,sp)  ; destination
      0005F2 F6               [ 1] 1276     ld a,(x)
      0005F3 CD 04 0A         [ 4] 1277     call write_byte
      0005F6 5C               [ 1] 1278     incw x
      0005F7 90 5C            [ 1] 1279     incw y
      0005F9 17 01            [ 2] 1280     ldw (DEST,sp),y
      0005FB 90 CE 00 A8      [ 2] 1281     ldw y,acc24
      0005FF 90 5A            [ 2] 1282     decw y
      000601 90 CF 00 A8      [ 2] 1283     ldw acc24,y
      000605 26 E9            [ 1] 1284     jrne move_loop
      000607 5B 04            [ 2] 1285     addw sp,#LOCAL_SIZE
      000609 81               [ 4] 1286     ret
                                   1287     
                                   1288 ;------------------------------------
                                   1289 ; clear bitmask,  c addr mask
                                   1290 ;------------------------------------
      00060A                       1291 set_bits:
      00060A CD 04 03         [ 4] 1292 	call number
      00060D 90 89            [ 2] 1293 	pushw y
      00060F CD 04 03         [ 4] 1294 	call number
      000612 90 9F            [ 1] 1295 	ld a,yl
      000614 90 85            [ 2] 1296 	popw y
      000616 90 FA            [ 1] 1297 	or a,(y)
      000618 90 F7            [ 1] 1298 	ld (y),a
      00061A 81               [ 4] 1299     ret
                                   1300     
                                   1301 ;------------------------------------
                                   1302 ; toggle bitmask,  t addr mask
                                   1303 ;------------------------------------
      00061B                       1304 toggle_bits:
      00061B CD 04 03         [ 4] 1305 	call number
      00061E 90 89            [ 2] 1306     pushw y
      000620 CD 04 03         [ 4] 1307     call number
      000623 90 9F            [ 1] 1308     ld a,yl
      000625 90 85            [ 2] 1309     popw y
      000627 90 F8            [ 1] 1310     xor a,(y)
      000629 90 F7            [ 1] 1311     ld (y),a
      00062B 81               [ 4] 1312     ret
                                   1313     
                                   1314 ;------------------------------------
                                   1315 ; execute binary code,   x addr
                                   1316 ;------------------------------------
      00062C                       1317 execute:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00062C CD 04 03         [ 4] 1318 	call number
      00062F 90 FC            [ 2] 1319 	jp (y)
                                   1320 	
                                   1321 ;------------------------
                                   1322 ;  run time CONSTANTS
                                   1323 ;------------------------
                                   1324 ; messages strings
                                   1325 ;------------------------	
      000631 4D 4F 4E 41 20 56 45  1326 VERSION:	.asciz "MONA VERSION 0.1\nstm8s208rb     memory map\n---------------------------\n"
             52 53 49 4F 4E 20 30
             2E 31 0A 73 74 6D 38
             73 32 30 38 72 62 20
             20 20 20 20 6D 65 6D
             6F 72 79 20 6D 61 70
             0A 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             0A 00
      000679 72 61 6D 20 66 72 65  1327 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      000684 2D 20 24 31 36 46 46  1328 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      00068D 66 72 65 65 20 66 6C  1329 FLASH_FREE_MSG: .asciz "free flash: "
             61 73 68 3A 20 00
      00069A 20 2D 20 24 32 37 46  1330 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      0006A4 65 65 70 72 6F 6D 3A  1331             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      0006BA 6F 70 74 69 6F 6E 3A  1332             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      0006D0 53 46 52 3A 20 24 35  1333             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      0006E3 62 6F 6F 74 20 52 4F  1334             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
             46 46 0A 00
      0006FC 20 69 73 20 6E 6F 74  1335 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      00070F 63 6F 6D 6D 61 6E 64  1336 HELP: .ascii "commands:\n"
             73 3A 0A
      000719 40 20 61 64 64 72 2C  1337 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      00073C 21 20 61 64 64 72 20  1338 	  .ascii "! addr byte [byte ]*, store bytes at addr++\n"
             62 79 74 65 20 5B 62
             79 74 65 20 5D 2A 2C
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             20 73 74 6F 72 65 20
             62 79 74 65 73 20 61
             74 20 61 64 64 72 2B
             2B 0A
      000768 3F 2C 20 64 69 70 6C  1339 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      00077F 62 20 6E 7C 24 6E 2C  1340 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      0007A3 63 20 61 64 64 72 20  1341 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
             74 20 61 64 64 72 65
             73 73 0A
      0007C9 68 20 61 64 64 72 2C  1342 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      0007F5 6D 20 73 72 63 20 64  1343 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      000819 72 20 72 65 73 65 74  1344 	  .ascii "r reset MCU\n"
             20 4D 43 55 0A
      000825 73 20 61 64 64 72 20  1345 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
      000849 74 20 61 64 64 72 20  1346 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      000870 78 20 61 64 64 72 2C  1347 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
                                   1348 
                                   1349 ; following flash memory is not used by MONA
      000892                       1350 flash_free:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   1351 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   8 BAD_CMD    0006FC R
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BSP     =  000008     |     BTN1_BIT=  000004     |     BTN1_MAS=  000010 
    BTN1_POR=  005014     |     BYTE    =  000001     |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CFG_GCR =  007F60     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CNTR    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]

Symbol Table

    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |   8 EEPROM_M   00069A R   |     EEPROM_S=  000800 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |   8 FLASH_FR   00068D R
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  8 HELP       00070F R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000001     |     LOCAL_SI=  000004     |     MADDR   =  000001 
    N       =  000001     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   8 NonHandl   0000CD R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000050     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]

Symbol Table

    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   8 RAM_FREE   000679 R   |   8 RAM_LAST   000684 R
    RAM_SIZE=  001800     |     ROP     =  004800     |     RST_SR  =  0050B3 
    RXCHAR  =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SIGN    =  000001     |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_BA=  001700 
    STACK_SI=  000100     |     STACK_TO=  0017FF     |     SWIM_CSR=  007F80 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     U24L    =  00000A 
    U24M    =  000009     |     U24U    =  000008     |     U8      =  000003 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PS=  00523A     |     UART1_SR=  005230     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_SR=  005240     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DAT=  000001     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UART_STA=  000002     |     UBC     =  004801 
  8 VERSION    000631 R   |     VERS_MAJ=  000000     |     VERS_MIN=  000002 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XSAVE   =  000002     |   7 __interr   000000 R
  6 __stack_   001700 R   |   4 _user_ra   000000 R   |   8 a_upper    000378 R
  3 acc24      0000A8 R   |   8 accept_c   00018C R   |   3 addr24     0000AB R
  8 atoi       000384 R   |   8 base_con   000559 R   |   8 cancel     0001C5 R
  8 clear_al   000028 R   |   8 clear_bi   000570 R   |   8 clock_in   000000 R
  3 count      000003 R   |   8 del_back   00017B R   |   8 del_line   00016A R
  8 del_loop   000120 R   |   8 divu24_8   00028E R   |   8 eval       0004A1 R
  8 execute    00062C R   |   8 fetch      00050B R   |   8 flash_fr   000892 R
  3 flash_fr   0000B0 R   |   8 help       000551 R   |   8 hexdump    000582 R
  3 idx_x      000004 R   |   3 idx_y      000006 R   |   3 in         000002 R
  3 in.w       000001 R   |   8 init0      000033 R   |   8 is_digit   00034C R
  8 is_hex     000359 R   |   8 itoa       0002B6 R   |   8 itoa_loo   0002E5 R
  8 main       000070 R   |   8 move_loo   0005F0 R   |   8 move_mem   0005DD R
  8 mul16x8    00032F R   |   8 mulu24_8   00025D R   |   8 next_wor   000208 R
  8 number     000403 R   |   3 pad        000058 R   |   8 peek       0003EF R
  3 ram_free   0000AE R   |   8 readln     000139 R   |   8 readln_l   000141 R
  8 readln_q   0001CF R   |   8 readln_q   0001D4 R   |   8 repl       0000B1 R
  8 reprint    0001A1 R   |   8 row        00059D R   |   8 row_init   000589 R
  3 rx_char    000000 R   |   8 scan       0001F2 R   |   8 set_bits   00060A R
  8 skip       0001DC R   |   8 store      00052F R   |   8 strcpyn    000240 R
  8 strlen     0003DD R   |   3 tib        000008 R   |   8 toggle_b   00061B R
  8 uart3_in   00000F R   |   8 uart_del   00011F R   |   8 uart_get   00010B R
  8 uart_pri   0000F3 R   |   8 uart_qch   0000FF R   |   8 uart_rx_   0000D2 R
  8 uart_tx    0000E9 R   |   8 ungetcha   000105 R   |   8 write_by   00040A R
  8 write_ee   000460 R   |   8 write_fl   00043E R   |   8 write_sf   00042F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 BOOTLOAD   size      0   flags    8
   2 BOOTLOAD   size      0   flags    8
   3 DATA       size     B2   flags    0
   4 USER_RAM   size      0   flags    0
   5 SSEG       size      0   flags    8
   6 SSEG1      size    100   flags    8
   7 HOME       size     7C   flags    0
   8 CODE       size    892   flags    0


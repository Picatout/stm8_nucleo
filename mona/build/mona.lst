ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;  MONA   MONitor written in Assembly
                                      2 	.module MONA 
                                      3     .optsdcc -mstm8
                                      4 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                      5 	.include "../inc/nucleo_8s208.inc"
                                      1 ; NUCLEO-8S208RB board specific definitions
                                      2 
                                      3 ; mcu on board is stm8s208rbt6
                                      4 
                                      5 ; crystal on board is 8Mhz
                           7A1200     6 FHSE = 8000000
                                      7 
                                      8 ; LED2 is user LED
                                      9 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    10 LED2_PORT = 0x500a ;port C
                           000005    11 LED2_BIT = 5
                           000020    12 LED2_MASK = (1<<5) ;bit 5 mask
                                     13 
                                     14 ; B1 is user button
                                     15 ; connected to PE4
                                     16 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005014    17 BTN1_PORT = 0x5014 ; port E
                           000004    18 BTN1_BIT = 4
                           000010    19 BTN1_MASK = (1<<4) ;bit 4 mask
                                     20 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                      6 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB ÂµC registers map
                                      4 ; sdas file
                                      5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      6 	.module stm8s208rb
                                      7 
                                      8 ;;;;;;;;;;;;
                                      9 ; bits
                                     10 ;;;;;;;;;;;;
                           000000    11  BIT0 = 0
                           000001    12  BIT1 = 1
                           000002    13  BIT2 = 2
                           000003    14  BIT3 = 3
                           000004    15  BIT4 = 4
                           000005    16  BIT5 = 5
                           000006    17  BIT6 = 6
                           000007    18  BIT7 = 7
                                     19  	
                                     20 ;;;;;;;;;;;;
                                     21 ; bits masks
                                     22 ;;;;;;;;;;;;
                           000001    23  B0_MASK = (1<<0)
                           000002    24  B1_MASK = (1<<1)
                           000004    25  B2_MASK = (1<<2)
                           000008    26  B3_MASK = (1<<3)
                           000010    27  B4_MASK = (1<<4)
                           000020    28  B5_MASK = (1<<5)
                           000040    29  B6_MASK = (1<<6)
                           000080    30  B7_MASK = (1<<7)
                                     31 
                                     32 ; HSI oscillator frequency 16Mhz
                           F42400    33  FHSI = 16000000
                                     34 ; LSI oscillator frequency 128Khz
                           01F400    35  FLSI = 128000 
                                     36 
                                     37 ; controller memory regions
                           001800    38  RAM_SIZE = (0x1800) ; 6KB 
                           000800    39  EEPROM_SIZE = (0x800) ; 2KB
                                     40 ; STM8S208RB have 128K flash
                           020000    41  FLASH_SIZE = (0x20000)
                                     42 
                           000000    43  RAM_BASE = (0)
                           0017FF    44  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    45  EEPROM_BASE = (0x4000)
                           0047FF    46  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    47  SFR_BASE = (0x5000)
                           0057FF    48  SFR_END = (0x57FF)
                           006000    49  BOOT_ROM_BASE = (0x6000)
                           007FFF    50  BOOT_ROM_END = (0x7fff)
                           008000    51  FLASH_BASE = (0x8000)
                           027FFF    52  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    53  OPTION_BASE = (0x4800)
                           00487F    54  OPTION_END = (0x487F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           0048CD    55  DEVID_BASE = (0x48CD)
                           0048D8    56  DEVID_END = (0x48D8)
                           007F00    57  DEBUG_BASE = (0X7F00)
                           007FFF    58  DEBUG_END = (0X7FFF)
                                     59 
                                     60 ; options bytes
                                     61 ; this one can be programmed only from SWIM  (ICP)
                           004800    62  OPT0  = (0x4800)
                                     63 ; these can be programmed at runtime (IAP)
                           004801    64  OPT1  = (0x4801)
                           004802    65  NOPT1  = (0x4802)
                           004803    66  OPT2  = (0x4803)
                           004804    67  NOPT2  = (0x4804)
                           004805    68  OPT3  = (0x4805)
                           004806    69  NOPT3  = (0x4806)
                           004807    70  OPT4  = (0x4807)
                           004808    71  NOPT4  = (0x4808)
                           004809    72  OPT5  = (0x4809)
                           00480A    73  NOPT5  = (0x480A)
                           00480B    74  OPT6  = (0x480B)
                           00480C    75  NOPT6 = (0x480C)
                           00480D    76  OPT7 = (0x480D)
                           00480E    77  NOPT7 = (0x480E)
                           00487E    78  OPTBL  = (0x487E)
                           00487F    79  NOPTBL  = (0x487F)
                                     80 ; option registers usage
                                     81 ; read out protection, value 0xAA enable ROP
                           004800    82  ROP = OPT0  
                                     83 ; user boot code, {0..0x3e} 512 bytes row
                           004801    84  UBC = OPT1
                           004802    85  NUBC = NOPT1
                                     86 ; alternate function register
                           004803    87  AFR = OPT2
                           004804    88  NAFR = NOPT2
                                     89 ; miscelinous options
                           004805    90  WDGOPT = OPT3
                           004806    91  NWDGOPT = NOPT3
                                     92 ; clock options
                           004807    93  CLKOPT = OPT4
                           004808    94  NCLKOPT = NOPT4
                                     95 ; HSE clock startup delay
                           004809    96  HSECNT = OPT5
                           00480A    97  NHSECNT = NOPT5
                                     98 ; flash wait state
                           00480D    99 FLASH_WS = OPT7
                           00480E   100 NFLASH_WS = NOPT7
                                    101 
                                    102 ; watchdog options bits
                           000003   103   WDGOPT_LSIEN   =  BIT3
                           000002   104   WDGOPT_IWDG_HW =  BIT2
                           000001   105   WDGOPT_WWDG_HW =  BIT1
                           000000   106   WDGOPT_WWDG_HALT = BIT0
                                    107 ; NWDGOPT bits
                           FFFFFFFC   108   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   109   NWDGOPT_IWDG_HW  = ~BIT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           FFFFFFFE   110   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   111   NWDGOPT_WWDG_HALT = ~BIT0
                                    112 
                                    113 ; CLKOPT bits
                           000003   114  CLKOPT_EXT_CLK  = BIT3
                           000002   115  CLKOPT_CKAWUSEL = BIT2
                           000001   116  CLKOPT_PRS_C1   = BIT1
                           000000   117  CLKOPT_PRS_C0   = BIT0
                                    118 
                                    119 ; AFR option, remapable functions
                           000007   120  AFR7_BEEP    = BIT7
                           000006   121  AFR6_I2C     = BIT6
                           000005   122  AFR5_TIM1    = BIT5
                           000004   123  AFR4_TIM1    = BIT4
                           000003   124  AFR3_TIM1    = BIT3
                           000002   125  AFR2_CCO     = BIT2
                           000001   126  AFR1_TIM2    = BIT1
                           000000   127  AFR0_ADC     = BIT0
                                    128 
                                    129 ; device ID = (read only)
                           0048CD   130  DEVID_XL  = (0x48CD)
                           0048CE   131  DEVID_XH  = (0x48CE)
                           0048CF   132  DEVID_YL  = (0x48CF)
                           0048D0   133  DEVID_YH  = (0x48D0)
                           0048D1   134  DEVID_WAF  = (0x48D1)
                           0048D2   135  DEVID_LOT0  = (0x48D2)
                           0048D3   136  DEVID_LOT1  = (0x48D3)
                           0048D4   137  DEVID_LOT2  = (0x48D4)
                           0048D5   138  DEVID_LOT3  = (0x48D5)
                           0048D6   139  DEVID_LOT4  = (0x48D6)
                           0048D7   140  DEVID_LOT5  = (0x48D7)
                           0048D8   141  DEVID_LOT6  = (0x48D8)
                                    142 
                                    143 
                           005000   144 GPIO_BASE = (0x5000)
                           000005   145 GPIO_SIZE = (5)
                                    146 ; PORTS SFR OFFSET
                           000000   147 PA = 0
                           000005   148 PB = 5
                           00000A   149 PC = 10
                           00000F   150 PD = 15
                           000014   151 PE = 20
                           000019   152 PF = 25
                           00001E   153 PG = 30
                                    154 
                                    155 ; GPIO
                                    156 ; gpio register offset to base
                           000000   157  GPIO_ODR = 0
                           000001   158  GPIO_IDR = 1
                           000002   159  GPIO_DDR = 2
                           000003   160  GPIO_CR1 = 3
                           000004   161  GPIO_CR2 = 4
                                    162 
                                    163 ; port A
                           005000   164  PA_BASE = (0X5000)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           005000   165  PA_ODR  = (0x5000)
                           005001   166  PA_IDR  = (0x5001)
                           005002   167  PA_DDR  = (0x5002)
                           005003   168  PA_CR1  = (0x5003)
                           005004   169  PA_CR2  = (0x5004)
                                    170 ; port B
                           005005   171  PB_BASE = (0X5005)
                           005005   172  PB_ODR  = (0x5005)
                           005006   173  PB_IDR  = (0x5006)
                           005007   174  PB_DDR  = (0x5007)
                           005008   175  PB_CR1  = (0x5008)
                           005009   176  PB_CR2  = (0x5009)
                                    177 ; port C
                           00500A   178  PC_BASE = (0X500A)
                           00500A   179  PC_ODR  = (0x500A)
                           00500B   180  PC_IDR  = (0x500B)
                           00500C   181  PC_DDR  = (0x500C)
                           00500D   182  PC_CR1  = (0x500D)
                           00500E   183  PC_CR2  = (0x500E)
                                    184 ; port D
                           00500F   185  PD_BASE = (0X500F)
                           00500F   186  PD_ODR  = (0x500F)
                           005010   187  PD_IDR  = (0x5010)
                           005011   188  PD_DDR  = (0x5011)
                           005012   189  PD_CR1  = (0x5012)
                           005013   190  PD_CR2  = (0x5013)
                                    191 ; port E
                           005014   192  PE_BASE = (0X5014)
                           005014   193  PE_ODR  = (0x5014)
                           005015   194  PE_IDR  = (0x5015)
                           005016   195  PE_DDR  = (0x5016)
                           005017   196  PE_CR1  = (0x5017)
                           005018   197  PE_CR2  = (0x5018)
                                    198 ; port F
                           005019   199  PF_BASE = (0X5019)
                           005019   200  PF_ODR  = (0x5019)
                           00501A   201  PF_IDR  = (0x501A)
                           00501B   202  PF_DDR  = (0x501B)
                           00501C   203  PF_CR1  = (0x501C)
                           00501D   204  PF_CR2  = (0x501D)
                                    205 ; port G
                           00501E   206  PG_BASE = (0X501E)
                           00501E   207  PG_ODR  = (0x501E)
                           00501F   208  PG_IDR  = (0x501F)
                           005020   209  PG_DDR  = (0x5020)
                           005021   210  PG_CR1  = (0x5021)
                           005022   211  PG_CR2  = (0x5022)
                                    212 ; port H not present on LQFP48/LQFP64 package
                           005023   213  PH_BASE = (0X5023)
                           005023   214  PH_ODR  = (0x5023)
                           005024   215  PH_IDR  = (0x5024)
                           005025   216  PH_DDR  = (0x5025)
                           005026   217  PH_CR1  = (0x5026)
                           005027   218  PH_CR2  = (0x5027)
                                    219 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005028   220  PI_BASE = (0X5028)
                           005028   221  PI_ODR  = (0x5028)
                           005029   222  PI_IDR  = (0x5029)
                           00502A   223  PI_DDR  = (0x502a)
                           00502B   224  PI_CR1  = (0x502b)
                           00502C   225  PI_CR2  = (0x502c)
                                    226 
                                    227 ; input modes CR1
                           000000   228  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   229  INPUT_PULLUP = (1)
                                    230 ; output mode CR1
                           000000   231  OUTPUT_OD = (0) ; open drain
                           000001   232  OUTPUT_PP = (1) ; push pull
                                    233 ; input modes CR2
                           000000   234  INPUT_DI = (0)
                           000001   235  INPUT_EI = (1)
                                    236 ; output speed CR2
                           000000   237  OUTPUT_SLOW = (0)
                           000001   238  OUTPUT_FAST = (1)
                                    239 
                                    240 
                                    241 ; Flash memory
                           00505A   242  FLASH_CR1  = (0x505A)
                           00505B   243  FLASH_CR2  = (0x505B)
                           00505C   244  FLASH_NCR2  = (0x505C)
                           00505D   245  FLASH_FPR  = (0x505D)
                           00505E   246  FLASH_NFPR  = (0x505E)
                           00505F   247  FLASH_IAPSR  = (0x505F)
                           005062   248  FLASH_PUKR  = (0x5062)
                           005064   249  FLASH_DUKR  = (0x5064)
                                    250 ; data memory unlock keys
                           0000AE   251  FLASH_DUKR_KEY1 = (0xae)
                           000056   252  FLASH_DUKR_KEY2 = (0x56)
                                    253 ; flash memory unlock keys
                           000056   254  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   255  FLASH_PUKR_KEY2 = (0xae)
                                    256 ; FLASH_CR1 bits
                           000003   257  FLASH_CR1_HALT = BIT3
                           000002   258  FLASH_CR1_AHALT = BIT2
                           000001   259  FLASH_CR1_IE = BIT1
                           000000   260  FLASH_CR1_FIX = BIT0
                                    261 ; FLASH_CR2 bits
                           000007   262  FLASH_CR2_OPT = BIT7
                           000006   263  FLASH_CR2_WPRG = BIT6
                           000005   264  FLASH_CR2_ERASE = BIT5
                           000004   265  FLASH_CR2_FPRG = BIT4
                           000000   266  FLASH_CR2_PRG = BIT0
                                    267 ; FLASH_FPR bits
                           000005   268  FLASH_FPR_WPB5 = BIT5
                           000004   269  FLASH_FPR_WPB4 = BIT4
                           000003   270  FLASH_FPR_WPB3 = BIT3
                           000002   271  FLASH_FPR_WPB2 = BIT2
                           000001   272  FLASH_FPR_WPB1 = BIT1
                           000000   273  FLASH_FPR_WPB0 = BIT0
                                    274 ; FLASH_NFPR bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000005   275  FLASH_NFPR_NWPB5 = BIT5
                           000004   276  FLASH_NFPR_NWPB4 = BIT4
                           000003   277  FLASH_NFPR_NWPB3 = BIT3
                           000002   278  FLASH_NFPR_NWPB2 = BIT2
                           000001   279  FLASH_NFPR_NWPB1 = BIT1
                           000000   280  FLASH_NFPR_NWPB0 = BIT0
                                    281 ; FLASH_IAPSR bits
                           000006   282  FLASH_IAPSR_HVOFF = BIT6
                           000003   283  FLASH_IAPSR_DUL = BIT3
                           000002   284  FLASH_IAPSR_EOP = BIT2
                           000001   285  FLASH_IAPSR_PUL = BIT1
                           000000   286  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    287 
                                    288 ; Interrupt control
                           0050A0   289  EXTI_CR1  = (0x50A0)
                           0050A1   290  EXTI_CR2  = (0x50A1)
                                    291 
                                    292 ; Reset Status
                           0050B3   293  RST_SR  = (0x50B3)
                                    294 
                                    295 ; Clock Registers
                           0050C0   296  CLK_ICKR  = (0x50c0)
                           0050C1   297  CLK_ECKR  = (0x50c1)
                           0050C3   298  CLK_CMSR  = (0x50C3)
                           0050C4   299  CLK_SWR  = (0x50C4)
                           0050C5   300  CLK_SWCR  = (0x50C5)
                           0050C6   301  CLK_CKDIVR  = (0x50C6)
                           0050C7   302  CLK_PCKENR1  = (0x50C7)
                           0050C8   303  CLK_CSSR  = (0x50C8)
                           0050C9   304  CLK_CCOR  = (0x50C9)
                           0050CA   305  CLK_PCKENR2  = (0x50CA)
                           0050CC   306  CLK_HSITRIMR  = (0x50CC)
                           0050CD   307  CLK_SWIMCCR  = (0x50CD)
                                    308 
                                    309 ; Peripherals clock gating
                                    310 ; CLK_PCKENR1 
                           000007   311  CLK_PCKENR1_TIM1 = (7)
                           000006   312  CLK_PCKENR1_TIM3 = (6)
                           000005   313  CLK_PCKENR1_TIM2 = (5)
                           000004   314  CLK_PCKENR1_TIM4 = (4)
                           000003   315  CLK_PCKENR1_UART3 = (3)
                           000002   316  CLK_PCKENR1_UART1 = (2)
                           000001   317  CLK_PCKENR1_SPI = (1)
                           000000   318  CLK_PCKENR1_I2C = (0)
                                    319 ; CLK_PCKENR2
                           000007   320  CLK_PCKENR2_CAN = (7)
                           000003   321  CLK_PCKENR2_ADC = (3)
                           000002   322  CLK_PCKENR2_AWU = (2)
                                    323 
                                    324 ; Clock bits
                           000005   325  CLK_ICKR_REGAH = (5)
                           000004   326  CLK_ICKR_LSIRDY = (4)
                           000003   327  CLK_ICKR_LSIEN = (3)
                           000002   328  CLK_ICKR_FHW = (2)
                           000001   329  CLK_ICKR_HSIRDY = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000000   330  CLK_ICKR_HSIEN = (0)
                                    331 
                           000001   332  CLK_ECKR_HSERDY = (1)
                           000000   333  CLK_ECKR_HSEEN = (0)
                                    334 ; clock source
                           0000E1   335  CLK_SWR_HSI = 0xE1
                           0000D2   336  CLK_SWR_LSI = 0xD2
                           0000B4   337  CLK_SWR_HSE = 0xB4
                                    338 
                           000003   339  CLK_SWCR_SWIF = (3)
                           000002   340  CLK_SWCR_SWIEN = (2)
                           000001   341  CLK_SWCR_SWEN = (1)
                           000000   342  CLK_SWCR_SWBSY = (0)
                                    343 
                           000004   344  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   345  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   346  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   347  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   348  CLK_CKDIVR_CPUDIV0 = (0)
                                    349 
                                    350 ; Watchdog
                           0050D1   351  WWDG_CR  = (0x50D1)
                           0050D2   352  WWDG_WR  = (0x50D2)
                           0050E0   353  IWDG_KR  = (0x50E0)
                           0050E1   354  IWDG_PR  = (0x50E1)
                           0050E2   355  IWDG_RLR  = (0x50E2)
                           0050F0   356  AWU_CSR1  = (0x50F0)
                           0050F1   357  AWU_APR  = (0x50F1)
                           0050F2   358  AWU_TBR  = (0x50F2)
                                    359 
                                    360 ; Beeper
                                    361 ; beeper output is alternate function AFR7 on PD4
                                    362 ; connected to CN9-6
                           0050F3   363  BEEP_CSR  = (0x50F3)
                           00000F   364  BEEP_PORT = PD
                           000004   365  BEEP_BIT = 4
                           000010   366  BEEP_MASK = B4_MASK
                                    367 
                                    368 ; SPI
                           005200   369  SPI_CR1  = (0x5200)
                           005201   370  SPI_CR2  = (0x5201)
                           005202   371  SPI_ICR  = (0x5202)
                           005203   372  SPI_SR  = (0x5203)
                           005204   373  SPI_DR  = (0x5204)
                           005205   374  SPI_CRCPR  = (0x5205)
                           005206   375  SPI_RXCRCR  = (0x5206)
                           005207   376  SPI_TXCRCR  = (0x5207)
                                    377 
                                    378 ; I2C
                           005210   379  I2C_CR1  = (0x5210)
                           005211   380  I2C_CR2  = (0x5211)
                           005212   381  I2C_FREQR  = (0x5212)
                           005213   382  I2C_OARL  = (0x5213)
                           005214   383  I2C_OARH  = (0x5214)
                           005216   384  I2C_DR  = (0x5216)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005217   385  I2C_SR1  = (0x5217)
                           005218   386  I2C_SR2  = (0x5218)
                           005219   387  I2C_SR3  = (0x5219)
                           00521A   388  I2C_ITR  = (0x521A)
                           00521B   389  I2C_CCRL  = (0x521B)
                           00521C   390  I2C_CCRH  = (0x521C)
                           00521D   391  I2C_TRISER  = (0x521D)
                           00521E   392  I2C_PECR  = (0x521E)
                                    393 
                           000007   394  I2C_CR1_NOSTRETCH = (7)
                           000006   395  I2C_CR1_ENGC = (6)
                           000000   396  I2C_CR1_PE = (0)
                                    397 
                           000007   398  I2C_CR2_SWRST = (7)
                           000003   399  I2C_CR2_POS = (3)
                           000002   400  I2C_CR2_ACK = (2)
                           000001   401  I2C_CR2_STOP = (1)
                           000000   402  I2C_CR2_START = (0)
                                    403 
                           000000   404  I2C_OARL_ADD0 = (0)
                                    405 
                           000009   406  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   407  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    408 
                           000007   409  I2C_OARH_ADDMODE = (7)
                           000006   410  I2C_OARH_ADDCONF = (6)
                           000002   411  I2C_OARH_ADD9 = (2)
                           000001   412  I2C_OARH_ADD8 = (1)
                                    413 
                           000007   414  I2C_SR1_TXE = (7)
                           000006   415  I2C_SR1_RXNE = (6)
                           000004   416  I2C_SR1_STOPF = (4)
                           000003   417  I2C_SR1_ADD10 = (3)
                           000002   418  I2C_SR1_BTF = (2)
                           000001   419  I2C_SR1_ADDR = (1)
                           000000   420  I2C_SR1_SB = (0)
                                    421 
                           000005   422  I2C_SR2_WUFH = (5)
                           000003   423  I2C_SR2_OVR = (3)
                           000002   424  I2C_SR2_AF = (2)
                           000001   425  I2C_SR2_ARLO = (1)
                           000000   426  I2C_SR2_BERR = (0)
                                    427 
                           000007   428  I2C_SR3_DUALF = (7)
                           000004   429  I2C_SR3_GENCALL = (4)
                           000002   430  I2C_SR3_TRA = (2)
                           000001   431  I2C_SR3_BUSY = (1)
                           000000   432  I2C_SR3_MSL = (0)
                                    433 
                           000002   434  I2C_ITR_ITBUFEN = (2)
                           000001   435  I2C_ITR_ITEVTEN = (1)
                           000000   436  I2C_ITR_ITERREN = (0)
                                    437 
                                    438 ; Precalculated values, all in KHz
                           000080   439  I2C_CCRH_16MHZ_FAST_400 = 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           00000D   440  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    441 ;
                                    442 ; Fast I2C mode max rise time = 300ns
                                    443 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    444 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    445 
                           000005   446  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    447 
                           0000C0   448  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   449  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   450  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    451 
                           000080   452  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   453  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   454  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    455 
                           000000   456  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   457  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    458 ;
                                    459 ; Standard I2C mode max rise time = 1000ns
                                    460 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    461 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    462 
                           000011   463  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    464 
                           000000   465  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   466  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   467  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    468 
                           000001   469  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   470  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   471  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    472 
                           000001   473  I2C_READ = 1
                           000000   474  I2C_WRITE = 0
                                    475 
                                    476 ; baudrate constant for brr_value table access
                           000000   477 B2400=0
                           000001   478 B4800=1
                           000002   479 B9600=2
                           000003   480 B19200=3
                           000004   481 B38400=4
                           000005   482 B57600=5
                           000006   483 B115200=6
                           000007   484 B230400=7
                           000008   485 B460800=8
                           000009   486 B921600=9
                                    487 
                                    488 ; UART1 
                           005230   489  UART1_SR    = (0x5230)
                           005231   490  UART1_DR    = (0x5231)
                           005232   491  UART1_BRR1  = (0x5232)
                           005233   492  UART1_BRR2  = (0x5233)
                           005234   493  UART1_CR1   = (0x5234)
                           005235   494  UART1_CR2   = (0x5235)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005236   495  UART1_CR3   = (0x5236)
                           005237   496  UART1_CR4   = (0x5237)
                           005238   497  UART1_CR5   = (0x5238)
                           005239   498  UART1_GTR   = (0x5239)
                           00523A   499  UART1_PSCR  = (0x523A)
                                    500 
                                    501 ; UART3
                           005240   502  UART3_SR    = (0x5240)
                           005241   503  UART3_DR    = (0x5241)
                           005242   504  UART3_BRR1  = (0x5242)
                           005243   505  UART3_BRR2  = (0x5243)
                           005244   506  UART3_CR1   = (0x5244)
                           005245   507  UART3_CR2   = (0x5245)
                           005246   508  UART3_CR3   = (0x5246)
                           005247   509  UART3_CR4   = (0x5247)
                           004249   510  UART3_CR6   = (0x4249)
                                    511 
                                    512 ; UART Status Register bits
                           000007   513  UART_SR_TXE = (7)
                           000006   514  UART_SR_TC = (6)
                           000005   515  UART_SR_RXNE = (5)
                           000004   516  UART_SR_IDLE = (4)
                           000003   517  UART_SR_OR = (3)
                           000002   518  UART_SR_NF = (2)
                           000001   519  UART_SR_FE = (1)
                           000000   520  UART_SR_PE = (0)
                                    521 
                                    522 ; Uart Control Register bits
                           000007   523  UART_CR1_R8 = (7)
                           000006   524  UART_CR1_T8 = (6)
                           000005   525  UART_CR1_UARTD = (5)
                           000004   526  UART_CR1_M = (4)
                           000003   527  UART_CR1_WAKE = (3)
                           000002   528  UART_CR1_PCEN = (2)
                           000001   529  UART_CR1_PS = (1)
                           000000   530  UART_CR1_PIEN = (0)
                                    531 
                           000007   532  UART_CR2_TIEN = (7)
                           000006   533  UART_CR2_TCIEN = (6)
                           000005   534  UART_CR2_RIEN = (5)
                           000004   535  UART_CR2_ILIEN = (4)
                           000003   536  UART_CR2_TEN = (3)
                           000002   537  UART_CR2_REN = (2)
                           000001   538  UART_CR2_RWU = (1)
                           000000   539  UART_CR2_SBK = (0)
                                    540 
                           000006   541  UART_CR3_LINEN = (6)
                           000005   542  UART_CR3_STOP1 = (5)
                           000004   543  UART_CR3_STOP0 = (4)
                           000003   544  UART_CR3_CLKEN = (3)
                           000002   545  UART_CR3_CPOL = (2)
                           000001   546  UART_CR3_CPHA = (1)
                           000000   547  UART_CR3_LBCL = (0)
                                    548 
                           000006   549  UART_CR4_LBDIEN = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000005   550  UART_CR4_LBDL = (5)
                           000004   551  UART_CR4_LBDF = (4)
                           000003   552  UART_CR4_ADD3 = (3)
                           000002   553  UART_CR4_ADD2 = (2)
                           000001   554  UART_CR4_ADD1 = (1)
                           000000   555  UART_CR4_ADD0 = (0)
                                    556 
                           000005   557  UART_CR5_SCEN = (5)
                           000004   558  UART_CR5_NACK = (4)
                           000003   559  UART_CR5_HDSEL = (3)
                           000002   560  UART_CR5_IRLP = (2)
                           000001   561  UART_CR5_IREN = (1)
                                    562 ; LIN mode config register
                           000007   563  UART_CR6_LDUM = (7)
                           000005   564  UART_CR6_LSLV = (5)
                           000004   565  UART_CR6_LASE = (4)
                           000002   566  UART_CR6_LHDIEN = (2) 
                           000001   567  UART_CR6_LHDF = (1)
                           000000   568  UART_CR6_LSF = (0)
                                    569 
                                    570 ; TIMERS
                                    571 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   572  TIM1_CR1  = (0x5250)
                           005251   573  TIM1_CR2  = (0x5251)
                           005252   574  TIM1_SMCR  = (0x5252)
                           005253   575  TIM1_ETR  = (0x5253)
                           005254   576  TIM1_IER  = (0x5254)
                           005255   577  TIM1_SR1  = (0x5255)
                           005256   578  TIM1_SR2  = (0x5256)
                           005257   579  TIM1_EGR  = (0x5257)
                           005258   580  TIM1_CCMR1  = (0x5258)
                           005259   581  TIM1_CCMR2  = (0x5259)
                           00525A   582  TIM1_CCMR3  = (0x525A)
                           00525B   583  TIM1_CCMR4  = (0x525B)
                           00525C   584  TIM1_CCER1  = (0x525C)
                           00525D   585  TIM1_CCER2  = (0x525D)
                           00525E   586  TIM1_CNTRH  = (0x525E)
                           00525F   587  TIM1_CNTRL  = (0x525F)
                           005260   588  TIM1_PSCRH  = (0x5260)
                           005261   589  TIM1_PSCRL  = (0x5261)
                           005262   590  TIM1_ARRH  = (0x5262)
                           005263   591  TIM1_ARRL  = (0x5263)
                           005264   592  TIM1_RCR  = (0x5264)
                           005265   593  TIM1_CCR1H  = (0x5265)
                           005266   594  TIM1_CCR1L  = (0x5266)
                           005267   595  TIM1_CCR2H  = (0x5267)
                           005268   596  TIM1_CCR2L  = (0x5268)
                           005269   597  TIM1_CCR3H  = (0x5269)
                           00526A   598  TIM1_CCR3L  = (0x526A)
                           00526B   599  TIM1_CCR4H  = (0x526B)
                           00526C   600  TIM1_CCR4L  = (0x526C)
                           00526D   601  TIM1_BKR  = (0x526D)
                           00526E   602  TIM1_DTR  = (0x526E)
                           00526F   603  TIM1_OISR  = (0x526F)
                                    604 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    605 ; Timer Control Register bits
                           000007   606  TIM_CR1_ARPE = (7)
                           000006   607  TIM_CR1_CMSH = (6)
                           000005   608  TIM_CR1_CMSL = (5)
                           000004   609  TIM_CR1_DIR = (4)
                           000003   610  TIM_CR1_OPM = (3)
                           000002   611  TIM_CR1_URS = (2)
                           000001   612  TIM_CR1_UDIS = (1)
                           000000   613  TIM_CR1_CEN = (0)
                                    614 
                           000006   615  TIM1_CR2_MMS2 = (6)
                           000005   616  TIM1_CR2_MMS1 = (5)
                           000004   617  TIM1_CR2_MMS0 = (4)
                           000002   618  TIM1_CR2_COMS = (2)
                           000000   619  TIM1_CR2_CCPC = (0)
                                    620 
                                    621 ; Timer Slave Mode Control bits
                           000007   622  TIM1_SMCR_MSM = (7)
                           000006   623  TIM1_SMCR_TS2 = (6)
                           000005   624  TIM1_SMCR_TS1 = (5)
                           000004   625  TIM1_SMCR_TS0 = (4)
                           000002   626  TIM1_SMCR_SMS2 = (2)
                           000001   627  TIM1_SMCR_SMS1 = (1)
                           000000   628  TIM1_SMCR_SMS0 = (0)
                                    629 
                                    630 ; Timer External Trigger Enable bits
                           000007   631  TIM1_ETR_ETP = (7)
                           000006   632  TIM1_ETR_ECE = (6)
                           000005   633  TIM1_ETR_ETPS1 = (5)
                           000004   634  TIM1_ETR_ETPS0 = (4)
                           000003   635  TIM1_ETR_ETF3 = (3)
                           000002   636  TIM1_ETR_ETF2 = (2)
                           000001   637  TIM1_ETR_ETF1 = (1)
                           000000   638  TIM1_ETR_ETF0 = (0)
                                    639 
                                    640 ; Timer Interrupt Enable bits
                           000007   641  TIM1_IER_BIE = (7)
                           000006   642  TIM1_IER_TIE = (6)
                           000005   643  TIM1_IER_COMIE = (5)
                           000004   644  TIM1_IER_CC4IE = (4)
                           000003   645  TIM1_IER_CC3IE = (3)
                           000002   646  TIM1_IER_CC2IE = (2)
                           000001   647  TIM1_IER_CC1IE = (1)
                           000000   648  TIM1_IER_UIE = (0)
                                    649 
                                    650 ; Timer Status Register bits
                           000007   651  TIM1_SR1_BIF = (7)
                           000006   652  TIM1_SR1_TIF = (6)
                           000005   653  TIM1_SR1_COMIF = (5)
                           000004   654  TIM1_SR1_CC4IF = (4)
                           000003   655  TIM1_SR1_CC3IF = (3)
                           000002   656  TIM1_SR1_CC2IF = (2)
                           000001   657  TIM1_SR1_CC1IF = (1)
                           000000   658  TIM1_SR1_UIF = (0)
                                    659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000004   660  TIM1_SR2_CC4OF = (4)
                           000003   661  TIM1_SR2_CC3OF = (3)
                           000002   662  TIM1_SR2_CC2OF = (2)
                           000001   663  TIM1_SR2_CC1OF = (1)
                                    664 
                                    665 ; Timer Event Generation Register bits
                           000007   666  TIM1_EGR_BG = (7)
                           000006   667  TIM1_EGR_TG = (6)
                           000005   668  TIM1_EGR_COMG = (5)
                           000004   669  TIM1_EGR_CC4G = (4)
                           000003   670  TIM1_EGR_CC3G = (3)
                           000002   671  TIM1_EGR_CC2G = (2)
                           000001   672  TIM1_EGR_CC1G = (1)
                           000000   673  TIM1_EGR_UG = (0)
                                    674 
                                    675 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   676  TIM1_CCMR1_OC1CE = (7)
                           000006   677  TIM1_CCMR1_OC1M2 = (6)
                           000005   678  TIM1_CCMR1_OC1M1 = (5)
                           000004   679  TIM1_CCMR1_OC1M0 = (4)
                           000003   680  TIM1_CCMR1_OC1PE = (3)
                           000002   681  TIM1_CCMR1_OC1FE = (2)
                           000001   682  TIM1_CCMR1_CC1S1 = (1)
                           000000   683  TIM1_CCMR1_CC1S0 = (0)
                                    684 
                                    685 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   686  TIM1_CCMR1_IC1F3 = (7)
                           000006   687  TIM1_CCMR1_IC1F2 = (6)
                           000005   688  TIM1_CCMR1_IC1F1 = (5)
                           000004   689  TIM1_CCMR1_IC1F0 = (4)
                           000003   690  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   691  TIM1_CCMR1_IC1PSC0 = (2)
                                    692 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   693  TIM1_CCMR1_CC1S0 = (0)
                                    694 
                                    695 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   696  TIM1_CCMR2_OC2CE = (7)
                           000006   697  TIM1_CCMR2_OC2M2 = (6)
                           000005   698  TIM1_CCMR2_OC2M1 = (5)
                           000004   699  TIM1_CCMR2_OC2M0 = (4)
                           000003   700  TIM1_CCMR2_OC2PE = (3)
                           000002   701  TIM1_CCMR2_OC2FE = (2)
                           000001   702  TIM1_CCMR2_CC2S1 = (1)
                           000000   703  TIM1_CCMR2_CC2S0 = (0)
                                    704 
                                    705 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   706  TIM1_CCMR2_IC2F3 = (7)
                           000006   707  TIM1_CCMR2_IC2F2 = (6)
                           000005   708  TIM1_CCMR2_IC2F1 = (5)
                           000004   709  TIM1_CCMR2_IC2F0 = (4)
                           000003   710  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   711  TIM1_CCMR2_IC2PSC0 = (2)
                                    712 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   713  TIM1_CCMR2_CC2S0 = (0)
                                    714 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    715 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   716  TIM1_CCMR3_OC3CE = (7)
                           000006   717  TIM1_CCMR3_OC3M2 = (6)
                           000005   718  TIM1_CCMR3_OC3M1 = (5)
                           000004   719  TIM1_CCMR3_OC3M0 = (4)
                           000003   720  TIM1_CCMR3_OC3PE = (3)
                           000002   721  TIM1_CCMR3_OC3FE = (2)
                           000001   722  TIM1_CCMR3_CC3S1 = (1)
                           000000   723  TIM1_CCMR3_CC3S0 = (0)
                                    724 
                                    725 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   726  TIM1_CCMR3_IC3F3 = (7)
                           000006   727  TIM1_CCMR3_IC3F2 = (6)
                           000005   728  TIM1_CCMR3_IC3F1 = (5)
                           000004   729  TIM1_CCMR3_IC3F0 = (4)
                           000003   730  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   731  TIM1_CCMR3_IC3PSC0 = (2)
                                    732 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   733  TIM1_CCMR3_CC3S0 = (0)
                                    734 
                                    735 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   736  TIM1_CCMR4_OC4CE = (7)
                           000006   737  TIM1_CCMR4_OC4M2 = (6)
                           000005   738  TIM1_CCMR4_OC4M1 = (5)
                           000004   739  TIM1_CCMR4_OC4M0 = (4)
                           000003   740  TIM1_CCMR4_OC4PE = (3)
                           000002   741  TIM1_CCMR4_OC4FE = (2)
                           000001   742  TIM1_CCMR4_CC4S1 = (1)
                           000000   743  TIM1_CCMR4_CC4S0 = (0)
                                    744 
                                    745 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   746  TIM1_CCMR4_IC4F3 = (7)
                           000006   747  TIM1_CCMR4_IC4F2 = (6)
                           000005   748  TIM1_CCMR4_IC4F1 = (5)
                           000004   749  TIM1_CCMR4_IC4F0 = (4)
                           000003   750  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   751  TIM1_CCMR4_IC4PSC0 = (2)
                                    752 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   753  TIM1_CCMR4_CC4S0 = (0)
                                    754 
                                    755 ; Timer 2 - 16-bit timer
                           005300   756  TIM2_CR1  = (0x5300)
                           005301   757  TIM2_IER  = (0x5301)
                           005302   758  TIM2_SR1  = (0x5302)
                           005303   759  TIM2_SR2  = (0x5303)
                           005304   760  TIM2_EGR  = (0x5304)
                           005305   761  TIM2_CCMR1  = (0x5305)
                           005306   762  TIM2_CCMR2  = (0x5306)
                           005307   763  TIM2_CCMR3  = (0x5307)
                           005308   764  TIM2_CCER1  = (0x5308)
                           005309   765  TIM2_CCER2  = (0x5309)
                           00530A   766  TIM2_CNTRH  = (0x530A)
                           00530B   767  TIM2_CNTRL  = (0x530B)
                           00530C   768  TIM2_PSCR  = (0x530C)
                           00530D   769  TIM2_ARRH  = (0x530D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           00530E   770  TIM2_ARRL  = (0x530E)
                           00530F   771  TIM2_CCR1H  = (0x530F)
                           005310   772  TIM2_CCR1L  = (0x5310)
                           005311   773  TIM2_CCR2H  = (0x5311)
                           005312   774  TIM2_CCR2L  = (0x5312)
                           005313   775  TIM2_CCR3H  = (0x5313)
                           005314   776  TIM2_CCR3L  = (0x5314)
                                    777 
                                    778 ; Timer 3
                           005320   779  TIM3_CR1  = (0x5320)
                           005321   780  TIM3_IER  = (0x5321)
                           005322   781  TIM3_SR1  = (0x5322)
                           005323   782  TIM3_SR2  = (0x5323)
                           005324   783  TIM3_EGR  = (0x5324)
                           005325   784  TIM3_CCMR1  = (0x5325)
                           005326   785  TIM3_CCMR2  = (0x5326)
                           005327   786  TIM3_CCER1  = (0x5327)
                           005328   787  TIM3_CNTRH  = (0x5328)
                           005329   788  TIM3_CNTRL  = (0x5329)
                           00532A   789  TIM3_PSCR  = (0x532A)
                           00532B   790  TIM3_ARRH  = (0x532B)
                           00532C   791  TIM3_ARRL  = (0x532C)
                           00532D   792  TIM3_CCR1H  = (0x532D)
                           00532E   793  TIM3_CCR1L  = (0x532E)
                           00532F   794  TIM3_CCR2H  = (0x532F)
                           005330   795  TIM3_CCR2L  = (0x5330)
                                    796 
                                    797 ; TIM3_CR1  fields
                           000000   798  TIM3_CR1_CEN = (0)
                           000001   799  TIM3_CR1_UDIS = (1)
                           000002   800  TIM3_CR1_URS = (2)
                           000003   801  TIM3_CR1_OPM = (3)
                           000007   802  TIM3_CR1_ARPE = (7)
                                    803 ; TIM3_CCR2  fields
                           000000   804  TIM3_CCMR2_CC2S_POS = (0)
                           000003   805  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   806  TIM3_CCMR2_OC2M_POS = (4)  
                                    807 ; TIM3_CCER1 fields
                           000000   808  TIM3_CCER1_CC1E = (0)
                           000001   809  TIM3_CCER1_CC1P = (1)
                           000004   810  TIM3_CCER1_CC2E = (4)
                           000005   811  TIM3_CCER1_CC2P = (5)
                                    812 ; TIM3_CCER2 fields
                           000000   813  TIM3_CCER2_CC3E = (0)
                           000001   814  TIM3_CCER2_CC3P = (1)
                                    815 
                                    816 ; Timer 4
                           005340   817  TIM4_CR1  = (0x5340)
                           005341   818  TIM4_IER  = (0x5341)
                           005342   819  TIM4_SR  = (0x5342)
                           005343   820  TIM4_EGR  = (0x5343)
                           005344   821  TIM4_CNTR  = (0x5344)
                           005345   822  TIM4_PSCR  = (0x5345)
                           005346   823  TIM4_ARR  = (0x5346)
                                    824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    825 ; Timer 4 bitmasks
                                    826 
                           000007   827  TIM4_CR1_ARPE = (7)
                           000003   828  TIM4_CR1_OPM = (3)
                           000002   829  TIM4_CR1_URS = (2)
                           000001   830  TIM4_CR1_UDIS = (1)
                           000000   831  TIM4_CR1_CEN = (0)
                                    832 
                           000000   833  TIM4_IER_UIE = (0)
                                    834 
                           000000   835  TIM4_SR_UIF = (0)
                                    836 
                           000000   837  TIM4_EGR_UG = (0)
                                    838 
                           000002   839  TIM4_PSCR_PSC2 = (2)
                           000001   840  TIM4_PSCR_PSC1 = (1)
                           000000   841  TIM4_PSCR_PSC0 = (0)
                                    842 
                           000000   843  TIM4_PSCR_1 = 0
                           000001   844  TIM4_PSCR_2 = 1
                           000002   845  TIM4_PSCR_4 = 2
                           000003   846  TIM4_PSCR_8 = 3
                           000004   847  TIM4_PSCR_16 = 4
                           000005   848  TIM4_PSCR_32 = 5
                           000006   849  TIM4_PSCR_64 = 6
                           000007   850  TIM4_PSCR_128 = 7
                                    851 
                                    852 ; ADC2
                           005400   853  ADC_CSR  = (0x5400)
                           005401   854  ADC_CR1  = (0x5401)
                           005402   855  ADC_CR2  = (0x5402)
                           005403   856  ADC_CR3  = (0x5403)
                           005404   857  ADC_DRH  = (0x5404)
                           005405   858  ADC_DRL  = (0x5405)
                           005406   859  ADC_TDRH  = (0x5406)
                           005407   860  ADC_TDRL  = (0x5407)
                                    861  
                                    862 ; ADC bitmasks
                                    863 
                           000007   864  ADC_CSR_EOC = (7)
                           000006   865  ADC_CSR_AWD = (6)
                           000005   866  ADC_CSR_EOCIE = (5)
                           000004   867  ADC_CSR_AWDIE = (4)
                           000003   868  ADC_CSR_CH3 = (3)
                           000002   869  ADC_CSR_CH2 = (2)
                           000001   870  ADC_CSR_CH1 = (1)
                           000000   871  ADC_CSR_CH0 = (0)
                                    872 
                           000006   873  ADC_CR1_SPSEL2 = (6)
                           000005   874  ADC_CR1_SPSEL1 = (5)
                           000004   875  ADC_CR1_SPSEL0 = (4)
                           000001   876  ADC_CR1_CONT = (1)
                           000000   877  ADC_CR1_ADON = (0)
                                    878 
                           000006   879  ADC_CR2_EXTTRIG = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   880  ADC_CR2_EXTSEL1 = (5)
                           000004   881  ADC_CR2_EXTSEL0 = (4)
                           000003   882  ADC_CR2_ALIGN = (3)
                           000001   883  ADC_CR2_SCAN = (1)
                                    884 
                           000007   885  ADC_CR3_DBUF = (7)
                           000006   886  ADC_CR3_DRH = (6)
                                    887 
                                    888 ; beCAN
                           005420   889  CAN_MCR = (0x5420)
                           005421   890  CAN_MSR = (0x5421)
                           005422   891  CAN_TSR = (0x5422)
                           005423   892  CAN_TPR = (0x5423)
                           005424   893  CAN_RFR = (0x5424)
                           005425   894  CAN_IER = (0x5425)
                           005426   895  CAN_DGR = (0x5426)
                           005427   896  CAN_FPSR = (0x5427)
                           005428   897  CAN_P0 = (0x5428)
                           005429   898  CAN_P1 = (0x5429)
                           00542A   899  CAN_P2 = (0x542A)
                           00542B   900  CAN_P3 = (0x542B)
                           00542C   901  CAN_P4 = (0x542C)
                           00542D   902  CAN_P5 = (0x542D)
                           00542E   903  CAN_P6 = (0x542E)
                           00542F   904  CAN_P7 = (0x542F)
                           005430   905  CAN_P8 = (0x5430)
                           005431   906  CAN_P9 = (0x5431)
                           005432   907  CAN_PA = (0x5432)
                           005433   908  CAN_PB = (0x5433)
                           005434   909  CAN_PC = (0x5434)
                           005435   910  CAN_PD = (0x5435)
                           005436   911  CAN_PE = (0x5436)
                           005437   912  CAN_PF = (0x5437)
                                    913 
                                    914 
                                    915 ; CPU
                           007F00   916  CPU_A  = (0x7F00)
                           007F01   917  CPU_PCE  = (0x7F01)
                           007F02   918  CPU_PCH  = (0x7F02)
                           007F03   919  CPU_PCL  = (0x7F03)
                           007F04   920  CPU_XH  = (0x7F04)
                           007F05   921  CPU_XL  = (0x7F05)
                           007F06   922  CPU_YH  = (0x7F06)
                           007F07   923  CPU_YL  = (0x7F07)
                           007F08   924  CPU_SPH  = (0x7F08)
                           007F09   925  CPU_SPL   = (0x7F09)
                           007F0A   926  CPU_CCR   = (0x7F0A)
                                    927 
                                    928 ; global configuration register
                           007F60   929  CFG_GCR   = (0x7F60)
                                    930 
                                    931 ; interrupt control registers
                           007F70   932  ITC_SPR1   = (0x7F70)
                           007F71   933  ITC_SPR2   = (0x7F71)
                           007F72   934  ITC_SPR3   = (0x7F72)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           007F73   935  ITC_SPR4   = (0x7F73)
                           007F74   936  ITC_SPR5   = (0x7F74)
                           007F75   937  ITC_SPR6   = (0x7F75)
                           007F76   938  ITC_SPR7   = (0x7F76)
                           007F77   939  ITC_SPR8   = (0x7F77)
                                    940 
                                    941 ; SWIM, control and status register
                           007F80   942  SWIM_CSR   = (0x7F80)
                                    943 ; debug registers
                           007F90   944  DM_BK1RE   = (0x7F90)
                           007F91   945  DM_BK1RH   = (0x7F91)
                           007F92   946  DM_BK1RL   = (0x7F92)
                           007F93   947  DM_BK2RE   = (0x7F93)
                           007F94   948  DM_BK2RH   = (0x7F94)
                           007F95   949  DM_BK2RL   = (0x7F95)
                           007F96   950  DM_CR1   = (0x7F96)
                           007F97   951  DM_CR2   = (0x7F97)
                           007F98   952  DM_CSR1   = (0x7F98)
                           007F99   953  DM_CSR2   = (0x7F99)
                           007F9A   954  DM_ENFCTR   = (0x7F9A)
                                    955 
                                    956 ; Interrupt Numbers
                           000000   957  INT_TLI = 0
                           000001   958  INT_AWU = 1
                           000002   959  INT_CLK = 2
                           000003   960  INT_EXTI0 = 3
                           000004   961  INT_EXTI1 = 4
                           000005   962  INT_EXTI2 = 5
                           000006   963  INT_EXTI3 = 6
                           000007   964  INT_EXTI4 = 7
                           000008   965  INT_CAN_RX = 8
                           000009   966  INT_CAN_TX = 9
                           00000A   967  INT_SPI = 10
                           00000B   968  INT_TIM1_OVF = 11
                           00000C   969  INT_TIM1_CCM = 12
                           00000D   970  INT_TIM2_OVF = 13
                           00000E   971  INT_TIM2_CCM = 14
                           00000F   972  INT_TIM3_OVF = 15
                           000010   973  INT_TIM3_CCM = 16
                           000011   974  INT_UART1_TX_COMPLETED = 17
                           000012   975  INT_AUART1_RX_FULL = 18
                           000013   976  INT_I2C = 19
                           000014   977  INT_UART3_TX_COMPLETED = 20
                           000015   978  INT_UART3_RX_FULL = 21
                           000016   979  INT_ADC2 = 22
                           000017   980  INT_TIM4_OVF = 23
                           000018   981  INT_FLASH = 24
                                    982 
                                    983 ; Interrupt Vectors
                           008000   984  INT_VECTOR_RESET = 0x8000
                           008004   985  INT_VECTOR_TRAP = 0x8004
                           008008   986  INT_VECTOR_TLI = 0x8008
                           00800C   987  INT_VECTOR_AWU = 0x800C
                           008010   988  INT_VECTOR_CLK = 0x8010
                           008014   989  INT_VECTOR_EXTI0 = 0x8014
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           008018   990  INT_VECTOR_EXTI1 = 0x8018
                           00801C   991  INT_VECTOR_EXTI2 = 0x801C
                           008020   992  INT_VECTOR_EXTI3 = 0x8020
                           008024   993  INT_VECTOR_EXTI4 = 0x8024
                           008028   994  INT_VECTOR_CAN_RX = 0x8028
                           00802C   995  INT_VECTOR_CAN_TX = 0x802c
                           008030   996  INT_VECTOR_SPI = 0x8030
                           008034   997  INT_VECTOR_TIM1_OVF = 0x8034
                           008038   998  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C   999  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1000  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1001  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1002  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1003  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1004  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1005  INT_VECTOR_I2C = 0x8054
                           008058  1006  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1007  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1008  INT_VECTOR_ADC2 = 0x8060
                           008064  1009  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1010  INT_VECTOR_FLASH = 0x8068
                                   1011 
                                   1012  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                      7 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                      9 
                                     10 ;-------------------------------------------------------
                                     11 ;     vt100 CTRL_x  values
                                     12 ;-------------------------------------------------------
                           000001    13 		CTRL_A = 1
                           000002    14 		CTRL_B = 2
                           000003    15 		CTRL_C = 3
                           000004    16 		CTRL_D = 4
                           000005    17 		CTRL_E = 5
                           000006    18 		CTRL_F = 6
                           000007    19 		CTRL_G = 7
                           000008    20 		CTRL_H = 8
                           000009    21 		CTRL_I = 9
                           00000A    22 		CTRL_J = 10
                           00000B    23 		CTRL_K = 11
                           00000C    24 		CTRL_L = 12
                           00000D    25 		CTRL_M = 13
                           00000E    26 		CTRL_N = 14
                           00000F    27 		CTRL_O = 15
                           000010    28 		CTRL_P = 16
                           000011    29 		CTRL_Q = 17
                           000012    30 		CTRL_R = 18
                           000013    31 		CTRL_S = 19
                           000014    32 		CTRL_T = 20
                           000015    33 		CTRL_U = 21
                           000016    34 		CTRL_V = 22
                           000017    35 		CTRL_W = 23
                           000018    36 		CTRL_X = 24
                           000019    37 		CTRL_Y = 25
                           00001A    38 		CTRL_Z = 26
                           00001B    39 		ESC = 27
                           00000A    40 		NL = CTRL_J
                           00000D    41 		CR = CTRL_M
                           000008    42 		BSP = CTRL_H
                           000020    43 		SPACE = 32
                                     44 		
                                     45 ;--------------------------------------------------------
                                     46 ;      MACROS
                                     47 ;--------------------------------------------------------
                                     48 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     49 		bset PC_CR1,#LED2_BIT
                                     50 		bset PC_CR2,#LED2_BIT
                                     51 		bset PC_DDR,#LED2_BIT
                                     52 		.endm
                                     53 		
                                     54 		.macro _ledon ; turn on green LED 
                                     55 		bset PC_ODR,#LED2_BIT
                                     56 		.endm
                                     57 		
                                     58 		.macro _ledoff ; turn off green LED
                                     59 		bres PC_ODR,#LED2_BIT
                                     60 		.endm
                                     61 		
                                     62 		.macro _ledtoggle ; invert green LED state
                                     63 		ld a,#LED2_MASK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     64 		xor a,PC_ODR
                                     65 		ld PC_ODR,a
                                     66 		.endm
                                     67 		
                                     68 		
                                     69 		.macro  _interrupts ; enable interrupts
                                     70 		 rim
                                     71 		.endm
                                     72 		
                                     73 		.macro _no_interrupts ; disable interrupts
                                     74 		sim
                                     75 		.endm
                                     76 
                                     77 ;--------------------------------------------------------
                                     78 ;        OPTION BYTES
                                     79 ;--------------------------------------------------------
                                     80 ;		.area 	OPTION (ABS)
                                     81 ;		.org 0x4800
                                     82 ;		.byte 0     ; 0x4800 ; OPT0 read out protection 
                                     83 ;		.byte 0,255 ; 0x4801 - 0x4802 OPT1 user boot code
                                     84 ;       .byte 0,255 ; 0x4803 - 0x4804 OPT2 alt. fct remapping 
                                     85 ;       .byte 0,255 ; 0x4805 - 0x4806 OPT3 watchdog options
                                     86 ;       .byte 0,255 ; 0x4807 - 0x4808 OPT4 clock options
                                     87 ;       .byte 0,255 ; 0x4809 - 0x480a OPT5 HSE clock startup
                                     88 ;       .byte 0,255 ; 0x480b - 0x480c OPT6 reserved
                                     89 ;       .byte 0,255 ; 0x480d - 0x480e OPT7 flash wait state
                                     90 		.area BOOTLOADER (ABS)
      00487E                         91 		.org 0x487e
                                     92 ;       .byte 0,255 ; 0x487e - 0x487f rom bootloader checkpoint
                                     93 		
                                     94 ;--------------------------------------------------------
                                     95 ;some sont constants used by this program.
                                     96 ;--------------------------------------------------------
                           000100    97 		STACK_SIZE = 256 ; call stack size
                           001700    98 		STACK_BASE = RAM_SIZE-STACK_SIZE ; lowest address of stack
                           0017FF    99 		STACK_TOP = RAM_SIZE-1 ; stack top at end of ram
                           000050   100 		TIB_SIZE = 80 ; transaction input buffer size
                           000050   101 		PAD_SIZE = 80 ; workding pad size
                                    102 ;--------------------------------------------------------
                                    103 ;   application variables 
                                    104 ;---------------------------------------------------------		
                                    105         .area DATA
                                    106 ;ticks  .blkw 1 ; system ticks at every millisecond        
                                    107 ;cntdwn:	.blkw 1 ; millisecond count down timer
      000000                        108 rx_char: .blkb 1 ; last uart received char
      000001                        109 rx_status: .blkb 1 ; store last UART_SR read
      000002                        110 in.w:     .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000003                        111 in:		.blkb 1; parser position in tib
      000004                        112 count:  .blkb 1; length of string in tib
      000005                        113 idx_x:  .blkw 1; index for table pointed by x
      000007                        114 idx_y:  .blkw 1; index for table pointed by y
      000009                        115 tib:	.blkb TIB_SIZE ; transaction input buffer
      000059                        116 pad:	.blkb PAD_SIZE ; working pad
      0000A9                        117 acc16:  .blkw 1; 16 bits accumulator
      0000AB                        118 ram_free_base: .blkw 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0000AD                        119 flash_free_base: .blkw 1
                                    120 
                                    121 		.area USER_RAM_BASE
                                    122 ;--------------------------------------------------------
                                    123 ;   the following RAM is not used by MONA
                                    124 ;--------------------------------------------------------
      000000                        125  _user_ram:		
                                    126 
                                    127 ;--------------------------------------------------------
                                    128 ;  stack segment
                                    129 ;--------------------------------------------------------
                                    130        .area SSEG  (ABS)
      001700                        131 	   .org RAM_SIZE-STACK_SIZE
      001700                        132  __stack_bottom:
      001700                        133 	   .ds  256
                                    134 
                                    135 ;--------------------------------------------------------
                                    136 ; interrupt vector 
                                    137 ;--------------------------------------------------------
                                    138 	.area HOME
      000000                        139 __interrupt_vect:
      000000 82 00 00 33            140 	int init0 ;RESET vector
      000004 82 00 00 CD            141 	int NonHandledInterrupt ;TRAP  software interrupt
      000008 82 00 00 CD            142 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 CD            143 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 CD            144 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 CD            145 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 00 CD            146 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 00 CD            147 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 00 CD            148 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 00 CD            149 	int NonHandledInterrupt ;int7 EXTI4 port E external interrupts
      000028 82 00 00 CD            150 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 CD            151 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 CD            152 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 CD            153 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 CD            154 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 CD            155 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 CD            156 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 CD            157 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 CD            158 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 CD            159 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 CD            160 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 CD            161 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 CD            162 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 D2            163 	int uart_rx_isr         ;int21 UART3 RX full
      000060 82 00 00 CD            164 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 CD            165 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 00 CD            166 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 CD            167 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 CD            168 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 CD            169 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 CD            170 	int NonHandledInterrupt ;int28  not used
                                    171 
                                    172 	.area CODE
                                    173 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                    174 	;initialize clock to HSE 16Mhz
      000000                        175 clock_init:	
      000000 72 12 50 C5      [ 1]  176 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000004 A6 B4            [ 1]  177 	ld a,#CLK_SWR_HSE
      000006 C7 50 C4         [ 1]  178 	ld CLK_SWR,a
      000009 C1 50 C3         [ 1]  179 1$:	cp a,CLK_CMSR
      00000C 26 FB            [ 1]  180 	jrne 1$
      00000E 81               [ 4]  181 	ret
                                    182 
                                    183 		; initialize TIMER4 ticks counter
                                    184 ;timer4_init:
                                    185 ;	clr ticks
                                    186 ;	clr cntdwn
                                    187 ;	ld a,#TIM4_PSCR_128 
                                    188 ;	ld TIM4_PSCR,a
                                    189 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    190 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    191 ;	ld a,#125
                                    192 ;	ld TIM4_ARR,a ; 1 msec interval
                                    193 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    194 ;	ld TIM4_CR1,a
                                    195 ;	ret
                                    196 
                                    197 	; initialize UART3, 115200 8N1
      00000F                        198 uart3_init:
                                    199 ;	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
                                    200 	; configure tx pin
      00000F 72 1A 50 11      [ 1]  201 	bset PD_DDR,#BIT5 ; tx pin
      000013 72 1A 50 12      [ 1]  202 	bset PD_CR1,#BIT5 ; push-pull output
      000017 72 1A 50 13      [ 1]  203 	bset PD_CR2,#BIT5 ; fast output
                                    204 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001B 35 05 52 43      [ 1]  205 	mov UART3_BRR2,#0x05 ; must be loaded first
      00001F 35 04 52 42      [ 1]  206 	mov UART3_BRR1,#0x4
      000023 35 2C 52 45      [ 1]  207 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      000027 81               [ 4]  208 	ret
                                    209 	
                                    210 	; pause in milliseconds
                                    211     ; input:  y delay
                                    212     ; output: none
                                    213 ;pause:
                                    214 ;	 ldw cntdwn,y
                                    215 ;1$: ldw y,cntdwn
                                    216 ;	 jrne 1$
                                    217 ;    ret
                                    218 
                                    219 ;-------------------------
                                    220 ;  zero all free ram
                                    221 ;-------------------------
      000028                        222 clear_all_free_ram:
      000028 AE 00 00         [ 2]  223 	ldw x,#0
      00002B                        224 1$:	
      00002B 7F               [ 1]  225 	clr (x)
      00002C 5C               [ 1]  226 	incw x
      00002D A3 17 FD         [ 2]  227 	cpw x,#STACK_TOP-2
      000030 23 F9            [ 2]  228 	jrule 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000032 81               [ 4]  229 	ret
                                    230 
      000033                        231 init0:
                                    232 	; initialize SP
      000033 AE 17 FF         [ 2]  233 	ldw x,#STACK_TOP
      000036 94               [ 1]  234 	ldw sp,x
      000037 CD 00 00         [ 4]  235 	call clock_init
      00003A CD 00 28         [ 4]  236 	call clear_all_free_ram
                                    237 ;	clr ticks
                                    238 ;	clr cntdwn
      00003D A6 FF            [ 1]  239 	ld a,#255
      00003F C7 00 00         [ 1]  240 	ld rx_char,a
                                    241 ;	call timer4_init
      000042 CD 00 0F         [ 4]  242 	call uart3_init
      000045                        243 	_ledenable
      000045 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#LED2_BIT
      000049 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#LED2_BIT
      00004D 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#LED2_BIT
      000051                        244 	_ledoff
      000051 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#LED2_BIT
      000055 72 5F 00 02      [ 1]  245 	clr in.w ; must always be 0
                                    246 	; initialize free_ram_base variable
      000059 90 AE 00 00      [ 2]  247 	ldw y,#_user_ram ;#ram_free_base
                                    248 ;	addw y,#0xf
                                    249 ;	ld a,yl
                                    250 ;	and a,#0xf0
                                    251 ;	ld yl,a
      00005D 90 CF 00 AB      [ 2]  252 	ldw ram_free_base,y
                                    253 	; initialize flash_free_base variable
      000061 90 AE 08 3F      [ 2]  254 	ldw y,#flash_free
      000065 72 A9 00 FF      [ 2]  255 	addw y,#0xff
      000069 4F               [ 1]  256 	clr a
      00006A 90 97            [ 1]  257 	ld yl,a
      00006C 90 CF 00 AD      [ 2]  258 	ldw flash_free_base,y
                                    259 
                                    260 ;------------------------
                                    261 ; program main function
                                    262 ;------------------------
      000070                        263 main:	
                                    264 ; enable interrupts
      000070                        265 	_interrupts 
      000070 9A               [ 1]    1 		 rim
                                    266 ; print startup message.
      000071 A6 0C            [ 1]  267 	ld a,#0xc
      000073 CD 00 EF         [ 4]  268 	call uart_tx
      000076 90 AE 05 DE      [ 2]  269 	ldw y,#VERSION
      00007A CD 00 F9         [ 4]  270 	call uart_print
      00007D 90 AE 06 26      [ 2]  271 	ldw y,#RAM_FREE_MSG
      000081 CD 00 F9         [ 4]  272 	call uart_print
      000084 90 CE 00 AB      [ 2]  273 	ldw y,ram_free_base
      000088 A6 10            [ 1]  274 	ld a,#16
      00008A CD 02 63         [ 4]  275 	call itoa
      00008D CD 00 F9         [ 4]  276 	call uart_print
      000090 90 AE 06 31      [ 2]  277 	ldw y,#RAM_LAST_FREE_MSG
      000094 CD 00 F9         [ 4]  278 	call uart_print
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000097 90 AE 06 3A      [ 2]  279 	ldw y,#FLASH_FREE_MSG
      00009B CD 00 F9         [ 4]  280 	call uart_print
      00009E A6 10            [ 1]  281 	ld a,#16
      0000A0 90 CE 00 AD      [ 2]  282 	ldw y,flash_free_base
      0000A4 CD 02 63         [ 4]  283 	call itoa
      0000A7 CD 00 F9         [ 4]  284 	call uart_print
      0000AA 90 AE 06 47      [ 2]  285 	ldw y,#EEPROM_MSG
      0000AE CD 00 F9         [ 4]  286 	call uart_print
                                    287 ; Read Execute Print Loop
                                    288 ; MONA spend is time in this loop
      0000B1                        289 repl: 
                                    290 ; move terminal cursor to next line
      0000B1 A6 0A            [ 1]  291 	ld a,#NL 
      0000B3 CD 00 EF         [ 4]  292 	call uart_tx
                                    293 ; print prompt sign	 
      0000B6 A6 3E            [ 1]  294 	ld a,#'>
      0000B8 CD 00 EF         [ 4]  295 	call uart_tx
                                    296 ; read command line	
      0000BB CD 01 3F         [ 4]  297 	call readln 
                                    298 ;if empty line -> ignore it, loop.	
      0000BE 72 5D 00 04      [ 1]  299 	tnz count
      0000C2 27 ED            [ 1]  300 	jreq repl
                                    301 ; initialize parser and call eval function	  
      0000C4 72 5F 00 03      [ 1]  302 	clr in
      0000C8 CD 04 4E         [ 4]  303 	call eval
                                    304 ; start over	
      0000CB 20 E4            [ 2]  305 	jra repl  ; loop
                                    306 	 
                                    307 ;------------------------------------
                                    308 ;	interrupt NonHandledInterrupt
                                    309 ;   non handled interrupt reset MCU
                                    310 ;------------------------------------
      0000CD                        311 NonHandledInterrupt:
      0000CD A6 80            [ 1]  312 	ld a,#0x80
      0000CF C7 50 D1         [ 1]  313 	ld WWDG_CR,a
                                    314 	;iret
                                    315 
                                    316 ;------------------------------------
                                    317 ; TIMER4 interrupt service routine
                                    318 ;------------------------------------
                                    319 ;timer4_isr:
                                    320 ;	ldw y,ticks
                                    321 ;	incw y
                                    322 ;	ldw ticks,y
                                    323 ;	ldw y,cntdwn
                                    324 ;	jreq 1$
                                    325 ;	decw y
                                    326 ;	ldw cntdwn,y
                                    327 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    328 ;	iret
                                    329 
                                    330 ;------------------------------------
                                    331 ; uart3 receive interrupt service
                                    332 ;------------------------------------
      0000D2                        333 uart_rx_isr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    334 ; test uart status register
                                    335 ; bit RXNE must 1
                                    336 ; bits OR|FE|NF must be 0	
      0000D2 C6 52 40         [ 1]  337     ld a, UART3_SR
      0000D5 C7 00 01         [ 1]  338 	ld rx_status,a
      0000D8 C6 52 41         [ 1]  339 	ld a,UART3_DR
      0000DB 6B 00            [ 1]  340 	ld (0,sp),a
      0000DD C6 00 01         [ 1]  341 	ld a, rx_status
      0000E0 A4 0E            [ 1]  342 	and a, #((1<<UART_SR_OR)|(1<<UART_SR_FE)|(1<<UART_SR_NF))
      0000E2 26 0A            [ 1]  343 	jrne 1$
      0000E4 72 0B 00 01 05   [ 2]  344 	btjf rx_status,#UART_SR_RXNE,1$
      0000E9 7B 00            [ 1]  345 	ld a,(0,sp)
      0000EB C7 00 00         [ 1]  346     ld rx_char,a
      0000EE                        347 1$: 
      0000EE 80               [11]  348 	iret
                                    349 
                                    350 ;------------------------------------
                                    351 ;  serial port communication routines
                                    352 ;------------------------------------
                                    353 ;------------------------------------
                                    354 ; transmit character in a via UART3
                                    355 ; character to transmit on (3,sp)
                                    356 ;------------------------------------
      0000EF                        357 uart_tx:
      0000EF 72 5D 52 40      [ 1]  358 	tnz UART3_SR
      0000F3 2A FA            [ 1]  359 	jrpl uart_tx
      0000F5 C7 52 41         [ 1]  360 	ld UART3_DR,a
      0000F8 81               [ 4]  361     ret
                                    362 
                                    363 ;------------------------------------
                                    364 ; send string via UART2
                                    365 ; y is pointer to str
                                    366 ;------------------------------------
      0000F9                        367 uart_print:
      0000F9 90 F6            [ 1]  368 	ld a,(y)
      0000FB 27 07            [ 1]  369 	jreq 1$
      0000FD CD 00 EF         [ 4]  370 	call uart_tx
      000100 90 5C            [ 1]  371 	incw y
      000102 20 F5            [ 2]  372 	jra uart_print
      000104 81               [ 4]  373 1$: ret
                                    374 
                                    375 ;------------------------------------
                                    376 ; check if char available
                                    377 ;------------------------------------
      000105                        378 uart_qchar:
      000105 A6 FF            [ 1]  379 	ld a,#255
      000107 C1 00 00         [ 1]  380 	cp a,rx_char
      00010A 81               [ 4]  381     ret
                                    382 
                                    383 ;------------------------------------
                                    384 ; return char in A to queue
                                    385 ;------------------------------------
      00010B                        386 ungetchar: 
      00010B                        387 	_no_interrupts
      00010B 9B               [ 1]    1 		sim
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00010C C7 00 00         [ 1]  388 	ld rx_char,a
      00010F                        389     _interrupts
      00010F 9A               [ 1]    1 		 rim
      000110 81               [ 4]  390     ret
                                    391     
                                    392 ;------------------------------------
                                    393 ; return character from uart3
                                    394 ;------------------------------------
      000111                        395 uart_getchar:
      000111 A6 FF            [ 1]  396 	ld a,#255
      000113 C1 00 00         [ 1]  397 	cp a,rx_char
      000116 27 F9            [ 1]  398 	jreq uart_getchar
      000118                        399 	_no_interrupts
      000118 9B               [ 1]    1 		sim
      000119 C6 00 00         [ 1]  400 	ld a, rx_char
      00011C 88               [ 1]  401 	push a
      00011D A6 FF            [ 1]  402 	ld a,#-1
      00011F C7 00 00         [ 1]  403 	ld rx_char,a
      000122                        404 	_interrupts
      000122 9A               [ 1]    1 		 rim
      000123 84               [ 1]  405 	pop a
      000124 81               [ 4]  406 	ret
                                    407 
                                    408 ;------------------------------------
                                    409 ; delete n character from input line
                                    410 ;------------------------------------
      000125                        411 uart_delete:
      000125 88               [ 1]  412 	push a ; n 
      000126                        413 del_loop:
      000126 0D 01            [ 1]  414 	tnz (1,sp)
      000128 27 13            [ 1]  415 	jreq 1$
      00012A A6 08            [ 1]  416 	ld a,#BSP
      00012C CD 00 EF         [ 4]  417 	call uart_tx
      00012F A6 20            [ 1]  418     ld a,#SPACE
      000131 CD 00 EF         [ 4]  419     call uart_tx
      000134 A6 08            [ 1]  420     ld a,#BSP
      000136 CD 00 EF         [ 4]  421     call uart_tx
      000139 0A 01            [ 1]  422     dec (1,sp)
      00013B 20 E9            [ 2]  423     jra del_loop
      00013D 84               [ 1]  424 1$: pop a
      00013E 81               [ 4]  425 	ret 
                                    426 
                                    427 ;------------------------------------
                                    428 ; read a line of text from terminal
                                    429 ; input:
                                    430 ;	none
                                    431 ; local variable on stack:
                                    432 ;	LEN (1,sp)
                                    433 ;   RXCHAR (2,sp)
                                    434 ; output:
                                    435 ;   text in tib  buffer
                                    436 ;   len in count variable
                                    437 ;------------------------------------
      00013F                        438 readln:
                                    439 	; local variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000001   440 	LEN = 1  ; accepted line length
                           000002   441 	RXCHAR = 2 ; last char received
      00013F 4B 00            [ 1]  442 	push #0  ; RXCHAR 
      000141 4B 00            [ 1]  443 	push #0  ; LEN
      000143 90 AE 00 09      [ 2]  444  	ldw y,#tib ; input buffer
      000147                        445 readln_loop:
      000147 CD 01 11         [ 4]  446 	call uart_getchar
      00014A 6B 02            [ 1]  447 	ld (RXCHAR,sp),a
      00014C A1 03            [ 1]  448 	cp a,#CTRL_C
      00014E 26 03            [ 1]  449 	jrne 2$
      000150 CC 01 CB         [ 2]  450 	jp cancel
      000153 A1 12            [ 1]  451 2$:	cp a,#CTRL_R
      000155 27 50            [ 1]  452 	jreq reprint
      000157 A1 0D            [ 1]  453 	cp a,#CR
      000159 26 03            [ 1]  454 	jrne 1$
      00015B CC 01 D5         [ 2]  455 	jp readln_quit
      00015E A1 0A            [ 1]  456 1$:	cp a,#NL
      000160 27 73            [ 1]  457 	jreq readln_quit
      000162 A1 08            [ 1]  458 	cp a,#BSP
      000164 27 1B            [ 1]  459 	jreq del_back
      000166 A1 04            [ 1]  460 	cp a,#CTRL_D
      000168 27 06            [ 1]  461 	jreq del_line
      00016A A1 20            [ 1]  462 	cp a,#SPACE
      00016C 2A 24            [ 1]  463 	jrpl accept_char
      00016E 20 D7            [ 2]  464 	jra readln_loop
      000170                        465 del_line:
      000170 7B 01            [ 1]  466 	ld a,(LEN,sp)
      000172 CD 01 25         [ 4]  467 	call uart_delete
      000175 90 AE 00 09      [ 2]  468 	ldw y,#tib
      000179 72 5F 00 04      [ 1]  469 	clr count
      00017D 0F 01            [ 1]  470 	clr (LEN,sp)
      00017F 20 C6            [ 2]  471 	jra readln_loop
      000181                        472 del_back:
      000181 0D 01            [ 1]  473     tnz (LEN,sp)
      000183 27 C2            [ 1]  474     jreq readln_loop
      000185 0A 01            [ 1]  475     dec (LEN,sp)
      000187 90 5A            [ 2]  476     decw y
      000189 90 7F            [ 1]  477     clr  (y)
      00018B A6 01            [ 1]  478     ld a,#1
      00018D CD 01 25         [ 4]  479     call uart_delete
      000190 20 B5            [ 2]  480     jra readln_loop	
      000192                        481 accept_char:
      000192 A6 4F            [ 1]  482 	ld a,#TIB_SIZE-1
      000194 11 01            [ 1]  483 	cp a, (1,sp)
      000196 27 AF            [ 1]  484 	jreq readln_loop
      000198 7B 02            [ 1]  485 	ld a,(RXCHAR,sp)
      00019A 90 F7            [ 1]  486 	ld (y),a
      00019C 0C 01            [ 1]  487 	inc (LEN,sp)
      00019E 90 5C            [ 1]  488 	incw y
      0001A0 90 7F            [ 1]  489 	clr (y)
      0001A2 CD 00 EF         [ 4]  490 	call uart_tx
      0001A5 20 A0            [ 2]  491 	jra readln_loop
      0001A7                        492 reprint:
      0001A7 0D 01            [ 1]  493 	tnz (LEN,sp)
      0001A9 26 9C            [ 1]  494 	jrne readln_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0001AB 72 5D 00 04      [ 1]  495 	tnz count
      0001AF 27 96            [ 1]  496 	jreq readln_loop
      0001B1 90 AE 00 09      [ 2]  497 	ldw y,#tib
      0001B5 90 89            [ 2]  498 	pushw y
      0001B7 CD 00 F9         [ 4]  499 	call uart_print
      0001BA 90 85            [ 2]  500 	popw y
      0001BC C6 00 04         [ 1]  501 	ld a,count
      0001BF 6B 01            [ 1]  502 	ld (LEN,sp),a
      0001C1 90 9F            [ 1]  503 	ld a,yl
      0001C3 CB 00 04         [ 1]  504 	add a,count
      0001C6 90 97            [ 1]  505 	ld yl,a
      0001C8 CC 01 47         [ 2]  506 	jp readln_loop
      0001CB                        507 cancel:
      0001CB 72 5F 00 09      [ 1]  508 	clr tib
      0001CF 72 5F 00 04      [ 1]  509 	clr count
      0001D3 20 05            [ 2]  510 	jra readln_quit2
      0001D5                        511 readln_quit:
      0001D5 7B 01            [ 1]  512 	ld a,(LEN,sp)
      0001D7 C7 00 04         [ 1]  513 	ld count,a
      0001DA                        514 readln_quit2:
      0001DA 5B 02            [ 2]  515 	addw sp,#2
      0001DC A6 0A            [ 1]  516 	ld a,#NL
      0001DE CD 00 EF         [ 4]  517 	call uart_tx
      0001E1 81               [ 4]  518 	ret
                                    519 	
                                    520 ;------------------------------------
                                    521 ; skip character c in tib starting from 'in'
                                    522 ; input: 
                                    523 ;    a character to skip
                                    524 ; output:  'in' ajusted to new position
                                    525 ;------------------------------------
      0001E2                        526 skip:
                           000001   527 	C = 1 ; local var
      0001E2 88               [ 1]  528 	push a
      0001E3 90 AE 00 09      [ 2]  529 	ldw y,#tib
      0001E7 91 D6 02         [ 4]  530 1$:	ld a,([in.w],y)
      0001EA 27 0A            [ 1]  531 	jreq 2$
      0001EC 11 01            [ 1]  532 	cp a,(C,sp)
      0001EE 26 06            [ 1]  533 	jrne 2$
      0001F0 72 5C 00 03      [ 1]  534 	inc in
      0001F4 20 F1            [ 2]  535 	jra 1$
      0001F6 84               [ 1]  536 2$: pop a
      0001F7 81               [ 4]  537 	ret
                                    538 	
                                    539 ;------------------------------------
                                    540 ; scan tib for charater 'c' starting from 'in'
                                    541 ; input:
                                    542 ;    a character to skip
                                    543 ;------------------------------------
      0001F8                        544 scan: 
                           000001   545 	C = 1 ; local var
      0001F8 88               [ 1]  546 	push a
      0001F9 90 AE 00 09      [ 2]  547 	ldw y,#tib
      0001FD 91 D6 02         [ 4]  548 1$:	ld a,([in.w],y)
      000200 27 0A            [ 1]  549 	jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000202 11 01            [ 1]  550 	cp a,(C,sp)
      000204 27 06            [ 1]  551 	jreq 2$
      000206 72 5C 00 03      [ 1]  552 	inc in
      00020A 20 F1            [ 2]  553 	jra 1$
      00020C 84               [ 1]  554 2$: pop a
      00020D 81               [ 4]  555 	ret
                                    556 
                                    557 ;------------------------------------
                                    558 ; scan tib for next word
                                    559 ; move word in 'pad'
                                    560 ;------------------------------------
      00020E                        561 next_word:	
                           000001   562 	FIRST = 1
                           000002   563 	XSAVE = 2
      00020E 52 03            [ 2]  564 	sub sp,#3
      000210 1F 02            [ 2]  565 	ldw (XSAVE,sp),x ; save x
      000212 A6 20            [ 1]  566 	ld a,#SPACE
      000214 CD 01 E2         [ 4]  567 	call skip
      000217 C6 00 03         [ 1]  568 	ld a,in
      00021A 6B 01            [ 1]  569 	ld (FIRST,sp),a
      00021C A6 20            [ 1]  570 	ld a,#SPACE
      00021E CD 01 F8         [ 4]  571 	call scan
                                    572 	; copy word in pad
      000221 AE 00 09         [ 2]  573 	ldw x,#tib  ; source
      000224 72 5F 00 05      [ 1]  574 	clr idx_x
      000228 7B 01            [ 1]  575 	ld a,(FIRST,sp)
      00022A C7 00 06         [ 1]  576 	ld idx_x+1,a
      00022D 90 AE 00 59      [ 2]  577 	ldw y,#pad
      000231 72 5F 00 07      [ 1]  578 	clr idx_y
      000235 72 5F 00 08      [ 1]  579 	clr idx_y+1
      000239 C6 00 03         [ 1]  580 	ld a,in
      00023C 10 01            [ 1]  581 	sub a,(FIRST,sp)
      00023E CD 02 46         [ 4]  582 	call strcpyn
      000241 1E 02            [ 2]  583 	ldw x,(XSAVE,sp)
      000243 5B 03            [ 2]  584 	addw sp,#3
      000245 81               [ 4]  585 	ret
                                    586 	
                                    587 	
                                    588 ;------------------------------------
                                    589 ; copy n character from (x) to (y)
                                    590 ; input:
                                    591 ;   	x   source pointer
                                    592 ;       idx_x index in (x)
                                    593 ;       y   destination pointer
                                    594 ;       idx_y  index in (y)
                                    595 ;       a   number of character to copy
                                    596 ;------------------------------------
      000246                        597 strcpyn:
                           000001   598 	N = 1 ; local variable count
      000246 88               [ 1]  599 	push a
      000247 7B 01            [ 1]  600 1$: ld a,(N,sp)		
      000249 27 13            [ 1]  601 	jreq 2$ 
      00024B 72 D6 00 05      [ 4]  602 	ld a,([idx_x],x)
      00024F 91 D7 07         [ 4]  603 	ld ([idx_y],y),a
      000252 72 5C 00 06      [ 1]  604 	inc idx_x+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000256 72 5C 00 08      [ 1]  605 	inc idx_y+1
      00025A 0A 01            [ 1]  606 	dec (N,sp)
      00025C 20 E9            [ 2]  607 	jra 1$
      00025E 91 6F 07         [ 4]  608 2$: clr ([idx_y],y)
      000261 84               [ 1]  609 	pop a
      000262 81               [ 4]  610 	ret
                                    611 		
                                    612 ;------------------------------------
                                    613 ; convert integer to string
                                    614 ; input:
                                    615 ;   a  base
                                    616 ;	y  integer to convert
                                    617 ; output:
                                    618 ;   y  pointer to string
                                    619 ;------------------------------------
      000263                        620 itoa:
                           000001   621 	SIGN=1
                           000002   622 	BASE=2
                           000002   623 	LOCAL_SIZE=2
      000263 89               [ 2]  624 	pushw x
      000264 88               [ 1]  625 	push a  ; base
      000265 4B 00            [ 1]  626 	push #0 ; sign
      000267 A1 0A            [ 1]  627 	cp a,#10
      000269 26 0D            [ 1]  628 	jrne 1$
      00026B 90 CF 00 A9      [ 2]  629 	ldw acc16,y
      00026F 72 0F 00 A9 04   [ 2]  630 	btjf acc16,#7,1$
      000274 03 01            [ 1]  631 	cpl (SIGN,sp)
      000276 90 50            [ 2]  632 	negw y
                                    633 	; initialize string pointer 
      000278 AE 00 4F         [ 2]  634 1$:	ldw x,#PAD_SIZE-1
      00027B CF 00 A9         [ 2]  635 	ldw acc16,x
      00027E AE 00 59         [ 2]  636 	ldw x,#pad
      000281 72 BB 00 A9      [ 2]  637 	addw x,acc16
      000285 7F               [ 1]  638 	clr (x)
      000286 5A               [ 2]  639 	decw x
      000287 A6 20            [ 1]  640 	ld a,#SPACE
      000289 F7               [ 1]  641 	ld (x),a
      00028A 72 5F 00 A9      [ 1]  642 	clr acc16
      00028E 72 5F 00 AA      [ 1]  643 	clr acc16+1
      000292                        644 itoa_loop:
      000292 7B 02            [ 1]  645     ld a,(BASE,sp)
      000294 90 62            [ 2]  646     div y,a
      000296 AB 30            [ 1]  647     add a,#'0
      000298 A1 3A            [ 1]  648     cp a,#'9+1
      00029A 2B 02            [ 1]  649     jrmi 2$
      00029C AB 07            [ 1]  650     add a,#7 
      00029E 5A               [ 2]  651 2$: decw x
      00029F F7               [ 1]  652     ld (x),a
      0002A0 90 C3 00 A9      [ 2]  653     cpw y,acc16
      0002A4 26 EC            [ 1]  654     jrne itoa_loop
                                    655 	; copy string pointer in y
      0002A6 CF 00 A9         [ 2]  656     ldw acc16,x
      0002A9 90 CE 00 A9      [ 2]  657     ldw y,acc16
      0002AD 7B 02            [ 1]  658 	ld a,(BASE,sp)
      0002AF A1 10            [ 1]  659 	cp a,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0002B1 26 1B            [ 1]  660 	jrne 9$
      0002B3 CD 03 8A         [ 4]  661     call strlen
      0002B6 A1 03            [ 1]  662     cp a,#3
      0002B8 27 0C            [ 1]  663     jreq 8$
      0002BA 25 04            [ 1]  664     jrult 7$
      0002BC A1 05            [ 1]  665 	cp a,#5
      0002BE 27 06            [ 1]  666 	jreq 8$
      0002C0 90 5A            [ 2]  667 7$: decw y
      0002C2 A6 30            [ 1]  668     ld a,#'0
      0002C4 90 F7            [ 1]  669     ld (y),a
      0002C6 90 5A            [ 2]  670 8$:	decw y
      0002C8 A6 24            [ 1]  671 	ld a,#'$
      0002CA 90 F7            [ 1]  672 	ld (y),a
      0002CC 20 0A            [ 2]  673 	jra 10$
      0002CE 7B 01            [ 1]  674 9$: ld a,(SIGN,sp)
      0002D0 27 06            [ 1]  675     jreq 10$
      0002D2 90 5A            [ 2]  676     decw y
      0002D4 A6 2D            [ 1]  677     ld a,#'-
      0002D6 90 F7            [ 1]  678     ld (y),a
      0002D8                        679 10$:
      0002D8 5B 02            [ 2]  680 	addw sp,#LOCAL_SIZE
      0002DA 85               [ 2]  681 	popw x
      0002DB 81               [ 4]  682 	ret
                                    683 
                                    684 ;------------------------------------
                                    685 ;multiply Y=A*Y	
                                    686 ; input:
                                    687 ;    Y uint16_t
                                    688 ;    A uint8_t
                                    689 ; output:
                                    690 ;   Y uint16_t product modulo 65535
                                    691 ;------------------------------------
      0002DC                        692 mul16x8:
      0002DC 89               [ 2]  693 	pushw x ; save x
      0002DD CE 00 A9         [ 2]  694 	ldw x, acc16 ; save it
      0002E0 89               [ 2]  695 	pushw x
      0002E1 93               [ 1]  696 	ldw x,y
      0002E2 42               [ 4]  697 	mul x,a ; a*yl
      0002E3 CF 00 A9         [ 2]  698 	ldw acc16,x
      0002E6 90 5E            [ 1]  699 	swapw y
      0002E8 90 42            [ 4]  700 	mul y,a ; a*yh
                                    701 	; y*=256
      0002EA 90 5E            [ 1]  702 	swapw y
      0002EC 4F               [ 1]  703 	clr a
      0002ED 90 97            [ 1]  704 	ld yl,a
      0002EF 72 B9 00 A9      [ 2]  705 	addw y,acc16
      0002F3 85               [ 2]  706 	popw x ; restore acc16
      0002F4 CF 00 A9         [ 2]  707 	ldw acc16,x
      0002F7 85               [ 2]  708 	popw x ; restore x
      0002F8 81               [ 4]  709 	ret
                                    710 
                                    711 ;------------------------------------
                                    712 ; check if character in {'0'..'9'}
                                    713 ; input:
                                    714 ;    a  character to test
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    715 ; output:
                                    716 ;    a  0|1
                                    717 ;------------------------------------
      0002F9                        718 is_digit:
      0002F9 A1 30            [ 1]  719 	cp a,#'0
      0002FB 2A 02            [ 1]  720 	jrpl 1$
      0002FD 4F               [ 1]  721 0$:	clr a
      0002FE 81               [ 4]  722 	ret
      0002FF A1 39            [ 1]  723 1$: cp a,#'9
      000301 22 FA            [ 1]  724     jrugt 0$
      000303 A6 01            [ 1]  725     ld a,#1
      000305 81               [ 4]  726     ret
                                    727 	
                                    728 ;------------------------------------
                                    729 ; check if character in {'0'..'9','A'..'F'}
                                    730 ; input:
                                    731 ;   a  character to test
                                    732 ; output:
                                    733 ;   a   0|1 
                                    734 ;------------------------------------
      000306                        735 is_hex:
      000306 88               [ 1]  736 	push a
      000307 CD 02 F9         [ 4]  737 	call is_digit
      00030A A1 01            [ 1]  738 	cp a,#1
      00030C 26 03            [ 1]  739 	jrne 1$
      00030E 5B 01            [ 2]  740 	addw sp,#1
      000310 81               [ 4]  741 	ret
      000311 84               [ 1]  742 1$:	pop a
      000312 A1 61            [ 1]  743 	cp a,#'a
      000314 2B 02            [ 1]  744 	jrmi 2$
      000316 A0 20            [ 1]  745 	sub a,#32
      000318 A1 41            [ 1]  746 2$: cp a,#'A
      00031A 2A 02            [ 1]  747     jrpl 3$
      00031C 4F               [ 1]  748 0$: clr a
      00031D 81               [ 4]  749     ret
      00031E A1 46            [ 1]  750 3$: cp a,#'F
      000320 22 FA            [ 1]  751     jrugt 0$
      000322 A6 01            [ 1]  752     ld a,#1
      000324 81               [ 4]  753     ret
                                    754             	
                                    755 ;------------------------------------
                                    756 ; convert alpha to uppercase
                                    757 ; input:
                                    758 ;    a  character to convert
                                    759 ; output:
                                    760 ;    a  uppercase character
                                    761 ;------------------------------------
      000325                        762 a_upper:
      000325 A1 61            [ 1]  763 	cp a,#'a
      000327 2A 01            [ 1]  764 	jrpl 1$
      000329 81               [ 4]  765 0$:	ret
      00032A A1 7A            [ 1]  766 1$: cp a,#'z	
      00032C 22 FB            [ 1]  767 	jrugt 0$
      00032E A0 20            [ 1]  768 	sub a,#32
      000330 81               [ 4]  769 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                    770 	
                                    771 ;------------------------------------
                                    772 ; convert pad content in integer
                                    773 ; input:
                                    774 ;    pad
                                    775 ; output:
                                    776 ;    y
                                    777 ;------------------------------------
      000331                        778 atoi:
                                    779 	; local variables
                           000001   780 	SIGN=1 ; 1 byte, 
                           000002   781 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   782 	TEMP=3 ; 1 byte, temporary storage
                           000003   783 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      000331 89               [ 2]  784 	pushw x ;save x
      000332 52 03            [ 2]  785 	sub sp,#LOCAL_SIZE
      000334 0F 01            [ 1]  786 	clr (SIGN,sp)
      000336 A6 0A            [ 1]  787 	ld a,#10
      000338 6B 02            [ 1]  788 	ld (BASE,sp),a ; default base decimal
      00033A AE 00 59         [ 2]  789 	ldw x,#pad ; pointer to string to convert
      00033D 90 5F            [ 1]  790 	clrw y    ; convertion result
      00033F F6               [ 1]  791 	ld a,(x)
      000340 27 3E            [ 1]  792 	jreq 9$
      000342 A1 2D            [ 1]  793 	cp a,#'-
      000344 26 04            [ 1]  794 	jrne 1$
      000346 03 01            [ 1]  795 	cpl (SIGN,sp)
      000348 20 08            [ 2]  796 	jra 2$
      00034A A1 24            [ 1]  797 1$: cp a,#'$
      00034C 26 06            [ 1]  798 	jrne 3$
      00034E A6 10            [ 1]  799 	ld a,#16
      000350 6B 02            [ 1]  800 	ld (BASE,sp),a
      000352 5C               [ 1]  801 2$:	incw x
      000353 F6               [ 1]  802 	ld a,(x)
      000354                        803 3$:	
      000354 A1 61            [ 1]  804 	cp a,#'a
      000356 2B 02            [ 1]  805 	jrmi 4$
      000358 A0 20            [ 1]  806 	sub a,#32
      00035A A1 30            [ 1]  807 4$:	cp a,#'0
      00035C 2B 22            [ 1]  808 	jrmi 9$
      00035E A0 30            [ 1]  809 	sub a,#'0
      000360 A1 0A            [ 1]  810 	cp a,#10
      000362 2B 06            [ 1]  811 	jrmi 5$
      000364 A0 07            [ 1]  812 	sub a,#7
      000366 11 02            [ 1]  813 	cp a,(BASE,sp)
      000368 2A 16            [ 1]  814 	jrpl 9$
      00036A 6B 03            [ 1]  815 5$:	ld (TEMP,sp),a
      00036C 7B 02            [ 1]  816 	ld a,(BASE,sp)
      00036E CD 02 DC         [ 4]  817 	call mul16x8
      000371 7B 03            [ 1]  818 	ld a,(TEMP,sp)
      000373 C7 00 AA         [ 1]  819 	ld acc16+1,a
      000376 72 5F 00 A9      [ 1]  820 	clr acc16
      00037A 72 B9 00 A9      [ 2]  821 	addw y,acc16
      00037E 20 D2            [ 2]  822 	jra 2$
      000380 0D 01            [ 1]  823 9$:	tnz (SIGN,sp)
      000382 27 02            [ 1]  824     jreq 11$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000384 90 50            [ 2]  825     negw y
      000386 5B 03            [ 2]  826 11$: addw sp,#LOCAL_SIZE
      000388 85               [ 2]  827 	popw x ; restore x
      000389 81               [ 4]  828 	ret
                                    829 
                                    830 ;------------------------------------
                                    831 ;strlen  return ASCIIZ string length
                                    832 ; input:
                                    833 ;	y  pointer to string
                                    834 ; output:
                                    835 ;	a   length  < 256
                                    836 ;------------------------------------
      00038A                        837 strlen:
                           000001   838 	LEN=1
      00038A 90 89            [ 2]  839     pushw y
      00038C 4B 00            [ 1]  840     push #0
      00038E 90 F6            [ 1]  841 0$: ld a,(y)
      000390 27 06            [ 1]  842     jreq 1$
      000392 0C 01            [ 1]  843     inc (LEN,sp)
      000394 90 5C            [ 1]  844     incw y
      000396 20 F6            [ 2]  845     jra 0$
      000398 84               [ 1]  846 1$: pop a
      000399 90 85            [ 2]  847     popw y
      00039B 81               [ 4]  848     ret
                                    849 	
                                    850 ;------------------------------------
                                    851 ; peek addr, print byte at this address 
                                    852 ; input:
                                    853 ;	 y   address to peek
                                    854 ;    a   numeric base for convertion
                                    855 ; output:
                                    856 ;    print byte value at this address
                                    857 ;------------------------------------
      00039C                        858 peek:
      00039C 90 89            [ 2]  859 	pushw y
      00039E 88               [ 1]  860     push a
      00039F 90 F6            [ 1]  861     ld a,(y)
      0003A1 90 97            [ 1]  862     ld yl,a
      0003A3 4F               [ 1]  863     clr a
      0003A4 90 95            [ 1]  864     ld yh,a
      0003A6 84               [ 1]  865     pop a
      0003A7 CD 02 63         [ 4]  866     call itoa
      0003AA CD 00 F9         [ 4]  867     call uart_print
      0003AD 90 85            [ 2]  868     popw y
      0003AF 81               [ 4]  869     ret	
                                    870 	
                                    871 ;------------------------------------
                                    872 ; get a number from command line next argument
                                    873 ;  input:
                                    874 ;	  none
                                    875 ;  output:
                                    876 ;    y   uint16_t 
                                    877 ;------------------------------------
      0003B0                        878 number:
      0003B0 CD 02 0E         [ 4]  879 	call next_word
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0003B3 CD 03 31         [ 4]  880 	call atoi
      0003B6 81               [ 4]  881 	ret
                                    882 	
                                    883 	; write a byte in memory
                                    884 	; input:
                                    885 	;    a  byte to write
                                    886 	;    y  address 
                                    887 	; output:
                                    888 	;    none
      0003B7                        889 write_byte:
      0003B7 90 A3 80 00      [ 2]  890     cpw y,#FLASH_BASE
      0003BB 2A 2E            [ 1]  891     jrpl write_flash
      0003BD 90 A3 40 00      [ 2]  892     cpw y,#EEPROM_BASE
      0003C1 2B 06            [ 1]  893 	jrmi 1$
      0003C3 90 A3 48 80      [ 2]  894 	cpw y,#OPTION_END+1  
      0003C7 2B 44            [ 1]  895     jrmi write_eeprom
      0003C9 90 C3 00 AB      [ 2]  896 1$: cpw y,ram_free_base
      0003CD 2A 01            [ 1]  897     jrpl 2$
      0003CF 81               [ 4]  898     ret
      0003D0 90 A3 18 00      [ 2]  899 2$: cpw y,#STACK_TOP+1
      0003D4 2B 03            [ 1]  900     jrmi 3$
      0003D6 CC 03 DC         [ 2]  901     jp write_sfr    
      0003D9 90 F7            [ 1]  902 3$: ld (y),a
      0003DB 81               [ 4]  903 	ret
                                    904 	; write SFR
      0003DC                        905 write_sfr:
      0003DC 90 A3 50 00      [ 2]  906 	cpw y,#SFR_BASE
      0003E0 2B 08            [ 1]  907 	jrmi 2$
      0003E2 90 A3 58 00      [ 2]  908 	cpw y,#SFR_END+1
      0003E6 2A 02            [ 1]  909 	jrpl 2$
      0003E8 90 F7            [ 1]  910 	ld (y),a
      0003EA 81               [ 4]  911 2$:	ret
                                    912 	; write program memory
      0003EB                        913 write_flash:
      0003EB 90 C3 00 AD      [ 2]  914 	cpw y,flash_free_base
      0003EF 2A 01            [ 1]  915 	jrpl 0$
      0003F1 81               [ 4]  916 	ret
      0003F2 35 56 50 62      [ 1]  917 0$:	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0003F6 35 AE 50 62      [ 1]  918 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0003FA 72 03 50 5F FB   [ 2]  919 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0003FF                        920 1$:	_no_interrupts
      0003FF 9B               [ 1]    1 		sim
      000400 90 F7            [ 1]  921 	ld (y),a
      000402 72 05 50 5F FB   [ 2]  922 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000407                        923     _interrupts
      000407 9A               [ 1]    1 		 rim
      000408 72 13 50 5F      [ 1]  924     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00040C 81               [ 4]  925     ret
                                    926     ; write eeprom and option
      00040D                        927 write_eeprom:
                           000002   928 	OPT=2
                           000001   929 	BYTE=1
                           000002   930 	LOCAL_SIZE=2
      00040D 4B 00            [ 1]  931 	push #0
      00040F 88               [ 1]  932 	push a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                    933 	; check for data eeprom or option eeprom
      000410 90 A3 48 00      [ 2]  934 	cpw y,#OPTION_BASE
      000414 2B 08            [ 1]  935 	jrmi 1$
      000416 90 A3 48 80      [ 2]  936 	cpw y,#OPTION_END+1
      00041A 2A 02            [ 1]  937 	jrpl 1$
      00041C 03 02            [ 1]  938 	cpl (OPT,sp)
      00041E 35 AE 50 64      [ 1]  939 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000422 35 56 50 64      [ 1]  940     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000426 7B 02            [ 1]  941     ld a,(OPT,sp)
      000428 27 08            [ 1]  942     jreq 2$
      00042A 72 1E 50 5B      [ 1]  943     bset FLASH_CR2,#FLASH_CR2_OPT
      00042E 72 1F 50 5C      [ 1]  944     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000432 72 07 50 5F FB   [ 2]  945 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000437 7B 01            [ 1]  946     ld a,(BYTE,sp)
      000439 90 F7            [ 1]  947     ld (y),a
      00043B 90 5C            [ 1]  948     incw y
      00043D 7B 02            [ 1]  949     ld a,(OPT,sp)
      00043F 27 05            [ 1]  950     jreq 3$
      000441 7B 01            [ 1]  951     ld a,(BYTE,sp)
      000443 43               [ 1]  952     cpl a
      000444 90 F7            [ 1]  953     ld (y),a
      000446 72 05 50 5F FB   [ 2]  954 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00044B 5B 02            [ 2]  955 	addw sp,#LOCAL_SIZE
      00044D 81               [ 4]  956     ret
                                    957         
                                    958 		  
                                    959 ;------------------------------------
                                    960 ; evaluate command string in tib
                                    961 ; list of commands
                                    962 ;   @  addr display content at address
                                    963 ;   !  addr byte [byte ]* store bytes at address
                                    964 ;   ?  diplay command help
                                    965 ;   b  n    convert n in the other base
                                    966 ;	c  addr bitmask  clear  bits at address
                                    967 ;   h  addr hex dump memory starting at address
                                    968 ;   m  src dest count,  move memory block
                                    969 ;   r  reset MCU
                                    970 ;   s  addr bitmask  set a bits at address
                                    971 ;   t  addr bitmask  toggle bits at address
                                    972 ;   x  addr execute  code at address  
                                    973 ;------------------------------------
      00044E                        974 eval:
      00044E C6 00 03         [ 1]  975 	ld a, in
      000451 C1 00 04         [ 1]  976 	cp a, count
      000454 26 01            [ 1]  977 	jrne 0$
      000456 81               [ 4]  978 	ret ; nothing to evaluate
      000457 CD 02 0E         [ 4]  979 0$:	call next_word
      00045A 90 AE 00 59      [ 2]  980 	ldw y,#pad
      00045E 90 F6            [ 1]  981     ld a,(y)	
      000460 A1 40            [ 1]  982 	cp a,#'@
      000462 26 03            [ 1]  983 	jrne 1$
      000464 CC 04 B8         [ 2]  984 	jp fetch
      000467 A1 21            [ 1]  985 1$:	cp a,#'!
      000469 26 03            [ 1]  986 	jrne 10$
      00046B CC 04 DC         [ 2]  987 	jp store
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      00046E                        988 10$:
      00046E A1 3F            [ 1]  989 	cp a,#'?
      000470 26 03            [ 1]  990 	jrne 15$
      000472 CC 04 FE         [ 2]  991 	jp help
      000475                        992 15$: 
      000475 A1 62            [ 1]  993 	cp a,#'b
      000477 26 03            [ 1]  994     jrne 2$
      000479 CC 05 06         [ 2]  995     jp base_convert	
      00047C A1 63            [ 1]  996 2$:	cp a,#'c
      00047E 26 03            [ 1]  997 	jrne 3$
      000480 CC 05 1D         [ 2]  998 	jp clear_bits
      000483 A1 68            [ 1]  999 3$:	cp a,#'h
      000485 26 03            [ 1] 1000 	jrne 4$
      000487 CC 05 2F         [ 2] 1001 	jp hexdump
      00048A A1 6D            [ 1] 1002 4$:	cp a,#'m
      00048C 26 03            [ 1] 1003 	jrne 5$
      00048E CC 05 8A         [ 2] 1004 	jp move_memory
      000491 A1 72            [ 1] 1005 5$: cp a,#'r
      000493 26 03            [ 1] 1006     jrne 6$
      000495 CD 00 CD         [ 4] 1007 	call NonHandledInterrupt	
      000498 A1 73            [ 1] 1008 6$:	cp a,#'s
      00049A 26 03            [ 1] 1009 	jrne 7$
      00049C CC 05 B7         [ 2] 1010 	jp set_bits
      00049F A1 74            [ 1] 1011 7$:	cp a,#'t
      0004A1 26 03            [ 1] 1012 	jrne 8$
      0004A3 CC 05 C8         [ 2] 1013 	jp toggle_bits
      0004A6 A1 78            [ 1] 1014 8$:	cp a,#'x
      0004A8 26 03            [ 1] 1015 	jrne 9$
      0004AA CC 05 D9         [ 2] 1016 	jp execute
      0004AD CD 00 F9         [ 4] 1017 9$:	call uart_print
      0004B0 90 AE 06 A9      [ 2] 1018 	ldw y,#BAD_CMD
      0004B4 CD 00 F9         [ 4] 1019 	call uart_print
      0004B7 81               [ 4] 1020 	ret
                                   1021 	
                                   1022 ;------------------------------------
                                   1023 ; fetch a byte and display it,  @  addr
                                   1024 ;------------------------------------
      0004B8                       1025 fetch:
      0004B8 CD 03 B0         [ 4] 1026 	call number 
      0004BB 90 89            [ 2] 1027 	pushw y
      0004BD 90 AE 00 59      [ 2] 1028 	ldw y,#pad
      0004C1 CD 00 F9         [ 4] 1029 	call uart_print
      0004C4 A6 3D            [ 1] 1030 	ld a,#'=
      0004C6 CD 00 EF         [ 4] 1031 	call uart_tx	
      0004C9 90 85            [ 2] 1032 	popw y
      0004CB C6 00 59         [ 1] 1033 	ld a,pad
      0004CE A1 24            [ 1] 1034 	cp a,#'$
      0004D0 27 04            [ 1] 1035 	jreq 1$
      0004D2 A6 0A            [ 1] 1036 	ld a,#10
      0004D4 20 02            [ 2] 1037 	jra 2$
      0004D6 A6 10            [ 1] 1038 1$: ld a,#16	
      0004D8 CD 03 9C         [ 4] 1039 2$:	call peek
      0004DB 81               [ 4] 1040 	ret
                                   1041 	
                                   1042 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   1043 ; store bytes,   !  addr byte [byte ]*
                                   1044 ;------------------------------------
      0004DC                       1045 store:
                           000001  1046 	MADDR=1
      0004DC CD 03 B0         [ 4] 1047 	call number
      0004DF 90 89            [ 2] 1048 	pushw y
      0004E1 CD 03 B0         [ 4] 1049 1$:	call number
      0004E4 90 9F            [ 1] 1050 	ld a,yl
      0004E6 16 01            [ 2] 1051 	ldw y,(MADDR,sp)
      0004E8 CD 03 B7         [ 4] 1052 	call write_byte
      0004EB C6 00 03         [ 1] 1053 	ld a,in
      0004EE C1 00 04         [ 1] 1054 	cp a,count
      0004F1 27 08            [ 1] 1055 	jreq 2$
      0004F3 16 01            [ 2] 1056 	ldw y,(MADDR,sp)
      0004F5 90 5C            [ 1] 1057 	incw y
      0004F7 17 01            [ 2] 1058 	ldw (MADDR,sp),y
      0004F9 20 E6            [ 2] 1059 	jra 1$
      0004FB 90 85            [ 2] 1060 2$:	popw y
      0004FD 81               [ 4] 1061 	ret
                                   1062 
                                   1063 ;------------------------------------
                                   1064 ; ? , display command information
                                   1065 ;------------------------------------
      0004FE                       1066 help:
      0004FE 90 AE 06 BC      [ 2] 1067 	ldw y, #HELP
      000502 CD 00 F9         [ 4] 1068 	call uart_print
      000505 81               [ 4] 1069 	ret
                                   1070 	; convert from one numeric base to the other
                                   1071 	;  b n|$n
      000506                       1072 base_convert:
      000506 CD 03 B0         [ 4] 1073     call number
      000509 C6 00 59         [ 1] 1074     ld a,pad
      00050C A1 24            [ 1] 1075     cp a,#'$
      00050E 26 04            [ 1] 1076     jrne 1$
      000510 A6 0A            [ 1] 1077     ld a,#10
      000512 20 02            [ 2] 1078     jra 2$
      000514 A6 10            [ 1] 1079 1$: ld a,#16
      000516 CD 02 63         [ 4] 1080 2$: call itoa
      000519 CD 00 F9         [ 4] 1081     call uart_print
      00051C 81               [ 4] 1082     ret
                                   1083         	
                                   1084 ;------------------------------------
                                   1085 ; clear bitmask, c addr mask
                                   1086 ;------------------------------------
      00051D                       1087 clear_bits:
      00051D CD 03 B0         [ 4] 1088 	call number
      000520 90 89            [ 2] 1089 	pushw y
      000522 CD 03 B0         [ 4] 1090 	call number
      000525 90 9F            [ 1] 1091 	ld a,yl
      000527 43               [ 1] 1092 	cpl a
      000528 90 85            [ 2] 1093 	popw y
      00052A 90 F4            [ 1] 1094 	and a,(y)
      00052C 90 F7            [ 1] 1095 	ld (y),a
      00052E 81               [ 4] 1096     ret
                                   1097     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1098 ;------------------------------------
                                   1099 ; hexadecimal dump memory, h addr
                                   1100 ; stop after each row, SPACE continue, other stop
                                   1101 ;------------------------------------
      00052F                       1102 hexdump: 
                           000001  1103 	MADDR = 1
                           000003  1104 	CNTR = 3 ; loop counter
                           000003  1105 	LOCAL_SIZE=3
      00052F 52 03            [ 2] 1106 	sub sp,#LOCAL_SIZE
      000531 CD 03 B0         [ 4] 1107 	call number
      000534 17 01            [ 2] 1108     ldw (MADDR,sp),y ; save address
      000536                       1109 row_init:
      000536 AE 00 59         [ 2] 1110 	ldw x,#pad
      000539 A6 10            [ 1] 1111 	ld a,#16
      00053B CD 02 63         [ 4] 1112 	call itoa
      00053E CD 00 F9         [ 4] 1113 	call uart_print
      000541 A6 20            [ 1] 1114 	ld a,#SPACE
      000543 CD 00 EF         [ 4] 1115 	call uart_tx
      000546 A6 08            [ 1] 1116     ld a,#8
      000548 6B 03            [ 1] 1117     ld (CNTR,sp),a
      00054A                       1118 row:
      00054A A6 10            [ 1] 1119 	ld a,#16
      00054C 16 01            [ 2] 1120 	ldw y,(MADDR,sp)
      00054E CD 03 9C         [ 4] 1121 	call peek
      000551 90 F6            [ 1] 1122 	ld a,(y)
      000553 A1 20            [ 1] 1123 	cp a,#SPACE
      000555 2A 02            [ 1] 1124 	jrpl 1$
      000557 A6 20            [ 1] 1125 	ld a,#SPACE
      000559 A1 80            [ 1] 1126 1$:	cp a,#128
      00055B 2B 02            [ 1] 1127     jrmi 2$
      00055D A6 20            [ 1] 1128     ld a,#SPACE
      00055F F7               [ 1] 1129 2$: ld (x),a
      000560 5C               [ 1] 1130 	incw x
      000561 90 5C            [ 1] 1131 	incw y
      000563 17 01            [ 2] 1132 	ldw (MADDR,sp),y
      000565 0A 03            [ 1] 1133 	dec (CNTR,sp)
      000567 26 E1            [ 1] 1134 	jrne row
      000569 A6 20            [ 1] 1135 	ld a,#SPACE
      00056B CD 00 EF         [ 4] 1136 	call uart_tx
      00056E 4F               [ 1] 1137 	clr a
      00056F F7               [ 1] 1138 	ld (x),a
      000570 90 89            [ 2] 1139 	pushw y
      000572 90 AE 00 59      [ 2] 1140 	ldw y,#pad
      000576 CD 00 F9         [ 4] 1141 	call uart_print
      000579 90 85            [ 2] 1142 	popw y
      00057B A6 0A            [ 1] 1143 	ld a,#NL
      00057D CD 00 EF         [ 4] 1144 	call uart_tx
      000580 CD 01 11         [ 4] 1145 	call uart_getchar
      000583 A1 20            [ 1] 1146 	cp a,#SPACE
      000585 27 AF            [ 1] 1147 	jreq row_init
      000587 5B 03            [ 2] 1148     addw sp,#LOCAL_SIZE
      000589 81               [ 4] 1149     ret
                                   1150     
                                   1151 ;------------------------------------
                                   1152 ; move memory block, m src dest count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1153 ;------------------------------------
      00058A                       1154 move_memory:
                           000003  1155     SRC=3
                           000001  1156     DEST=1
                           000004  1157     LOCAL_SIZE=4    
      00058A CD 03 B0         [ 4] 1158     call number
      00058D 90 89            [ 2] 1159     pushw y  ; source
      00058F CD 03 B0         [ 4] 1160     call number
      000592 90 89            [ 2] 1161     pushw y  ; destination
      000594 CD 03 B0         [ 4] 1162     call number 
      000597 90 CF 00 A9      [ 2] 1163     ldw acc16,y ; counter
      00059B 1E 03            [ 2] 1164     ldw x,(SRC,sp)  ; source
      00059D                       1165 move_loop:
      00059D 16 01            [ 2] 1166     ldw y,(DEST,sp)  ; destination
      00059F F6               [ 1] 1167     ld a,(x)
      0005A0 CD 03 B7         [ 4] 1168     call write_byte
      0005A3 5C               [ 1] 1169     incw x
      0005A4 90 5C            [ 1] 1170     incw y
      0005A6 17 01            [ 2] 1171     ldw (DEST,sp),y
      0005A8 90 CE 00 A9      [ 2] 1172     ldw y,acc16
      0005AC 90 5A            [ 2] 1173     decw y
      0005AE 90 CF 00 A9      [ 2] 1174     ldw acc16,y
      0005B2 26 E9            [ 1] 1175     jrne move_loop
      0005B4 5B 04            [ 2] 1176     addw sp,#LOCAL_SIZE
      0005B6 81               [ 4] 1177     ret
                                   1178     
                                   1179 ;------------------------------------
                                   1180 ; clear bitmask,  c addr mask
                                   1181 ;------------------------------------
      0005B7                       1182 set_bits:
      0005B7 CD 03 B0         [ 4] 1183 	call number
      0005BA 90 89            [ 2] 1184 	pushw y
      0005BC CD 03 B0         [ 4] 1185 	call number
      0005BF 90 9F            [ 1] 1186 	ld a,yl
      0005C1 90 85            [ 2] 1187 	popw y
      0005C3 90 FA            [ 1] 1188 	or a,(y)
      0005C5 90 F7            [ 1] 1189 	ld (y),a
      0005C7 81               [ 4] 1190     ret
                                   1191     
                                   1192 ;------------------------------------
                                   1193 ; toggle bitmask,  t addr mask
                                   1194 ;------------------------------------
      0005C8                       1195 toggle_bits:
      0005C8 CD 03 B0         [ 4] 1196 	call number
      0005CB 90 89            [ 2] 1197     pushw y
      0005CD CD 03 B0         [ 4] 1198     call number
      0005D0 90 9F            [ 1] 1199     ld a,yl
      0005D2 90 85            [ 2] 1200     popw y
      0005D4 90 F8            [ 1] 1201     xor a,(y)
      0005D6 90 F7            [ 1] 1202     ld (y),a
      0005D8 81               [ 4] 1203     ret
                                   1204     
                                   1205 ;------------------------------------
                                   1206 ; execute binary code,   x addr
                                   1207 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      0005D9                       1208 execute:
      0005D9 CD 03 B0         [ 4] 1209 	call number
      0005DC 90 FC            [ 2] 1210 	jp (y)
                                   1211 	
                                   1212 ;------------------------
                                   1213 ;  run time CONSTANTS
                                   1214 ;------------------------
                                   1215 ; messages strings
                                   1216 ;------------------------	
      0005DE 4D 4F 4E 41 20 56 45  1217 VERSION:	.asciz "MONA VERSION 0.1\nstm8s208rb     memory map\n---------------------------\n"
             52 53 49 4F 4E 20 30
             2E 31 0A 73 74 6D 38
             73 32 30 38 72 62 20
             20 20 20 20 6D 65 6D
             6F 72 79 20 6D 61 70
             0A 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             0A 00
      000626 72 61 6D 20 66 72 65  1218 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      000631 2D 20 24 31 36 46 46  1219 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      00063A 66 72 65 65 20 66 6C  1220 FLASH_FREE_MSG: .asciz "free flash: "
             61 73 68 3A 20 00
      000647 20 2D 20 24 32 37 46  1221 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      000651 65 65 70 72 6F 6D 3A  1222             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      000667 6F 70 74 69 6F 6E 3A  1223             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      00067D 53 46 52 3A 20 24 35  1224             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      000690 62 6F 6F 74 20 52 4F  1225             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
             46 46 0A 00
      0006A9 20 69 73 20 6E 6F 74  1226 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      0006BC 63 6F 6D 6D 61 6E 64  1227 HELP: .ascii "commands:\n"
             73 3A 0A
      0006C6 40 20 61 64 64 72 2C  1228 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      0006E9 21 20 61 64 64 72 20  1229 	  .ascii "! addr byte [byte ]*, store bytes at addr++\n"
             62 79 74 65 20 5B 62
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



             79 74 65 20 5D 2A 2C
             20 73 74 6F 72 65 20
             62 79 74 65 73 20 61
             74 20 61 64 64 72 2B
             2B 0A
      000715 3F 2C 20 64 69 70 6C  1230 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      00072C 62 20 6E 7C 24 6E 2C  1231 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      000750 63 20 61 64 64 72 20  1232 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
             74 20 61 64 64 72 65
             73 73 0A
      000776 68 20 61 64 64 72 2C  1233 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      0007A2 6D 20 73 72 63 20 64  1234 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      0007C6 72 20 72 65 73 65 74  1235 	  .ascii "r reset MCU\n"
             20 4D 43 55 0A
      0007D2 73 20 61 64 64 72 20  1236 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
      0007F6 74 20 61 64 64 72 20  1237 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      00081D 78 20 61 64 64 72 2C  1238 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
                                   1239 
                                   1240 ; following flash memory is not used by MONA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00083F                       1241 flash_free:
                                   1242 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   8 BAD_CMD    0006A9 R
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BSP     =  000008     |     BTN1_BIT=  000004     |     BTN1_MAS=  000010 
    BTN1_POR=  005014     |     BYTE    =  000001     |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CFG_GCR =  007F60     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CNTR    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]

Symbol Table

    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |   8 EEPROM_M   000647 R   |     EEPROM_S=  000800 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |   8 FLASH_FR   00063A R
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  8 HELP       0006BC R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000001     |     LOCAL_SI=  000004     |     MADDR   =  000001 
    N       =  000001     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   8 NonHandl   0000CD R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     PA      =  000000     |     PAD_SIZE=  000050 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]

Symbol Table

    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |   8 RAM_FREE   000626 R
  8 RAM_LAST   000631 R   |     RAM_SIZE=  001800     |     ROP     =  004800 
    RST_SR  =  0050B3     |     RXCHAR  =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SIGN    =  000001     |     SPACE   =  000020 
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_BA=  001700     |     STACK_SI=  000100     |     STACK_TO=  0017FF 
    SWIM_CSR=  007F80     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PS=  00523A     |     UART1_SR=  005230     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_SR=  005240     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   8 VERSION    0005DE R   |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XSAVE   =  000002     |   7 __interr   000000 R   |   6 __stack_   001700 R
  4 _user_ra   000000 R   |   8 a_upper    000325 R   |   3 acc16      0000A9 R
  8 accept_c   000192 R   |   8 atoi       000331 R   |   8 base_con   000506 R
  8 cancel     0001CB R   |   8 clear_al   000028 R   |   8 clear_bi   00051D R
  8 clock_in   000000 R   |   3 count      000004 R   |   8 del_back   000181 R
  8 del_line   000170 R   |   8 del_loop   000126 R   |   8 eval       00044E R
  8 execute    0005D9 R   |   8 fetch      0004B8 R   |   8 flash_fr   00083F R
  3 flash_fr   0000AD R   |   8 help       0004FE R   |   8 hexdump    00052F R
  3 idx_x      000005 R   |   3 idx_y      000007 R   |   3 in         000003 R
  3 in.w       000002 R   |   8 init0      000033 R   |   8 is_digit   0002F9 R
  8 is_hex     000306 R   |   8 itoa       000263 R   |   8 itoa_loo   000292 R
  8 main       000070 R   |   8 move_loo   00059D R   |   8 move_mem   00058A R
  8 mul16x8    0002DC R   |   8 next_wor   00020E R   |   8 number     0003B0 R
  3 pad        000059 R   |   8 peek       00039C R   |   3 ram_free   0000AB R
  8 readln     00013F R   |   8 readln_l   000147 R   |   8 readln_q   0001D5 R
  8 readln_q   0001DA R   |   8 repl       0000B1 R   |   8 reprint    0001A7 R
  8 row        00054A R   |   8 row_init   000536 R   |   3 rx_char    000000 R
  3 rx_statu   000001 R   |   8 scan       0001F8 R   |   8 set_bits   0005B7 R
  8 skip       0001E2 R   |   8 store      0004DC R   |   8 strcpyn    000246 R
  8 strlen     00038A R   |   3 tib        000009 R   |   8 toggle_b   0005C8 R
  8 uart3_in   00000F R   |   8 uart_del   000125 R   |   8 uart_get   000111 R
  8 uart_pri   0000F9 R   |   8 uart_qch   000105 R   |   8 uart_rx_   0000D2 R
  8 uart_tx    0000EF R   |   8 ungetcha   00010B R   |   8 write_by   0003B7 R
  8 write_ee   00040D R   |   8 write_fl   0003EB R   |   8 write_sf   0003DC R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 BOOTLOAD   size      0   flags    8
   2 BOOTLOAD   size      0   flags    8
   3 DATA       size     AF   flags    0
   4 USER_RAM   size      0   flags    0
   5 SSEG       size      0   flags    8
   6 SSEG1      size    100   flags    8
   7 HOME       size     7C   flags    0
   8 CODE       size    83F   flags    0


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;  MONA   MONitor written in Assembly
                                      2 	.module MONA 
                                      3     .optsdcc -mstm8
                                      4 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                      5 	.include "../inc/nucleo_8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; NUCLEO-8S208RB board specific definitions
                                      3 ; Date: 2019/10/29
                                      4 ; author: Jacques Deschênes, copyright 2018,2019
                                      5 ; licence: GPLv3
                                      6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      7 
                                      8 ; mcu on board is stm8s208rbt6
                                      9 
                                     10 ; crystal on board is 8Mhz
                           7A1200    11 FHSE = 8000000
                                     12 
                                     13 ; LED2 is user LED
                                     14 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    15 LED2_PORT = 0x500a ;port C  ODR
                           000005    16 LED2_BIT = 5
                           000020    17 LED2_MASK = (1<<5) ;bit 5 mask
                                     18 
                                     19 ; B1 on schematic is user button
                                     20 ; connected to PE4
                                     21 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    22 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    23 USR_BTN_BIT = 4
                           000010    24 USR_BTN_MASK = (1<<4) ;bit 4 mask
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                      6 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB µC registers map
                                      4 ; sdas source file
                                      5 ; author: Jacques Deschênes, copyright 2018,2019
                                      6 ; licence: GPLv3
                                      7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      8 	.module stm8s208rb
                                      9 
                                     10 ;;;;;;;;;;;;
                                     11 ; bits
                                     12 ;;;;;;;;;;;;
                           000000    13  BIT0 = 0
                           000001    14  BIT1 = 1
                           000002    15  BIT2 = 2
                           000003    16  BIT3 = 3
                           000004    17  BIT4 = 4
                           000005    18  BIT5 = 5
                           000006    19  BIT6 = 6
                           000007    20  BIT7 = 7
                                     21  	
                                     22 ;;;;;;;;;;;;
                                     23 ; bits masks
                                     24 ;;;;;;;;;;;;
                           000001    25  B0_MASK = (1<<0)
                           000002    26  B1_MASK = (1<<1)
                           000004    27  B2_MASK = (1<<2)
                           000008    28  B3_MASK = (1<<3)
                           000010    29  B4_MASK = (1<<4)
                           000020    30  B5_MASK = (1<<5)
                           000040    31  B6_MASK = (1<<6)
                           000080    32  B7_MASK = (1<<7)
                                     33 
                                     34 ; HSI oscillator frequency 16Mhz
                           F42400    35  FHSI = 16000000
                                     36 ; LSI oscillator frequency 128Khz
                           01F400    37  FLSI = 128000 
                                     38 
                                     39 ; controller memory regions
                           001800    40  RAM_SIZE = (0x1800) ; 6KB 
                           000800    41  EEPROM_SIZE = (0x800) ; 2KB
                                     42 ; STM8S208RB have 128K flash
                           020000    43  FLASH_SIZE = (0x20000)
                                     44 
                           000000    45  RAM_BASE = (0)
                           0017FF    46  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    47  EEPROM_BASE = (0x4000)
                           0047FF    48  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    49  SFR_BASE = (0x5000)
                           0057FF    50  SFR_END = (0x57FF)
                           006000    51  BOOT_ROM_BASE = (0x6000)
                           007FFF    52  BOOT_ROM_END = (0x7fff)
                           008000    53  FLASH_BASE = (0x8000)
                           027FFF    54  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           004800    55  OPTION_BASE = (0x4800)
                           00487F    56  OPTION_END = (0x487F)
                           0048CD    57  DEVID_BASE = (0x48CD)
                           0048D8    58  DEVID_END = (0x48D8)
                           007F00    59  DEBUG_BASE = (0X7F00)
                           007FFF    60  DEBUG_END = (0X7FFF)
                                     61 
                                     62 ; options bytes
                                     63 ; this one can be programmed only from SWIM  (ICP)
                           004800    64  OPT0  = (0x4800)
                                     65 ; these can be programmed at runtime (IAP)
                           004801    66  OPT1  = (0x4801)
                           004802    67  NOPT1  = (0x4802)
                           004803    68  OPT2  = (0x4803)
                           004804    69  NOPT2  = (0x4804)
                           004805    70  OPT3  = (0x4805)
                           004806    71  NOPT3  = (0x4806)
                           004807    72  OPT4  = (0x4807)
                           004808    73  NOPT4  = (0x4808)
                           004809    74  OPT5  = (0x4809)
                           00480A    75  NOPT5  = (0x480A)
                           00480B    76  OPT6  = (0x480B)
                           00480C    77  NOPT6 = (0x480C)
                           00480D    78  OPT7 = (0x480D)
                           00480E    79  NOPT7 = (0x480E)
                           00487E    80  OPTBL  = (0x487E)
                           00487F    81  NOPTBL  = (0x487F)
                                     82 ; option registers usage
                                     83 ; read out protection, value 0xAA enable ROP
                           004800    84  ROP = OPT0  
                                     85 ; user boot code, {0..0x3e} 512 bytes row
                           004801    86  UBC = OPT1
                           004802    87  NUBC = NOPT1
                                     88 ; alternate function register
                           004803    89  AFR = OPT2
                           004804    90  NAFR = NOPT2
                                     91 ; miscelinous options
                           004805    92  WDGOPT = OPT3
                           004806    93  NWDGOPT = NOPT3
                                     94 ; clock options
                           004807    95  CLKOPT = OPT4
                           004808    96  NCLKOPT = NOPT4
                                     97 ; HSE clock startup delay
                           004809    98  HSECNT = OPT5
                           00480A    99  NHSECNT = NOPT5
                                    100 ; flash wait state
                           00480D   101 FLASH_WS = OPT7
                           00480E   102 NFLASH_WS = NOPT7
                                    103 
                                    104 ; watchdog options bits
                           000003   105   WDGOPT_LSIEN   =  BIT3
                           000002   106   WDGOPT_IWDG_HW =  BIT2
                           000001   107   WDGOPT_WWDG_HW =  BIT1
                           000000   108   WDGOPT_WWDG_HALT = BIT0
                                    109 ; NWDGOPT bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           FFFFFFFC   110   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   111   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   112   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   113   NWDGOPT_WWDG_HALT = ~BIT0
                                    114 
                                    115 ; CLKOPT bits
                           000003   116  CLKOPT_EXT_CLK  = BIT3
                           000002   117  CLKOPT_CKAWUSEL = BIT2
                           000001   118  CLKOPT_PRS_C1   = BIT1
                           000000   119  CLKOPT_PRS_C0   = BIT0
                                    120 
                                    121 ; AFR option, remapable functions
                           000007   122  AFR7_BEEP    = BIT7
                           000006   123  AFR6_I2C     = BIT6
                           000005   124  AFR5_TIM1    = BIT5
                           000004   125  AFR4_TIM1    = BIT4
                           000003   126  AFR3_TIM1    = BIT3
                           000002   127  AFR2_CCO     = BIT2
                           000001   128  AFR1_TIM2    = BIT1
                           000000   129  AFR0_ADC     = BIT0
                                    130 
                                    131 ; device ID = (read only)
                           0048CD   132  DEVID_XL  = (0x48CD)
                           0048CE   133  DEVID_XH  = (0x48CE)
                           0048CF   134  DEVID_YL  = (0x48CF)
                           0048D0   135  DEVID_YH  = (0x48D0)
                           0048D1   136  DEVID_WAF  = (0x48D1)
                           0048D2   137  DEVID_LOT0  = (0x48D2)
                           0048D3   138  DEVID_LOT1  = (0x48D3)
                           0048D4   139  DEVID_LOT2  = (0x48D4)
                           0048D5   140  DEVID_LOT3  = (0x48D5)
                           0048D6   141  DEVID_LOT4  = (0x48D6)
                           0048D7   142  DEVID_LOT5  = (0x48D7)
                           0048D8   143  DEVID_LOT6  = (0x48D8)
                                    144 
                                    145 
                           005000   146 GPIO_BASE = (0x5000)
                           000005   147 GPIO_SIZE = (5)
                                    148 ; PORTS SFR OFFSET
                           000000   149 PA = 0
                           000005   150 PB = 5
                           00000A   151 PC = 10
                           00000F   152 PD = 15
                           000014   153 PE = 20
                           000019   154 PF = 25
                           00001E   155 PG = 30
                                    156 
                                    157 ; GPIO
                                    158 ; gpio register offset to base
                           000000   159  GPIO_ODR = 0
                           000001   160  GPIO_IDR = 1
                           000002   161  GPIO_DDR = 2
                           000003   162  GPIO_CR1 = 3
                           000004   163  GPIO_CR2 = 4
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    165 ; port A
                           005000   166  PA_BASE = (0X5000)
                           005000   167  PA_ODR  = (0x5000)
                           005001   168  PA_IDR  = (0x5001)
                           005002   169  PA_DDR  = (0x5002)
                           005003   170  PA_CR1  = (0x5003)
                           005004   171  PA_CR2  = (0x5004)
                                    172 ; port B
                           005005   173  PB_BASE = (0X5005)
                           005005   174  PB_ODR  = (0x5005)
                           005006   175  PB_IDR  = (0x5006)
                           005007   176  PB_DDR  = (0x5007)
                           005008   177  PB_CR1  = (0x5008)
                           005009   178  PB_CR2  = (0x5009)
                                    179 ; port C
                           00500A   180  PC_BASE = (0X500A)
                           00500A   181  PC_ODR  = (0x500A)
                           00500B   182  PC_IDR  = (0x500B)
                           00500C   183  PC_DDR  = (0x500C)
                           00500D   184  PC_CR1  = (0x500D)
                           00500E   185  PC_CR2  = (0x500E)
                                    186 ; port D
                           00500F   187  PD_BASE = (0X500F)
                           00500F   188  PD_ODR  = (0x500F)
                           005010   189  PD_IDR  = (0x5010)
                           005011   190  PD_DDR  = (0x5011)
                           005012   191  PD_CR1  = (0x5012)
                           005013   192  PD_CR2  = (0x5013)
                                    193 ; port E
                           005014   194  PE_BASE = (0X5014)
                           005014   195  PE_ODR  = (0x5014)
                           005015   196  PE_IDR  = (0x5015)
                           005016   197  PE_DDR  = (0x5016)
                           005017   198  PE_CR1  = (0x5017)
                           005018   199  PE_CR2  = (0x5018)
                                    200 ; port F
                           005019   201  PF_BASE = (0X5019)
                           005019   202  PF_ODR  = (0x5019)
                           00501A   203  PF_IDR  = (0x501A)
                           00501B   204  PF_DDR  = (0x501B)
                           00501C   205  PF_CR1  = (0x501C)
                           00501D   206  PF_CR2  = (0x501D)
                                    207 ; port G
                           00501E   208  PG_BASE = (0X501E)
                           00501E   209  PG_ODR  = (0x501E)
                           00501F   210  PG_IDR  = (0x501F)
                           005020   211  PG_DDR  = (0x5020)
                           005021   212  PG_CR1  = (0x5021)
                           005022   213  PG_CR2  = (0x5022)
                                    214 ; port H not present on LQFP48/LQFP64 package
                           005023   215  PH_BASE = (0X5023)
                           005023   216  PH_ODR  = (0x5023)
                           005024   217  PH_IDR  = (0x5024)
                           005025   218  PH_DDR  = (0x5025)
                           005026   219  PH_CR1  = (0x5026)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005027   220  PH_CR2  = (0x5027)
                                    221 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   222  PI_BASE = (0X5028)
                           005028   223  PI_ODR  = (0x5028)
                           005029   224  PI_IDR  = (0x5029)
                           00502A   225  PI_DDR  = (0x502a)
                           00502B   226  PI_CR1  = (0x502b)
                           00502C   227  PI_CR2  = (0x502c)
                                    228 
                                    229 ; input modes CR1
                           000000   230  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   231  INPUT_PULLUP = (1)
                                    232 ; output mode CR1
                           000000   233  OUTPUT_OD = (0) ; open drain
                           000001   234  OUTPUT_PP = (1) ; push pull
                                    235 ; input modes CR2
                           000000   236  INPUT_DI = (0)
                           000001   237  INPUT_EI = (1)
                                    238 ; output speed CR2
                           000000   239  OUTPUT_SLOW = (0)
                           000001   240  OUTPUT_FAST = (1)
                                    241 
                                    242 
                                    243 ; Flash memory
                           00505A   244  FLASH_CR1  = (0x505A)
                           00505B   245  FLASH_CR2  = (0x505B)
                           00505C   246  FLASH_NCR2  = (0x505C)
                           00505D   247  FLASH_FPR  = (0x505D)
                           00505E   248  FLASH_NFPR  = (0x505E)
                           00505F   249  FLASH_IAPSR  = (0x505F)
                           005062   250  FLASH_PUKR  = (0x5062)
                           005064   251  FLASH_DUKR  = (0x5064)
                                    252 ; data memory unlock keys
                           0000AE   253  FLASH_DUKR_KEY1 = (0xae)
                           000056   254  FLASH_DUKR_KEY2 = (0x56)
                                    255 ; flash memory unlock keys
                           000056   256  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   257  FLASH_PUKR_KEY2 = (0xae)
                                    258 ; FLASH_CR1 bits
                           000003   259  FLASH_CR1_HALT = BIT3
                           000002   260  FLASH_CR1_AHALT = BIT2
                           000001   261  FLASH_CR1_IE = BIT1
                           000000   262  FLASH_CR1_FIX = BIT0
                                    263 ; FLASH_CR2 bits
                           000007   264  FLASH_CR2_OPT = BIT7
                           000006   265  FLASH_CR2_WPRG = BIT6
                           000005   266  FLASH_CR2_ERASE = BIT5
                           000004   267  FLASH_CR2_FPRG = BIT4
                           000000   268  FLASH_CR2_PRG = BIT0
                                    269 ; FLASH_FPR bits
                           000005   270  FLASH_FPR_WPB5 = BIT5
                           000004   271  FLASH_FPR_WPB4 = BIT4
                           000003   272  FLASH_FPR_WPB3 = BIT3
                           000002   273  FLASH_FPR_WPB2 = BIT2
                           000001   274  FLASH_FPR_WPB1 = BIT1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000000   275  FLASH_FPR_WPB0 = BIT0
                                    276 ; FLASH_NFPR bits
                           000005   277  FLASH_NFPR_NWPB5 = BIT5
                           000004   278  FLASH_NFPR_NWPB4 = BIT4
                           000003   279  FLASH_NFPR_NWPB3 = BIT3
                           000002   280  FLASH_NFPR_NWPB2 = BIT2
                           000001   281  FLASH_NFPR_NWPB1 = BIT1
                           000000   282  FLASH_NFPR_NWPB0 = BIT0
                                    283 ; FLASH_IAPSR bits
                           000006   284  FLASH_IAPSR_HVOFF = BIT6
                           000003   285  FLASH_IAPSR_DUL = BIT3
                           000002   286  FLASH_IAPSR_EOP = BIT2
                           000001   287  FLASH_IAPSR_PUL = BIT1
                           000000   288  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    289 
                                    290 ; Interrupt control
                           0050A0   291  EXTI_CR1  = (0x50A0)
                           0050A1   292  EXTI_CR2  = (0x50A1)
                                    293 
                                    294 ; Reset Status
                           0050B3   295  RST_SR  = (0x50B3)
                                    296 
                                    297 ; Clock Registers
                           0050C0   298  CLK_ICKR  = (0x50c0)
                           0050C1   299  CLK_ECKR  = (0x50c1)
                           0050C3   300  CLK_CMSR  = (0x50C3)
                           0050C4   301  CLK_SWR  = (0x50C4)
                           0050C5   302  CLK_SWCR  = (0x50C5)
                           0050C6   303  CLK_CKDIVR  = (0x50C6)
                           0050C7   304  CLK_PCKENR1  = (0x50C7)
                           0050C8   305  CLK_CSSR  = (0x50C8)
                           0050C9   306  CLK_CCOR  = (0x50C9)
                           0050CA   307  CLK_PCKENR2  = (0x50CA)
                           0050CC   308  CLK_HSITRIMR  = (0x50CC)
                           0050CD   309  CLK_SWIMCCR  = (0x50CD)
                                    310 
                                    311 ; Peripherals clock gating
                                    312 ; CLK_PCKENR1 
                           000007   313  CLK_PCKENR1_TIM1 = (7)
                           000006   314  CLK_PCKENR1_TIM3 = (6)
                           000005   315  CLK_PCKENR1_TIM2 = (5)
                           000004   316  CLK_PCKENR1_TIM4 = (4)
                           000003   317  CLK_PCKENR1_UART3 = (3)
                           000002   318  CLK_PCKENR1_UART1 = (2)
                           000001   319  CLK_PCKENR1_SPI = (1)
                           000000   320  CLK_PCKENR1_I2C = (0)
                                    321 ; CLK_PCKENR2
                           000007   322  CLK_PCKENR2_CAN = (7)
                           000003   323  CLK_PCKENR2_ADC = (3)
                           000002   324  CLK_PCKENR2_AWU = (2)
                                    325 
                                    326 ; Clock bits
                           000005   327  CLK_ICKR_REGAH = (5)
                           000004   328  CLK_ICKR_LSIRDY = (4)
                           000003   329  CLK_ICKR_LSIEN = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000002   330  CLK_ICKR_FHW = (2)
                           000001   331  CLK_ICKR_HSIRDY = (1)
                           000000   332  CLK_ICKR_HSIEN = (0)
                                    333 
                           000001   334  CLK_ECKR_HSERDY = (1)
                           000000   335  CLK_ECKR_HSEEN = (0)
                                    336 ; clock source
                           0000E1   337  CLK_SWR_HSI = 0xE1
                           0000D2   338  CLK_SWR_LSI = 0xD2
                           0000B4   339  CLK_SWR_HSE = 0xB4
                                    340 
                           000003   341  CLK_SWCR_SWIF = (3)
                           000002   342  CLK_SWCR_SWIEN = (2)
                           000001   343  CLK_SWCR_SWEN = (1)
                           000000   344  CLK_SWCR_SWBSY = (0)
                                    345 
                           000004   346  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   347  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   348  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   349  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   350  CLK_CKDIVR_CPUDIV0 = (0)
                                    351 
                                    352 ; Watchdog
                           0050D1   353  WWDG_CR  = (0x50D1)
                           0050D2   354  WWDG_WR  = (0x50D2)
                           0050E0   355  IWDG_KR  = (0x50E0)
                           0050E1   356  IWDG_PR  = (0x50E1)
                           0050E2   357  IWDG_RLR  = (0x50E2)
                           0050F0   358  AWU_CSR1  = (0x50F0)
                           0050F1   359  AWU_APR  = (0x50F1)
                           0050F2   360  AWU_TBR  = (0x50F2)
                                    361 
                                    362 ; Beeper
                                    363 ; beeper output is alternate function AFR7 on PD4
                                    364 ; connected to CN9-6
                           0050F3   365  BEEP_CSR  = (0x50F3)
                           00000F   366  BEEP_PORT = PD
                           000004   367  BEEP_BIT = 4
                           000010   368  BEEP_MASK = B4_MASK
                                    369 
                                    370 ; SPI
                           005200   371  SPI_CR1  = (0x5200)
                           005201   372  SPI_CR2  = (0x5201)
                           005202   373  SPI_ICR  = (0x5202)
                           005203   374  SPI_SR  = (0x5203)
                           005204   375  SPI_DR  = (0x5204)
                           005205   376  SPI_CRCPR  = (0x5205)
                           005206   377  SPI_RXCRCR  = (0x5206)
                           005207   378  SPI_TXCRCR  = (0x5207)
                                    379 
                                    380 ; I2C
                           005210   381  I2C_CR1  = (0x5210)
                           005211   382  I2C_CR2  = (0x5211)
                           005212   383  I2C_FREQR  = (0x5212)
                           005213   384  I2C_OARL  = (0x5213)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005214   385  I2C_OARH  = (0x5214)
                           005216   386  I2C_DR  = (0x5216)
                           005217   387  I2C_SR1  = (0x5217)
                           005218   388  I2C_SR2  = (0x5218)
                           005219   389  I2C_SR3  = (0x5219)
                           00521A   390  I2C_ITR  = (0x521A)
                           00521B   391  I2C_CCRL  = (0x521B)
                           00521C   392  I2C_CCRH  = (0x521C)
                           00521D   393  I2C_TRISER  = (0x521D)
                           00521E   394  I2C_PECR  = (0x521E)
                                    395 
                           000007   396  I2C_CR1_NOSTRETCH = (7)
                           000006   397  I2C_CR1_ENGC = (6)
                           000000   398  I2C_CR1_PE = (0)
                                    399 
                           000007   400  I2C_CR2_SWRST = (7)
                           000003   401  I2C_CR2_POS = (3)
                           000002   402  I2C_CR2_ACK = (2)
                           000001   403  I2C_CR2_STOP = (1)
                           000000   404  I2C_CR2_START = (0)
                                    405 
                           000000   406  I2C_OARL_ADD0 = (0)
                                    407 
                           000009   408  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   409  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    410 
                           000007   411  I2C_OARH_ADDMODE = (7)
                           000006   412  I2C_OARH_ADDCONF = (6)
                           000002   413  I2C_OARH_ADD9 = (2)
                           000001   414  I2C_OARH_ADD8 = (1)
                                    415 
                           000007   416  I2C_SR1_TXE = (7)
                           000006   417  I2C_SR1_RXNE = (6)
                           000004   418  I2C_SR1_STOPF = (4)
                           000003   419  I2C_SR1_ADD10 = (3)
                           000002   420  I2C_SR1_BTF = (2)
                           000001   421  I2C_SR1_ADDR = (1)
                           000000   422  I2C_SR1_SB = (0)
                                    423 
                           000005   424  I2C_SR2_WUFH = (5)
                           000003   425  I2C_SR2_OVR = (3)
                           000002   426  I2C_SR2_AF = (2)
                           000001   427  I2C_SR2_ARLO = (1)
                           000000   428  I2C_SR2_BERR = (0)
                                    429 
                           000007   430  I2C_SR3_DUALF = (7)
                           000004   431  I2C_SR3_GENCALL = (4)
                           000002   432  I2C_SR3_TRA = (2)
                           000001   433  I2C_SR3_BUSY = (1)
                           000000   434  I2C_SR3_MSL = (0)
                                    435 
                           000002   436  I2C_ITR_ITBUFEN = (2)
                           000001   437  I2C_ITR_ITEVTEN = (1)
                           000000   438  I2C_ITR_ITERREN = (0)
                                    439 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    440 ; Precalculated values, all in KHz
                           000080   441  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   442  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    443 ;
                                    444 ; Fast I2C mode max rise time = 300ns
                                    445 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    446 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    447 
                           000005   448  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    449 
                           0000C0   450  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   451  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   452  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    453 
                           000080   454  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   455  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   456  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    457 
                           000000   458  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   459  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    460 ;
                                    461 ; Standard I2C mode max rise time = 1000ns
                                    462 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    463 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    464 
                           000011   465  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    466 
                           000000   467  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   468  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   469  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    470 
                           000001   471  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   472  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   473  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    474 
                           000001   475  I2C_READ = 1
                           000000   476  I2C_WRITE = 0
                                    477 
                                    478 ; baudrate constant for brr_value table access
                           000000   479 B2400=0
                           000001   480 B4800=1
                           000002   481 B9600=2
                           000003   482 B19200=3
                           000004   483 B38400=4
                           000005   484 B57600=5
                           000006   485 B115200=6
                           000007   486 B230400=7
                           000008   487 B460800=8
                           000009   488 B921600=9
                                    489 
                                    490 ; UART1 
                           005230   491  UART1_SR    = (0x5230)
                           005231   492  UART1_DR    = (0x5231)
                           005232   493  UART1_BRR1  = (0x5232)
                           005233   494  UART1_BRR2  = (0x5233)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005234   495  UART1_CR1   = (0x5234)
                           005235   496  UART1_CR2   = (0x5235)
                           005236   497  UART1_CR3   = (0x5236)
                           005237   498  UART1_CR4   = (0x5237)
                           005238   499  UART1_CR5   = (0x5238)
                           005239   500  UART1_GTR   = (0x5239)
                           00523A   501  UART1_PSCR  = (0x523A)
                                    502 
                                    503 ; UART3
                           005240   504  UART3_SR    = (0x5240)
                           005241   505  UART3_DR    = (0x5241)
                           005242   506  UART3_BRR1  = (0x5242)
                           005243   507  UART3_BRR2  = (0x5243)
                           005244   508  UART3_CR1   = (0x5244)
                           005245   509  UART3_CR2   = (0x5245)
                           005246   510  UART3_CR3   = (0x5246)
                           005247   511  UART3_CR4   = (0x5247)
                           004249   512  UART3_CR6   = (0x4249)
                                    513 
                                    514 ; UART Status Register bits
                           000007   515  UART_SR_TXE = (7)
                           000006   516  UART_SR_TC = (6)
                           000005   517  UART_SR_RXNE = (5)
                           000004   518  UART_SR_IDLE = (4)
                           000003   519  UART_SR_OR = (3)
                           000002   520  UART_SR_NF = (2)
                           000001   521  UART_SR_FE = (1)
                           000000   522  UART_SR_PE = (0)
                                    523 
                                    524 ; Uart Control Register bits
                           000007   525  UART_CR1_R8 = (7)
                           000006   526  UART_CR1_T8 = (6)
                           000005   527  UART_CR1_UARTD = (5)
                           000004   528  UART_CR1_M = (4)
                           000003   529  UART_CR1_WAKE = (3)
                           000002   530  UART_CR1_PCEN = (2)
                           000001   531  UART_CR1_PS = (1)
                           000000   532  UART_CR1_PIEN = (0)
                                    533 
                           000007   534  UART_CR2_TIEN = (7)
                           000006   535  UART_CR2_TCIEN = (6)
                           000005   536  UART_CR2_RIEN = (5)
                           000004   537  UART_CR2_ILIEN = (4)
                           000003   538  UART_CR2_TEN = (3)
                           000002   539  UART_CR2_REN = (2)
                           000001   540  UART_CR2_RWU = (1)
                           000000   541  UART_CR2_SBK = (0)
                                    542 
                           000006   543  UART_CR3_LINEN = (6)
                           000005   544  UART_CR3_STOP1 = (5)
                           000004   545  UART_CR3_STOP0 = (4)
                           000003   546  UART_CR3_CLKEN = (3)
                           000002   547  UART_CR3_CPOL = (2)
                           000001   548  UART_CR3_CPHA = (1)
                           000000   549  UART_CR3_LBCL = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    550 
                           000006   551  UART_CR4_LBDIEN = (6)
                           000005   552  UART_CR4_LBDL = (5)
                           000004   553  UART_CR4_LBDF = (4)
                           000003   554  UART_CR4_ADD3 = (3)
                           000002   555  UART_CR4_ADD2 = (2)
                           000001   556  UART_CR4_ADD1 = (1)
                           000000   557  UART_CR4_ADD0 = (0)
                                    558 
                           000005   559  UART_CR5_SCEN = (5)
                           000004   560  UART_CR5_NACK = (4)
                           000003   561  UART_CR5_HDSEL = (3)
                           000002   562  UART_CR5_IRLP = (2)
                           000001   563  UART_CR5_IREN = (1)
                                    564 ; LIN mode config register
                           000007   565  UART_CR6_LDUM = (7)
                           000005   566  UART_CR6_LSLV = (5)
                           000004   567  UART_CR6_LASE = (4)
                           000002   568  UART_CR6_LHDIEN = (2) 
                           000001   569  UART_CR6_LHDF = (1)
                           000000   570  UART_CR6_LSF = (0)
                                    571 
                                    572 ; TIMERS
                                    573 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   574  TIM1_CR1  = (0x5250)
                           005251   575  TIM1_CR2  = (0x5251)
                           005252   576  TIM1_SMCR  = (0x5252)
                           005253   577  TIM1_ETR  = (0x5253)
                           005254   578  TIM1_IER  = (0x5254)
                           005255   579  TIM1_SR1  = (0x5255)
                           005256   580  TIM1_SR2  = (0x5256)
                           005257   581  TIM1_EGR  = (0x5257)
                           005258   582  TIM1_CCMR1  = (0x5258)
                           005259   583  TIM1_CCMR2  = (0x5259)
                           00525A   584  TIM1_CCMR3  = (0x525A)
                           00525B   585  TIM1_CCMR4  = (0x525B)
                           00525C   586  TIM1_CCER1  = (0x525C)
                           00525D   587  TIM1_CCER2  = (0x525D)
                           00525E   588  TIM1_CNTRH  = (0x525E)
                           00525F   589  TIM1_CNTRL  = (0x525F)
                           005260   590  TIM1_PSCRH  = (0x5260)
                           005261   591  TIM1_PSCRL  = (0x5261)
                           005262   592  TIM1_ARRH  = (0x5262)
                           005263   593  TIM1_ARRL  = (0x5263)
                           005264   594  TIM1_RCR  = (0x5264)
                           005265   595  TIM1_CCR1H  = (0x5265)
                           005266   596  TIM1_CCR1L  = (0x5266)
                           005267   597  TIM1_CCR2H  = (0x5267)
                           005268   598  TIM1_CCR2L  = (0x5268)
                           005269   599  TIM1_CCR3H  = (0x5269)
                           00526A   600  TIM1_CCR3L  = (0x526A)
                           00526B   601  TIM1_CCR4H  = (0x526B)
                           00526C   602  TIM1_CCR4L  = (0x526C)
                           00526D   603  TIM1_BKR  = (0x526D)
                           00526E   604  TIM1_DTR  = (0x526E)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           00526F   605  TIM1_OISR  = (0x526F)
                                    606 
                                    607 ; Timer Control Register bits
                           000007   608  TIM_CR1_ARPE = (7)
                           000006   609  TIM_CR1_CMSH = (6)
                           000005   610  TIM_CR1_CMSL = (5)
                           000004   611  TIM_CR1_DIR = (4)
                           000003   612  TIM_CR1_OPM = (3)
                           000002   613  TIM_CR1_URS = (2)
                           000001   614  TIM_CR1_UDIS = (1)
                           000000   615  TIM_CR1_CEN = (0)
                                    616 
                           000006   617  TIM1_CR2_MMS2 = (6)
                           000005   618  TIM1_CR2_MMS1 = (5)
                           000004   619  TIM1_CR2_MMS0 = (4)
                           000002   620  TIM1_CR2_COMS = (2)
                           000000   621  TIM1_CR2_CCPC = (0)
                                    622 
                                    623 ; Timer Slave Mode Control bits
                           000007   624  TIM1_SMCR_MSM = (7)
                           000006   625  TIM1_SMCR_TS2 = (6)
                           000005   626  TIM1_SMCR_TS1 = (5)
                           000004   627  TIM1_SMCR_TS0 = (4)
                           000002   628  TIM1_SMCR_SMS2 = (2)
                           000001   629  TIM1_SMCR_SMS1 = (1)
                           000000   630  TIM1_SMCR_SMS0 = (0)
                                    631 
                                    632 ; Timer External Trigger Enable bits
                           000007   633  TIM1_ETR_ETP = (7)
                           000006   634  TIM1_ETR_ECE = (6)
                           000005   635  TIM1_ETR_ETPS1 = (5)
                           000004   636  TIM1_ETR_ETPS0 = (4)
                           000003   637  TIM1_ETR_ETF3 = (3)
                           000002   638  TIM1_ETR_ETF2 = (2)
                           000001   639  TIM1_ETR_ETF1 = (1)
                           000000   640  TIM1_ETR_ETF0 = (0)
                                    641 
                                    642 ; Timer Interrupt Enable bits
                           000007   643  TIM1_IER_BIE = (7)
                           000006   644  TIM1_IER_TIE = (6)
                           000005   645  TIM1_IER_COMIE = (5)
                           000004   646  TIM1_IER_CC4IE = (4)
                           000003   647  TIM1_IER_CC3IE = (3)
                           000002   648  TIM1_IER_CC2IE = (2)
                           000001   649  TIM1_IER_CC1IE = (1)
                           000000   650  TIM1_IER_UIE = (0)
                                    651 
                                    652 ; Timer Status Register bits
                           000007   653  TIM1_SR1_BIF = (7)
                           000006   654  TIM1_SR1_TIF = (6)
                           000005   655  TIM1_SR1_COMIF = (5)
                           000004   656  TIM1_SR1_CC4IF = (4)
                           000003   657  TIM1_SR1_CC3IF = (3)
                           000002   658  TIM1_SR1_CC2IF = (2)
                           000001   659  TIM1_SR1_CC1IF = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   660  TIM1_SR1_UIF = (0)
                                    661 
                           000004   662  TIM1_SR2_CC4OF = (4)
                           000003   663  TIM1_SR2_CC3OF = (3)
                           000002   664  TIM1_SR2_CC2OF = (2)
                           000001   665  TIM1_SR2_CC1OF = (1)
                                    666 
                                    667 ; Timer Event Generation Register bits
                           000007   668  TIM1_EGR_BG = (7)
                           000006   669  TIM1_EGR_TG = (6)
                           000005   670  TIM1_EGR_COMG = (5)
                           000004   671  TIM1_EGR_CC4G = (4)
                           000003   672  TIM1_EGR_CC3G = (3)
                           000002   673  TIM1_EGR_CC2G = (2)
                           000001   674  TIM1_EGR_CC1G = (1)
                           000000   675  TIM1_EGR_UG = (0)
                                    676 
                                    677 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   678  TIM1_CCMR1_OC1CE = (7)
                           000006   679  TIM1_CCMR1_OC1M2 = (6)
                           000005   680  TIM1_CCMR1_OC1M1 = (5)
                           000004   681  TIM1_CCMR1_OC1M0 = (4)
                           000003   682  TIM1_CCMR1_OC1PE = (3)
                           000002   683  TIM1_CCMR1_OC1FE = (2)
                           000001   684  TIM1_CCMR1_CC1S1 = (1)
                           000000   685  TIM1_CCMR1_CC1S0 = (0)
                                    686 
                                    687 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   688  TIM1_CCMR1_IC1F3 = (7)
                           000006   689  TIM1_CCMR1_IC1F2 = (6)
                           000005   690  TIM1_CCMR1_IC1F1 = (5)
                           000004   691  TIM1_CCMR1_IC1F0 = (4)
                           000003   692  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   693  TIM1_CCMR1_IC1PSC0 = (2)
                                    694 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   695  TIM1_CCMR1_CC1S0 = (0)
                                    696 
                                    697 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   698  TIM1_CCMR2_OC2CE = (7)
                           000006   699  TIM1_CCMR2_OC2M2 = (6)
                           000005   700  TIM1_CCMR2_OC2M1 = (5)
                           000004   701  TIM1_CCMR2_OC2M0 = (4)
                           000003   702  TIM1_CCMR2_OC2PE = (3)
                           000002   703  TIM1_CCMR2_OC2FE = (2)
                           000001   704  TIM1_CCMR2_CC2S1 = (1)
                           000000   705  TIM1_CCMR2_CC2S0 = (0)
                                    706 
                                    707 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   708  TIM1_CCMR2_IC2F3 = (7)
                           000006   709  TIM1_CCMR2_IC2F2 = (6)
                           000005   710  TIM1_CCMR2_IC2F1 = (5)
                           000004   711  TIM1_CCMR2_IC2F0 = (4)
                           000003   712  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   713  TIM1_CCMR2_IC2PSC0 = (2)
                                    714 ;  TIM1_CCMR2_CC2S1 = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   715  TIM1_CCMR2_CC2S0 = (0)
                                    716 
                                    717 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   718  TIM1_CCMR3_OC3CE = (7)
                           000006   719  TIM1_CCMR3_OC3M2 = (6)
                           000005   720  TIM1_CCMR3_OC3M1 = (5)
                           000004   721  TIM1_CCMR3_OC3M0 = (4)
                           000003   722  TIM1_CCMR3_OC3PE = (3)
                           000002   723  TIM1_CCMR3_OC3FE = (2)
                           000001   724  TIM1_CCMR3_CC3S1 = (1)
                           000000   725  TIM1_CCMR3_CC3S0 = (0)
                                    726 
                                    727 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   728  TIM1_CCMR3_IC3F3 = (7)
                           000006   729  TIM1_CCMR3_IC3F2 = (6)
                           000005   730  TIM1_CCMR3_IC3F1 = (5)
                           000004   731  TIM1_CCMR3_IC3F0 = (4)
                           000003   732  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   733  TIM1_CCMR3_IC3PSC0 = (2)
                                    734 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   735  TIM1_CCMR3_CC3S0 = (0)
                                    736 
                                    737 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   738  TIM1_CCMR4_OC4CE = (7)
                           000006   739  TIM1_CCMR4_OC4M2 = (6)
                           000005   740  TIM1_CCMR4_OC4M1 = (5)
                           000004   741  TIM1_CCMR4_OC4M0 = (4)
                           000003   742  TIM1_CCMR4_OC4PE = (3)
                           000002   743  TIM1_CCMR4_OC4FE = (2)
                           000001   744  TIM1_CCMR4_CC4S1 = (1)
                           000000   745  TIM1_CCMR4_CC4S0 = (0)
                                    746 
                                    747 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   748  TIM1_CCMR4_IC4F3 = (7)
                           000006   749  TIM1_CCMR4_IC4F2 = (6)
                           000005   750  TIM1_CCMR4_IC4F1 = (5)
                           000004   751  TIM1_CCMR4_IC4F0 = (4)
                           000003   752  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   753  TIM1_CCMR4_IC4PSC0 = (2)
                                    754 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   755  TIM1_CCMR4_CC4S0 = (0)
                                    756 
                                    757 ; Timer 2 - 16-bit timer
                           005300   758  TIM2_CR1  = (0x5300)
                           005301   759  TIM2_IER  = (0x5301)
                           005302   760  TIM2_SR1  = (0x5302)
                           005303   761  TIM2_SR2  = (0x5303)
                           005304   762  TIM2_EGR  = (0x5304)
                           005305   763  TIM2_CCMR1  = (0x5305)
                           005306   764  TIM2_CCMR2  = (0x5306)
                           005307   765  TIM2_CCMR3  = (0x5307)
                           005308   766  TIM2_CCER1  = (0x5308)
                           005309   767  TIM2_CCER2  = (0x5309)
                           00530A   768  TIM2_CNTRH  = (0x530A)
                           00530B   769  TIM2_CNTRL  = (0x530B)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           00530C   770  TIM2_PSCR  = (0x530C)
                           00530D   771  TIM2_ARRH  = (0x530D)
                           00530E   772  TIM2_ARRL  = (0x530E)
                           00530F   773  TIM2_CCR1H  = (0x530F)
                           005310   774  TIM2_CCR1L  = (0x5310)
                           005311   775  TIM2_CCR2H  = (0x5311)
                           005312   776  TIM2_CCR2L  = (0x5312)
                           005313   777  TIM2_CCR3H  = (0x5313)
                           005314   778  TIM2_CCR3L  = (0x5314)
                                    779 
                                    780 ; Timer 3
                           005320   781  TIM3_CR1  = (0x5320)
                           005321   782  TIM3_IER  = (0x5321)
                           005322   783  TIM3_SR1  = (0x5322)
                           005323   784  TIM3_SR2  = (0x5323)
                           005324   785  TIM3_EGR  = (0x5324)
                           005325   786  TIM3_CCMR1  = (0x5325)
                           005326   787  TIM3_CCMR2  = (0x5326)
                           005327   788  TIM3_CCER1  = (0x5327)
                           005328   789  TIM3_CNTRH  = (0x5328)
                           005329   790  TIM3_CNTRL  = (0x5329)
                           00532A   791  TIM3_PSCR  = (0x532A)
                           00532B   792  TIM3_ARRH  = (0x532B)
                           00532C   793  TIM3_ARRL  = (0x532C)
                           00532D   794  TIM3_CCR1H  = (0x532D)
                           00532E   795  TIM3_CCR1L  = (0x532E)
                           00532F   796  TIM3_CCR2H  = (0x532F)
                           005330   797  TIM3_CCR2L  = (0x5330)
                                    798 
                                    799 ; TIM3_CR1  fields
                           000000   800  TIM3_CR1_CEN = (0)
                           000001   801  TIM3_CR1_UDIS = (1)
                           000002   802  TIM3_CR1_URS = (2)
                           000003   803  TIM3_CR1_OPM = (3)
                           000007   804  TIM3_CR1_ARPE = (7)
                                    805 ; TIM3_CCR2  fields
                           000000   806  TIM3_CCMR2_CC2S_POS = (0)
                           000003   807  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   808  TIM3_CCMR2_OC2M_POS = (4)  
                                    809 ; TIM3_CCER1 fields
                           000000   810  TIM3_CCER1_CC1E = (0)
                           000001   811  TIM3_CCER1_CC1P = (1)
                           000004   812  TIM3_CCER1_CC2E = (4)
                           000005   813  TIM3_CCER1_CC2P = (5)
                                    814 ; TIM3_CCER2 fields
                           000000   815  TIM3_CCER2_CC3E = (0)
                           000001   816  TIM3_CCER2_CC3P = (1)
                                    817 
                                    818 ; Timer 4
                           005340   819  TIM4_CR1  = (0x5340)
                           005341   820  TIM4_IER  = (0x5341)
                           005342   821  TIM4_SR  = (0x5342)
                           005343   822  TIM4_EGR  = (0x5343)
                           005344   823  TIM4_CNTR  = (0x5344)
                           005345   824  TIM4_PSCR  = (0x5345)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           005346   825  TIM4_ARR  = (0x5346)
                                    826 
                                    827 ; Timer 4 bitmasks
                                    828 
                           000007   829  TIM4_CR1_ARPE = (7)
                           000003   830  TIM4_CR1_OPM = (3)
                           000002   831  TIM4_CR1_URS = (2)
                           000001   832  TIM4_CR1_UDIS = (1)
                           000000   833  TIM4_CR1_CEN = (0)
                                    834 
                           000000   835  TIM4_IER_UIE = (0)
                                    836 
                           000000   837  TIM4_SR_UIF = (0)
                                    838 
                           000000   839  TIM4_EGR_UG = (0)
                                    840 
                           000002   841  TIM4_PSCR_PSC2 = (2)
                           000001   842  TIM4_PSCR_PSC1 = (1)
                           000000   843  TIM4_PSCR_PSC0 = (0)
                                    844 
                           000000   845  TIM4_PSCR_1 = 0
                           000001   846  TIM4_PSCR_2 = 1
                           000002   847  TIM4_PSCR_4 = 2
                           000003   848  TIM4_PSCR_8 = 3
                           000004   849  TIM4_PSCR_16 = 4
                           000005   850  TIM4_PSCR_32 = 5
                           000006   851  TIM4_PSCR_64 = 6
                           000007   852  TIM4_PSCR_128 = 7
                                    853 
                                    854 ; ADC2
                           005400   855  ADC_CSR  = (0x5400)
                           005401   856  ADC_CR1  = (0x5401)
                           005402   857  ADC_CR2  = (0x5402)
                           005403   858  ADC_CR3  = (0x5403)
                           005404   859  ADC_DRH  = (0x5404)
                           005405   860  ADC_DRL  = (0x5405)
                           005406   861  ADC_TDRH  = (0x5406)
                           005407   862  ADC_TDRL  = (0x5407)
                                    863  
                                    864 ; ADC bitmasks
                                    865 
                           000007   866  ADC_CSR_EOC = (7)
                           000006   867  ADC_CSR_AWD = (6)
                           000005   868  ADC_CSR_EOCIE = (5)
                           000004   869  ADC_CSR_AWDIE = (4)
                           000003   870  ADC_CSR_CH3 = (3)
                           000002   871  ADC_CSR_CH2 = (2)
                           000001   872  ADC_CSR_CH1 = (1)
                           000000   873  ADC_CSR_CH0 = (0)
                                    874 
                           000006   875  ADC_CR1_SPSEL2 = (6)
                           000005   876  ADC_CR1_SPSEL1 = (5)
                           000004   877  ADC_CR1_SPSEL0 = (4)
                           000001   878  ADC_CR1_CONT = (1)
                           000000   879  ADC_CR1_ADON = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    880 
                           000006   881  ADC_CR2_EXTTRIG = (6)
                           000005   882  ADC_CR2_EXTSEL1 = (5)
                           000004   883  ADC_CR2_EXTSEL0 = (4)
                           000003   884  ADC_CR2_ALIGN = (3)
                           000001   885  ADC_CR2_SCAN = (1)
                                    886 
                           000007   887  ADC_CR3_DBUF = (7)
                           000006   888  ADC_CR3_DRH = (6)
                                    889 
                                    890 ; beCAN
                           005420   891  CAN_MCR = (0x5420)
                           005421   892  CAN_MSR = (0x5421)
                           005422   893  CAN_TSR = (0x5422)
                           005423   894  CAN_TPR = (0x5423)
                           005424   895  CAN_RFR = (0x5424)
                           005425   896  CAN_IER = (0x5425)
                           005426   897  CAN_DGR = (0x5426)
                           005427   898  CAN_FPSR = (0x5427)
                           005428   899  CAN_P0 = (0x5428)
                           005429   900  CAN_P1 = (0x5429)
                           00542A   901  CAN_P2 = (0x542A)
                           00542B   902  CAN_P3 = (0x542B)
                           00542C   903  CAN_P4 = (0x542C)
                           00542D   904  CAN_P5 = (0x542D)
                           00542E   905  CAN_P6 = (0x542E)
                           00542F   906  CAN_P7 = (0x542F)
                           005430   907  CAN_P8 = (0x5430)
                           005431   908  CAN_P9 = (0x5431)
                           005432   909  CAN_PA = (0x5432)
                           005433   910  CAN_PB = (0x5433)
                           005434   911  CAN_PC = (0x5434)
                           005435   912  CAN_PD = (0x5435)
                           005436   913  CAN_PE = (0x5436)
                           005437   914  CAN_PF = (0x5437)
                                    915 
                                    916 
                                    917 ; CPU
                           007F00   918  CPU_A  = (0x7F00)
                           007F01   919  CPU_PCE  = (0x7F01)
                           007F02   920  CPU_PCH  = (0x7F02)
                           007F03   921  CPU_PCL  = (0x7F03)
                           007F04   922  CPU_XH  = (0x7F04)
                           007F05   923  CPU_XL  = (0x7F05)
                           007F06   924  CPU_YH  = (0x7F06)
                           007F07   925  CPU_YL  = (0x7F07)
                           007F08   926  CPU_SPH  = (0x7F08)
                           007F09   927  CPU_SPL   = (0x7F09)
                           007F0A   928  CPU_CCR   = (0x7F0A)
                                    929 
                                    930 ; global configuration register
                           007F60   931  CFG_GCR   = (0x7F60)
                           000001   932  CFG_GCR_AL = 1
                           000000   933  CFG_GCR_SWIM = 0
                                    934 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    935 ; interrupt control registers
                           007F70   936  ITC_SPR1   = (0x7F70)
                           007F71   937  ITC_SPR2   = (0x7F71)
                           007F72   938  ITC_SPR3   = (0x7F72)
                           007F73   939  ITC_SPR4   = (0x7F73)
                           007F74   940  ITC_SPR5   = (0x7F74)
                           007F75   941  ITC_SPR6   = (0x7F75)
                           007F76   942  ITC_SPR7   = (0x7F76)
                           007F77   943  ITC_SPR8   = (0x7F77)
                                    944 
                                    945 ; SWIM, control and status register
                           007F80   946  SWIM_CSR   = (0x7F80)
                                    947 ; debug registers
                           007F90   948  DM_BK1RE   = (0x7F90)
                           007F91   949  DM_BK1RH   = (0x7F91)
                           007F92   950  DM_BK1RL   = (0x7F92)
                           007F93   951  DM_BK2RE   = (0x7F93)
                           007F94   952  DM_BK2RH   = (0x7F94)
                           007F95   953  DM_BK2RL   = (0x7F95)
                           007F96   954  DM_CR1   = (0x7F96)
                           007F97   955  DM_CR2   = (0x7F97)
                           007F98   956  DM_CSR1   = (0x7F98)
                           007F99   957  DM_CSR2   = (0x7F99)
                           007F9A   958  DM_ENFCTR   = (0x7F9A)
                                    959 
                                    960 ; Interrupt Numbers
                           000000   961  INT_TLI = 0
                           000001   962  INT_AWU = 1
                           000002   963  INT_CLK = 2
                           000003   964  INT_EXTI0 = 3
                           000004   965  INT_EXTI1 = 4
                           000005   966  INT_EXTI2 = 5
                           000006   967  INT_EXTI3 = 6
                           000007   968  INT_EXTI4 = 7
                           000008   969  INT_CAN_RX = 8
                           000009   970  INT_CAN_TX = 9
                           00000A   971  INT_SPI = 10
                           00000B   972  INT_TIM1_OVF = 11
                           00000C   973  INT_TIM1_CCM = 12
                           00000D   974  INT_TIM2_OVF = 13
                           00000E   975  INT_TIM2_CCM = 14
                           00000F   976  INT_TIM3_OVF = 15
                           000010   977  INT_TIM3_CCM = 16
                           000011   978  INT_UART1_TX_COMPLETED = 17
                           000012   979  INT_AUART1_RX_FULL = 18
                           000013   980  INT_I2C = 19
                           000014   981  INT_UART3_TX_COMPLETED = 20
                           000015   982  INT_UART3_RX_FULL = 21
                           000016   983  INT_ADC2 = 22
                           000017   984  INT_TIM4_OVF = 23
                           000018   985  INT_FLASH = 24
                                    986 
                                    987 ; Interrupt Vectors
                           008000   988  INT_VECTOR_RESET = 0x8000
                           008004   989  INT_VECTOR_TRAP = 0x8004
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           008008   990  INT_VECTOR_TLI = 0x8008
                           00800C   991  INT_VECTOR_AWU = 0x800C
                           008010   992  INT_VECTOR_CLK = 0x8010
                           008014   993  INT_VECTOR_EXTI0 = 0x8014
                           008018   994  INT_VECTOR_EXTI1 = 0x8018
                           00801C   995  INT_VECTOR_EXTI2 = 0x801C
                           008020   996  INT_VECTOR_EXTI3 = 0x8020
                           008024   997  INT_VECTOR_EXTI4 = 0x8024
                           008028   998  INT_VECTOR_CAN_RX = 0x8028
                           00802C   999  INT_VECTOR_CAN_TX = 0x802c
                           008030  1000  INT_VECTOR_SPI = 0x8030
                           008034  1001  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1002  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1003  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1004  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1005  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1006  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1007  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1008  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1009  INT_VECTOR_I2C = 0x8054
                           008058  1010  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1011  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1012  INT_VECTOR_ADC2 = 0x8060
                           008064  1013  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1014  INT_VECTOR_FLASH = 0x8068
                                   1015 
                                   1016  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                      7 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                      9 
                                     10 ;-------------------------------------------------------
                                     11 ; History:
                                     12 ;	2019-10-28  starting work on version 0.2 to remove
                                     13 ; 				version 0.1 adressing range limitation.
                                     14 ;
                                     15 ;-------------------------------------------------------
                                     16 
                                     17 ;-------------------------------------------------------
                                     18 ;     vt100 CTRL_x  values
                                     19 ;-------------------------------------------------------
                           000001    20 		CTRL_A = 1
                           000002    21 		CTRL_B = 2
                           000003    22 		CTRL_C = 3
                           000004    23 		CTRL_D = 4
                           000005    24 		CTRL_E = 5
                           000006    25 		CTRL_F = 6
                           000007    26 		CTRL_G = 7
                           000008    27 		CTRL_H = 8
                           000009    28 		CTRL_I = 9
                           00000A    29 		CTRL_J = 10
                           00000B    30 		CTRL_K = 11
                           00000C    31 		CTRL_L = 12
                           00000D    32 		CTRL_M = 13
                           00000E    33 		CTRL_N = 14
                           00000F    34 		CTRL_O = 15
                           000010    35 		CTRL_P = 16
                           000011    36 		CTRL_Q = 17
                           000012    37 		CTRL_R = 18
                           000013    38 		CTRL_S = 19
                           000014    39 		CTRL_T = 20
                           000015    40 		CTRL_U = 21
                           000016    41 		CTRL_V = 22
                           000017    42 		CTRL_W = 23
                           000018    43 		CTRL_X = 24
                           000019    44 		CTRL_Y = 25
                           00001A    45 		CTRL_Z = 26
                           00001B    46 		ESC = 27
                           00000A    47 		NL = CTRL_J
                           00000D    48 		CR = CTRL_M
                           000008    49 		BSP = CTRL_H
                           000020    50 		SPACE = 32
                                     51 		
                                     52 ;--------------------------------------------------------
                                     53 ;      MACROS
                                     54 ;--------------------------------------------------------
                                     55 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     56 		bset PC_CR1,#LED2_BIT
                                     57 		bset PC_CR2,#LED2_BIT
                                     58 		bset PC_DDR,#LED2_BIT
                                     59 		.endm
                                     60 		
                                     61 		.macro _ledon ; turn on green LED 
                                     62 		bset PC_ODR,#LED2_BIT
                                     63 		.endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     64 		
                                     65 		.macro _ledoff ; turn off green LED
                                     66 		bres PC_ODR,#LED2_BIT
                                     67 		.endm
                                     68 		
                                     69 		.macro _ledtoggle ; invert green LED state
                                     70 		ld a,#LED2_MASK
                                     71 		xor a,PC_ODR
                                     72 		ld PC_ODR,a
                                     73 		.endm
                                     74 		
                                     75 		
                                     76 		.macro  _int_enable ; enable interrupts
                                     77 		 rim
                                     78 		.endm
                                     79 		
                                     80 		.macro _int_disable ; disable interrupts
                                     81 		sim
                                     82 		.endm
                                     83 
                                     84 ;--------------------------------------------------------
                                     85 ;some constants used by this program.
                                     86 ;--------------------------------------------------------
                           000100    87 		STACK_SIZE = 256 ; call stack size
                           001700    88 		STACK_BASE = RAM_SIZE-STACK_SIZE ; lowest address of stack
                           0017FF    89 		STACK_TOP = RAM_SIZE-1 ; stack top at end of ram
                           000050    90 		TIB_SIZE = 80 ; transaction input buffer size
                           000050    91 		PAD_SIZE = 80 ; workding pad size
                                     92 		; vesrion major.minor
                           000000    93 		VERS_MAJOR = 0 ; major version number
                           000002    94 		VERS_MINOR = 2 ; minor version number
                                     95 
                                     96 ;--------------------------------------------------------
                                     97 ;   application variables 
                                     98 ;---------------------------------------------------------		
                                     99         .area DATA
                                    100 ;ticks  .blkw 1 ; system ticks at every millisecond        
                                    101 ;cntdwn:	.blkw 1 ; millisecond count down timer
      000000                        102 rx_char: .blkb 1 ; last uart received char
      000001                        103 in.w:     .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000002                        104 in:		.blkb 1; parser position in tib
      000003                        105 count:  .blkb 1; length of string in tib
      000004                        106 idx_x:  .blkw 1; index for table pointed by x
      000006                        107 idx_y:  .blkw 1; index for table pointed by y
      000008                        108 tib:	.blkb TIB_SIZE ; transaction input buffer
      000058                        109 pad:	.blkb PAD_SIZE ; working pad
      0000A8                        110 acc24:  .blkb 3; 24 bits accumulator
      0000AB                        111 farptr: .blkb 3; 24 bits pointer
      0000AE                        112 ram_free_base: .blkw 1
      0000B0                        113 flash_free_base: .blkw 1
                                    114 
                                    115 		.area USER_RAM_BASE
                                    116 ;--------------------------------------------------------
                                    117 ;   the following RAM is not used by MONA
                                    118 ;--------------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000000                        119  _user_ram:		
                                    120 
                                    121 ;--------------------------------------------------------
                                    122 ;  stack segment
                                    123 ;--------------------------------------------------------
                                    124        .area SSEG  (ABS)
      001700                        125 	   .org RAM_SIZE-STACK_SIZE
      001700                        126  __stack_bottom:
      001700                        127 	   .ds  256
                                    128 
                                    129 ;--------------------------------------------------------
                                    130 ; interrupt vector 
                                    131 ;--------------------------------------------------------
                                    132 	.area HOME
      000000                        133 __interrupt_vect:
      000000 82 00 00 9E            134 	int init0 ;RESET vector
      000004 82 00 01 08            135 	int NonHandledInterrupt ;TRAP  software interrupt
      000008 82 00 01 08            136 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 01 08            137 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 01 08            138 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 01 08            139 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 01 08            140 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 01 08            141 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 01 08            142 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 01 08            143 	int NonHandledInterrupt ;int7 EXTI4 port E external interrupts
      000028 82 00 01 08            144 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 01 08            145 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 01 08            146 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 01 08            147 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 01 08            148 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 01 08            149 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 01 08            150 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 01 08            151 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 01 08            152 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 01 08            153 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 01 08            154 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 01 08            155 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 01 08            156 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 01 0D            157 	int uart_rx_isr         ;int21 UART3 RX full
      000060 82 00 01 08            158 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 01 08            159 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 01 08            160 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 01 08            161 	int NonHandledInterrupt ;int25  not used
      000070 82 00 01 08            162 	int NonHandledInterrupt ;int26  not used
      000074 82 00 01 08            163 	int NonHandledInterrupt ;int27  not used
      000078 82 00 01 08            164 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 01 08            165 	int NonHandledInterrupt ;int29  not used
                                    166 
                                    167 	.area CODE
                                    168 
                                    169 	;initialize clock to use HSE 8 Mhz crystal
      000000                        170 clock_init:	
      000000 72 12 50 C5      [ 1]  171 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000004 A6 B4            [ 1]  172 	ld a,#CLK_SWR_HSE
      000006 C7 50 C4         [ 1]  173 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000009 C1 50 C3         [ 1]  174 1$:	cp a,CLK_CMSR
      00000C 26 FB            [ 1]  175 	jrne 1$
      00000E 81               [ 4]  176 	ret
                                    177 
                                    178 		; initialize TIMER4 ticks counter
                                    179 ;timer4_init:
                                    180 ;	clr ticks
                                    181 ;	clr cntdwn
                                    182 ;	ld a,#TIM4_PSCR_128 
                                    183 ;	ld TIM4_PSCR,a
                                    184 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    185 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    186 ;	ld a,#125
                                    187 ;	ld TIM4_ARR,a ; 1 msec interval
                                    188 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    189 ;	ld TIM4_CR1,a
                                    190 ;	ret
                                    191 
                                    192 ; initialize UART3, 115200 8N1
      00000F                        193 uart3_init:
                                    194 	; configure tx pin
      00000F 72 1A 50 11      [ 1]  195 	bset PD_DDR,#BIT5 ; tx pin
      000013 72 1A 50 12      [ 1]  196 	bset PD_CR1,#BIT5 ; push-pull output
      000017 72 1A 50 13      [ 1]  197 	bset PD_CR2,#BIT5 ; fast output
                                    198 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001B 35 05 52 43      [ 1]  199 	mov UART3_BRR2,#0x05 ; must be loaded first
      00001F 35 04 52 42      [ 1]  200 	mov UART3_BRR1,#0x4
      000023 35 2C 52 45      [ 1]  201 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      000027 81               [ 4]  202 	ret
                                    203 	
                                    204 	; pause in milliseconds
                                    205     ; input:  y delay
                                    206     ; output: none
                                    207 ;pause:
                                    208 ;	 ldw cntdwn,y
                                    209 ;1$: ldw y,cntdwn
                                    210 ;	 jrne 1$
                                    211 ;    ret
                                    212 
                                    213 ;-------------------------
                                    214 ;  zero all free ram
                                    215 ;-------------------------
      000028                        216 clear_all_free_ram:
      000028 AE 00 00         [ 2]  217 	ldw x,#0
      00002B                        218 1$:	
      00002B 7F               [ 1]  219 	clr (x)
      00002C 5C               [ 1]  220 	incw x
      00002D A3 17 FD         [ 2]  221 	cpw x,#STACK_TOP-2
      000030 23 F9            [ 2]  222 	jrule 1$
      000032 81               [ 4]  223 	ret
                                    224 
                                    225 
                                    226 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    227 ;  information printed at reset
                                    228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000033                        229 print_mona_info:
      000033 A6 0C            [ 1]  230 	ld a,#CTRL_L
      000035 CD 01 24         [ 4]  231 	call uart_tx
      000038 90 AE 07 A3      [ 2]  232 	ldw y,#VERSION
      00003C CD 01 2E         [ 4]  233 	call uart_print
      00003F A6 00            [ 1]  234 	ld a, #VERS_MAJOR
      000041 AB 30            [ 1]  235 	add a,#'0
      000043 CD 01 24         [ 4]  236 	call uart_tx
      000046 A6 2E            [ 1]  237 	ld a,#'.'
      000048 CD 01 24         [ 4]  238 	call uart_tx
      00004B A6 02            [ 1]  239 	ld a, #VERS_MINOR
      00004D AB 30            [ 1]  240 	add a,#'0
      00004F CD 01 24         [ 4]  241 	call uart_tx
      000052 90 AE 07 B2      [ 2]  242 	ldw y,#CPU_MODEL
      000056 CD 01 2E         [ 4]  243 	call uart_print
      000059 90 AE 07 EB      [ 2]  244 	ldw y,#RAM_FREE_MSG
      00005D CD 01 2E         [ 4]  245 	call uart_print
      000060 72 5F 00 A8      [ 1]  246 	clr acc24
      000064 55 00 AE 00 A9   [ 1]  247 	mov acc24+1,ram_free_base
      000069 55 00 AF 00 AA   [ 1]  248 	mov acc24+2,ram_free_base+1 
      00006E A6 10            [ 1]  249 	ld a,#16
      000070 CD 03 3A         [ 4]  250 	call itoa
      000073 CD 01 2E         [ 4]  251 	call uart_print
      000076 90 AE 07 F6      [ 2]  252 	ldw y,#RAM_LAST_FREE_MSG
      00007A CD 01 2E         [ 4]  253 	call uart_print
      00007D 90 AE 07 FF      [ 2]  254 	ldw y,#FLASH_FREE_MSG
      000081 CD 01 2E         [ 4]  255 	call uart_print
      000084 A6 10            [ 1]  256 	ld a,#16
      000086 55 00 B0 00 A9   [ 1]  257 	mov acc24+1,flash_free_base
      00008B 55 00 B1 00 AA   [ 1]  258 	mov acc24+2,flash_free_base+1 
      000090 CD 03 3A         [ 4]  259 	call itoa
      000093 CD 01 2E         [ 4]  260 	call uart_print
      000096 90 AE 08 0C      [ 2]  261 	ldw y,#EEPROM_MSG
      00009A CD 01 2E         [ 4]  262 	call uart_print
      00009D 81               [ 4]  263 	ret
                                    264 
      00009E                        265 init0:
                                    266 	; initialize SP
      00009E AE 17 FF         [ 2]  267 	ldw x,#STACK_TOP
      0000A1 94               [ 1]  268 	ldw sp,x
      0000A2 CD 00 00         [ 4]  269 	call clock_init
      0000A5 CD 00 28         [ 4]  270 	call clear_all_free_ram
                                    271 ;	clr ticks
                                    272 ;	clr cntdwn
      0000A8 A6 FF            [ 1]  273 	ld a,#255
      0000AA C7 00 00         [ 1]  274 	ld rx_char,a
                                    275 ;	call timer4_init
      0000AD CD 00 0F         [ 4]  276 	call uart3_init
      0000B0                        277 	_ledenable
      0000B0 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#LED2_BIT
      0000B4 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#LED2_BIT
      0000B8 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#LED2_BIT
      0000BC                        278 	_ledoff
      0000BC 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#LED2_BIT
      0000C0 72 5F 00 01      [ 1]  279 	clr in.w ; must always be 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                    280 	; initialize free_ram_base variable
      0000C4 90 AE 00 00      [ 2]  281 	ldw y,#_user_ram ;#ram_free_base
                                    282 	; align on 16 bytes boundary
      0000C8 72 A9 00 0F      [ 2]  283 	addw y,#0xf
      0000CC 90 9F            [ 1]  284 	ld a,yl
      0000CE A4 F0            [ 1]  285 	and a,#0xf0
      0000D0 90 97            [ 1]  286 	ld yl,a
      0000D2 90 CF 00 AE      [ 2]  287 	ldw ram_free_base,y
                                    288 	; initialize flash_free_base variable
      0000D6 90 AE 0A 04      [ 2]  289 	ldw y,#flash_free
                                    290 	; align on 128 bytes boundary (block size)
      0000DA 72 A9 00 7F      [ 2]  291 	addw y,#0x7f
      0000DE 90 9F            [ 1]  292 	ld a,yl
      0000E0 A4 80            [ 1]  293 	and a,#0x80
      0000E2 90 97            [ 1]  294 	ld yl,a
      0000E4 90 CF 00 B0      [ 2]  295 	ldw flash_free_base,y
                                    296 
                                    297 ;------------------------
                                    298 ; program main function
                                    299 ;------------------------
      0000E8                        300 main:	
                                    301 ; enable interrupts
      0000E8                        302 	_int_enable 
      0000E8 9A               [ 1]    1 		 rim
                                    303 ; information printed at mcu reset.	
      0000E9 CD 00 33         [ 4]  304 	call print_mona_info
                                    305 ; Read Execute Print Loop
                                    306 ; MONA spend is time in this loop
      0000EC                        307 repl: 
                                    308 ; move terminal cursor to next line
      0000EC A6 0A            [ 1]  309 	ld a,#NL 
      0000EE CD 01 24         [ 4]  310 	call uart_tx
                                    311 ; print prompt sign	 
      0000F1 A6 3E            [ 1]  312 	ld a,#'>
      0000F3 CD 01 24         [ 4]  313 	call uart_tx
                                    314 ; read command line	
      0000F6 CD 01 74         [ 4]  315 	call readln 
                                    316 ;if empty line -> ignore it, loop.	
      0000F9 72 5D 00 03      [ 1]  317 	tnz count
      0000FD 27 ED            [ 1]  318 	jreq repl
                                    319 ; initialize parser and call eval function	  
      0000FF 72 5F 00 02      [ 1]  320 	clr in
      000103 CD 05 25         [ 4]  321 	call eval
                                    322 ; start over	
      000106 20 E4            [ 2]  323 	jra repl  ; loop
                                    324 	 
                                    325 ;------------------------------------
                                    326 ;	interrupt NonHandledInterrupt
                                    327 ;   non handled interrupt reset MCU
                                    328 ;------------------------------------
      000108                        329 NonHandledInterrupt:
      000108 A6 80            [ 1]  330 	ld a,#0x80
      00010A C7 50 D1         [ 1]  331 	ld WWDG_CR,a
                                    332 	;iret
                                    333 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    334 ;------------------------------------
                                    335 ; TIMER4 interrupt service routine
                                    336 ;------------------------------------
                                    337 ;timer4_isr:
                                    338 ;	ldw y,ticks
                                    339 ;	incw y
                                    340 ;	ldw ticks,y
                                    341 ;	ldw y,cntdwn
                                    342 ;	jreq 1$
                                    343 ;	decw y
                                    344 ;	ldw cntdwn,y
                                    345 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    346 ;	iret
                                    347 
                                    348 ;------------------------------------
                                    349 ; uart3 receive interrupt service
                                    350 ;------------------------------------
      00010D                        351 uart_rx_isr:
                                    352 ; local variables
                           000002   353   UART_STATUS = 2
                           000001   354   UART_DATA = 1
                                    355 ; read uart registers and save them in local variables  
      00010D C6 52 40         [ 1]  356   ld a, UART3_SR
      000110 88               [ 1]  357   push a  ; local variable UART_STATUS
      000111 C6 52 41         [ 1]  358   ld a,UART3_DR
      000114 88               [ 1]  359   push a ; local variable UART_DATA
                                    360 ; test uart status register
                                    361 ; bit RXNE must 1
                                    362 ; bits OR|FE|NF must be 0	
      000115 7B 02            [ 1]  363   ld a, (UART_STATUS,sp)
                                    364 ; keep only significant bits
      000117 A4 2E            [ 1]  365   and a, #((1<<UART_SR_RXNE)|(1<<UART_SR_OR)|(1<<UART_SR_FE)|(1<<UART_SR_NF))
                                    366 ; A value shoudl be == (1<<UART_SR_RNXE)  
      000119 A1 20            [ 1]  367   cp a, #(1<<UART_SR_RXNE)
      00011B 26 05            [ 1]  368   jrne 1$
                                    369 ; no receive error accept it.  
      00011D 7B 01            [ 1]  370   ld a,(UART_DATA,sp)
      00011F C7 00 00         [ 1]  371   ld rx_char,a
      000122                        372 1$: 
                                    373 ; drop local variables
      000122 85               [ 2]  374   popw X	
      000123 80               [11]  375   iret
                                    376 
                                    377 ;------------------------------------
                                    378 ;  serial port communication routines
                                    379 ;------------------------------------
                                    380 ;------------------------------------
                                    381 ; transmit character in a via UART3
                                    382 ; character to transmit on (3,sp)
                                    383 ;------------------------------------
      000124                        384 uart_tx:
      000124 72 5D 52 40      [ 1]  385 	tnz UART3_SR
      000128 2A FA            [ 1]  386 	jrpl uart_tx
      00012A C7 52 41         [ 1]  387 	ld UART3_DR,a
      00012D 81               [ 4]  388     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                    389 
                                    390 ;------------------------------------
                                    391 ; send string via UART2
                                    392 ; y is pointer to str
                                    393 ;------------------------------------
      00012E                        394 uart_print:
      00012E 90 F6            [ 1]  395 	ld a,(y)
      000130 27 07            [ 1]  396 	jreq 1$
      000132 CD 01 24         [ 4]  397 	call uart_tx
      000135 90 5C            [ 1]  398 	incw y
      000137 20 F5            [ 2]  399 	jra uart_print
      000139 81               [ 4]  400 1$: ret
                                    401 
                                    402 ;------------------------------------
                                    403 ; check if char available
                                    404 ;------------------------------------
      00013A                        405 uart_qchar:
      00013A A6 FF            [ 1]  406 	ld a,#255
      00013C C1 00 00         [ 1]  407 	cp a,rx_char
      00013F 81               [ 4]  408     ret
                                    409 
                                    410 ;------------------------------------
                                    411 ; return char in A to queue
                                    412 ;------------------------------------
      000140                        413 ungetchar: 
      000140                        414 	_int_disable
      000140 9B               [ 1]    1 		sim
      000141 C7 00 00         [ 1]  415 	ld rx_char,a
      000144                        416     _int_enable
      000144 9A               [ 1]    1 		 rim
      000145 81               [ 4]  417     ret
                                    418     
                                    419 ;------------------------------------
                                    420 ; wait for character from uart3
                                    421 ;------------------------------------
      000146                        422 uart_getchar:
      000146 A6 FF            [ 1]  423 	ld a,#255
      000148 C1 00 00         [ 1]  424 	cp a,rx_char
      00014B 27 F9            [ 1]  425 	jreq uart_getchar
      00014D                        426 	_int_disable
      00014D 9B               [ 1]    1 		sim
      00014E C6 00 00         [ 1]  427 	ld a, rx_char
      000151 88               [ 1]  428 	push a
      000152 A6 FF            [ 1]  429 	ld a,#-1
      000154 C7 00 00         [ 1]  430 	ld rx_char,a
      000157                        431 	_int_enable
      000157 9A               [ 1]    1 		 rim
      000158 84               [ 1]  432 	pop a
      000159 81               [ 4]  433 	ret
                                    434 
                                    435 ;------------------------------------
                                    436 ; delete n character from input line
                                    437 ;------------------------------------
      00015A                        438 uart_delete:
      00015A 88               [ 1]  439 	push a ; n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00015B                        440 del_loop:
      00015B 0D 01            [ 1]  441 	tnz (1,sp)
      00015D 27 13            [ 1]  442 	jreq 1$
      00015F A6 08            [ 1]  443 	ld a,#BSP
      000161 CD 01 24         [ 4]  444 	call uart_tx
      000164 A6 20            [ 1]  445     ld a,#SPACE
      000166 CD 01 24         [ 4]  446     call uart_tx
      000169 A6 08            [ 1]  447     ld a,#BSP
      00016B CD 01 24         [ 4]  448     call uart_tx
      00016E 0A 01            [ 1]  449     dec (1,sp)
      000170 20 E9            [ 2]  450     jra del_loop
      000172 84               [ 1]  451 1$: pop a
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 ;------------------------------------
                                    455 ; read a line of text from terminal
                                    456 ; input:
                                    457 ;	none
                                    458 ; local variable on stack:
                                    459 ;	LEN (1,sp)
                                    460 ;   RXCHAR (2,sp)
                                    461 ; output:
                                    462 ;   text in tib  buffer
                                    463 ;   len in count variable
                                    464 ;------------------------------------
      000174                        465 readln:
                                    466 	; local variables
                           000001   467 	LEN = 1  ; accepted line length
                           000002   468 	RXCHAR = 2 ; last char received
      000174 4B 00            [ 1]  469 	push #0  ; RXCHAR 
      000176 4B 00            [ 1]  470 	push #0  ; LEN
      000178 90 AE 00 08      [ 2]  471  	ldw y,#tib ; input buffer
      00017C                        472 readln_loop:
      00017C CD 01 46         [ 4]  473 	call uart_getchar
      00017F 6B 02            [ 1]  474 	ld (RXCHAR,sp),a
      000181 A1 03            [ 1]  475 	cp a,#CTRL_C
      000183 26 03            [ 1]  476 	jrne 2$
      000185 CC 02 00         [ 2]  477 	jp cancel
      000188 A1 12            [ 1]  478 2$:	cp a,#CTRL_R
      00018A 27 50            [ 1]  479 	jreq reprint
      00018C A1 0D            [ 1]  480 	cp a,#CR
      00018E 26 03            [ 1]  481 	jrne 1$
      000190 CC 02 0A         [ 2]  482 	jp readln_quit
      000193 A1 0A            [ 1]  483 1$:	cp a,#NL
      000195 27 73            [ 1]  484 	jreq readln_quit
      000197 A1 08            [ 1]  485 	cp a,#BSP
      000199 27 1B            [ 1]  486 	jreq del_back
      00019B A1 04            [ 1]  487 	cp a,#CTRL_D
      00019D 27 06            [ 1]  488 	jreq del_line
      00019F A1 20            [ 1]  489 	cp a,#SPACE
      0001A1 2A 24            [ 1]  490 	jrpl accept_char
      0001A3 20 D7            [ 2]  491 	jra readln_loop
      0001A5                        492 del_line:
      0001A5 7B 01            [ 1]  493 	ld a,(LEN,sp)
      0001A7 CD 01 5A         [ 4]  494 	call uart_delete
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0001AA 90 AE 00 08      [ 2]  495 	ldw y,#tib
      0001AE 72 5F 00 03      [ 1]  496 	clr count
      0001B2 0F 01            [ 1]  497 	clr (LEN,sp)
      0001B4 20 C6            [ 2]  498 	jra readln_loop
      0001B6                        499 del_back:
      0001B6 0D 01            [ 1]  500     tnz (LEN,sp)
      0001B8 27 C2            [ 1]  501     jreq readln_loop
      0001BA 0A 01            [ 1]  502     dec (LEN,sp)
      0001BC 90 5A            [ 2]  503     decw y
      0001BE 90 7F            [ 1]  504     clr  (y)
      0001C0 A6 01            [ 1]  505     ld a,#1
      0001C2 CD 01 5A         [ 4]  506     call uart_delete
      0001C5 20 B5            [ 2]  507     jra readln_loop	
      0001C7                        508 accept_char:
      0001C7 A6 4F            [ 1]  509 	ld a,#TIB_SIZE-1
      0001C9 11 01            [ 1]  510 	cp a, (1,sp)
      0001CB 27 AF            [ 1]  511 	jreq readln_loop
      0001CD 7B 02            [ 1]  512 	ld a,(RXCHAR,sp)
      0001CF 90 F7            [ 1]  513 	ld (y),a
      0001D1 0C 01            [ 1]  514 	inc (LEN,sp)
      0001D3 90 5C            [ 1]  515 	incw y
      0001D5 90 7F            [ 1]  516 	clr (y)
      0001D7 CD 01 24         [ 4]  517 	call uart_tx
      0001DA 20 A0            [ 2]  518 	jra readln_loop
      0001DC                        519 reprint:
      0001DC 0D 01            [ 1]  520 	tnz (LEN,sp)
      0001DE 26 9C            [ 1]  521 	jrne readln_loop
      0001E0 72 5D 00 03      [ 1]  522 	tnz count
      0001E4 27 96            [ 1]  523 	jreq readln_loop
      0001E6 90 AE 00 08      [ 2]  524 	ldw y,#tib
      0001EA 90 89            [ 2]  525 	pushw y
      0001EC CD 01 2E         [ 4]  526 	call uart_print
      0001EF 90 85            [ 2]  527 	popw y
      0001F1 C6 00 03         [ 1]  528 	ld a,count
      0001F4 6B 01            [ 1]  529 	ld (LEN,sp),a
      0001F6 90 9F            [ 1]  530 	ld a,yl
      0001F8 CB 00 03         [ 1]  531 	add a,count
      0001FB 90 97            [ 1]  532 	ld yl,a
      0001FD CC 01 7C         [ 2]  533 	jp readln_loop
      000200                        534 cancel:
      000200 72 5F 00 08      [ 1]  535 	clr tib
      000204 72 5F 00 03      [ 1]  536 	clr count
      000208 20 05            [ 2]  537 	jra readln_quit2
      00020A                        538 readln_quit:
      00020A 7B 01            [ 1]  539 	ld a,(LEN,sp)
      00020C C7 00 03         [ 1]  540 	ld count,a
      00020F                        541 readln_quit2:
      00020F 5B 02            [ 2]  542 	addw sp,#2
      000211 A6 0A            [ 1]  543 	ld a,#NL
      000213 CD 01 24         [ 4]  544 	call uart_tx
      000216 81               [ 4]  545 	ret
                                    546 	
                                    547 ;------------------------------------
                                    548 ; skip character c in tib starting from 'in'
                                    549 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                    550 ;    a character to skip
                                    551 ; output:  'in' ajusted to new position
                                    552 ;------------------------------------
      000217                        553 skip:
                           000001   554 	C = 1 ; local var
      000217 88               [ 1]  555 	push a
      000218 90 AE 00 08      [ 2]  556 	ldw y,#tib
      00021C 91 D6 01         [ 4]  557 1$:	ld a,([in.w],y)
      00021F 27 0A            [ 1]  558 	jreq 2$
      000221 11 01            [ 1]  559 	cp a,(C,sp)
      000223 26 06            [ 1]  560 	jrne 2$
      000225 72 5C 00 02      [ 1]  561 	inc in
      000229 20 F1            [ 2]  562 	jra 1$
      00022B 84               [ 1]  563 2$: pop a
      00022C 81               [ 4]  564 	ret
                                    565 	
                                    566 ;------------------------------------
                                    567 ; scan tib for charater 'c' starting from 'in'
                                    568 ; input:
                                    569 ;    a character to skip
                                    570 ;------------------------------------
      00022D                        571 scan: 
                           000001   572 	C = 1 ; local var
      00022D 88               [ 1]  573 	push a
      00022E 90 AE 00 08      [ 2]  574 	ldw y,#tib
      000232 91 D6 01         [ 4]  575 1$:	ld a,([in.w],y)
      000235 27 0A            [ 1]  576 	jreq 2$
      000237 11 01            [ 1]  577 	cp a,(C,sp)
      000239 27 06            [ 1]  578 	jreq 2$
      00023B 72 5C 00 02      [ 1]  579 	inc in
      00023F 20 F1            [ 2]  580 	jra 1$
      000241 84               [ 1]  581 2$: pop a
      000242 81               [ 4]  582 	ret
                                    583 
                                    584 ;------------------------------------
                                    585 ; scan tib for next word
                                    586 ; move word in 'pad'
                                    587 ;------------------------------------
      000243                        588 next_word:	
                           000001   589 	FIRST = 1
                           000002   590 	XSAVE = 2
      000243 52 03            [ 2]  591 	sub sp,#3
      000245 1F 02            [ 2]  592 	ldw (XSAVE,sp),x ; save x
      000247 A6 20            [ 1]  593 	ld a,#SPACE
      000249 CD 02 17         [ 4]  594 	call skip
      00024C C6 00 02         [ 1]  595 	ld a,in
      00024F 6B 01            [ 1]  596 	ld (FIRST,sp),a
      000251 A6 20            [ 1]  597 	ld a,#SPACE
      000253 CD 02 2D         [ 4]  598 	call scan
                                    599 	; copy word in pad
      000256 AE 00 08         [ 2]  600 	ldw x,#tib  ; source
      000259 72 5F 00 04      [ 1]  601 	clr idx_x
      00025D 7B 01            [ 1]  602 	ld a,(FIRST,sp)
      00025F C7 00 05         [ 1]  603 	ld idx_x+1,a
      000262 90 AE 00 58      [ 2]  604 	ldw y,#pad
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000266 72 5F 00 06      [ 1]  605 	clr idx_y
      00026A 72 5F 00 07      [ 1]  606 	clr idx_y+1
      00026E C6 00 02         [ 1]  607 	ld a,in
      000271 10 01            [ 1]  608 	sub a,(FIRST,sp)
      000273 CD 02 7B         [ 4]  609 	call strcpyn
      000276 1E 02            [ 2]  610 	ldw x,(XSAVE,sp)
      000278 5B 03            [ 2]  611 	addw sp,#3
      00027A 81               [ 4]  612 	ret
                                    613 	
                                    614 	
                                    615 ;------------------------------------
                                    616 ; copy n character from (x) to (y)
                                    617 ; input:
                                    618 ;   	x   source pointer
                                    619 ;       idx_x index in (x)
                                    620 ;       y   destination pointer
                                    621 ;       idx_y  index in (y)
                                    622 ;       a   number of character to copy
                                    623 ;------------------------------------
      00027B                        624 strcpyn:
                           000001   625 	N = 1 ; local variable count
      00027B 88               [ 1]  626 	push a
      00027C 7B 01            [ 1]  627 1$: ld a,(N,sp)		
      00027E 27 13            [ 1]  628 	jreq 2$ 
      000280 72 D6 00 04      [ 4]  629 	ld a,([idx_x],x)
      000284 91 D7 06         [ 4]  630 	ld ([idx_y],y),a
      000287 72 5C 00 05      [ 1]  631 	inc idx_x+1
      00028B 72 5C 00 07      [ 1]  632 	inc idx_y+1
      00028F 0A 01            [ 1]  633 	dec (N,sp)
      000291 20 E9            [ 2]  634 	jra 1$
      000293 91 6F 06         [ 4]  635 2$: clr ([idx_y],y)
      000296 84               [ 1]  636 	pop a
      000297 81               [ 4]  637 	ret
                                    638 
                                    639 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    640 ;        arithmetic operations
                                    641 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    642 
                                    643 ;--------------------------------------
                                    644 ; unsigned multiply uint24_t by uint8_t
                                    645 ; use to convert numerical string to uint24_t
                                    646 ; input:
                                    647 ;	acc24	uint24_t 
                                    648 ;   A		uint8_t
                                    649 ; output:
                                    650 ;   acc24   A*acc24
                                    651 ;-------------------------------------
                                    652 ; local variables offset  on sp
                           000003   653 	U8   = 3   ; A pushed on stack
                           000002   654 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   655 	OVFH = 1  ; multiplication overflow high byte
                           000003   656 	LOCAL_SIZE = 3
      000298                        657 mulu24_8:
      000298 89               [ 2]  658 	pushw x    ; save X
                                    659 	; local variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000299 88               [ 1]  660 	push a     ; U8
      00029A 5F               [ 1]  661 	clrw x     ; initialize overflow to 0
      00029B 89               [ 2]  662 	pushw x    ; multiplication overflow
                                    663 ; multiply low byte.
      00029C C6 00 AA         [ 1]  664 	ld a,acc24+2
      00029F 97               [ 1]  665 	ld xl,a
      0002A0 7B 03            [ 1]  666 	ld a,(U8,sp)
      0002A2 42               [ 4]  667 	mul x,a
      0002A3 9F               [ 1]  668 	ld a,xl
      0002A4 C7 00 AA         [ 1]  669 	ld acc24+2,a
      0002A7 9E               [ 1]  670 	ld a, xh
      0002A8 6B 02            [ 1]  671 	ld (OVFL,sp),a
                                    672 ; multipy middle byte
      0002AA C6 00 A9         [ 1]  673 	ld a,acc24+1
      0002AD 97               [ 1]  674 	ld xl,a
      0002AE 7B 03            [ 1]  675 	ld a, (U8,sp)
      0002B0 42               [ 4]  676 	mul x,a
                                    677 ; add overflow to this partial product
      0002B1 72 FB 01         [ 2]  678 	addw x,(OVFH,sp)
      0002B4 9F               [ 1]  679 	ld a,xl
      0002B5 C7 00 A9         [ 1]  680 	ld acc24+1,a
      0002B8 4F               [ 1]  681 	clr a
      0002B9 A9 00            [ 1]  682 	adc a,#0
      0002BB 6B 01            [ 1]  683 	ld (OVFH,sp),a
      0002BD 9E               [ 1]  684 	ld a,xh
      0002BE 6B 02            [ 1]  685 	ld (OVFL,sp),a
                                    686 ; multiply most signficant byte	
      0002C0 C6 00 A8         [ 1]  687 	ld a, acc24
      0002C3 97               [ 1]  688 	ld xl, a
      0002C4 7B 03            [ 1]  689 	ld a, (U8,sp)
      0002C6 42               [ 4]  690 	mul x,a
      0002C7 72 FB 01         [ 2]  691 	addw x, (OVFH,sp)
      0002CA 9F               [ 1]  692 	ld a, xl
      0002CB C7 00 A8         [ 1]  693 	ld acc24,a
      0002CE 5B 03            [ 2]  694     addw sp,#LOCAL_SIZE
      0002D0 85               [ 2]  695 	popw x
      0002D1 81               [ 4]  696 	ret
                                    697 
                                    698 ;-------------------------------------
                                    699 ; divide uint24_t by uint8_t
                                    700 ; used to convert uint24_t to string
                                    701 ; input:
                                    702 ;	acc24	dividend
                                    703 ;   A 		divisor
                                    704 ; output:
                                    705 ;   acc24	quotient
                                    706 ;   A		remainder
                                    707 ;------------------------------------- 
                                    708 ; offset  on sp of arguments and locals
                           000001   709 	U8   = 1   ; divisor on stack
                           000001   710 	LOCAL_SIZE =1
      0002D2                        711 divu24_8:
      0002D2 89               [ 2]  712 	pushw x ; save x
      0002D3 88               [ 1]  713 	push a 
                                    714 	; ld dividend UU:MM bytes in X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0002D4 C6 00 A8         [ 1]  715 	ld a, acc24
      0002D7 95               [ 1]  716 	ld xh,a
      0002D8 C6 00 A9         [ 1]  717 	ld a,acc24+1
      0002DB 97               [ 1]  718 	ld xl,a
      0002DC 7B 01            [ 1]  719 	ld a,(U8,SP) ; divisor
      0002DE 62               [ 2]  720 	div x,a ; UU:MM/U8
      0002DF 88               [ 1]  721 	push a  ;save remainder
      0002E0 9E               [ 1]  722 	ld a,xh
      0002E1 C7 00 A8         [ 1]  723 	ld acc24,a
      0002E4 9F               [ 1]  724 	ld a,xl
      0002E5 C7 00 A9         [ 1]  725 	ld acc24+1,a
      0002E8 84               [ 1]  726 	pop a
      0002E9 95               [ 1]  727 	ld xh,a
      0002EA C6 00 AA         [ 1]  728 	ld a,acc24+2
      0002ED 97               [ 1]  729 	ld xl,a
      0002EE 7B 01            [ 1]  730 	ld a,(U8,sp) ; divisor
      0002F0 62               [ 2]  731 	div x,a  ; R:LL/U8
      0002F1 6B 01            [ 1]  732 	ld (U8,sp),a ; save remainder
      0002F3 9F               [ 1]  733 	ld a,xl
      0002F4 C7 00 AA         [ 1]  734 	ld acc24+2,a
      0002F7 84               [ 1]  735 	pop a
      0002F8 85               [ 2]  736 	popw x
      0002F9 81               [ 4]  737 	ret
                                    738 
                                    739 ;------------------------------------
                                    740 ;  two's complement acc24
                                    741 ;  input:
                                    742 ;		acc24 variable
                                    743 ;  output:
                                    744 ;		acc24 variable
                                    745 ;-------------------------------------
      0002FA                        746 neg_acc24:
      0002FA 72 53 00 AA      [ 1]  747 	cpl acc24+2
      0002FE 72 53 00 A9      [ 1]  748 	cpl acc24+1
      000302 72 53 00 A8      [ 1]  749 	cpl acc24
      000306 A6 01            [ 1]  750 	ld a,#1
      000308 CB 00 AA         [ 1]  751 	add a,acc24+2
      00030B C7 00 AA         [ 1]  752 	ld acc24+2,a
      00030E 4F               [ 1]  753 	clr a
      00030F C9 00 A9         [ 1]  754 	adc a,acc24+1
      000312 C7 00 A9         [ 1]  755 	ld acc24+1,a 
      000315 4F               [ 1]  756 	clr a 
      000316 C9 00 A8         [ 1]  757 	adc a,acc24 
      000319 C7 00 A8         [ 1]  758 	ld acc24,a 
      00031C 81               [ 4]  759 	ret
                                    760 
                                    761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    762 ; incremente acc24 
                                    763 ; input:
                                    764 ;   X 		adresse de la variable 
                                    765 ;   A		incrément
                                    766 ; output:
                                    767 ;	aucun 
                                    768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00031D                        769 inc_var24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00031D EB 02            [ 1]  770 	add a, (2,x)
      00031F E7 02            [ 1]  771 	ld (2,x),a
      000321 4F               [ 1]  772 	clr a
      000322 E9 01            [ 1]  773 	adc a,(1,x)
      000324 E7 01            [ 1]  774 	ld (1,x),a 
      000326 4F               [ 1]  775 	clr a 
      000327 F9               [ 1]  776 	adc a,(x)
      000328 F7               [ 1]  777 	ld (x),a
      000329 81               [ 4]  778 	ret 
                                    779 	
                                    780 
                                    781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    782 ; copy 24 bits variable 
                                    783 ; input:
                                    784 ;	X 		address var source
                                    785 ;   y		address var destination
                                    786 ; output:
                                    787 ;   dest = src
                                    788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00032A                        789 copy_var24:
      00032A E6 00            [ 1]  790 	ld a,(0,x)
      00032C 90 E7 00         [ 1]  791 	ld (0,y),a 
      00032F E6 01            [ 1]  792 	ld a,(1,x)
      000331 90 E7 01         [ 1]  793 	ld (1,y),a 
      000334 E6 02            [ 1]  794 	ld a,(2,x)
      000336 90 E7 02         [ 1]  795 	ld (2,y),a 
      000339 81               [ 4]  796 	ret
                                    797 
                                    798 ;------------------------------------
                                    799 ; convert integer to string
                                    800 ; input:
                                    801 ;   A	  	base
                                    802 ;	acc24	integer to convert
                                    803 ; output:
                                    804 ;   y  		pointer to string
                                    805 ;------------------------------------
                           000001   806 	SIGN=1  ; local variable 
                           000002   807 	BASE=2  ; local variable
                           000002   808 	LOCAL_SIZE=2  ;locals size
      00033A                        809 itoa:
      00033A 89               [ 2]  810 	pushw x
      00033B 52 02            [ 2]  811 	sub sp,#LOCAL_SIZE
      00033D 6B 02            [ 1]  812 	ld (BASE,sp), a  ; base
      00033F 0F 01            [ 1]  813 	clr (SIGN,sp)    ; sign
      000341 A1 0A            [ 1]  814 	cp a,#10
      000343 26 0A            [ 1]  815 	jrne 1$
                                    816 	; base 10 string display with negative sign if bit 7==1
      000345 72 0F 00 A8 05   [ 2]  817 	btjf acc24,#7,1$
      00034A 03 01            [ 1]  818 	cpl (SIGN,sp)
      00034C CD 02 FA         [ 4]  819 	call neg_acc24
      00034F                        820 1$:
                                    821 ; initialize string pointer 
      00034F 90 AE 00 A7      [ 2]  822 	ldw y,#pad+PAD_SIZE-1
      000353 90 7F            [ 1]  823 	clr (y)
      000355 90 5A            [ 2]  824 	decw y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000357 A6 20            [ 1]  825 	ld a,#SPACE
      000359 90 F7            [ 1]  826 	ld (y),a
      00035B                        827 itoa_loop:
      00035B 7B 02            [ 1]  828     ld a,(BASE,sp)
      00035D CD 02 D2         [ 4]  829     call divu24_8 ; acc24/A 
      000360 AB 30            [ 1]  830     add a,#'0  ; remainder of division
      000362 A1 3A            [ 1]  831     cp a,#'9+1
      000364 2B 02            [ 1]  832     jrmi 2$
      000366 AB 07            [ 1]  833     add a,#7 
      000368 90 5A            [ 2]  834 2$: decw y
      00036A 90 F7            [ 1]  835     ld (y),a
                                    836 	; if acc24==0 conversion done
      00036C C6 00 A8         [ 1]  837 	ld a,acc24
      00036F CA 00 A9         [ 1]  838 	or a,acc24+1
      000372 CA 00 AA         [ 1]  839 	or a,acc24+2
      000375 26 E4            [ 1]  840     jrne itoa_loop
                                    841 	;conversion done, next add '$' or '-' as required
      000377 7B 02            [ 1]  842 	ld a,(BASE,sp)
      000379 A1 10            [ 1]  843 	cp a,#16
      00037B 26 1B            [ 1]  844 	jrne 9$
      00037D CD 04 4F         [ 4]  845     call strlen
      000380 A1 03            [ 1]  846     cp a,#3
      000382 27 0C            [ 1]  847     jreq 8$
      000384 25 04            [ 1]  848     jrult 7$
      000386 A1 05            [ 1]  849 	cp a,#5
      000388 27 06            [ 1]  850 	jreq 8$
      00038A 90 5A            [ 2]  851 7$: decw y
      00038C A6 30            [ 1]  852     ld a,#'0
      00038E 90 F7            [ 1]  853     ld (y),a
      000390 90 5A            [ 2]  854 8$:	decw y
      000392 A6 24            [ 1]  855 	ld a,#'$
      000394 90 F7            [ 1]  856 	ld (y),a
      000396 20 0A            [ 2]  857 	jra 10$
      000398 7B 01            [ 1]  858 9$: ld a,(SIGN,sp)
      00039A 27 06            [ 1]  859     jreq 10$
      00039C 90 5A            [ 2]  860     decw y
      00039E A6 2D            [ 1]  861     ld a,#'-
      0003A0 90 F7            [ 1]  862     ld (y),a
      0003A2                        863 10$:
      0003A2 5B 02            [ 2]  864 	addw sp,#LOCAL_SIZE
      0003A4 85               [ 2]  865 	popw x
      0003A5 81               [ 4]  866 	ret
                                    867 
                                    868 ;------------------------------------
                                    869 ; check if character in {'0'..'9'}
                                    870 ; input:
                                    871 ;    A  character to test
                                    872 ; output:
                                    873 ;    A  0|1
                                    874 ;------------------------------------
      0003A6                        875 is_digit:
      0003A6 A1 30            [ 1]  876 	cp a,#'0
      0003A8 2A 02            [ 1]  877 	jrpl 1$
      0003AA 4F               [ 1]  878 0$:	clr a
      0003AB 81               [ 4]  879 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0003AC A1 39            [ 1]  880 1$: cp a,#'9
      0003AE 22 FA            [ 1]  881     jrugt 0$
      0003B0 A6 01            [ 1]  882     ld a,#1
      0003B2 81               [ 4]  883     ret
                                    884 	
                                    885 ;------------------------------------
                                    886 ; check if character in {'0'..'9','A'..'F'}
                                    887 ; input:
                                    888 ;   a  character to test
                                    889 ; output:
                                    890 ;   a   0|1 
                                    891 ;------------------------------------
      0003B3                        892 is_hex:
      0003B3 88               [ 1]  893 	push a
      0003B4 CD 03 A6         [ 4]  894 	call is_digit
      0003B7 A1 01            [ 1]  895 	cp a,#1
      0003B9 26 03            [ 1]  896 	jrne 1$
      0003BB 5B 01            [ 2]  897 	addw sp,#1
      0003BD 81               [ 4]  898 	ret
      0003BE 84               [ 1]  899 1$:	pop a
      0003BF A1 61            [ 1]  900 	cp a,#'a
      0003C1 2B 02            [ 1]  901 	jrmi 2$
      0003C3 A0 20            [ 1]  902 	sub a,#32
      0003C5 A1 41            [ 1]  903 2$: cp a,#'A
      0003C7 2A 02            [ 1]  904     jrpl 3$
      0003C9 4F               [ 1]  905 0$: clr a
      0003CA 81               [ 4]  906     ret
      0003CB A1 46            [ 1]  907 3$: cp a,#'F
      0003CD 22 FA            [ 1]  908     jrugt 0$
      0003CF A6 01            [ 1]  909     ld a,#1
      0003D1 81               [ 4]  910     ret
                                    911             	
                                    912 ;------------------------------------
                                    913 ; convert alpha to uppercase
                                    914 ; input:
                                    915 ;    a  character to convert
                                    916 ; output:
                                    917 ;    a  uppercase character
                                    918 ;------------------------------------
      0003D2                        919 a_upper:
      0003D2 A1 61            [ 1]  920 	cp a,#'a
      0003D4 2A 01            [ 1]  921 	jrpl 1$
      0003D6 81               [ 4]  922 0$:	ret
      0003D7 A1 7A            [ 1]  923 1$: cp a,#'z	
      0003D9 22 FB            [ 1]  924 	jrugt 0$
      0003DB A0 20            [ 1]  925 	sub a,#32
      0003DD 81               [ 4]  926 	ret
                                    927 	
                                    928 ;------------------------------------
                                    929 ; convert pad content in integer
                                    930 ; input:
                                    931 ;    pad		.asciz to convert
                                    932 ; output:
                                    933 ;    acc24      int24_t
                                    934 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                    935 	; local variables
                           000001   936 	SIGN=1 ; 1 byte, 
                           000002   937 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   938 	TEMP=3 ; 1 byte, temporary storage
                           000003   939 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      0003DE                        940 atoi:
      0003DE 89               [ 2]  941 	pushw x ;save x
      0003DF 52 03            [ 2]  942 	sub sp,#LOCAL_SIZE
                                    943 	; acc24=0 
      0003E1 72 5F 00 A8      [ 1]  944 	clr acc24    
      0003E5 72 5F 00 A9      [ 1]  945 	clr acc24+1
      0003E9 72 5F 00 AA      [ 1]  946 	clr acc24+2
      0003ED C6 00 58         [ 1]  947 	ld a, pad 
      0003F0 27 59            [ 1]  948 	jreq atoi_exit
      0003F2 0F 01            [ 1]  949 	clr (SIGN,sp)
      0003F4 A6 0A            [ 1]  950 	ld a,#10
      0003F6 6B 02            [ 1]  951 	ld (BASE,sp),a ; default base decimal
      0003F8 AE 00 58         [ 2]  952 	ldw x,#pad ; pointer to string to convert
      0003FB F6               [ 1]  953 	ld a,(x)
      0003FC 27 47            [ 1]  954 	jreq 9$  ; completed if 0
      0003FE A1 2D            [ 1]  955 	cp a,#'-
      000400 26 04            [ 1]  956 	jrne 1$
      000402 03 01            [ 1]  957 	cpl (SIGN,sp)
      000404 20 08            [ 2]  958 	jra 2$
      000406 A1 24            [ 1]  959 1$: cp a,#'$
      000408 26 06            [ 1]  960 	jrne 3$
      00040A A6 10            [ 1]  961 	ld a,#16
      00040C 6B 02            [ 1]  962 	ld (BASE,sp),a
      00040E 5C               [ 1]  963 2$:	incw x
      00040F F6               [ 1]  964 	ld a,(x)
      000410                        965 3$:	
      000410 A1 61            [ 1]  966 	cp a,#'a
      000412 2B 02            [ 1]  967 	jrmi 4$
      000414 A0 20            [ 1]  968 	sub a,#32
      000416 A1 30            [ 1]  969 4$:	cp a,#'0
      000418 2B 2B            [ 1]  970 	jrmi 9$
      00041A A0 30            [ 1]  971 	sub a,#'0
      00041C A1 0A            [ 1]  972 	cp a,#10
      00041E 2B 06            [ 1]  973 	jrmi 5$
      000420 A0 07            [ 1]  974 	sub a,#7
      000422 11 02            [ 1]  975 	cp a,(BASE,sp)
      000424 2A 1F            [ 1]  976 	jrpl 9$
      000426 6B 03            [ 1]  977 5$:	ld (TEMP,sp),a
      000428 7B 02            [ 1]  978 	ld a,(BASE,sp)
      00042A CD 02 98         [ 4]  979 	call mulu24_8
      00042D 7B 03            [ 1]  980 	ld a,(TEMP,sp)
      00042F CB 00 AA         [ 1]  981 	add a,acc24+2
      000432 C7 00 AA         [ 1]  982 	ld acc24+2,a
      000435 4F               [ 1]  983 	clr a
      000436 C9 00 A9         [ 1]  984 	adc a,acc24+1
      000439 C7 00 A9         [ 1]  985 	ld acc24+1,a
      00043C 4F               [ 1]  986 	clr a
      00043D C9 00 A8         [ 1]  987 	adc a,acc24
      000440 C7 00 A8         [ 1]  988 	ld acc24,a
      000443 20 C9            [ 2]  989 	jra 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000445 0D 01            [ 1]  990 9$:	tnz (SIGN,sp)
      000447 27 02            [ 1]  991     jreq atoi_exit
      000449 90 50            [ 2]  992     negw y
      00044B                        993 atoi_exit: 
      00044B 5B 03            [ 2]  994 	addw sp,#LOCAL_SIZE
      00044D 85               [ 2]  995 	popw x ; restore x
      00044E 81               [ 4]  996 	ret
                                    997 
                                    998 ;------------------------------------
                                    999 ;strlen  return .asciz string length
                                   1000 ; input:
                                   1001 ;	y  	pointer to string
                                   1002 ; output:
                                   1003 ;	a   length  < 256
                                   1004 ;------------------------------------
      00044F                       1005 strlen:
                           000001  1006 	LEN=1
      00044F 90 89            [ 2] 1007     pushw y
      000451 4B 00            [ 1] 1008     push #0
      000453 90 F6            [ 1] 1009 0$: ld a,(y)
      000455 27 06            [ 1] 1010     jreq 1$
      000457 0C 01            [ 1] 1011     inc (LEN,sp)
      000459 90 5C            [ 1] 1012     incw y
      00045B 20 F6            [ 2] 1013     jra 0$
      00045D 84               [ 1] 1014 1$: pop a
      00045E 90 85            [ 2] 1015     popw y
      000460 81               [ 4] 1016     ret
                                   1017 
                                   1018 
                                   1019 
                                   1020 ;------------------------------------
                                   1021 ; peek addr, print byte at this address 
                                   1022 ; input:
                                   1023 ;	 farptr   address to peek
                                   1024 ;    X		  farptr index 	
                                   1025 ;    A   	  numeric base for convertion
                                   1026 ; output:
                                   1027 ;    print byte value at this address
                                   1028 ;------------------------------------
      000461                       1029 peek:
      000461 90 89            [ 2] 1030 	pushw y
      000463 88               [ 1] 1031     push a   ; base numérique pour la conversion
                                   1032 	; A=farptr[x]
      000464 92 AF 00 AB      [ 5] 1033 	ldf a,([farptr],x)
      000468 C7 00 AA         [ 1] 1034     ld acc24+2,a
      00046B 72 5F 00 A8      [ 1] 1035     clr acc24 
      00046F 72 5F 00 A9      [ 1] 1036 	clr acc24+1 
      000473 84               [ 1] 1037 	pop a ; base numérique pour la conversion 
      000474 CD 03 3A         [ 4] 1038     call itoa  ; conversion entier en  .asciz
      000477 CD 01 2E         [ 4] 1039     call uart_print
      00047A 90 85            [ 2] 1040     popw y
      00047C 81               [ 4] 1041     ret	
                                   1042 	
                                   1043 ;------------------------------------
                                   1044 ; expect a number from command line next argument
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   1045 ;  input:
                                   1046 ;	  none
                                   1047 ;  output:
                                   1048 ;    acc24   int24_t 
                                   1049 ;------------------------------------
      00047D                       1050 number:
      00047D CD 02 43         [ 4] 1051 	call next_word
      000480 CD 03 DE         [ 4] 1052 	call atoi
      000483 81               [ 4] 1053 	ret
                                   1054 
                                   1055 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1056 ; write a byte in memory
                                   1057 ; input:
                                   1058 ;    a  		byte to write
                                   1059 ;    farptr  	address
                                   1060 ;    x          farptr[x]
                                   1061 ; output:
                                   1062 ;    none
                                   1063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1064 	; variables locales
                           000001  1065 	BTW = 1   ; byte to write offset on stack
                           000002  1066 	OPT = 2   ; OPTION flag offset on stack
                           000002  1067 	LOCAL_SIZE = 2
      000484                       1068 write_byte:
      000484 90 89            [ 2] 1069 	pushw y
      000486 52 02            [ 2] 1070 	sub sp,#LOCAL_SIZE  ; réservation d'espace pour variables locales  
      000488 6B 01            [ 1] 1071 	ld (BTW,sp),a ; byte to write 
      00048A 0F 02            [ 1] 1072 	clr (OPT,sp)  ; OPTION flag
                                   1073 	; put addr[15:0] in Y, for bounds check.
      00048C C6 00 AC         [ 1] 1074 	ld a, farptr+1
      00048F 90 95            [ 1] 1075 	ld yh,a
      000491 C6 00 AD         [ 1] 1076 	ld a, farptr+2
      000494 90 97            [ 1] 1077 	ld yl,a  ; Y=addr15:0
                                   1078 	; check addr[23:16], if <> 0 then it is extened flash memory
      000496 72 5D 00 AB      [ 1] 1079 	tnz farptr 
      00049A 26 26            [ 1] 1080 	jrne write_flash
      00049C 90 C3 00 B0      [ 2] 1081     cpw y,flash_free_base
      0004A0 24 20            [ 1] 1082     jruge write_flash
      0004A2 90 A3 50 00      [ 2] 1083     cpw y,#SFR_BASE
      0004A6 24 12            [ 1] 1084 	jruge write_ram
      0004A8 90 A3 40 00      [ 2] 1085 	cpw y,#EEPROM_BASE  
      0004AC 24 34            [ 1] 1086     jruge write_eeprom
      0004AE 90 C3 00 AE      [ 2] 1087 	cpw y,ram_free_base
      0004B2 25 6C            [ 1] 1088     jrult write_exit
      0004B4 90 A3 17 00      [ 2] 1089     cpw y,#STACK_BASE
      0004B8 24 66            [ 1] 1090     jruge write_exit
                                   1091 
                                   1092 ;write RAM and SFR 
      0004BA                       1093 write_ram:
      0004BA 7B 01            [ 1] 1094 	ld a,(BTW,sp)
      0004BC 92 A7 00 AB      [ 4] 1095 	ldf ([farptr],x),a
      0004C0 20 5E            [ 2] 1096 	jra write_exit
                                   1097 
                                   1098 ; write program memory
      0004C2                       1099 write_flash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0004C2 35 56 50 62      [ 1] 1100 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0004C6 35 AE 50 62      [ 1] 1101 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0004CA 72 03 50 5F FB   [ 2] 1102 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0004CF                       1103 1$:	_int_disable
      0004CF 9B               [ 1]    1 		sim
      0004D0 7B 01            [ 1] 1104 	ld a,(BTW,sp)
      0004D2 92 A7 00 AB      [ 4] 1105 	ldf ([farptr],x),a ; farptr[x]=A
      0004D6 72 05 50 5F FB   [ 2] 1106 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0004DB                       1107     _int_enable
      0004DB 9A               [ 1]    1 		 rim
      0004DC 72 13 50 5F      [ 1] 1108     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0004E0 20 3E            [ 2] 1109     jra write_exit
                                   1110 
                                   1111 ; write eeprom and option
      0004E2                       1112 write_eeprom:
                                   1113 	; check for data eeprom or option eeprom
      0004E2 90 A3 48 00      [ 2] 1114 	cpw y,#OPTION_BASE
      0004E6 2B 08            [ 1] 1115 	jrmi 1$
      0004E8 90 A3 48 80      [ 2] 1116 	cpw y,#OPTION_END+1
      0004EC 2A 02            [ 1] 1117 	jrpl 1$
      0004EE 03 02            [ 1] 1118 	cpl (OPT,sp)
      0004F0 35 AE 50 64      [ 1] 1119 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0004F4 35 56 50 64      [ 1] 1120     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0004F8 0D 02            [ 1] 1121     tnz (OPT,sp)
      0004FA 27 08            [ 1] 1122     jreq 2$
                                   1123 	; pour modifier une option il faut modifier ces 2 bits
      0004FC 72 1E 50 5B      [ 1] 1124     bset FLASH_CR2,#FLASH_CR2_OPT
      000500 72 1F 50 5C      [ 1] 1125     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000504 72 07 50 5F FB   [ 2] 1126 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      000509 7B 01            [ 1] 1127     ld a,(BTW,sp)
      00050B 92 A7 00 AB      [ 4] 1128     ldf ([farptr],x),a
      00050F 0D 02            [ 1] 1129     tnz (OPT,sp)
      000511 27 08            [ 1] 1130     jreq 3$
      000513 5C               [ 1] 1131     incw x
      000514 7B 01            [ 1] 1132     ld a,(BTW,sp)
      000516 43               [ 1] 1133     cpl a
      000517 92 A7 00 AB      [ 4] 1134     ldf ([farptr],x),a
      00051B 72 05 50 5F FB   [ 2] 1135 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000520                       1136 write_exit:
                                   1137 ; ne pas oublier de réajuster sp 
                                   1138 ; et de restaurer les register empilés.
      000520 5B 02            [ 2] 1139 	addw sp,#LOCAL_SIZE 
      000522 90 85            [ 2] 1140 	popw y
      000524 81               [ 4] 1141     ret
                                   1142         
                                   1143 		  
                                   1144 ;------------------------------------
                                   1145 ; evaluate command string in tib
                                   1146 ; list of commands
                                   1147 ;   @  addr display content at address
                                   1148 ;   !  addr byte [byte ]* store bytes at address
                                   1149 ;   ?  diplay command help
                                   1150 ;   b  n    convert n in the other base
                                   1151 ;	c  addr bitmask  clear  bits at address
                                   1152 ;   h  addr hex dump memory starting at address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1153 ;   m  src dest count,  move memory block
                                   1154 ;   r  reset MCU
                                   1155 ;   s  addr bitmask  set a bits at address
                                   1156 ;   t  addr bitmask  toggle bits at address
                                   1157 ;   x  addr execute  code at address  
                                   1158 ;------------------------------------
      000525                       1159 eval:
      000525 C6 00 02         [ 1] 1160 	ld a, in
      000528 C1 00 03         [ 1] 1161 	cp a, count
      00052B 26 01            [ 1] 1162 	jrne 0$
      00052D 81               [ 4] 1163 	ret ; nothing to evaluate
      00052E CD 02 43         [ 4] 1164 0$:	call next_word
      000531 90 AE 00 58      [ 2] 1165 	ldw y,#pad
      000535 90 F6            [ 1] 1166     ld a,(y)	
      000537 A1 40            [ 1] 1167 	cp a,#'@
      000539 26 03            [ 1] 1168 	jrne 1$
      00053B CC 05 8F         [ 2] 1169 	jp fetch
      00053E A1 21            [ 1] 1170 1$:	cp a,#'!
      000540 26 03            [ 1] 1171 	jrne 10$
      000542 CC 05 C5         [ 2] 1172 	jp store
      000545                       1173 10$:
      000545 A1 3F            [ 1] 1174 	cp a,#'?
      000547 26 03            [ 1] 1175 	jrne 15$
      000549 CC 05 F0         [ 2] 1176 	jp help
      00054C                       1177 15$: 
      00054C A1 62            [ 1] 1178 	cp a,#'b
      00054E 26 03            [ 1] 1179     jrne 2$
      000550 CC 05 F8         [ 2] 1180     jp base_convert	
      000553 A1 63            [ 1] 1181 2$:	cp a,#'c
      000555 26 03            [ 1] 1182 	jrne 3$
      000557 CC 06 0F         [ 2] 1183 	jp clear_bits
      00055A A1 68            [ 1] 1184 3$:	cp a,#'h
      00055C 26 03            [ 1] 1185 	jrne 4$
      00055E CC 06 3F         [ 2] 1186 	jp hexdump
      000561 A1 6D            [ 1] 1187 4$:	cp a,#'m
      000563 26 03            [ 1] 1188 	jrne 5$
      000565 CC 06 C2         [ 2] 1189 	jp move_memory
      000568 A1 72            [ 1] 1190 5$: cp a,#'r
      00056A 26 03            [ 1] 1191     jrne 6$
      00056C CD 01 08         [ 4] 1192 	call NonHandledInterrupt	
      00056F A1 73            [ 1] 1193 6$:	cp a,#'s
      000571 26 03            [ 1] 1194 	jrne 7$
      000573 CC 07 2B         [ 2] 1195 	jp set_bits
      000576 A1 74            [ 1] 1196 7$:	cp a,#'t
      000578 26 03            [ 1] 1197 	jrne 8$
      00057A CC 07 57         [ 2] 1198 	jp toggle_bits
      00057D A1 78            [ 1] 1199 8$:	cp a,#'x
      00057F 26 03            [ 1] 1200 	jrne 9$
      000581 CC 07 83         [ 2] 1201 	jp execute
      000584 CD 01 2E         [ 4] 1202 9$:	call uart_print
      000587 90 AE 08 6E      [ 2] 1203 	ldw y,#BAD_CMD
      00058B CD 01 2E         [ 4] 1204 	call uart_print
      00058E 81               [ 4] 1205 	ret
                                   1206 	
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   1208 ;;      MONA commands 
                                   1209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1210 
                                   1211 ;------------------------------------
                                   1212 ; @ addr, fetch a byte and display it.
                                   1213 ;------------------------------------
      00058F                       1214 fetch:
      00058F 89               [ 2] 1215 	pushw x
      000590 90 89            [ 2] 1216 	pushw y
      000592 CD 04 7D         [ 4] 1217 	call number
      000595 C6 00 58         [ 1] 1218 	ld a,pad
      000598 27 27            [ 1] 1219 	jreq fetch_exit ; pas d'adresse 
      00059A AE 00 A8         [ 2] 1220 	ldw x,#acc24
      00059D 90 AE 00 AB      [ 2] 1221 	ldw y,#farptr
      0005A1 CD 03 2A         [ 4] 1222 	call copy_var24
      0005A4 90 AE 00 58      [ 2] 1223 	ldw y,#pad
      0005A8 CD 01 2E         [ 4] 1224 	call uart_print
      0005AB A6 3D            [ 1] 1225 	ld a,#'=
      0005AD CD 01 24         [ 4] 1226 	call uart_tx	
      0005B0 C6 00 58         [ 1] 1227 	ld a,pad
      0005B3 A1 24            [ 1] 1228 	cp a,#'$
      0005B5 27 04            [ 1] 1229 	jreq 1$
      0005B7 A6 0A            [ 1] 1230 	ld a,#10
      0005B9 20 02            [ 2] 1231 	jra 2$
      0005BB A6 10            [ 1] 1232 1$: ld a,#16	
      0005BD 5F               [ 1] 1233 2$:	clrw x  ; pour farptr[0]
      0005BE CD 04 61         [ 4] 1234 	call peek
      0005C1                       1235 fetch_exit:	
      0005C1 90 85            [ 2] 1236 	popw y
      0005C3 85               [ 2] 1237 	popw x 
      0005C4 81               [ 4] 1238 	ret
                                   1239 	
                                   1240 ;------------------------------------
                                   1241 ; ! addr byte [byte ]*, store byte(s)
                                   1242 ;------------------------------------
      0005C5                       1243 store:
      0005C5 89               [ 2] 1244 	pushw x 
      0005C6 90 89            [ 2] 1245 	pushw y
      0005C8 CD 04 7D         [ 4] 1246 	call number
      0005CB C6 00 58         [ 1] 1247 	ld a,pad 
      0005CE 27 1C            [ 1] 1248 	jreq store_exit ; pas d'argument adresse 
      0005D0 AE 00 A8         [ 2] 1249 	ldw x,#acc24
      0005D3 90 AE 00 AB      [ 2] 1250 	ldw y,#farptr
      0005D7 CD 03 2A         [ 4] 1251 	call copy_var24  ; farptr=acc24 
      0005DA 5F               [ 1] 1252 	clrw x ; index pour farptr[x]
      0005DB CD 04 7D         [ 4] 1253 1$: call number
      0005DE C6 00 58         [ 1] 1254 	ld a, pad
      0005E1 27 09            [ 1] 1255 	jreq store_exit ; pas d'octet à écrire.	
      0005E3 C6 00 AA         [ 1] 1256 	ld a,acc24+2 ; octet à écrire.
      0005E6 CD 04 84         [ 4] 1257 	call write_byte
      0005E9 5C               [ 1] 1258 	incw x ; x++
      0005EA 20 EF            [ 2] 1259 	jra 1$
      0005EC                       1260 store_exit:	
      0005EC 90 85            [ 2] 1261 	popw y
      0005EE 85               [ 2] 1262 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0005EF 81               [ 4] 1263 	ret
                                   1264 
                                   1265 ;------------------------------------
                                   1266 ; ? , display command information
                                   1267 ;------------------------------------
      0005F0                       1268 help:
      0005F0 90 AE 08 81      [ 2] 1269 	ldw y, #HELP
      0005F4 CD 01 2E         [ 4] 1270 	call uart_print
      0005F7 81               [ 4] 1271 	ret
                                   1272 	; convert from one numeric base to the other
                                   1273 	;  b n|$n
      0005F8                       1274 base_convert:
      0005F8 CD 04 7D         [ 4] 1275     call number
      0005FB C6 00 58         [ 1] 1276     ld a,pad
      0005FE A1 24            [ 1] 1277     cp a,#'$
      000600 26 04            [ 1] 1278     jrne 1$
      000602 A6 0A            [ 1] 1279     ld a,#10
      000604 20 02            [ 2] 1280     jra 2$
      000606 A6 10            [ 1] 1281 1$: ld a,#16
      000608 CD 03 3A         [ 4] 1282 2$: call itoa
      00060B CD 01 2E         [ 4] 1283     call uart_print
      00060E 81               [ 4] 1284     ret
                                   1285         	
                                   1286 ;------------------------------------
                                   1287 ; c addr mask, clear bitmask 
                                   1288 ;------------------------------------
      00060F                       1289 clear_bits:
      00060F 89               [ 2] 1290 	pushw x 
      000610 90 89            [ 2] 1291 	pushw y 
      000612 CD 04 7D         [ 4] 1292 	call number
      000615 C6 00 58         [ 1] 1293 	ld a, pad 
      000618 27 21            [ 1] 1294 	jreq 9$ ; pas d'adresse 
      00061A AE 00 A8         [ 2] 1295 	ldw x, #acc24 
      00061D 90 AE 00 AB      [ 2] 1296 	ldw y, #farptr 
      000621 CD 03 2A         [ 4] 1297 	call copy_var24 
      000624 CD 04 7D         [ 4] 1298 	call number
      000627 C6 00 58         [ 1] 1299 	ld a, pad 
      00062A 27 0F            [ 1] 1300 	jreq 9$ ; pas de masque 
      00062C 72 53 00 AA      [ 1] 1301 	cpl acc24+2 ; inverse masque de bits 
      000630 92 BC 00 AB      [ 5] 1302 	ldf a,[farptr]
      000634 C4 00 AA         [ 1] 1303 	and a,acc24+2
      000637 5F               [ 1] 1304 	clrw x 
      000638 CD 04 84         [ 4] 1305 	call write_byte 
      00063B 90 85            [ 2] 1306 9$:	popw y 
      00063D 85               [ 2] 1307 	popw x
      00063E 81               [ 4] 1308     ret
                                   1309     
                                   1310 ;------------------------------------
                                   1311 ; h addr, memory dump in hexadecimal 
                                   1312 ; stop after each row, SPACE continue, other stop
                                   1313 ;------------------------------------
                           000008  1314 	ROW_CNT = 8 ; nombre d'octets par ligne 
                           000001  1315 	IDX=1 ; index pour farptr[x]
                           000002  1316 	LOCAL_SIZE=2
      00063F                       1317 hexdump: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00063F 52 02            [ 2] 1318 	sub sp,#LOCAL_SIZE
      000641 CD 02 43         [ 4] 1319 	call next_word
      000644 C6 00 58         [ 1] 1320 	ld a, pad 
      000647 27 76            [ 1] 1321 	jreq hdump_exit ; adresse manquante
      000649 A6 10            [ 1] 1322 	ld a,#16
      00064B CD 03 DE         [ 4] 1323 	call atoi ; acc24=addr 
                                   1324 	; farptr = addr 
      00064E AE 00 A8         [ 2] 1325 	ldw x,#acc24
      000651 90 AE 00 AB      [ 2] 1326 	ldw y,#farptr
      000655 CD 03 2A         [ 4] 1327 	call copy_var24
      000658                       1328 row_init:
      000658 5F               [ 1] 1329 	clrw x 
      000659 1F 01            [ 2] 1330 	ldw (IDX,sp),x
                                   1331 	; affiche l'adresse en début de ligne 
      00065B AE 00 AB         [ 2] 1332 	ldw x,#farptr
      00065E 90 AE 00 A8      [ 2] 1333 	ldw y,#acc24
      000662 CD 03 2A         [ 4] 1334 	call copy_var24
      000665 A6 10            [ 1] 1335 	ld a,#16
      000667 CD 03 3A         [ 4] 1336 	call itoa
      00066A CD 01 2E         [ 4] 1337 	call uart_print
      00066D A6 20            [ 1] 1338 	ld a,#SPACE
      00066F CD 01 24         [ 4] 1339 	call uart_tx
      000672 90 AE 00 58      [ 2] 1340 	ldw y, #pad
      000676 1E 01            [ 2] 1341 	ldw x,(IDX,sp)
      000678                       1342 row:
      000678 A6 10            [ 1] 1343 	ld a,#16
      00067A CD 04 61         [ 4] 1344 	call peek
      00067D 92 AF 00 AB      [ 5] 1345 	ldf a,([farptr],x)
      000681 A1 20            [ 1] 1346 	cp a,#SPACE
      000683 2A 02            [ 1] 1347 	jrpl 1$
      000685 A6 20            [ 1] 1348 	ld a,#SPACE
      000687 A1 80            [ 1] 1349 1$:	cp a,#128
      000689 2B 02            [ 1] 1350     jrmi 2$
      00068B A6 20            [ 1] 1351     ld a,#SPACE
      00068D 90 F7            [ 1] 1352 2$: ld (y),a
      00068F 90 5C            [ 1] 1353 	incw y 
      000691 5C               [ 1] 1354 	incw x
      000692 A3 00 08         [ 2] 1355 	cpw x,#ROW_CNT
      000695 26 E1            [ 1] 1356 	jrne row
      000697 A6 08            [ 1] 1357 	ld a,#ROW_CNT 
      000699 AE 00 AB         [ 2] 1358 	ldw x,#farptr
      00069C CD 03 1D         [ 4] 1359 	call inc_var24
      00069F A6 20            [ 1] 1360 	ld a,#SPACE
      0006A1 CD 01 24         [ 4] 1361 	call uart_tx
      0006A4 4F               [ 1] 1362 	clr a
      0006A5 90 F7            [ 1] 1363 	ld (y),a
      0006A7 A6 20            [ 1] 1364 	ld a,#SPACE 
      0006A9 CD 01 24         [ 4] 1365 	call uart_tx  
      0006AC 90 AE 00 58      [ 2] 1366 	ldw y,#pad
      0006B0 CD 01 2E         [ 4] 1367 	call uart_print
      0006B3 A6 0A            [ 1] 1368 	ld a,#NL
      0006B5 CD 01 24         [ 4] 1369 	call uart_tx
      0006B8 CD 01 46         [ 4] 1370 	call uart_getchar
      0006BB A1 20            [ 1] 1371 	cp a,#SPACE
      0006BD 27 99            [ 1] 1372 	jreq row_init
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0006BF                       1373 hdump_exit:	
      0006BF 5B 02            [ 2] 1374     addw sp,#LOCAL_SIZE
      0006C1 81               [ 4] 1375     ret
                                   1376     
                                   1377 ;------------------------------------
                                   1378 ; m src dest count, move memory block
                                   1379 ;------------------------------------
                           000001  1380     COUNT=1
                           000003  1381     SOURCE=3
                           000005  1382 	LOCAL_SIZE=5    
      0006C2                       1383 move_memory:
      0006C2 52 05            [ 2] 1384 	sub sp,#LOCAL_SIZE
      0006C4 CD 04 7D         [ 4] 1385 	call number 
      0006C7 C6 00 58         [ 1] 1386 	ld a, pad 
      0006CA 27 5C            [ 1] 1387 	jreq move_exit ; pas d'arguments 
                                   1388 	; save source address on stack
      0006CC C6 00 AA         [ 1] 1389 	ld a, acc24+2
      0006CF 6B 05            [ 1] 1390 	ld (SOURCE+2,sp),a
      0006D1 C6 00 A9         [ 1] 1391 	ld a, acc24+1
      0006D4 6B 04            [ 1] 1392 	ld (SOURCE+1,sp),a
      0006D6 C6 00 A8         [ 1] 1393 	ld a,acc24
      0006D9 6B 03            [ 1] 1394 	ld (SOURCE,sp),a
      0006DB CD 04 7D         [ 4] 1395 	call number
      0006DE C6 00 58         [ 1] 1396 	ld a,pad
      0006E1 27 45            [ 1] 1397 	jreq move_exit ; dest count manquant 
                                   1398 	; copy dest address in farptr
      0006E3 55 00 AA 00 AD   [ 1] 1399 	mov farptr+2,acc24+2
      0006E8 55 00 A9 00 AC   [ 1] 1400 	mov farptr+1,acc24+1
      0006ED 55 00 A8 00 AB   [ 1] 1401 	mov farptr,acc24
      0006F2 CD 04 7D         [ 4] 1402     call number 
      0006F5 C6 00 58         [ 1] 1403 	ld a, pad 
      0006F8 27 2E            [ 1] 1404 	jreq move_exit ; count manquant 
      0006FA C6 00 A9         [ 1] 1405 	ld a, acc24+1 
      0006FD 90 95            [ 1] 1406 	ld yh, a
      0006FF C6 00 AA         [ 1] 1407 	ld a, acc24+2 
      000702 90 97            [ 1] 1408 	ld yl,a  ; Y = count
      000704 17 01            [ 2] 1409 	ldw (COUNT,sp),y
                                   1410 	; put back source in acc24
      000706 7B 03            [ 1] 1411 	ld a,(SOURCE,sp)
      000708 C7 00 A8         [ 1] 1412 	ld acc24,a
      00070B 7B 04            [ 1] 1413 	ld a,(SOURCE+1,sp) 
      00070D C7 00 A9         [ 1] 1414 	ld acc24+1,a 
      000710 7B 05            [ 1] 1415 	ld a,(SOURCE+2,sp)
      000712 C7 00 AA         [ 1] 1416 	ld acc24+2,a
      000715 5F               [ 1] 1417 	clrw x
      000716                       1418 move_loop:
      000716 92 AF 00 A8      [ 5] 1419     ldf a,([acc24],x)
      00071A CD 04 84         [ 4] 1420 	call write_byte
      00071D 5C               [ 1] 1421     incw x
      00071E 16 01            [ 2] 1422 	ldw y, (COUNT,sp)
      000720 90 5A            [ 2] 1423 	decw y
      000722 27 04            [ 1] 1424 	jreq move_exit
      000724 17 01            [ 2] 1425     ldw (COUNT,sp),y
      000726 20 EE            [ 2] 1426     jra move_loop
      000728                       1427 move_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000728 5B 05            [ 2] 1428     addw sp,#LOCAL_SIZE
      00072A 81               [ 4] 1429     ret
                                   1430     
                                   1431 ;------------------------------------
                                   1432 ;  s addr mask, set bitmask 
                                   1433 ;------------------------------------
      00072B                       1434 set_bits:
      00072B 89               [ 2] 1435 	pushw x 
      00072C 90 89            [ 2] 1436 	pushw y 
      00072E CD 04 7D         [ 4] 1437 	call number 
      000731 C6 00 58         [ 1] 1438 	ld a, pad 
      000734 27 1D            [ 1] 1439 	jreq 9$ ; arguments manquant
      000736 AE 00 A8         [ 2] 1440 	ldw x, #acc24
      000739 90 AE 00 AB      [ 2] 1441 	ldw y, #farptr 
      00073D CD 03 2A         [ 4] 1442 	call copy_var24 
      000740 CD 04 7D         [ 4] 1443 	call number  
      000743 C6 00 58         [ 1] 1444 	ld a, pad 
      000746 27 0B            [ 1] 1445 	jreq 9$ ; mask manquant
      000748 92 BC 00 AB      [ 5] 1446 	ldf a,[farptr]
      00074C CA 00 AA         [ 1] 1447 	or a, acc24+2
      00074F 5F               [ 1] 1448 	clrw x 
      000750 CD 04 84         [ 4] 1449 	call write_byte 
      000753                       1450 9$:
      000753 90 85            [ 2] 1451 	popw y 
      000755 85               [ 2] 1452 	popw x 
      000756 81               [ 4] 1453     ret
                                   1454     
                                   1455 ;------------------------------------
                                   1456 ; t addr mask, toggle bitmask
                                   1457 ;------------------------------------
      000757                       1458 toggle_bits:
      000757 89               [ 2] 1459 	pushw x 
      000758 90 89            [ 2] 1460 	pushw y 
      00075A CD 04 7D         [ 4] 1461 	call number
      00075D C6 00 58         [ 1] 1462 	ld a, pad
      000760 27 1D            [ 1] 1463 	jreq 9$  ; pas d'adresse 
      000762 AE 00 A8         [ 2] 1464 	ldw x,#acc24 
      000765 90 AE 00 AB      [ 2] 1465 	ldw y,#farptr
      000769 CD 03 2A         [ 4] 1466 	call copy_var24
      00076C CD 04 7D         [ 4] 1467     call number
      00076F C6 00 58         [ 1] 1468 	ld a, pad 
      000772 27 0B            [ 1] 1469 	jreq 9$ ; pas de masque 
      000774 92 BC 00 AB      [ 5] 1470 	ldf a,[farptr]
      000778 C8 00 AA         [ 1] 1471     xor a,acc24+2
      00077B 5F               [ 1] 1472     clrw x 
      00077C CD 04 84         [ 4] 1473 	call write_byte 
      00077F                       1474 9$:
      00077F 90 85            [ 2] 1475 	popw y
      000781 85               [ 2] 1476  	popw x 
      000782 81               [ 4] 1477     ret
                                   1478     
                                   1479 ;------------------------------------
                                   1480 ; x addr, execute programme
                                   1481 ; addr < $10000 (<65536)
                                   1482 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000783                       1483 execute:
      000783 CD 04 7D         [ 4] 1484 	call number
      000786 C6 00 58         [ 1] 1485 	ld a, pad 
      000789 27 17            [ 1] 1486 	jreq 9$ ; addr manquante 
      00078B 72 5D 00 A8      [ 1] 1487 	tnz acc24
      00078F 26 11            [ 1] 1488 	jrne 9$ ; adresse > 0xFFFF ; adresse invalide.
      000791 C6 00 A9         [ 1] 1489 	ld a, acc24+1
      000794 90 95            [ 1] 1490 	ld yh,a 
      000796 CA 00 AA         [ 1] 1491 	or a, acc24+2 
      000799 27 07            [ 1] 1492 	jreq 9$ ; pointeur NULL 
      00079B C6 00 AA         [ 1] 1493 	ld a,acc24+2 
      00079E 90 97            [ 1] 1494 	ld yl,a 
      0007A0 90 FC            [ 2] 1495 	jp (y)
      0007A2                       1496 9$:
      0007A2 81               [ 4] 1497     ret
                                   1498 
                                   1499 ;------------------------
                                   1500 ;  run time CONSTANTS
                                   1501 ;------------------------
                                   1502 ; messages strings
                                   1503 ;------------------------	
      0007A3 0A 4D 4F 4E 41 20 56  1504 VERSION:	.asciz "\nMONA VERSION "
             45 52 53 49 4F 4E 20
             00
      0007B2 0A 73 74 6D 38 73 32  1505 CPU_MODEL:  .asciz "\nstm8s208rb     memory map\n----------------------------\n"
             30 38 72 62 20 20 20
             20 20 6D 65 6D 6F 72
             79 20 6D 61 70 0A 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 0A
             00
      0007EB 72 61 6D 20 66 72 65  1506 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      0007F6 2D 20 24 31 36 46 46  1507 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      0007FF 66 72 65 65 20 66 6C  1508 FLASH_FREE_MSG: .asciz "free flash: "
             61 73 68 3A 20 00
      00080C 20 2D 20 24 32 37 46  1509 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      000816 65 65 70 72 6F 6D 3A  1510             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      00082C 6F 70 74 69 6F 6E 3A  1511             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      000842 53 46 52 3A 20 24 35  1512             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      000855 62 6F 6F 74 20 52 4F  1513             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



             46 46 0A 00
      00086E 20 69 73 20 6E 6F 74  1514 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      000881 63 6F 6D 6D 61 6E 64  1515 HELP: .ascii "commands:\n"
             73 3A 0A
      00088B 40 20 61 64 64 72 2C  1516 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      0008AE 21 20 61 64 64 72 20  1517 	  .ascii "! addr byte [byte ]*, store bytes at addr++\n"
             62 79 74 65 20 5B 62
             79 74 65 20 5D 2A 2C
             20 73 74 6F 72 65 20
             62 79 74 65 73 20 61
             74 20 61 64 64 72 2B
             2B 0A
      0008DA 3F 2C 20 64 69 70 6C  1518 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      0008F1 62 20 6E 7C 24 6E 2C  1519 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      000915 63 20 61 64 64 72 20  1520 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
             74 20 61 64 64 72 65
             73 73 0A
      00093B 68 20 61 64 64 72 2C  1521 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      000967 6D 20 73 72 63 20 64  1522 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      00098B 72 20 72 65 73 65 74  1523 	  .ascii "r reset MCU\n"
             20 4D 43 55 0A
      000997 73 20 61 64 64 72 20  1524 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0009BB 74 20 61 64 64 72 20  1525 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      0009E2 78 20 61 64 64 72 2C  1526 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
                                   1527 
                                   1528 ; following flash memory is not used by MONA
      000A04                       1529 flash_free:
                                   1530 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     AWU_APR =  0050F1 
    AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 BAD_CMD    00086E R
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BSP     =  000008     |     BTW     =  000001     |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
  6 CPU_MODE   0007B2 R   |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]

Symbol Table

    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
  6 EEPROM_M   00080C R   |     EEPROM_S=  000800     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |   6 FLASH_FR   0007FF R   |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HELP       000881 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |     IDX     =  000001     |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000001     |     LOCAL_SI=  000005     |     N       =  000001 
    NAFR    =  004804     |     NCLKOPT =  004808     |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NL      =  00000A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000108 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000050     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]

Symbol Table

    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
  6 RAM_FREE   0007EB R   |   6 RAM_LAST   0007F6 R   |     RAM_SIZE=  001800 
    ROP     =  004800     |     ROW_CNT =  000008     |     RST_SR  =  0050B3 
    RXCHAR  =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SIGN    =  000001     |     SOURCE  =  000003     |     SPACE   =  000020 
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     STACK_BA=  001700 
    STACK_SI=  000100     |     STACK_TO=  0017FF     |     SWIM_CSR=  007F80 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     U8      =  000001 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PS=  00523A     |     UART1_SR=  005230     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_SR=  005240     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DAT=  000001     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UART_STA=  000002     |     UBC     =  004801 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  6 VERSION    0007A3 R   |     VERS_MAJ=  000000     |     VERS_MIN=  000002 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XSAVE   =  000002     |   5 __interr   000000 R
  4 __stack_   001700 R   |   2 _user_ra   000000 R   |   6 a_upper    0003D2 R
  1 acc24      0000A8 R   |   6 accept_c   0001C7 R   |   6 atoi       0003DE R
  6 atoi_exi   00044B R   |   6 base_con   0005F8 R   |   6 cancel     000200 R
  6 clear_al   000028 R   |   6 clear_bi   00060F R   |   6 clock_in   000000 R
  6 copy_var   00032A R   |   1 count      000003 R   |   6 del_back   0001B6 R
  6 del_line   0001A5 R   |   6 del_loop   00015B R   |   6 divu24_8   0002D2 R
  6 eval       000525 R   |   6 execute    000783 R   |   1 farptr     0000AB R
  6 fetch      00058F R   |   6 fetch_ex   0005C1 R   |   6 flash_fr   000A04 R
  1 flash_fr   0000B0 R   |   6 hdump_ex   0006BF R   |   6 help       0005F0 R
  6 hexdump    00063F R   |   1 idx_x      000004 R   |   1 idx_y      000006 R
  1 in         000002 R   |   1 in.w       000001 R   |   6 inc_var2   00031D R
  6 init0      00009E R   |   6 is_digit   0003A6 R   |   6 is_hex     0003B3 R
  6 itoa       00033A R   |   6 itoa_loo   00035B R   |   6 main       0000E8 R
  6 move_exi   000728 R   |   6 move_loo   000716 R   |   6 move_mem   0006C2 R
  6 mulu24_8   000298 R   |   6 neg_acc2   0002FA R   |   6 next_wor   000243 R
  6 number     00047D R   |   1 pad        000058 R   |   6 peek       000461 R
  6 print_mo   000033 R   |   1 ram_free   0000AE R   |   6 readln     000174 R
  6 readln_l   00017C R   |   6 readln_q   00020A R   |   6 readln_q   00020F R
  6 repl       0000EC R   |   6 reprint    0001DC R   |   6 row        000678 R
  6 row_init   000658 R   |   1 rx_char    000000 R   |   6 scan       00022D R
  6 set_bits   00072B R   |   6 skip       000217 R   |   6 store      0005C5 R
  6 store_ex   0005EC R   |   6 strcpyn    00027B R   |   6 strlen     00044F R
  1 tib        000008 R   |   6 toggle_b   000757 R   |   6 uart3_in   00000F R
  6 uart_del   00015A R   |   6 uart_get   000146 R   |   6 uart_pri   00012E R
  6 uart_qch   00013A R   |   6 uart_rx_   00010D R   |   6 uart_tx    000124 R
  6 ungetcha   000140 R   |   6 write_by   000484 R   |   6 write_ee   0004E2 R
  6 write_ex   000520 R   |   6 write_fl   0004C2 R   |   6 write_ra   0004BA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     B2   flags    0
   2 USER_RAM   size      0   flags    0
   3 SSEG       size      0   flags    8
   4 SSEG0      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size    A04   flags    0


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;----------------------------------------------------------------------------
                                     19 ;   Here how I proceded:
                                     20 ; according to this table: https://en.wikipedia.org/wiki/STM8#Instruction_set
                                     21 ; I tried to group opcode sharing the same common bits field. For exemple
                                     22 ; jrxx instruction all begin with 0010 . Only the least 4 bits changes to
                                     23 ; indicate what condition to test. So I decode them in reljump group. 
                                     24 ;-----------------------------------------------------------------------------
                                     25 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 ;   MONA desassembler
                                     28 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     29     .module DASM 
                                            .include "../inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "mona.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;  MONA   MONitor written in Assembly
                                        	.module MONA 
                                            .optsdcc -mstm8
                                        ;	.nlist
                                        	.include "../inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "../inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "../inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;	.list
                                        
                                        	.macro idx_tbl name value ptr  
                                        
                                        ;-------------------------------------
                                        ;   MONA global assembler constants 
                                        ;-------------------------------------
                                        
                                 
                                 
                                        
                                        ;------------------------------------------
                                        ;    boolean flags in variable 'flags'
                                        ;------------------------------------------
                                 
                                 
                                 
                                            .include "mnemonics.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;    STM8  mnemonics table
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                            .area CODE 
                                        
                                        ; mnemonics index values
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; mnemonics indexed table 
                                        mnemo_index:
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                                        
                                        ;-----------------------------------------------
                                        ; Instructions names used by assembler.
                                        ;-----------------------------------------------
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                                        
                                        ;registers index values
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;-------------------------
                                        ; registers names
                                        ; index table
                                        ;-------------------------
                                        reg_index:
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                                        
                                        
                                        
                                        ; registers names 
                                        registers:
            
            
            
            
            
            
            
            
            
            
            
            
            
                                        
                                     34     .list 
                                     35 
                                     36     .area CODE
      0002FF 44 41 53 4D             37 .ascii "DASM"
                                     38 ;-----------------------------------------------
                                     39 ;  addressing mode format string
                                     40 ; 
                                     41 ;       r      register
                                     42 ;       b      bit position 
                                     43 ;       imm8   byte immediate value 
                                     44 ;       imm16  word immediate value 
                                     45 ;       extd   24 bits address 
                                     46 ;       ofs8   short offset
                                     47 ;       ofs16  long offset
                                     48 ;       ptr8   short pointer
                                     49 ;       ptr16  long pointer 
                                     50 ;       adr    direct address value 
                                     51 ;       ind    indirect address in register X|Y|SP 
                                     52 ;       rel    relative address
                                     53 ;-----------------------------------------------
                                     54 
                                     55 ; decoder functions index values 
                           000000    56     IDX.FN_IMPL = 0 
                           000001    57     IDX.FN_OFS8_IDX = 1     
                           000002    58     IDX.FN_ADR16_B = 2
                           000003    59     IDX.FN_R_OFS8_IDX = 3 
                           000004    60     IDX.FN_R_IMM8 = 4
                           000005    61     IDX.FN_R_IMM16 = 5 
                           000006    62     IDX.FN_R_IDX = 6
                           000007    63     IDX.FN_IDX_R = 7 
                           000008    64     IDX.FN_R_ADR8 = 8
                           000009    65     IDX.FN_R_ADR16 = 9 
                           00000A    66     IDX.FN_IMM8 = 10
                           00000B    67     IDX.FN_ADR16 = 11 
                           00000C    68     IDX.FN_ADR24 = 12 
                           00000D    69     IDX.FN_ADR8_R = 13
                           00000E    70     IDX.FN_ADR16_R = 14 
                           00000F    71     IDX.FN_ADR24_R = 15
                           000010    72     IDX.FN_R_ADR24 = 16
                           000011    73     IDX.FN_ADR16_IMM8 = 17 
                           000012    74     IDX.FN_ADR16_ADR16=18
                           000013    75     IDX.FN_ADR8_ADR8=19 
                           000014    76     IDX.FN_ADR8 = 20 
                           000015    77     IDX.FN_R_PTR8 = 21
                           000016    78     IDX.FN_R_PTR16 = 22
                           000017    79     IDX.FN_PTR8_R = 23
                           000018    80     IDX.FN_PTR16_R = 24 
                           000019    81     IDX.FN_R_PTR8_IDX = 25 
                           00001A    82     IDX.FN_R_PTR16_IDX = 26 
                           00001B    83     IDX.FN_PTR8_IDX_R = 27
                           00001C    84     IDX.FN_PTR16_IDX_R = 28
                           00001D    85     IDX.FN_OFS8_IDX_R = 29
                           00001E    86     IDX.FN_OFS16_IDX = 30
                           00001F    87     IDX.FN_R_OFS16_IDX = 31 
                           000020    88     IDX.FN_OFS16_IDX_R= 32 
                           000021    89     IDX.FN_R_OFS24_IDX=33
                           000022    90     IDX.FN_OFS24_IDX_R=34 
                           000023    91     IDX.FN_PTR16 = 35 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                           000024    92     IDX.FN_PTR8 = 36
                           000025    93     IDX.FN_PTR16_IDX=37
                           000026    94     IDX.FN_PTR8_IDX=38 
                                     95 
                                     96 ; decoder function indexed table
      000303                         97 fn_index:
      000303 0F 7D                   98     .word fn_implied ; 0 
      000305 12 8B                   99     .word fn_ofs8_idx ; 1 
      000307 13 13                  100     .word fn_adr16_bit ; 2 
      000309 13 5F                  101     .word fn_r_ofs8_idx ; 3
      00030B 13 DB                  102     .word fn_r_imm8 ; 4
      00030D 14 09                  103     .word fn_r_imm16 ; 5
      00030F 12 10                  104     .word fn_r_idx ; 6
      000311 12 53                  105     .word fn_idx_r ; 7 
      000313 11 77                  106     .word fn_r_adr8 ; 8
      000315 11 A4                  107     .word fn_r_adr16 ; 9
      000317 0F C6                  108     .word fn_imm8 ; 10
      000319 10 AD                  109     .word fn_adr16 ; 11 
      00031B 10 CB                  110     .word fn_adr24 ; 12 
      00031D 10 EE                  111     .word fn_adr8_r ; 13
      00031F 11 1B                  112     .word fn_adr16_r ; 14
      000321 11 48                  113     .word fn_adr24_r ; 15 
      000323 11 D1                  114     .word fn_r_adr24 ; 16 
      000325 14 37                  115     .word fn_adr16_imm8 ; 17 
      000327 14 5D                  116     .word fn_adr16_adr16 ; 18 
      000329 14 83                  117     .word fn_adr8_adr8 ; 19
      00032B 10 72                  118     .word fn_adr8 ; 20
      00032D 14 AB                  119     .word fn_r_ptr8 ; 21 
      00032F 14 DA                  120     .word fn_r_ptr16 ; 22
      000331 15 09                  121     .word fn_ptr8_r ; 23 
      000333 15 38                  122     .word fn_ptr16_r ; 24
      000335 15 6C                  123     .word fn_r_ptr8_idx ; 25
      000337 15 AE                  124     .word fn_r_ptr16_idx ; 26 
      000339 15 F0                  125     .word fn_ptr8_idx_r ; 27 
      00033B 16 32                  126     .word fn_ptr16_idx_r ; 28 
      00033D 13 9F                  127     .word fn_ofs8_idx_r ; 29 
      00033F 16 6F                  128     .word fn_ofs16_idx  ; 30 
      000341 16 A1                  129     .word fn_r_ofs16_idx ; 31 
      000343 16 E1                  130     .word fn_ofs16_idx_r ; 32 
      000345 17 21                  131     .word fn_r_ofs24_idx; 33
      000347 17 63                  132     .word fn_ofs24_idx_r; 34 
      000349 17 C1                  133     .word fn_ptr16; 35 
      00034B 17 A0                  134     .word fn_ptr8 ; 36 
      00034D 18 17                  135     .word fn_ptr16_idx ; 37 
      00034F 17 E6                  136     .word fn_ptr8_idx ; 38
                                    137 
                                    138 ;-------------------------------------
                                    139 ;  each opcode as a table entry 
                                    140 ;  that give information on how to 
                                    141 ;  decode it.
                                    142 ;  each entry is a structure.
                                    143 ;  each element of structure is an index for other tables 
                                    144 ;       .byte opcode ; operating code
                                    145 ;       .byte mnemo_idx ; instruction mnemonic index
                                    146 ;       .byte fn* ;   decoder function index  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                    147 ;       .byte dest;  destination index 
                                    148 ;       .byte src;   src index        
                                    149 ;  A 0 in mnemonic field mark end of table 
                                    150 ;-------------------------------------
                           000000   151     FIELD_OPCODE = 0;
                           000001   152     FIELD_MNEMO= 1; 
                           000002   153     FIELD_FN=2;
                           000003   154     FIELD_DEST=3;
                           000004   155     FIELD_SRC=4 
                           000005   156     STRUCT_SIZE=5 ;
                                    157 
                                    158 
                                    159 ; table for opcodes without prefix 
      000351                        160 codes:
                                    161     ; form op (ofs8,r)  0x0n 0x6n 0xED
      000351 00 42 01 09 09         162     .byte 0x00,IDX.NEG,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000356 03 14 01 09 09         163     .byte 0x03,IDX.CPL,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      00035B 04 5E 01 09 09         164     .byte 0x04,IDX.SRL,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000360 06 51 01 09 09         165     .byte 0x06,IDX.RRC,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000365 07 5C 01 09 09         166     .byte 0x07,IDX.SRA,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      00036A 08 59 01 09 09         167     .byte 0x08,IDX.SLL,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      00036F 09 4E 01 09 09         168     .byte 0x09,IDX.RLC,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000374 0A 17 01 09 09         169     .byte 0x0a,IDX.DEC,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000379 0C 1E 01 09 09         170     .byte 0x0c,IDX.INC,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      00037E 0D 64 01 09 09         171     .byte 0x0d,IDX.TNZ,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000383 0E 62 01 09 09         172     .byte 0x0e,IDX.SWAP,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      000388 0F 11 01 09 09         173     .byte 0x0f,IDX.CLR,IDX.FN_OFS8_IDX,IDX.SP,IDX.SP 
      00038D 60 42 01 07 07         174     .byte 0x60,IDX.NEG,IDX.FN_OFS8_IDX,IDX.X,IDX.X 
      000392 63 14 01 07 07         175     .byte 0x63,IDX.CPL,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      000397 64 5E 01 07 07         176     .byte 0x64,IDX.SRL,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      00039C 66 51 01 07 07         177     .byte 0x66,IDX.RRC,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003A1 67 5C 01 07 07         178     .byte 0x67,IDX.SRA,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003A6 68 59 01 07 07         179     .byte 0x68,IDX.SLL,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003AB 69 4E 01 07 07         180     .byte 0x69,IDX.RLC,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003B0 6A 17 01 07 07         181     .byte 0x6A,IDX.DEC,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003B5 6C 1E 01 07 07         182     .byte 0x6C,IDX.INC,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003BA 6D 64 01 07 07         183     .byte 0x6D,IDX.TNZ,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003BF 6E 62 01 07 07         184     .byte 0x6E,IDX.SWAP,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003C4 6F 11 01 07 07         185     .byte 0x6F,IDX.CLR,IDX.FN_OFS8_IDX,IDX.X,IDX.X
      0003C9 ED 0D 01 07 07         186     .byte 0xED,IDX.CALL,IDX.FN_OFS8_IDX,IDX.X,IDX.X
                                    187     ; form op r,(ofs8,r) 0x1n 0x7B 0xEn
      0003CE 10 60 03 01 09         188     .byte 0x10,IDX.SUB,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003D3 11 13 03 01 09         189     .byte 0x11,IDX.CP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003D8 12 55 03 01 09         190     .byte 0x12,IDX.SBC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003DD 13 16 03 07 09         191     .byte 0x13,IDX.CPW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.SP
      0003E2 14 04 03 01 09         192     .byte 0x14,IDX.AND,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003E7 15 06 03 01 09         193     .byte 0x15,IDX.BCP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003EC 16 3F 03 08 09         194     .byte 0x16,IDX.LDW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.SP
      0003F1 18 69 03 01 09         195     .byte 0x18,IDX.XOR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003F6 19 01 03 01 09         196     .byte 0x19,IDX.ADC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      0003FB 1A 45 03 01 09         197     .byte 0x1A,IDX.OR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      000400 1B 02 03 01 09         198     .byte 0x1B,IDX.ADD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      000405 1E 3F 03 07 09         199     .byte 0x1E,IDX.LDW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.SP
      00040A 7B 3D 03 01 09         200     .byte 0x7B,IDX.LD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.SP
      00040F E0 60 03 01 07         201     .byte 0xE0,IDX.SUB,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000414 E1 13 03 01 07         202     .byte 0xE1,IDX.CP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000419 E2 55 03 01 07         203     .byte 0xE2,IDX.SBC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      00041E E3 16 03 08 07         204     .byte 0xE3,IDX.CPW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.X
      000423 E4 04 03 01 07         205     .byte 0xE4,IDX.AND,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000428 E5 06 03 01 07         206     .byte 0xE5,IDX.BCP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      00042D E6 3D 03 01 07         207     .byte 0xE6,IDX.LD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000432 E8 69 03 01 07         208     .byte 0xE8,IDX.XOR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000437 E9 01 03 01 07         209     .byte 0xE9,IDX.ADC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      00043C EA 45 03 01 07         210     .byte 0xEA,IDX.OR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000441 EB 02 03 01 07         211     .byte 0xEB,IDX.ADD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.X
      000446 EE 3F 03 07 07         212     .byte 0xEE,IDX.LDW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.X
                                    213     ;form op r,(ofs16,r)
      00044B D6 3D 1F 01 07         214     .byte 0xD6,IDX.LD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      000450 DB 02 1F 01 07         215     .byte 0xDB,IDX.ADD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
                                    216     ;form op (ofs16,r),r 
      000455 DF 3F 20 07 08         217     .byte 0xDF,IDX.LDW,IDX.FN_OFS16_IDX_R,IDX.X,IDX.Y 
                                    218     ;form op (ofs8,r),r 
      00045A 17 3F 1D 09 08         219     .byte 0x17,IDX.LDW,IDX.FN_OFS8_IDX_R,IDX.SP,IDX.Y
      00045F 1F 3F 1D 09 07         220     .byte 0x1F,IDX.LDW,IDX.FN_OFS8_IDX_R,IDX.SP,IDX.X
      000464 6B 3D 1D 09 01         221     .byte 0x6B,IDX.LD,IDX.FN_OFS8_IDX_R,IDX.SP,IDX.A 
      000469 E7 3D 1D 07 01         222     .byte 0xE7,IDX.LD,IDX.FN_OFS8_IDX_R,IDX.X,IDX.A 
      00046E EF 3F 1D 07 08         223     .byte 0xEF,IDX.LDW,IDX.FN_OFS8_IDX_R,IDX.X,IDX.Y 
                                    224     ; opcode with implied arguments 0x4n 0x5n 0x8n 0x9n 
      000473 01 53 00 07 00         225     .byte 0x01,IDX.RRWA,IDX.FN_IMPL,IDX.X,0
      000478 02 50 00 07 00         226     .byte 0x02,IDX.RLWA,IDX.FN_IMPL,IDX.X,0
      00047D 40 42 00 01 00         227     .byte 0x40,IDX.NEG,IDX.FN_IMPL,IDX.A,0 
      000482 41 1B 00 01 05         228     .byte 0x41,IDX.EXG,IDX.FN_IMPL,IDX.A,IDX.XL
      000487 42 41 00 07 01         229     .byte 0x42,IDX.MUL,IDX.FN_IMPL,IDX.X,IDX.A 
      00048C 43 14 00 01 00         230     .byte 0x43,IDX.CPL,IDX.FN_IMPL,IDX.A,0
      000491 44 5E 00 01 00         231     .byte 0x44,IDX.SRL,IDX.FN_IMPL,IDX.A,0 
      000496 46 51 00 01 00         232     .byte 0x46,IDX.RRC,IDX.FN_IMPL,IDX.A,0 
      00049B 47 5C 00 01 00         233     .byte 0x47,IDX.SRA,IDX.FN_IMPL,IDX.A,0 
      0004A0 48 59 00 01 00         234     .byte 0x48,IDX.SLL,IDX.FN_IMPL,IDX.A,0 
      0004A5 49 4E 00 01 00         235     .byte 0x49,IDX.RLC,IDX.FN_IMPL,IDX.A,0 
      0004AA 4A 17 00 01 00         236     .byte 0x4A,IDX.DEC,IDX.FN_IMPL,IDX.A,0 
      0004AF 4C 1E 00 01 00         237     .byte 0x4C,IDX.INC,IDX.FN_IMPL,IDX.A,0 
      0004B4 4D 64 00 01 00         238     .byte 0x4D,IDX.TNZ,IDX.FN_IMPL,IDX.A,0 
      0004B9 4E 62 00 01 00         239     .byte 0x4E,IDX.SWAP,IDX.FN_IMPL,IDX.A,0 
      0004BE 4F 11 00 01 00         240     .byte 0x4F,IDX.CLR,IDX.FN_IMPL,IDX.A,0
      0004C3 50 43 00 07 00         241     .byte 0x50,IDX.NEGW,IDX.FN_IMPL,IDX.X,0 
      0004C8 51 1C 00 07 08         242     .byte 0x51,IDX.EXGW,IDX.FN_IMPL,IDX.X,IDX.Y
      0004CD 53 15 00 07 00         243     .byte 0x53,IDX.CPLW,IDX.FN_IMPL,IDX.X,0
      0004D2 54 5F 00 07 00         244     .byte 0x54,IDX.SRLW,IDX.FN_IMPL,IDX.X,0
      0004D7 56 52 00 07 00         245     .byte 0x56,IDX.RRCW,IDX.FN_IMPL,IDX.X,0
      0004DC 57 5D 00 07 00         246     .byte 0x57,IDX.SRAW,IDX.FN_IMPL,IDX.X,0
      0004E1 58 5B 00 07 00         247     .byte 0x58,IDX.SLLW,IDX.FN_IMPL,IDX.X,0
      0004E6 59 4F 00 07 00         248     .byte 0x59,IDX.RLCW,IDX.FN_IMPL,IDX.X,0
      0004EB 5A 18 00 07 00         249     .byte 0x5A,IDX.DECW,IDX.FN_IMPL,IDX.X,0
      0004F0 5C 1F 00 07 00         250     .byte 0x5C,IDX.INCW,IDX.FN_IMPL,IDX.X,0
      0004F5 5D 65 00 07 00         251     .byte 0x5D,IDX.TNZW,IDX.FN_IMPL,IDX.X,0
      0004FA 5E 63 00 07 00         252     .byte 0x5E,IDX.SWAPW,IDX.FN_IMPL,IDX.X,0
      0004FF 5F 12 00 07 00         253     .byte 0x5F,IDX.CLRW,IDX.FN_IMPL,IDX.X,0 
      000504 61 1B 00 01 06         254     .byte 0x61,IDX.EXG,IDX.FN_IMPL,IDX.A,IDX.YL
      000509 62 19 00 07 01         255     .byte 0x62,IDX.DIV,IDX.FN_IMPL,IDX.X,IDX.A
      00050E 65 1A 00 07 08         256     .byte 0x65,IDX.DIVW,IDX.FN_IMPL,IDX.X,IDX.Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000513 80 21 00 00 00         257     .byte 0x80,IDX.IRET,IDX.FN_IMPL,0,0
      000518 81 4B 00 00 00         258     .byte 0x81,IDX.RET,IDX.FN_IMPL,0,0
      00051D 83 66 00 00 00         259     .byte 0x83,IDX.TRAP,IDX.FN_IMPL,0,0
      000522 84 46 00 01 00         260     .byte 0x84,IDX.POP,IDX.FN_IMPL,IDX.A,0
      000527 85 47 00 07 00         261     .byte 0x85,IDX.POPW,IDX.FN_IMPL,IDX.X,0
      00052C 86 46 00 02 00         262     .byte 0x86,IDX.POP,IDX.FN_IMPL,IDX.CC,0
      000531 87 4C 00 00 00         263     .byte 0x87,IDX.RETF,IDX.FN_IMPL,0,0
      000536 88 48 00 01 00         264     .byte 0x88,IDX.PUSH,IDX.FN_IMPL,IDX.A,0
      00053B 89 49 00 07 00         265     .byte 0x89,IDX.PUSHW,IDX.FN_IMPL,IDX.X,0
      000540 8A 48 00 02 00         266     .byte 0x8A,IDX.PUSH,IDX.FN_IMPL,IDX.CC,0
      000545 8B 08 00 00 00         267     .byte 0x8B,IDX.BREAK,IDX.FN_IMPL,0,0
      00054A 8C 10 00 00 00         268     .byte 0x8C,IDX.CCF,IDX.FN_IMPL,0,0
      00054F 8E 1D 00 00 00         269     .byte 0x8E,IDX.HALT,IDX.FN_IMPL,0,0
      000554 8F 68 00 00 00         270     .byte 0x8F,IDX.WFI,IDX.FN_IMPL,0,0
      000559 93 3F 00 07 08         271     .byte 0x93,IDX.LDW,IDX.FN_IMPL,IDX.X,IDX.Y 
      00055E 94 3F 00 09 07         272     .byte 0x94,IDX.LDW,IDX.FN_IMPL,IDX.SP,IDX.X 
      000563 95 3D 00 03 01         273     .byte 0x95,IDX.LD,IDX.FN_IMPL,IDX.XH,IDX.A 
      000568 96 3F 00 07 09         274     .byte 0x96,IDX.LDW,IDX.FN_IMPL,IDX.X,IDX.SP 
      00056D 97 3D 00 05 01         275     .byte 0x97,IDX.LD,IDX.FN_IMPL,IDX.XL,IDX.A 
      000572 98 4A 00 00 00         276     .byte 0x98,IDX.RCF,IDX.FN_IMPL,0,0
      000577 99 56 00 00 00         277     .byte 0x99,IDX.SCF,IDX.FN_IMPL,0,0
      00057C 9A 4D 00 00 00         278     .byte 0x9A,IDX.RIM,IDX.FN_IMPL,0,0
      000581 9B 57 00 00 00         279     .byte 0x9B,IDX.SIM,IDX.FN_IMPL,0,0
      000586 9C 54 00 00 00         280     .byte 0x9C,IDX.RVF,IDX.FN_IMPL,0,0
      00058B 9D 44 00 00 00         281     .byte 0x9D,IDX.NOP,IDX.FN_IMPL,0,0
      000590 9E 3D 00 01 03         282     .byte 0x9E,IDX.LD,IDX.FN_IMPL,IDX.A,IDX.XH
      000595 9F 3D 00 01 05         283     .byte 0x9F,IDX.LD,IDX.FN_IMPL,IDX.A,IDX.XL
                                    284     ; form  op r,(r) | op (r)
      00059A 70 42 06 07 00         285     .byte 0x70,IDX.NEG,IDX.FN_R_IDX,IDX.X,0 
      00059F 73 14 06 07 00         286     .byte 0x73,IDX.CPL,IDX.FN_R_IDX,IDX.X,0 
      0005A4 74 5E 06 07 00         287     .byte 0x74,IDX.SRL,IDX.FN_R_IDX,IDX.X,0 
      0005A9 76 51 06 07 00         288     .byte 0x76,IDX.RRC,IDX.FN_R_IDX,IDX.X,0 
      0005AE 77 5C 06 07 00         289     .byte 0x77,IDX.SRA,IDX.FN_R_IDX,IDX.X,0 
      0005B3 78 59 06 07 00         290     .byte 0x78,IDX.SLL,IDX.FN_R_IDX,IDX.X,0 
      0005B8 79 4E 06 07 00         291     .byte 0x79,IDX.RLC,IDX.FN_R_IDX,IDX.X,0 
      0005BD 7A 17 06 07 00         292     .byte 0x7A,IDX.DEC,IDX.FN_R_IDX,IDX.X,0 
      0005C2 7C 1E 06 07 00         293     .byte 0x7C,IDX.INC,IDX.FN_R_IDX,IDX.X,0 
      0005C7 7D 64 06 07 00         294     .byte 0x7D,IDX.TNZ,IDX.FN_R_IDX,IDX.X,0 
      0005CC 7E 62 06 07 00         295     .byte 0x7E,IDX.SWAP,IDX.FN_R_IDX,IDX.X,0 
      0005D1 7F 11 06 07 00         296     .byte 0x7F,IDX.CLR,IDX.FN_R_IDX,IDX.X,0 
      0005D6 F0 60 06 01 07         297     .byte 0xF0,IDX.SUB,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005DB F1 13 06 01 07         298     .byte 0xF1,IDX.CP,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005E0 F2 55 06 01 07         299     .byte 0xF2,IDX.SBC,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005E5 F3 16 06 08 07         300     .byte 0xF3,IDX.CPW,IDX.FN_R_IDX,IDX.Y,IDX.X 
      0005EA F4 04 06 01 07         301     .byte 0xF4,IDX.AND,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005EF F5 06 06 01 07         302     .byte 0xF5,IDX.BCP,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005F4 F6 3D 06 01 07         303     .byte 0xF6,IDX.LD,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005F9 F8 69 06 01 07         304     .byte 0xF8,IDX.XOR,IDX.FN_R_IDX,IDX.A,IDX.X 
      0005FE F9 01 06 01 07         305     .byte 0xF9,IDX.ADC,IDX.FN_R_IDX,IDX.A,IDX.X 
      000603 FA 45 06 01 07         306     .byte 0xFA,IDX.OR,IDX.FN_R_IDX,IDX.A,IDX.X 
      000608 FB 02 06 01 07         307     .byte 0xFB,IDX.ADD,IDX.FN_R_IDX,IDX.A,IDX.X 
      00060D FC 22 06 07 00         308     .byte 0xFC,IDX.JP,IDX.FN_R_IDX,IDX.X,0 
      000612 FD 0D 06 07 00         309     .byte 0xFD,IDX.CALL,IDX.FN_R_IDX,IDX.X,0 
      000617 FE 3F 06 07 07         310     .byte 0xFE,IDX.LDW,IDX.FN_R_IDX,IDX.X,IDX.X 
                                    311     ; form op (r),r 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00061C F7 3D 07 07 01         312     .byte 0xF7,IDX.LD,IDX.FN_IDX_R,IDX.X,IDX.A 
      000621 FF 3F 07 07 08         313     .byte 0xFF,IDX.LDW,IDX.FN_IDX_R,IDX.X,IDX.Y 
                                    314 
                                    315     ; form op r,#imm8 0xAn 
      000626 52 60 04 09 00         316     .byte 0x52,IDX.SUB,IDX.FN_R_IMM8,IDX.SP,0
      00062B 5B 03 04 09 00         317     .byte 0x5B,IDX.ADDW,IDX.FN_R_IMM8,IDX.SP,0
      000630 A0 60 04 01 00         318     .byte 0xa0,IDX.SUB,IDX.FN_R_IMM8,IDX.A,0
      000635 A1 13 04 01 00         319     .byte 0xa1,IDX.CP,IDX.FN_R_IMM8,IDX.A,0
      00063A A2 55 04 01 00         320     .byte 0xa2,IDX.SBC,IDX.FN_R_IMM8,IDX.A,0
      00063F A4 04 04 01 00         321     .byte 0xa4,IDX.AND,IDX.FN_R_IMM8,IDX.A,0
      000644 A5 06 04 01 00         322     .byte 0xa5,IDX.BCP,IDX.FN_R_IMM8,IDX.A,0
      000649 A6 3D 04 01 00         323     .byte 0xa6,IDX.LD,IDX.FN_R_IMM8,IDX.A,0
      00064E A8 69 04 01 00         324     .byte 0xa8,IDX.XOR,IDX.FN_R_IMM8,IDX.A,0
      000653 A9 01 04 01 00         325     .byte 0xa9,IDX.ADC,IDX.FN_R_IMM8,IDX.A,0
      000658 AA 45 04 01 00         326     .byte 0xaA,IDX.OR,IDX.FN_R_IMM8,IDX.A,0
      00065D AB 02 04 01 00         327     .byte 0xaB,IDX.ADD,IDX.FN_R_IMM8,IDX.A,0
                                    328     ; form op r,#imm16 
      000662 1C 03 05 07 00         329     .byte 0x1C,IDX.ADDW,IDX.FN_R_IMM16,IDX.X,0
      000667 1D 61 05 07 00         330     .byte 0x1D,IDX.SUBW,IDX.FN_R_IMM16,IDX.X,0
      00066C A3 16 05 07 00         331     .byte 0xa3,IDX.CPW,IDX.FN_R_IMM16,IDX.X,0
      000671 AE 3F 05 07 00         332     .byte 0xae,IDX.LDW,IDX.FN_R_IMM16,IDX.X,0 
      000676 CB 02 05 01 00         333     .byte 0xCB,IDX.ADD,IDX.FN_R_IMM16,IDX.A,0 
                                    334 
                                    335     ; form op adr8 
      00067B 30 42 14 00 00         336     .byte 0x30,IDX.NEG,IDX.FN_ADR8,0,0
      000680 33 14 14 00 00         337     .byte 0x33,IDX.CPL,IDX.FN_ADR8,0,0
      000685 34 5E 14 00 00         338     .byte 0x34,IDX.SRL,IDX.FN_ADR8,0,0
      00068A 36 51 14 00 00         339     .byte 0x36,IDX.RRC,IDX.FN_ADR8,0,0
      00068F 37 5C 14 00 00         340     .byte 0x37,IDX.SRA,IDX.FN_ADR8,0,0
      000694 38 59 14 00 00         341     .byte 0x38,IDX.SLL,IDX.FN_ADR8,0,0
      000699 39 4E 14 00 00         342     .byte 0x39,IDX.RLC,IDX.FN_ADR8,0,0
      00069E 3A 17 14 00 00         343     .byte 0x3A,IDX.DEC,IDX.FN_ADR8,0,0
      0006A3 3C 1E 14 00 00         344     .byte 0x3C,IDX.INC,IDX.FN_ADR8,0,0
      0006A8 3D 64 14 00 00         345     .byte 0x3D,IDX.TNZ,IDX.FN_ADR8,0,0
      0006AD 3E 62 14 00 00         346     .byte 0x3E,IDX.SWAP,IDX.FN_ADR8,0,0
      0006B2 3F 11 14 00 00         347     .byte 0x3F,IDX.CLR,IDX.FN_ADR8,0,0
      0006B7 AD 0F 14 00 00         348     .byte 0xAD,IDX.CALLR,IDX.FN_ADR8,0,0
                                    349     ; form op adr16 
      0006BC 32 46 0B 00 00         350     .byte 0x32,IDX.POP,IDX.FN_ADR16,0,0
      0006C1 3B 48 0B 00 00         351     .byte 0x3B,IDX.PUSH,IDX.FN_ADR16,0,0 
      0006C6 CC 22 0B 00 00         352     .byte 0xcc,IDX.JP,IDX.FN_ADR16,0,0
      0006CB CD 0D 0B 00 00         353     .byte 0xcd,IDX.CALL,IDX.FN_ADR16,0,0
                                    354     ;form op r,adr16 
      0006D0 31 1B 09 01 00         355     .byte 0x31,IDX.EXG,IDX.FN_R_ADR16,IDX.A,0
                                    356     ;form op adr24 
      0006D5 82 20 0C 00 00         357     .byte 0x82,IDX.INT,IDX.FN_ADR24,0,0
      0006DA 8D 0E 0C 00 00         358     .byte 0x8D,IDX.CALLF,IDX.FN_ADR24,0,0
      0006DF AC 23 0C 00 00         359     .byte 0xac,IDX.JPF,IDX.FN_ADR24,0,0
                                    360 
                                    361     ;form op r,adr8
      0006E4 B0 60 08 01 00         362     .byte 0xB0,IDX.SUB,IDX.FN_R_ADR8,IDX.A,0
      0006E9 B1 13 08 01 00         363     .byte 0xB1,IDX.CP,IDX.FN_R_ADR8,IDX.A,0
      0006EE B2 55 08 01 00         364     .byte 0xB2,IDX.SBC,IDX.FN_R_ADR8,IDX.A,0
      0006F3 B3 16 08 07 00         365     .byte 0xB3,IDX.CPW,IDX.FN_R_ADR8,IDX.X,0
      0006F8 B4 04 08 01 00         366     .byte 0xB4,IDX.AND,IDX.FN_R_ADR8,IDX.A,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0006FD B5 06 08 01 00         367     .byte 0xB5,IDX.BCP,IDX.FN_R_ADR8,IDX.A,0
      000702 B6 3D 08 01 00         368     .byte 0xB6,IDX.LD,IDX.FN_R_ADR8,IDX.A,0
      000707 B8 69 08 01 00         369     .byte 0xB8,IDX.XOR,IDX.FN_R_ADR8,IDX.A,0
      00070C B9 01 08 01 00         370     .byte 0xB9,IDX.ADC,IDX.FN_R_ADR8,IDX.A,0
      000711 BA 45 08 01 00         371     .byte 0xBA,IDX.OR,IDX.FN_R_ADR8,IDX.A,0
      000716 BB 02 08 01 00         372     .byte 0xBB,IDX.ADD,IDX.FN_R_ADR8,IDX.A,0
      00071B BE 3F 08 07 00         373     .byte 0xBE,IDX.LDW,IDX.FN_R_ADR8,IDX.X,0
                                    374     
                                    375     ;form op r,adr16
      000720 C0 60 09 01 00         376     .byte 0xC0,IDX.SUB,IDX.FN_R_ADR16,IDX.A,0
      000725 C1 13 09 01 00         377     .byte 0xC1,IDX.CP,IDX.FN_R_ADR16,IDX.A,0
      00072A C2 55 09 01 00         378     .byte 0xC2,IDX.SBC,IDX.FN_R_ADR16,IDX.A,0
      00072F C3 16 09 07 00         379     .byte 0xC3,IDX.CPW,IDX.FN_R_ADR16,IDX.X,0
      000734 C4 04 09 01 00         380     .byte 0xC4,IDX.AND,IDX.FN_R_ADR16,IDX.A,0
      000739 C5 06 09 01 00         381     .byte 0xC5,IDX.BCP,IDX.FN_R_ADR16,IDX.A,0
      00073E C6 3D 09 01 00         382     .byte 0xC6,IDX.LD,IDX.FN_R_ADR16,IDX.A,0
      000743 C8 69 09 01 00         383     .byte 0xC8,IDX.XOR,IDX.FN_R_ADR16,IDX.A,0
      000748 C9 01 09 01 00         384     .byte 0xc9,IDX.ADC,IDX.FN_R_ADR16,IDX.A,0
      00074D CA 45 09 01 00         385     .byte 0xCA,IDX.OR,IDX.FN_R_ADR16,IDX.A,0
      000752 CB 02 09 01 00         386     .byte 0xCB,IDX.ADD,IDX.FN_R_ADR16,IDX.A,0
      000757 CE 3F 09 07 00         387     .byte 0xCE,IDX.LDW,IDX.FN_R_ADR16,IDX.X,0
                                    388 
                                    389     ;form op r,adr24 
      00075C BC 3E 10 01 00         390     .byte 0xBC,IDX.LDF,IDX.FN_R_ADR24,IDX.A,0 
                                    391 
                                    392     ; form op #imm8 
      000761 4B 48 0A 00 00         393     .byte 0x4B,IDX.PUSH,IDX.FN_IMM8,0,0
                                    394 
                                    395     ;form op adr8,r 
      000766 B7 3D 0D 00 01         396     .byte 0xB7,IDX.LD,IDX.FN_ADR8_R,0,IDX.A
      00076B BF 3F 0D 00 07         397     .byte 0xBF,IDX.LDW,IDX.FN_ADR8_R,0,IDX.X
                                    398 
                                    399     ;form op adr16,r 
      000770 C7 3D 0E 00 01         400     .byte 0xC7,IDX.LD,IDX.FN_ADR16_R,0,IDX.A 
      000775 CF 3F 0E 00 07         401     .byte 0xCF,IDX.LDW,IDX.FN_ADR16_R,0,IDX.X 
                                    402     ;form op adr24,r 
      00077A BD 3E 0F 00 01         403     .byte 0xBD,IDX.LDF,IDX.FN_ADR24_R,0,IDX.A 
                                    404 
                                    405     ;form op adr16,#imm8
      00077F 35 40 11 00 00         406     .byte 0x35,IDX.MOV,IDX.FN_ADR16_IMM8,0,0 
                                    407     ;form op adr8,adr8 
      000784 45 40 13 00 00         408     .byte 0x45,IDX.MOV,IDX.FN_ADR8_ADR8,0,0 
                                    409     ;form op adr16,adr16 
      000789 55 40 12 00 00         410     .byte 0x55,IDX.MOV,IDX.FN_ADR16_ADR16,0,0 
                                    411 
                                    412     ;form op r,(off16,r)
      00078E D0 60 1F 01 07         413     .byte 0xD0,IDX.SUB,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      000793 D1 13 1F 01 07         414     .byte 0xD1,IDX.CP,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      000798 D2 55 1F 01 07         415     .byte 0xD2,IDX.SBC,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      00079D D3 16 1F 08 07         416     .byte 0xD3,IDX.CPW,IDX.FN_R_OFS16_IDX,IDX.Y,IDX.X 
      0007A2 D4 04 1F 01 07         417     .byte 0xD4,IDX.AND,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007A7 D5 06 1F 01 07         418     .byte 0xD5,IDX.BCP,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007AC D6 3D 1F 01 07         419     .byte 0xD6,IDX.LD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007B1 D8 69 1F 01 07         420     .byte 0xD8,IDX.XOR,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007B6 D9 01 1F 01 07         421     .byte 0xD9,IDX.ADC,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0007BB DA 45 1F 01 07         422     .byte 0xDA,IDX.OR,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007C0 DB 02 1F 01 07         423     .byte 0xDB,IDX.ADD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.X 
      0007C5 DE 3F 1F 07 07         424     .byte 0xDE,IDX.LDW,IDX.FN_R_OFS16_IDX,IDX.X,IDX.X 
                                    425     ;form op (off16,r),r 
      0007CA D7 3D 20 07 01         426     .byte 0xD7,IDX.LD,IDX.FN_OFS16_IDX_R,IDX.X,IDX.A 
                                    427 
                                    428     ; form op r,(ofs24,r) 
      0007CF AF 3E 21 01 07         429     .byte 0xAF,IDX.LDF,IDX.FN_R_OFS24_IDX,IDX.A,IDX.X 
                                    430     ; form op (ofs24,r),r 
      0007D4 A7 3E 22 07 01         431     .byte 0xA7,IDX.LDF,IDX.FN_OFS24_IDX_R,IDX.X,IDX.A 
                                    432     ;form op (ofs16,r)
      0007D9 DC 22 1E 00 07         433     .byte 0xDC,IDX.JP,IDX.FN_OFS16_IDX,0,IDX.X 
      0007DE DD 0D 1E 00 07         434     .byte 0xDD,IDX.CALL,IDX.FN_OFS16_IDX,0,IDX.X 
                                    435     ;form op (ofs8,r)
      0007E3 EC 22 01 07 00         436     .byte 0xEC,IDX.JP,IDX.FN_OFS8_IDX,IDX.X,0 
      0007E8 ED 0D 01 07 00         437     .byte 0XED,IDX.CALL,IDX.FN_OFS8_IDX,IDX.X,0  
                                    438 
      0007ED 00 00 00 00 00         439     .byte 0,0,0,0,0
                                    440 
                                    441 ; table for opcodes with 0x72 prefix 
      0007F2                        442 p72_codes:
                                    443     ;form op r,[ptr16]
      0007F2 C6 3D 16 01 00         444     .byte 0xC6,IDX.LD,IDX.FN_R_PTR16,IDX.A,0 
      0007F7 C9 01 16 01 00         445     .byte 0xC9,IDX.ADC,IDX.FN_R_PTR16,IDX.A,0 
      0007FC CB 02 16 01 00         446     .byte 0xCb,IDX.ADD,IDX.FN_R_PTR16,IDX.A,0 
                                    447     ;form op r,([ptr16],r)
      000801 D6 3D 1A 01 07         448     .byte 0xd6,IDX.LD,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000806 D9 01 1A 01 07         449     .byte 0xd9,IDX.ADC,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      00080B DB 02 1A 01 07         450     .byte 0xDB,IDX.ADD,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
                                    451 
                                    452     ;from implied
      000810 8F 67 00 00 00         453     .byte 0x8F,IDX.WFE,IDX.FN_IMPL,0,0
                                    454 
                                    455     ;form op r,[ptr16]
      000815 C0 60 16 01 00         456     .byte 0xC0,IDX.SUB,IDX.FN_R_PTR16,IDX.A,0
      00081A C1 13 16 01 00         457     .byte 0xC1,IDX.CP,IDX.FN_R_PTR16,IDX.A,0
      00081F C2 55 16 01 00         458     .byte 0xC2,IDX.SBC,IDX.FN_R_PTR16,IDX.A,0
      000824 C3 16 16 07 00         459     .byte 0xC3,IDX.CPW,IDX.FN_R_PTR16,IDX.X,0
      000829 C4 04 16 01 00         460     .byte 0xC4,IDX.AND,IDX.FN_R_PTR16,IDX.A,0
      00082E C5 06 16 01 00         461     .byte 0xC5,IDX.BCP,IDX.FN_R_PTR16,IDX.A,0
      000833 C6 3D 16 01 00         462     .byte 0xC6,IDX.LD,IDX.FN_R_PTR16,IDX.A,0
      000838 C8 69 16 01 00         463     .byte 0xC8,IDX.XOR,IDX.FN_R_PTR16,IDX.A,0
      00083D C9 01 16 01 00         464     .byte 0xc9,IDX.ADC,IDX.FN_R_PTR16,IDX.A,0
      000842 CA 45 16 01 00         465     .byte 0xCA,IDX.OR,IDX.FN_R_PTR16,IDX.A,0
      000847 CB 02 16 01 00         466     .byte 0xCB,IDX.ADD,IDX.FN_R_PTR16,IDX.A,0
      00084C CE 3F 16 07 00         467     .byte 0xCE,IDX.LDW,IDX.FN_R_PTR16,IDX.X,0
                                    468 
      000851 CE 3F 16 07 00         469     .byte 0xCE,IDX.LDW,IDX.FN_R_PTR16,IDX.X,0
                                    470 
                                    471     ; form op r,([ptr16],r)
      000856 D0 60 1A 01 07         472     .byte 0xD0,IDX.SUB,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      00085B D1 13 1A 01 07         473     .byte 0xD1,IDX.CP,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000860 D2 55 1A 01 07         474     .byte 0xD2,IDX.SBC,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000865 D3 16 1A 08 07         475     .byte 0xD3,IDX.CPW,IDX.FN_R_PTR16_IDX,IDX.Y,IDX.X 
      00086A D4 04 1A 01 07         476     .byte 0xD4,IDX.AND,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00086F D5 06 1A 01 07         477     .byte 0xD5,IDX.BCP,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000874 D6 3D 1A 01 07         478     .byte 0xD6,IDX.LD,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000879 D8 69 1A 01 07         479     .byte 0xD8,IDX.XOR,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      00087E D9 01 1A 01 07         480     .byte 0xD9,IDX.ADC,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000883 DA 45 1A 01 07         481     .byte 0xDA,IDX.OR,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      000888 DB 02 1A 01 07         482     .byte 0xDB,IDX.ADD,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X 
      00088D DE 3F 1A 07 07         483     .byte 0xDE,IDX.LDW,IDX.FN_R_PTR16_IDX,IDX.X,IDX.X 
                                    484 
                                    485     ; form op r,(ofs8,r)
      000892 F0 61 03 07 09         486     .byte 0xF0,IDX.SUBW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.SP
      000897 F2 61 03 08 09         487     .byte 0xF2,IDX.SUBW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.SP
      00089C F9 03 03 08 09         488     .byte 0xF9,IDX.ADDW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.SP
      0008A1 FB 03 03 07 09         489     .byte 0xFB,IDX.ADDW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.SP
                                    490     ; form op [ptr16],r 
      0008A6 C7 3D 18 00 01         491     .byte 0xC7,IDX.LD,IDX.FN_PTR16_R,0,IDX.A 
      0008AB CF 3F 18 00 07         492     .byte 0xCF,IDX.LDW,IDX.FN_PTR16_R,0,IDX.X 
                                    493 
                                    494     ; form op ([ptr16],r),r 
      0008B0 D7 3D 1C 07 01         495     .byte 0xD7,IDX.LD,IDX.FN_PTR16_IDX_R,IDX.X,IDX.A 
      0008B5 DF 3F 1C 07 08         496     .byte 0xDF,IDX.LDW,IDX.FN_PTR16_IDX_R,IDX.X,IDX.Y 
                                    497     ;form op [ptr16] 0x3n 
      0008BA 30 42 23 00 00         498     .byte 0x30,IDX.NEG,IDX.FN_PTR16,0,0
      0008BF 33 14 23 00 00         499     .byte 0x33,IDX.CPL,IDX.FN_PTR16,0,0
      0008C4 34 5E 23 00 00         500     .byte 0x34,IDX.SRL,IDX.FN_PTR16,0,0
      0008C9 36 51 23 00 00         501     .byte 0x36,IDX.RRC,IDX.FN_PTR16,0,0
      0008CE 37 5C 23 00 00         502     .byte 0x37,IDX.SRA,IDX.FN_PTR16,0,0
      0008D3 38 59 23 00 00         503     .byte 0x38,IDX.SLL,IDX.FN_PTR16,0,0
      0008D8 39 4E 23 00 00         504     .byte 0x39,IDX.RLC,IDX.FN_PTR16,0,0
      0008DD 3A 17 23 00 00         505     .byte 0x3A,IDX.DEC,IDX.FN_PTR16,0,0
      0008E2 3C 1E 23 00 00         506     .byte 0x3C,IDX.INC,IDX.FN_PTR16,0,0
      0008E7 3D 64 23 00 00         507     .byte 0x3D,IDX.TNZ,IDX.FN_PTR16,0,0
      0008EC 3E 62 23 00 00         508     .byte 0x3E,IDX.SWAP,IDX.FN_PTR16,0,0
      0008F1 3F 11 23 00 00         509     .byte 0x3F,IDX.CLR,IDX.FN_PTR16,0,0
                                    510     ; form op (ofs16,r) 0x4n
      0008F6 40 42 1E 07 00         511     .byte 0x40,IDX.NEG,IDX.FN_OFS16_IDX,IDX.X,0
      0008FB 43 14 1E 07 00         512     .byte 0x43,IDX.CPL,IDX.FN_OFS16_IDX,IDX.X,0
      000900 44 5E 1E 07 00         513     .byte 0x44,IDX.SRL,IDX.FN_OFS16_IDX,IDX.X,0
      000905 46 51 1E 07 00         514     .byte 0x46,IDX.RRC,IDX.FN_OFS16_IDX,IDX.X,0
      00090A 47 5C 1E 07 00         515     .byte 0x47,IDX.SRA,IDX.FN_OFS16_IDX,IDX.X,0
      00090F 48 59 1E 07 00         516     .byte 0x48,IDX.SLL,IDX.FN_OFS16_IDX,IDX.X,0
      000914 49 4E 1E 07 00         517     .byte 0x49,IDX.RLC,IDX.FN_OFS16_IDX,IDX.X,0
      000919 4A 17 1E 07 00         518     .byte 0x4A,IDX.DEC,IDX.FN_OFS16_IDX,IDX.X,0
      00091E 4C 1E 1E 07 00         519     .byte 0x4C,IDX.INC,IDX.FN_OFS16_IDX,IDX.X,0
      000923 4D 64 1E 07 00         520     .byte 0x4D,IDX.TNZ,IDX.FN_OFS16_IDX,IDX.X,0
      000928 4E 62 1E 07 00         521     .byte 0x4E,IDX.SWAP,IDX.FN_OFS16_IDX,IDX.X,0
      00092D 4F 11 1E 07 00         522     .byte 0x4F,IDX.CLR,IDX.FN_OFS16_IDX,IDX.X,0
                                    523 
                                    524     ; form op adr16 0x5n
      000932 50 42 0B 00 00         525     .byte 0x50,IDX.NEG,IDX.FN_ADR16,0,0
      000937 53 14 0B 00 00         526     .byte 0x53,IDX.CPL,IDX.FN_ADR16,0,0
      00093C 54 5E 0B 00 00         527     .byte 0x54,IDX.SRL,IDX.FN_ADR16,0,0
      000941 56 51 0B 00 00         528     .byte 0x56,IDX.RRC,IDX.FN_ADR16,0,0
      000946 57 5C 0B 00 00         529     .byte 0x57,IDX.SRA,IDX.FN_ADR16,0,0
      00094B 58 59 0B 00 00         530     .byte 0x58,IDX.SLL,IDX.FN_ADR16,0,0
      000950 59 4E 0B 00 00         531     .byte 0x59,IDX.RLC,IDX.FN_ADR16,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000955 5A 17 0B 00 00         532     .byte 0x5A,IDX.DEC,IDX.FN_ADR16,0,0
      00095A 5C 1E 0B 00 00         533     .byte 0x5C,IDX.INC,IDX.FN_ADR16,0,0
      00095F 5D 64 0B 00 00         534     .byte 0x5D,IDX.TNZ,IDX.FN_ADR16,0,0
      000964 5E 62 0B 00 00         535     .byte 0x5E,IDX.SWAP,IDX.FN_ADR16,0,0
      000969 5F 11 0B 00 00         536     .byte 0x5F,IDX.CLR,IDX.FN_ADR16,0,0
                                    537 
                                    538     ; form op ([ptr16],x)  0x6n 
      00096E 60 42 25 07 00         539     .byte 0x60,IDX.NEG,IDX.FN_PTR16_IDX,IDX.X,0
      000973 63 14 25 07 00         540     .byte 0x63,IDX.CPL,IDX.FN_PTR16_IDX,IDX.X,0
      000978 64 5E 25 07 00         541     .byte 0x64,IDX.SRL,IDX.FN_PTR16_IDX,IDX.X,0
      00097D 66 51 25 07 00         542     .byte 0x66,IDX.RRC,IDX.FN_PTR16_IDX,IDX.X,0
      000982 67 5C 25 07 00         543     .byte 0x67,IDX.SRA,IDX.FN_PTR16_IDX,IDX.X,0
      000987 68 59 25 07 00         544     .byte 0x68,IDX.SLL,IDX.FN_PTR16_IDX,IDX.X,0
      00098C 69 4E 25 07 00         545     .byte 0x69,IDX.RLC,IDX.FN_PTR16_IDX,IDX.X,0
      000991 6A 17 25 07 00         546     .byte 0x6A,IDX.DEC,IDX.FN_PTR16_IDX,IDX.X,0
      000996 6C 1E 25 07 00         547     .byte 0x6C,IDX.INC,IDX.FN_PTR16_IDX,IDX.X,0
      00099B 6D 64 25 07 00         548     .byte 0x6D,IDX.TNZ,IDX.FN_PTR16_IDX,IDX.X,0
      0009A0 6E 62 25 07 00         549     .byte 0x6E,IDX.SWAP,IDX.FN_PTR16_IDX,IDX.X,0
      0009A5 6F 11 25 07 00         550     .byte 0x6F,IDX.CLR,IDX.FN_PTR16_IDX,IDX.X,0
                                    551     ; form op r,#imm16 
      0009AA A2 61 05 08 00         552     .byte 0xA2,IDX.SUBW,IDX.FN_R_IMM16,IDX.Y,0
      0009AF A9 03 05 08 00         553     .byte 0xA9,IDX.ADDW,IDX.FN_R_IMM16,IDX.Y,0 
                                    554     ; form op r,adr16 
      0009B4 B0 61 09 07 00         555     .byte 0xB0,IDX.SUBW,IDX.FN_R_ADR16,IDX.X,0
      0009B9 B2 61 09 08 00         556     .byte 0xB2,IDX.SUBW,IDX.FN_R_ADR16,IDX.Y,0
      0009BE B9 03 09 08 00         557     .byte 0xB9,IDX.ADDW,IDX.FN_R_ADR16,IDX.Y,0
      0009C3 BB 03 09 07 00         558     .byte 0xBB,IDX.ADDW,IDX.FN_R_ADR16,IDX.X,0
                                    559     ; form op r,(ofs8,r)
      0009C8 F9 03 03 08 09         560     .byte 0xF9,IDX.ADDW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.SP 
      0009CD FB 03 03 07 09         561     .byte 0xFB,IDX.ADDW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.SP 
                                    562     ; form op [ptr16]
      0009D2 CC 22 23 00 00         563     .byte 0xCC,IDX.JP,IDX.FN_PTR16,0,0 
                                    564 
      0009D7 00 00 00 00 00         565     .byte 0,0,0,0,0
                                    566 
                                    567 ; table for opcodes with 0x90 prefix 
      0009DC                        568 p90_codes:
                                    569     ; form op (ofs8,r)
      0009DC 60 42 01 08 00         570     .byte 0x60,IDX.NEG,IDX.FN_OFS8_IDX,IDX.Y,0 
      0009E1 63 14 01 08 00         571     .byte 0x63,IDX.CPL,IDX.FN_OFS8_IDX,IDX.Y,0
      0009E6 64 5E 01 08 00         572     .byte 0x64,IDX.SRL,IDX.FN_OFS8_IDX,IDX.Y,0
      0009EB 66 51 01 08 00         573     .byte 0x66,IDX.RRC,IDX.FN_OFS8_IDX,IDX.Y,0
      0009F0 67 5C 01 08 00         574     .byte 0x67,IDX.SRA,IDX.FN_OFS8_IDX,IDX.Y,0
      0009F5 68 59 01 08 00         575     .byte 0x68,IDX.SLL,IDX.FN_OFS8_IDX,IDX.Y,0
      0009FA 69 4E 01 08 00         576     .byte 0x69,IDX.RLC,IDX.FN_OFS8_IDX,IDX.Y,0
      0009FF 6A 17 01 08 00         577     .byte 0x6A,IDX.DEC,IDX.FN_OFS8_IDX,IDX.Y,0
      000A04 6C 1E 01 08 00         578     .byte 0x6C,IDX.INC,IDX.FN_OFS8_IDX,IDX.Y,0
      000A09 6D 64 01 08 00         579     .byte 0x6D,IDX.TNZ,IDX.FN_OFS8_IDX,IDX.Y,0
      000A0E 6E 62 01 08 00         580     .byte 0x6E,IDX.SWAP,IDX.FN_OFS8_IDX,IDX.Y,0
      000A13 6F 11 01 08 00         581     .byte 0x6F,IDX.CLR,IDX.FN_OFS8_IDX,IDX.Y,0
      000A18 EC 22 01 08 00         582     .byte 0xEC,IDX.JP,IDX.FN_OFS8_IDX,IDX.Y,0
      000A1D ED 0D 01 08 00         583     .byte 0xED,IDX.CALL,IDX.FN_OFS8_IDX,IDX.Y,0
                                    584    ; form op r,(osf8,r)
      000A22 E0 60 03 01 08         585     .byte 0xE0,IDX.SUB,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A27 E1 13 03 01 08         586     .byte 0xE1,IDX.CP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000A2C E2 55 03 01 08         587     .byte 0xE2,IDX.SBC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A31 E3 16 03 07 08         588     .byte 0xE3,IDX.CPW,IDX.FN_R_OFS8_IDX,IDX.X,IDX.Y
      000A36 E4 04 03 01 08         589     .byte 0xE4,IDX.AND,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A3B E5 06 03 01 08         590     .byte 0xE5,IDX.BCP,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A40 E6 3D 03 01 08         591     .byte 0xE6,IDX.LD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A45 E8 69 03 01 08         592     .byte 0xE8,IDX.XOR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A4A E9 01 03 01 08         593     .byte 0xE9,IDX.ADC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A4F EA 45 03 01 08         594     .byte 0xEA,IDX.OR,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A54 EB 02 03 01 08         595     .byte 0xEB,IDX.ADD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000A59 EE 3F 03 08 08         596     .byte 0xEE,IDX.LDW,IDX.FN_R_OFS8_IDX,IDX.Y,IDX.Y
                                    597     ;form op r,(ofs16,r)
      000A5E D6 3D 1F 01 08         598     .byte 0xD6,IDX.LD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y  
      000A63 DB 02 1F 01 08         599     .byte 0xDB,IDX.ADD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y  
                                    600     
                                    601     ; opcode with implied arguments 
      000A68 01 53 00 08 00         602     .byte 0x01,IDX.RRWA,IDX.FN_IMPL,IDX.Y,0
      000A6D 02 50 00 08 00         603     .byte 0x02,IDX.RLWA,IDX.FN_IMPL,IDX.Y,0
      000A72 40 42 00 01 00         604     .byte 0x40,IDX.NEG,IDX.FN_IMPL,IDX.A,0
      000A77 42 41 00 08 01         605     .byte 0x42,IDX.MUL,IDX.FN_IMPL,IDX.Y,IDX.A 
      000A7C 43 14 00 01 00         606     .byte 0x43,IDX.CPL,IDX.FN_IMPL,IDX.A,0
      000A81 44 5E 00 01 00         607     .byte 0x44,IDX.SRL,IDX.FN_IMPL,IDX.A,0
      000A86 46 51 00 01 00         608     .byte 0x46,IDX.RRC,IDX.FN_IMPL,IDX.A,0
      000A8B 47 5C 00 01 00         609     .byte 0x47,IDX.SRA,IDX.FN_IMPL,IDX.A,0
      000A90 48 59 00 01 00         610     .byte 0x48,IDX.SLL,IDX.FN_IMPL,IDX.A,0
      000A95 49 4E 00 01 00         611     .byte 0x49,IDX.RLC,IDX.FN_IMPL,IDX.A,0
      000A9A 4A 17 00 01 00         612     .byte 0x4A,IDX.DEC,IDX.FN_IMPL,IDX.A,0
      000A9F 4C 1E 00 01 00         613     .byte 0x4C,IDX.INC,IDX.FN_IMPL,IDX.A,0
      000AA4 4D 64 00 01 00         614     .byte 0x4D,IDX.TNZ,IDX.FN_IMPL,IDX.A,0
      000AA9 4E 62 00 01 00         615     .byte 0x4E,IDX.SWAP,IDX.FN_IMPL,IDX.A,0
      000AAE 4F 11 00 01 00         616     .byte 0x4F,IDX.CLR,IDX.FN_IMPL,IDX.A,0
      000AB3 50 43 00 08 00         617     .byte 0x50,IDX.NEGW,IDX.FN_IMPL,IDX.Y,0 
      000AB8 53 15 00 08 00         618     .byte 0x53,IDX.CPLW,IDX.FN_IMPL,IDX.Y,0
      000ABD 54 5F 00 08 00         619     .byte 0x54,IDX.SRLW,IDX.FN_IMPL,IDX.Y,0
      000AC2 56 52 00 08 00         620     .byte 0x56,IDX.RRCW,IDX.FN_IMPL,IDX.Y,0
      000AC7 57 5D 00 08 00         621     .byte 0x57,IDX.SRAW,IDX.FN_IMPL,IDX.Y,0
      000ACC 58 5B 00 08 00         622     .byte 0x58,IDX.SLLW,IDX.FN_IMPL,IDX.Y,0
      000AD1 59 4F 00 08 00         623     .byte 0x59,IDX.RLCW,IDX.FN_IMPL,IDX.Y,0
      000AD6 5A 18 00 08 00         624     .byte 0x5A,IDX.DECW,IDX.FN_IMPL,IDX.Y,0
      000ADB 5C 1F 00 08 00         625     .byte 0x5C,IDX.INCW,IDX.FN_IMPL,IDX.Y,0
      000AE0 5D 65 00 07 00         626     .byte 0x5D,IDX.TNZW,IDX.FN_IMPL,IDX.X,0
      000AE5 5E 63 00 08 00         627     .byte 0x5E,IDX.SWAPW,IDX.FN_IMPL,IDX.Y,0
      000AEA 5F 12 00 08 00         628     .byte 0x5F,IDX.CLRW,IDX.FN_IMPL,IDX.Y,0  
      000AEF 62 19 00 08 01         629     .byte 0x62,IDX.DIV,IDX.FN_IMPL,IDX.Y,IDX.A 
      000AF4 85 47 00 08 00         630     .byte 0x85,IDX.POPW,IDX.FN_IMPL,IDX.Y,0
      000AF9 89 49 00 08 00         631     .byte 0x89,IDX.PUSHW,IDX.FN_IMPL,IDX.Y,0
      000AFE 93 3F 00 08 07         632     .byte 0x93,IDX.LDW,IDX.FN_IMPL,IDX.Y,IDX.X 
      000B03 94 3F 00 09 08         633     .byte 0x94,IDX.LDW,IDX.FN_IMPL,IDX.SP,IDX.Y 
      000B08 95 3D 00 04 01         634     .byte 0x95,IDX.LD,IDX.FN_IMPL,IDX.YH,IDX.A 
      000B0D 96 3F 00 08 09         635     .byte 0x96,IDX.LDW,IDX.FN_IMPL,IDX.Y,IDX.SP 
      000B12 97 3D 00 06 01         636     .byte 0x97,IDX.LD,IDX.FN_IMPL,IDX.YL,IDX.A 
      000B17 9E 3D 00 01 04         637     .byte 0x9E,IDX.LD,IDX.FN_IMPL,IDX.A,IDX.YH
      000B1C 9F 3D 00 01 06         638     .byte 0x9F,IDX.LD,IDX.FN_IMPL,IDX.A,IDX.YL
      000B21 FB 02 00 01 08         639     .byte 0xFB,IDX.ADD,IDX.FN_IMPL,IDX.A,IDX.Y
                                    640     ; form  op r,(r) | op (r)
      000B26 70 42 06 08 00         641     .byte 0x70,IDX.NEG,IDX.FN_R_IDX,IDX.Y,0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000B2B 73 14 06 08 00         642     .byte 0x73,IDX.CPL,IDX.FN_R_IDX,IDX.Y,0 
      000B30 74 5E 06 08 00         643     .byte 0x74,IDX.SRL,IDX.FN_R_IDX,IDX.Y,0 
      000B35 76 51 06 08 00         644     .byte 0x76,IDX.RRC,IDX.FN_R_IDX,IDX.Y,0 
      000B3A 77 5C 06 08 00         645     .byte 0x77,IDX.SRA,IDX.FN_R_IDX,IDX.Y,0 
      000B3F 78 59 06 08 00         646     .byte 0x78,IDX.SLL,IDX.FN_R_IDX,IDX.Y,0 
      000B44 79 4E 06 08 00         647     .byte 0x79,IDX.RLC,IDX.FN_R_IDX,IDX.Y,0 
      000B49 7A 17 06 08 00         648     .byte 0x7A,IDX.DEC,IDX.FN_R_IDX,IDX.Y,0 
      000B4E 7C 1E 06 08 00         649     .byte 0x7C,IDX.INC,IDX.FN_R_IDX,IDX.Y,0 
      000B53 7D 64 06 08 00         650     .byte 0x7D,IDX.TNZ,IDX.FN_R_IDX,IDX.Y,0 
      000B58 7E 62 06 08 00         651     .byte 0x7E,IDX.SWAP,IDX.FN_R_IDX,IDX.Y,0 
      000B5D 7F 11 06 08 00         652     .byte 0x7F,IDX.CLR,IDX.FN_R_IDX,IDX.Y,0 
      000B62 F0 60 06 01 08         653     .byte 0xF0,IDX.SUB,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B67 F1 13 06 01 08         654     .byte 0xF1,IDX.CP,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B6C F2 55 06 01 08         655     .byte 0xF2,IDX.SBC,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B71 F3 16 06 07 08         656     .byte 0xF3,IDX.CPW,IDX.FN_R_IDX,IDX.X,IDX.Y 
      000B76 F4 04 06 01 08         657     .byte 0xF4,IDX.AND,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B7B F6 3D 06 01 08         658     .byte 0xF6,IDX.LD,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B80 F8 69 06 01 08         659     .byte 0xF8,IDX.XOR,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B85 F9 01 06 01 08         660     .byte 0xF9,IDX.ADC,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B8A FA 45 06 01 08         661     .byte 0xFA,IDX.OR,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B8F FB 02 06 01 08         662     .byte 0xFB,IDX.ADD,IDX.FN_R_IDX,IDX.A,IDX.Y 
      000B94 FC 22 06 08 00         663     .byte 0xFC,IDX.JP,IDX.FN_R_IDX,IDX.Y,0 
      000B99 FD 0D 06 08 00         664     .byte 0xFD,IDX.CALL,IDX.FN_R_IDX,IDX.Y,0 
      000B9E FE 3F 06 08 08         665     .byte 0xFE,IDX.LDW,IDX.FN_R_IDX,IDX.Y,IDX.Y 
                                    666     
                                    667     ; form op (r),r 
      000BA3 F7 3D 07 08 01         668     .byte 0xF7,IDX.LD,IDX.FN_IDX_R,IDX.Y,IDX.A 
      000BA8 FF 3F 07 08 07         669     .byte 0xFF,IDX.LDW,IDX.FN_IDX_R,IDX.Y,IDX.X   
                                    670 
                                    671     ; form op r,#imm16 
      000BAD AE 3F 05 08 08         672     .byte 0xae,IDX.LDW,IDX.FN_R_IMM16,IDX.Y,IDX.Y 
                                    673     ; from op r,(ofs8,r)
      000BB2 E9 01 03 01 08         674     .byte 0xE9,IDX.ADC,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
      000BB7 EB 02 03 01 08         675     .byte 0xEB,IDX.ADD,IDX.FN_R_OFS8_IDX,IDX.A,IDX.Y
                                    676     
                                    677     ; form op adr8,r 
      000BBC BF 3F 0D 00 08         678     .byte 0xBF,IDX.LDW,IDX.FN_ADR8_R,0,IDX.Y 
                                    679     ; form op r,adr8 
      000BC1 BE 3F 08 08 00         680     .byte 0xBE,IDX.LDW,IDX.FN_R_ADR8,IDX.Y,0
                                    681     ; form op r,adr16 
      000BC6 CE 3F 09 08 00         682     .byte 0xCE,IDX.LDW,IDX.FN_R_ADR16,IDX.Y,0
                                    683     ;form op (ofs8,r),r 
      000BCB E7 3D 1D 08 01         684     .byte 0xE7,IDX.LD,IDX.FN_OFS8_IDX_R,IDX.Y,IDX.A 
      000BD0 EF 3F 1D 08 07         685     .byte 0xEF,IDX.LDW,IDX.FN_OFS8_IDX_R,IDX.Y,IDX.X 
                                    686     ;form op (off16,r),r 
      000BD5 D7 3D 20 08 01         687     .byte 0xD7,IDX.LD,IDX.FN_OFS16_IDX_R,IDX.Y,IDX.A 
      000BDA DF 3F 20 08 07         688     .byte 0xDF,IDX.LDW,IDX.FN_OFS16_IDX_R,IDX.Y,IDX.X 
                                    689     ; form op r,(ofs16,r)
      000BDF D0 60 1F 01 08         690     .byte 0xD0,IDX.SUB,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000BE4 D1 13 1F 01 08         691     .byte 0xD1,IDX.CP,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000BE9 D2 55 1F 01 08         692     .byte 0xD2,IDX.SBC,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000BEE D3 16 1F 07 08         693     .byte 0xD3,IDX.CPW,IDX.FN_R_OFS16_IDX,IDX.X,IDX.Y 
      000BF3 D4 04 1F 01 08         694     .byte 0xD4,IDX.AND,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000BF8 D5 06 1F 01 08         695     .byte 0xD5,IDX.BCP,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000BFD D6 3D 1F 01 08         696     .byte 0xD6,IDX.LD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000C02 D8 69 1F 01 08         697     .byte 0xD8,IDX.XOR,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000C07 D9 01 1F 01 08         698     .byte 0xD9,IDX.ADC,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000C0C DA 45 1F 01 08         699     .byte 0xDA,IDX.OR,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000C11 DB 02 1F 01 08         700     .byte 0xDB,IDX.ADD,IDX.FN_R_OFS16_IDX,IDX.A,IDX.Y 
      000C16 DE 3F 1F 08 08         701     .byte 0xDE,IDX.LDW,IDX.FN_R_OFS16_IDX,IDX.Y,IDX.Y 
                                    702     ;form op (ofs16,r)
      000C1B DC 22 1E 08 00         703     .byte 0xDC,IDX.JP,IDX.FN_OFS16_IDX,IDX.Y,0 
      000C20 DD 0D 1E 08 00         704     .byte 0xDD,IDX.CALL,IDX.FN_OFS16_IDX,IDX.Y,0 
                                    705 
                                    706     ; form op r,(ofs24,r) 
      000C25 AF 3E 21 01 08         707     .byte 0xAF,IDX.LDF,IDX.FN_R_OFS24_IDX,IDX.A,IDX.Y  
                                    708     ; form op (ofs24,r),r 
      000C2A A7 3E 22 08 01         709     .byte 0xA7,IDX.LDF,IDX.FN_OFS24_IDX_R,IDX.Y,IDX.A 
                                    710     ;form op adr16,r 
      000C2F CF 3F 0E 00 08         711     .byte 0xCF,IDX.LDW,IDX.FN_ADR16_R,0,IDX.Y 
      000C34 00 00 00 00 00         712     .byte 0,0,0,0,0
                                    713 
                                    714 ; table for opcodes with 0x91 prefix 
      000C39                        715 p91_codes:
                                    716     ;form op r,([ptr8],r)
      000C39 D0 60 19 01 08         717     .byte 0xD0,IDX.SUB,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C3E D1 13 19 01 08         718     .byte 0xD1,IDX.CP,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C43 D2 55 19 01 08         719     .byte 0xD2,IDX.SBC,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C48 D3 16 19 07 08         720     .byte 0xD3,IDX.CPW,IDX.FN_R_PTR8_IDX,IDX.X,IDX.Y 
      000C4D D4 04 19 01 08         721     .byte 0xD4,IDX.AND,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C52 D5 06 19 01 08         722     .byte 0xD5,IDX.BCP,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C57 D6 3D 19 01 08         723     .byte 0xD6,IDX.LD,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y  
      000C5C D8 69 19 01 08         724     .byte 0xD8,IDX.XOR,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C61 D9 01 19 01 08         725     .byte 0xD9,IDX.ADC,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y
      000C66 DA 45 19 01 08         726     .byte 0xDA,IDX.OR,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C6B DB 02 19 01 08         727     .byte 0xDB,IDX.ADD,IDX.FN_R_PTR8_IDX,IDX.A,IDX.Y 
      000C70 DE 3F 19 08 08         728     .byte 0xDE,IDX.LDW,IDX.FN_R_PTR8_IDX,IDX.Y,IDX.Y 
                                    729     ;form op ([ptr8,r]),r
      000C75 D7 3D 1B 08 01         730     .byte 0xd7,IDX.LD,IDX.FN_PTR8_IDX_R,IDX.Y,IDX.A 
                                    731     ; form op r,([ptr16],r) 
      000C7A AF 3E 1A 01 08         732     .byte 0xAF,IDX.LDF,IDX.FN_R_PTR16_IDX,IDX.A,IDX.Y 
                                    733     ; form op ([ptr16],r),r 
      000C7F A7 3E 1C 08 01         734     .byte 0xA7,IDX.LDF,IDX.FN_PTR16_IDX_R,IDX.Y,IDX.A 
                                    735     ;form op r,[ptr8]
      000C84 CE 3F 15 08 00         736     .byte 0xCE,IDX.LDW,IDX.FN_R_PTR8,IDX.Y,0 
                                    737     ;form op [ptr8],r 
      000C89 CF 3F 17 00 08         738     .byte 0xCF,IDX.LDW,IDX.FN_PTR8_R,0,IDX.Y 
                                    739     ;form op ([ptr8,r]),r 
      000C8E DF 3F 1B 08 07         740     .byte 0XDF,IDX.LDW,IDX.FN_PTR8_IDX_R,IDX.Y,IDX.X 
                                    741     ;form op ([ptr8],r)
      000C93 60 42 26 08 00         742     .byte 0x60,IDX.NEG,IDX.FN_PTR8_IDX,IDX.Y,0 
      000C98 63 14 26 08 00         743     .byte 0x63,IDX.CPL,IDX.FN_PTR8_IDX,IDX.Y,0
      000C9D 64 5E 26 08 00         744     .byte 0x64,IDX.SRL,IDX.FN_PTR8_IDX,IDX.Y,0
      000CA2 66 51 26 08 00         745     .byte 0x66,IDX.RRC,IDX.FN_PTR8_IDX,IDX.Y,0
      000CA7 67 5C 26 08 00         746     .byte 0x67,IDX.SRA,IDX.FN_PTR8_IDX,IDX.Y,0
      000CAC 68 59 26 08 00         747     .byte 0x68,IDX.SLL,IDX.FN_PTR8_IDX,IDX.Y,0
      000CB1 69 4E 26 08 00         748     .byte 0x69,IDX.RLC,IDX.FN_PTR8_IDX,IDX.Y,0
      000CB6 6A 17 26 08 00         749     .byte 0x6A,IDX.DEC,IDX.FN_PTR8_IDX,IDX.Y,0
      000CBB 6C 1E 26 08 00         750     .byte 0x6C,IDX.INC,IDX.FN_PTR8_IDX,IDX.Y,0
      000CC0 6D 64 26 08 00         751     .byte 0x6D,IDX.TNZ,IDX.FN_PTR8_IDX,IDX.Y,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000CC5 6E 62 26 08 00         752     .byte 0x6E,IDX.SWAP,IDX.FN_PTR8_IDX,IDX.Y,0
      000CCA 6F 11 26 08 00         753     .byte 0x6F,IDX.CLR,IDX.FN_PTR8_IDX,IDX.Y,0
      000CCF DC 22 26 08 00         754     .byte 0xDC,IDX.JP,IDX.FN_PTR8_IDX,IDX.Y,0
      000CD4 DD 0D 26 08 00         755     .byte 0xDD,IDX.CALL,IDX.FN_PTR8_IDX,IDX.Y,0
                                    756 
      000CD9 00 00 00 00 00         757     .byte 0,0,0,0,0
                                    758 
                                    759 ; table of indexes for opcodes with 0x92 prefix 
      000CDE                        760 p92_codes:
                                    761     ;form op r,[ptr8]
      000CDE C0 60 15 01 00         762     .byte 0xC0,IDX.SUB,IDX.FN_R_PTR8,IDX.A,0
      000CE3 C1 13 15 01 00         763     .byte 0xC1,IDX.CP,IDX.FN_R_PTR8,IDX.A,0
      000CE8 C2 55 15 01 00         764     .byte 0xC2,IDX.SBC,IDX.FN_R_PTR8,IDX.A,0
      000CED C3 16 15 07 00         765     .byte 0xC3,IDX.CPW,IDX.FN_R_PTR8,IDX.X,0
      000CF2 C4 04 15 01 00         766     .byte 0xC4,IDX.AND,IDX.FN_R_PTR8,IDX.A,0
      000CF7 C5 06 15 01 00         767     .byte 0xC5,IDX.BCP,IDX.FN_R_PTR8,IDX.A,0
      000CFC C6 3D 15 01 00         768     .byte 0xC6,IDX.LD,IDX.FN_R_PTR8,IDX.A,0
      000D01 C8 69 15 01 00         769     .byte 0xC8,IDX.XOR,IDX.FN_R_PTR8,IDX.A,0
      000D06 C9 01 15 01 00         770     .byte 0xc9,IDX.ADC,IDX.FN_R_PTR8,IDX.A,0
      000D0B CA 45 15 01 00         771     .byte 0xCA,IDX.OR,IDX.FN_R_PTR8,IDX.A,0
      000D10 CB 02 15 01 00         772     .byte 0xCB,IDX.ADD,IDX.FN_R_PTR8,IDX.A,0
      000D15 CE 3F 15 01 00         773     .byte 0xCE,IDX.LDW,IDX.FN_R_PTR8,IDX.A,0
                                    774 
                                    775     ;form op r,([ptr8,],r)
      000D1A D0 60 19 01 07         776     .byte 0xD0,IDX.SUB,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D1F D1 13 19 01 07         777     .byte 0xD1,IDX.CP,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D24 D2 55 19 01 07         778     .byte 0xD2,IDX.SBC,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D29 D3 16 19 08 07         779     .byte 0xD3,IDX.CPW,IDX.FN_R_PTR8_IDX,IDX.Y,IDX.X 
      000D2E D4 04 19 01 07         780     .byte 0xD4,IDX.AND,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D33 D5 06 19 01 07         781     .byte 0xD5,IDX.BCP,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D38 D6 3D 19 01 07         782     .byte 0xD6,IDX.LD,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D3D D8 69 19 01 07         783     .byte 0xD8,IDX.XOR,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D42 D9 01 19 01 07         784     .byte 0xD9,IDX.ADC,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D47 DA 45 19 01 07         785     .byte 0xDA,IDX.OR,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D4C DB 02 19 01 07         786     .byte 0xDB,IDX.ADD,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
      000D51 DE 3F 19 01 07         787     .byte 0xDE,IDX.LDW,IDX.FN_R_PTR8_IDX,IDX.A,IDX.X 
                                    788 
                                    789     ;form op [ptr8],r 
      000D56 C7 3D 17 00 01         790     .byte 0xC7,IDX.LD,IDX.FN_PTR8_R,0,IDX.A 
      000D5B CF 3F 17 00 07         791     .byte 0xCF,IDX.LDW,IDX.FN_PTR8_R,0,IDX.X 
                                    792     ;form op ([ptr8],r),r 
      000D60 D7 3D 1B 07 01         793     .byte 0xD7,IDX.LD,IDX.FN_PTR8_IDX_R,IDX.X,IDX.A 
      000D65 DF 3F 1B 07 08         794     .byte 0xDF,IDX.LDW,IDX.FN_PTR8_IDX_R,IDX.X,IDX.Y 
                                    795     ; form op r,([ptr16],r) 
      000D6A AF 3E 1A 01 07         796     .byte 0xAF,IDX.LDF,IDX.FN_R_PTR16_IDX,IDX.A,IDX.X  
                                    797     ; form op ([ptr16],r),r 
      000D6F A7 3E 1C 07 01         798     .byte 0xA7,IDX.LDF,IDX.FN_PTR16_IDX_R,IDX.X,IDX.A 
                                    799     ; form op r,[ptr16]
      000D74 BC 3E 16 01 00         800     .byte 0xBC,IDX.LDF,IDX.FN_R_PTR16,IDX.A,0
                                    801     ; form op [ptr16],r 
      000D79 BD 3E 18 00 01         802     .byte 0xBD,IDX.LDF,IDX.FN_PTR16_R,0,IDX.A  
                                    803     ; form op [ptr16] 
      000D7E 8D 0E 23 00 00         804     .byte 0x8D,IDX.CALLF,IDX.FN_PTR16,0,0
      000D83 AC 23 23 00 00         805     .byte 0xAC,IDX.JPF,IDX.FN_PTR16,0,0 
                                    806     ; form op [ptr8] 0x3n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000D88 30 42 24 00 00         807     .byte 0x30,IDX.NEG,IDX.FN_PTR8,0,0
      000D8D 33 14 24 00 00         808     .byte 0x33,IDX.CPL,IDX.FN_PTR8,0,0
      000D92 34 5E 24 00 00         809     .byte 0x34,IDX.SRL,IDX.FN_PTR8,0,0
      000D97 36 51 24 00 00         810     .byte 0x36,IDX.RRC,IDX.FN_PTR8,0,0
      000D9C 37 5C 24 00 00         811     .byte 0x37,IDX.SRA,IDX.FN_PTR8,0,0
      000DA1 38 59 24 00 00         812     .byte 0x38,IDX.SLL,IDX.FN_PTR8,0,0
      000DA6 39 4E 24 00 00         813     .byte 0x39,IDX.RLC,IDX.FN_PTR8,0,0
      000DAB 3A 17 24 00 00         814     .byte 0x3A,IDX.DEC,IDX.FN_PTR8,0,0
      000DB0 3C 1E 24 00 00         815     .byte 0x3C,IDX.INC,IDX.FN_PTR8,0,0
      000DB5 3D 64 24 00 00         816     .byte 0x3D,IDX.TNZ,IDX.FN_PTR8,0,0
      000DBA 3E 62 24 00 00         817     .byte 0x3E,IDX.SWAP,IDX.FN_PTR8,0,0
      000DBF 3F 11 24 00 00         818     .byte 0x3F,IDX.CLR,IDX.FN_PTR8,0,0
                                    819     ; form op ([ptr8],r) 0x6n 0xDC 0xDD
      000DC4 60 42 26 07 00         820     .byte 0x60,IDX.NEG,IDX.FN_PTR8_IDX,IDX.X,0 
      000DC9 63 14 26 07 00         821     .byte 0x63,IDX.CPL,IDX.FN_PTR8_IDX,IDX.X,0
      000DCE 64 5E 26 07 00         822     .byte 0x64,IDX.SRL,IDX.FN_PTR8_IDX,IDX.X,0
      000DD3 66 51 26 07 00         823     .byte 0x66,IDX.RRC,IDX.FN_PTR8_IDX,IDX.X,0
      000DD8 67 5C 26 07 00         824     .byte 0x67,IDX.SRA,IDX.FN_PTR8_IDX,IDX.X,0
      000DDD 68 59 26 07 00         825     .byte 0x68,IDX.SLL,IDX.FN_PTR8_IDX,IDX.X,0
      000DE2 69 4E 26 07 00         826     .byte 0x69,IDX.RLC,IDX.FN_PTR8_IDX,IDX.X,0
      000DE7 6A 17 26 07 00         827     .byte 0x6A,IDX.DEC,IDX.FN_PTR8_IDX,IDX.X,0
      000DEC 6C 1E 26 07 00         828     .byte 0x6C,IDX.INC,IDX.FN_PTR8_IDX,IDX.X,0
      000DF1 6D 64 26 07 00         829     .byte 0x6D,IDX.TNZ,IDX.FN_PTR8_IDX,IDX.X,0
      000DF6 6E 62 26 07 00         830     .byte 0x6E,IDX.SWAP,IDX.FN_PTR8_IDX,IDX.X,0
      000DFB 6F 11 26 07 00         831     .byte 0x6F,IDX.CLR,IDX.FN_PTR8_IDX,IDX.X,0
      000E00 ED 0D 26 07 00         832     .byte 0xED,IDX.CALL,IDX.FN_PTR8_IDX,IDX.X,0
      000E05 DC 22 26 07 00         833     .byte 0xDC,IDX.JP,IDX.FN_PTR8_IDX,IDX.X,0
      000E0A DD 0D 26 07 00         834     .byte 0xDD,IDX.CALL,IDX.FN_PTR8_IDX,IDX.X,0
                                    835 
      000E0F 00 00 00 00 00         836     .byte 0,0,0,0,0
                                    837 
                                    838 ;*****************************************************
                                    839 
                                    840 ;-----------------------------------
                                    841 ; desassembler main function
                                    842 ;-----------------------------------
                                    843 ;local constants
                           000018   844     PAGE_CNT = 24 ; instructions per page  
                                    845 ;local variables 
                           000001   846     INST_CNTR= 1 ;
                           000001   847     LOCAL_SIZE = 1
                                    848 
      000E14                        849 dasm::
      000E14 89               [ 2]  850     pushw X
      000E15 90 89            [ 2]  851     pushw y 
      000E17 52 01            [ 2]  852     sub sp,#LOCAL_SIZE 
      000E19 CD 00 00         [ 4]  853     call number 
      000E1C C6 00 00         [ 1]  854     ld a,pad
      000E1F 27 48            [ 1]  855     jreq dasm_miss_arg
      000E21 AE 00 00         [ 2]  856     ldw x, #acc24
      000E24 90 AE 00 00      [ 2]  857     ldw y, #farptr
      000E28 CD 00 00         [ 4]  858     call copy_var24
      000E2B                        859 page_loop:
      000E2B A6 18            [ 1]  860     ld a,#PAGE_CNT 
      000E2D 6B 01            [ 1]  861     ld (INST_CNTR,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000E2F                        862 instr_loop:
                                    863 ; print address
      000E2F A6 0D            [ 1]  864     ld a,#CR 
      000E31 CD 00 00         [ 4]  865     call uart_tx
      000E34 AE 00 00         [ 2]  866     ldw x, #farptr
      000E37 90 AE 00 00      [ 2]  867     ldw y, #acc24
      000E3B CD 00 00         [ 4]  868     call copy_var24 
      000E3E A6 06            [ 1]  869     ld a,#6
      000E40 97               [ 1]  870     ld xl,a 
      000E41 A6 10            [ 1]  871     ld a,#16
      000E43 CD 00 00         [ 4]  872     call print_int 
      000E46 A6 09            [ 1]  873     ld a,#TAB 
      000E48 CD 00 00         [ 4]  874     call uart_tx 
      000E4B CD 0E 72         [ 4]  875     call decode
                                    876 ; here XL = decoded byte count
      000E4E 4F               [ 1]  877     clr a 
      000E4F 72 BB 00 01      [ 2]  878     addw x,farptr+1
      000E53 C9 00 00         [ 1]  879     adc a,farptr
      000E56 C7 00 00         [ 1]  880     ld farptr,a 
      000E59 CF 00 01         [ 2]  881     ldw farptr+1,x 
      000E5C 0A 01            [ 1]  882     dec (INST_CNTR,sp)
      000E5E 26 CF            [ 1]  883     jrne instr_loop
                                    884 ; pause wait spacebar for next page or other to leave
      000E60 CD 00 00         [ 4]  885     call uart_getchar
      000E63 A1 20            [ 1]  886     cp a,#SPACE 
      000E65 27 C4            [ 1]  887     jreq page_loop
      000E67 20 03            [ 2]  888     jra dasm_exit        
      000E69                        889  dasm_miss_arg:
      000E69 CD 00 00         [ 4]  890     call error_print    
      000E6C                        891 dasm_exit: 
      000E6C 90 85            [ 2]  892     popw y 
      000E6E 85               [ 2]  893     popw x 
      000E6F 5B 01            [ 2]  894     addw sp,#LOCAL_SIZE 
      000E71 81               [ 4]  895     ret 
                                    896 
                                    897 ;------------------------------------------
                                    898 ;instruction decoder
                                    899 ; print instruction mnemonic and arguments
                                    900 ; input:
                                    901 ;   farptr  address next instruction
                                    902 ; output:
                                    903 ;   X       decoded byte count 
                                    904 ;--------------------------------------------  
                                    905 ; local variables      
                           000001   906     PREFIX = 1 ; opcode prefix 
                           000002   907     OPCODE = 2 ; operating code 
                           000002   908     LOCAL_SIZE=2 ;
      000E72                        909 decode:
      000E72 52 02            [ 2]  910     sub sp,#LOCAL_SIZE 
      000E74 5F               [ 1]  911     clrw x 
      000E75 CD 18 39         [ 4]  912     call get_int8    
      000E78 6B 02            [ 1]  913     ld (OPCODE,sp),a 
      000E7A CD 0F 48         [ 4]  914     call is_prefix 
      000E7D 6B 01            [ 1]  915     ld (PREFIX,sp),a 
      000E7F A1 00            [ 1]  916     cp a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000E81 26 18            [ 1]  917     jrne 0$
                                    918 ; no prefix     
      000E83 A6 F0            [ 1]  919     ld a,#0xf0 
      000E85 14 02            [ 1]  920     and a,(OPCODE,sp)
      000E87 A1 20            [ 1]  921     cp a,#0x20
      000E89 26 0A            [ 1]  922     jrne 10$
      000E8B 7B 02            [ 1]  923     ld a,(OPCODE,sp)
      000E8D A4 0F            [ 1]  924     and a,#0xf 
      000E8F CD 10 14         [ 4]  925     call fn_rel8 
      000E92 CC 0F 23         [ 2]  926     jp decode_exit 
      000E95                        927 10$:
      000E95 90 AE 03 51      [ 2]  928     ldw y,#codes 
      000E99 20 62            [ 2]  929     jra 6$
                                    930 ; get opcode
      000E9B CD 18 39         [ 4]  931 0$: call get_int8 
      000E9E 6B 02            [ 1]  932     ld (OPCODE,sp),a  
      000EA0 7B 01            [ 1]  933     ld a,(PREFIX,sp)
      000EA2 A1 72            [ 1]  934 1$: cp a,#0x72 
      000EA4 26 24            [ 1]  935     jrne 2$
      000EA6 7B 02            [ 1]  936     ld a,(OPCODE,sp)
      000EA8 A4 F0            [ 1]  937     and a,#0xf0 
      000EAA 26 0A            [ 1]  938     jrne 11$
      000EAC 7B 02            [ 1]  939     ld a,(OPCODE,sp)
      000EAE A4 0F            [ 1]  940     and a,#0xf 
      000EB0 CD 12 BC         [ 4]  941     call fn_adr16_b_rel
      000EB3 CC 0F 23         [ 2]  942     jp decode_exit 
      000EB6                        943 11$:
      000EB6 A1 10            [ 1]  944     cp a,#0x10  
      000EB8 26 0A            [ 1]  945     jrne 12$
      000EBA 7B 02            [ 1]  946     ld a,(OPCODE,sp)
      000EBC A4 0F            [ 1]  947     and a,#0xf 
      000EBE CD 13 13         [ 4]  948     call fn_adr16_bit
      000EC1 CC 0F 23         [ 2]  949     jp decode_exit 
      000EC4                        950 12$:    
      000EC4 90 AE 07 F2      [ 2]  951     ldw y,#p72_codes
      000EC8 20 33            [ 2]  952     jra 6$
      000ECA A1 90            [ 1]  953 2$: cp a,#0x90
      000ECC 26 21            [ 1]  954     jrne 3$
      000ECE 7B 02            [ 1]  955     ld a,(OPCODE,sp)
      000ED0 A4 F0            [ 1]  956     and a,#0xf0 
      000ED2 A1 10            [ 1]  957     cp a,#0x10 
      000ED4 26 08            [ 1]  958     jrne 21$
      000ED6 7B 02            [ 1]  959     ld a,(OPCODE,sp) 
      000ED8 CD 13 13         [ 4]  960     call fn_adr16_bit 
      000EDB CC 0F 23         [ 2]  961     jp decode_exit 
      000EDE                        962 21$: 
      000EDE A1 20            [ 1]  963     cp a,#0x20 
      000EE0 26 07            [ 1]  964     jrne 22$
      000EE2 7B 02            [ 1]  965     ld a,(OPCODE,sp)
      000EE4 CD 10 14         [ 4]  966     call fn_rel8 
      000EE7 20 3A            [ 2]  967     jra decode_exit 
      000EE9                        968 22$:
      000EE9 90 AE 09 DC      [ 2]  969     ldw y,#p90_codes
      000EED 20 0E            [ 2]  970     jra 6$
      000EEF A1 91            [ 1]  971 3$: cp a,#0x91 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000EF1 26 06            [ 1]  972     jrne 4$
      000EF3 90 AE 0C 39      [ 2]  973     ldw y,#p91_codes
      000EF7 20 04            [ 2]  974     jra 6$ 
      000EF9 90 AE 0C DE      [ 2]  975 4$: ldw y,#p92_codes 
      000EFD 7B 02            [ 1]  976 6$: ld a,(OPCODE,sp)
      000EFF AD 2A            [ 4]  977     callr search_code
      000F01 72 05 00 00 12   [ 2]  978     btjf flags,#F_FOUND,invalid_opcode
      000F06 90 89            [ 2]  979     pushw y 
      000F08 90 E6 02         [ 1]  980     ld a,(FIELD_FN,y)
      000F0B 90 AE 03 03      [ 2]  981     ldw y,#fn_index
      000F0F CD 18 D1         [ 4]  982     call ld_table_entry
      000F12 90 FD            [ 4]  983     call (y)
      000F14 90 85            [ 2]  984     popw y 
      000F16 20 0B            [ 2]  985     jra decode_exit 
      000F18                        986 invalid_opcode: 
      000F18 90 AE 0F 26      [ 2]  987     ldw y, #bad_opcode 
      000F1C 90 89            [ 2]  988     pushw y 
      000F1E CD 0F 7D         [ 4]  989     call fn_implied  
      000F21 90 85            [ 2]  990     popw y 
      000F23                        991 decode_exit:    
      000F23 5B 02            [ 2]  992     addw sp,#LOCAL_SIZE 
      000F25 81               [ 4]  993     ret
                                    994 
      000F26 00 6A 00 00 00         995 bad_opcode:  .byte 0,IDX.QM,IDX.FN_IMPL,0,0  
                                    996 
                                    997 ;---------------------------
                                    998 ; search code in table  
                                    999 ; input:
                                   1000 ;   Y       pointer to table
                                   1001 ;   A       opcode to verify
                                   1002 ; output:
                                   1003 ;   Y       pointer to entry 
                                   1004 ;   C       carry flag set if found cleared otherwise 
                                   1005 ;---------------------------
      000F2B                       1006 search_code:
      000F2B 88               [ 1] 1007     push a 
      000F2C 72 14 00 00      [ 1] 1008     bset flags,#F_FOUND 
      000F30 90 E6 01         [ 1] 1009 1$: ld a,(FIELD_MNEMO,y)
      000F33 27 0D            [ 1] 1010     jreq 8$ 
      000F35 90 E6 00         [ 1] 1011     ld a,(FIELD_OPCODE,y)
      000F38 11 01            [ 1] 1012     cp a,(1,sp)
      000F3A 27 0A            [ 1] 1013     jreq 9$
      000F3C 72 A9 00 05      [ 2] 1014     addw y,#STRUCT_SIZE
      000F40 20 EE            [ 2] 1015     jra 1$
      000F42 72 15 00 00      [ 1] 1016 8$: bres flags,#F_FOUND 
      000F46 84               [ 1] 1017 9$: pop a 
      000F47 81               [ 4] 1018     ret 
                                   1019 
                                   1020 ;-------------------------------
                                   1021 ; check if byte is a opcode prefix  
                                   1022 ; input:
                                   1023 ;   A       value to check
                                   1024 ; output:
                                   1025 ;   A       prefix or 0.
                                   1026 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                   1027 ; input:
                                   1028 ;   A       code to check
                                   1029 ; output:
                                   1030 ;   A       A=0 if not precode 
      000F48                       1031 is_prefix:
      000F48 88               [ 1] 1032     push a
      000F49 90 AE 0F 5A      [ 2] 1033     ldw y, #prefixes
      000F4D 90 F6            [ 1] 1034 1$: ld a,(y)
      000F4F 27 06            [ 1] 1035     jreq 2$
      000F51 90 5C            [ 1] 1036     incw y
      000F53 11 01            [ 1] 1037     cp a,(1,sp)
      000F55 26 F6            [ 1] 1038     jrne 1$  
      000F57 5B 01            [ 2] 1039 2$: addw sp,#1
      000F59 81               [ 4] 1040     ret 
                                   1041 
                                   1042 ; opcode prefixes 
      000F5A 72 90 91 92 00        1043 prefixes: .byte  0x72, 0x90, 0x91, 0x92, 0  
                                   1044 
                                   1045 
                                   1046 ;*******************************
                                   1047 
                                   1048 ;----------------------------
                                   1049 ;  helper macros 
                                   1050 ;----------------------------
                                   1051 ; lsize is local variables size in bytes 
                                   1052 ; nomae is routine name 
                                   1053     .macro _fn_entry lsize name
                                   1054     LOCAL_SIZE = lsize
                                   1055     STRUCT=3+LOCAL_SIZE
                                   1056 name:
                                   1057     sub sp,#LOCAL_SIZE
                                   1058     .endm
                                   1059 
                                   1060     .macro _fn_exit 
                                   1061     addw sp,#LOCAL_SIZE 
                                   1062     ret
                                   1063     .endm
                                   1064 
                                   1065 ;******************************
                                   1066 
                                   1067 ;---------------------------
                                   1068 ;  forms without arguments bytes 
                                   1069 ;  1 or 2 bytes opcodes 
                                   1070 ;---------------------------
      000F5F 25 61 25 73 00        1071 fmt_impl_no_arg: .asciz "%a%s" 
      000F64 25 61 25 73 09 25 73  1072 fmt_impl_1_r: .asciz "%a%s\t%s"
             00
      000F6C 25 61 25 73 09 25 73  1073 fmt_impl_2_r: .asciz "%a%s\t%s,%s" 
             2C 25 73 00
      000F77 0F 5F 0F 64 0F 6C     1074 fmt_select: .word fmt_impl_no_arg,fmt_impl_1_r,fmt_impl_2_r 
                                   1075 
                           000001  1076     SPC=1
                           000002  1077     MNEMO=2 
                           000004  1078     DEST=4
                           000006  1079     SRC=6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000008  1080     FMT=8
      000F7D                       1081 _fn_entry 8 fn_implied
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      000F7D                          3 fn_implied:
      000F7D 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      000F7F 90 5F            [ 1] 1082     clrw y 
      000F81 17 04            [ 2] 1083     ldw (DEST,sp),y
      000F83 17 06            [ 2] 1084     ldw (SRC,sp),y 
      000F85 0F 08            [ 1] 1085     clr (FMT,sp)
      000F87 16 0B            [ 2] 1086     ldw y,(STRUCT,sp)
      000F89 CD 18 E4         [ 4] 1087     call ld_mnemonic
      000F8C 90 E6 03         [ 1] 1088     ld a,(FIELD_DEST,y)
      000F8F 27 0D            [ 1] 1089     jreq 1$
      000F91 0C 08            [ 1] 1090     inc (FMT,sp)
      000F93 90 AE 02 BC      [ 2] 1091     ldw y,#reg_index 
      000F97 CD 18 D1         [ 4] 1092     call ld_table_entry
      000F9A 17 04            [ 2] 1093     ldw (DEST,sp),y 
      000F9C 16 0B            [ 2] 1094     ldw y,(STRUCT,sp)
      000F9E 90 E6 04         [ 1] 1095 1$: ld a, (FIELD_SRC,y)
      000FA1 27 0B            [ 1] 1096     jreq 2$
      000FA3 0C 08            [ 1] 1097     inc (FMT,sp)
      000FA5 90 AE 02 BC      [ 2] 1098     ldw y,#reg_index
      000FA9 CD 18 D1         [ 4] 1099     call ld_table_entry
      000FAC 17 06            [ 2] 1100     ldw (SRC,sp),y 
      000FAE 90 AE 0F 77      [ 2] 1101 2$: ldw y,#fmt_select 
      000FB2 7B 08            [ 1] 1102     ld a,(FMT,sp)
      000FB4 CD 18 D1         [ 4] 1103     call ld_table_entry 
      000FB7 CD 00 00         [ 4] 1104     call format     
      000FBA                       1105 _fn_exit 
      000FBA 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      000FBC 81               [ 4]    2     ret
                                   1106 
                                   1107 ;---------------------------
                                   1108 ; form: op #imm8 
                                   1109 ;---------------------------
      000FBD 25 61 25 73 09 23 25  1110 fmt_op_imm8: .asciz "%a%s\t#%b"
             62 00
                           000001  1111     SPC=1
                           000002  1112     MNEMO=2
                           000004  1113     IMM8=4
      000FC6                       1114 _fn_entry 4 fn_imm8 
                           000004     1     LOCAL_SIZE = 4
                           000007     2     STRUCT=3+LOCAL_SIZE
      000FC6                          3 fn_imm8:
      000FC6 52 04            [ 2]    4     sub sp,#LOCAL_SIZE
      000FC8 CD 18 39         [ 4] 1115     call get_int8
      000FCB 6B 04            [ 1] 1116     ld (IMM8,sp),a 
      000FCD 16 07            [ 2] 1117     ldw y,(STRUCT,sp)
      000FCF CD 18 E4         [ 4] 1118     call ld_mnemonic
      000FD2 90 AE 0F BD      [ 2] 1119     ldw y,#fmt_op_imm8 
      000FD6 CD 00 00         [ 4] 1120     call format 
      000FD9                       1121 _fn_exit
      000FD9 5B 04            [ 2]    1     addw sp,#LOCAL_SIZE 
      000FDB 81               [ 4]    2     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1122 
                                   1123 ;----------------------------
                                   1124 ; form op rel8 
                                   1125 ; jpr or callr 
                                   1126 ;----------------------------
      000FDC                       1127 jrxx_opcode: 
      000FDC 01 76 01 83 01 DE 01  1128     .word M.JRA,M.JRF,M.JRUGT,M.JRULE,M.JRNC,M.JRC,M.JRNE,M.JREQ
             E4 01 9E 01 7A 01 A3
             01 7E
      000FEC 01 B2 01 F0 01 B7 01  1129     .word M.JRNV,M.JRV,M.JRPL,M.JRMI,M.JRSGT,M.JRSLE,M.JRSGE,M.JRSLT
             99 01 C2 01 C8 01 BC
             01 CE
      000FFC                       1130 jrxx_90_opcode:  
      000FFC 01 A8 01 87 00 00 00  1131     .word M.JRNH,M.JRH,0,0,M.JRNM,M.JRM,M.JRIL,M.JRIH    
             00 01 AD 01 95 01 90
             01 8B
      00100C 25 61 25 73 09 25 65  1132 fmt_op_rel8: .asciz "%a%s\t%e"
             00
                           000001  1133     SPC=1 
                           000002  1134     MNEMO=2
                           000004  1135     ADR24 = 4
                           000007  1136     CODE=7
      001014                       1137 _fn_entry 7 fn_rel8
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      001014                          3 fn_rel8:
      001014 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      001016 6B 07            [ 1] 1138     ld (CODE,sp),a
      001018 4E               [ 1] 1139     swap a 
      001019 A4 0F            [ 1] 1140     and a,#0xf 
      00101B 27 04            [ 1] 1141     jreq 0$
      00101D A6 0C            [ 1] 1142     ld a,#12
      00101F 20 02            [ 2] 1143     jra 3$
      001021 A6 10            [ 1] 1144 0$: ld a,#16
      001023 6B 01            [ 1] 1145 3$: ld (SPC,sp),a 
      001025 CD 18 39         [ 4] 1146     call get_int8 
      001028 CD 18 A1         [ 4] 1147     call abs_addr
      00102B 90 CE 00 00      [ 2] 1148     ldw y,acc24 
      00102F C6 00 00         [ 1] 1149     ld a,acc8 
      001032 17 04            [ 2] 1150     ldw (ADR24,sp),y 
      001034 6B 06            [ 1] 1151     ld (ADR24+2,sp),a
      001036 90 AE 0F DC      [ 2] 1152     ldw y,#jrxx_opcode 
      00103A 7B 07            [ 1] 1153     ld a,(CODE,sp)
      00103C A4 F0            [ 1] 1154     and a,#0xf0 
      00103E 27 04            [ 1] 1155     jreq 1$
      001040 90 AE 0F FC      [ 2] 1156     ldw y,#jrxx_90_opcode
      001044 7B 07            [ 1] 1157 1$: ld a,(CODE,sp)
      001046 A4 0F            [ 1] 1158     and a,#0xf
      001048 90 A3 0F DC      [ 2] 1159     cpw y,#jrxx_opcode 
      00104C 27 02            [ 1] 1160     jreq 2$
      00104E A0 08            [ 1] 1161     sub a,#8
      001050 48               [ 1] 1162 2$: sll a 
      001051 C7 00 00         [ 1] 1163     ld acc8,a 
      001054 72 5F 00 00      [ 1] 1164     clr acc16 
      001058 72 B9 00 00      [ 2] 1165     addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00105C 90 FE            [ 2] 1166     ldw y,(y)
      00105E 17 02            [ 2] 1167     ldw (MNEMO,sp),y 
      001060 90 AE 10 0C      [ 2] 1168     ldw y,#fmt_op_rel8
      001064 CD 00 00         [ 4] 1169     call format  
      001067                       1170 _fn_exit 
      001067 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      001069 81               [ 4]    2     ret
                                   1171 
                                   1172 ;----------------------------
                                   1173 ; form op adr8 
                                   1174 ; exemple: clr 0xC0 
                                   1175 ;----------------------------
      00106A 25 61 25 73 09 25 65  1176 fmt_op_adr8: .asciz "%a%s\t%e"
             00
                           000001  1177     SPC=1
                           000002  1178     MNEMO=2
                           000004  1179     ADR8=4
      001072                       1180 _fn_entry 6 fn_adr8 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      001072                          3 fn_adr8:
      001072 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      001074 CD 18 39         [ 4] 1181     call get_int8 
      001077 6B 06            [ 1] 1182     ld (ADR8+2,sp),a
      001079 90 5F            [ 1] 1183     clrw y 
      00107B 17 04            [ 2] 1184     ldw (ADR8,sp),y  
      00107D 16 09            [ 2] 1185     ldw y,(STRUCT,sp)
      00107F 90 E6 01         [ 1] 1186     ld a,(FIELD_MNEMO,y)
      001082 A1 0F            [ 1] 1187     cp a,#IDX.CALLR 
      001084 26 12            [ 1] 1188     jrne 1$
      001086 7B 06            [ 1] 1189     ld a,(ADR8+2,sp)
      001088 CD 18 A1         [ 4] 1190     call abs_addr
      00108B 90 CE 00 00      [ 2] 1191     ldw y,acc24  
      00108F 17 04            [ 2] 1192     ldw (ADR8,sp),y 
      001091 C6 00 02         [ 1] 1193     ld a,acc24+2 
      001094 6B 06            [ 1] 1194     ld (ADR8+2,sp),a 
      001096 16 09            [ 2] 1195     ldw y,(STRUCT,sp)
      001098                       1196 1$:     
      001098 CD 18 E4         [ 4] 1197     call ld_mnemonic
      00109B 90 AE 10 6A      [ 2] 1198     ldw y,#fmt_op_adr8 
      00109F CD 00 00         [ 4] 1199     call format 
      0010A2                       1200 _fn_exit 
      0010A2 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      0010A4 81               [ 4]    2     ret
                                   1201 
                                   1202 ;----------------------------
                                   1203 ; form op adr16 
                                   1204 ; jp or call 
                                   1205 ;----------------------------
      0010A5 25 61 25 73 09 25 77  1206 fmt_op_adr16: .asciz "%a%s\t%w" 
             00
                           000001  1207     SPC=1
                           000002  1208     MNEMO=2
                           000004  1209     ADR16=4
      0010AD                       1210 _fn_entry 5 fn_adr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           000005     1     LOCAL_SIZE = 5
                           000008     2     STRUCT=3+LOCAL_SIZE
      0010AD                          3 fn_adr16:
      0010AD 52 05            [ 2]    4     sub sp,#LOCAL_SIZE
      0010AF CD 18 5A         [ 4] 1211     call get_int16 
      0010B2 17 04            [ 2] 1212     ldw (ADR16,sp),y 
      0010B4 16 08            [ 2] 1213     ldw y,(STRUCT,sp)
      0010B6 CD 18 E4         [ 4] 1214     call ld_mnemonic
      0010B9 90 AE 10 A5      [ 2] 1215     ldw y,#fmt_op_adr16 
      0010BD CD 00 00         [ 4] 1216     call format 
      0010C0                       1217 _fn_exit 
      0010C0 5B 05            [ 2]    1     addw sp,#LOCAL_SIZE 
      0010C2 81               [ 4]    2     ret
                                   1218 
                                   1219 ;----------------------------
                                   1220 ; form op adr24 
                                   1221 ; jpf or callf 
                                   1222 ;----------------------------
      0010C3 25 61 25 73 09 25 65  1223 fmt_op_adr24: .asciz "%a%s\t%e"
             00
                           000001  1224     SPC=1
                           000002  1225     MNEMO=2
                           000004  1226     ADR24=4 
      0010CB                       1227 _fn_entry 6 fn_adr24 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      0010CB                          3 fn_adr24:
      0010CB 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      0010CD CD 18 79         [ 4] 1228     call get_int24
      0010D0 17 04            [ 2] 1229     ldw (ADR24,sp),y 
      0010D2 6B 06            [ 1] 1230     ld (ADR24+2,sp),a 
      0010D4 16 09            [ 2] 1231     ldw y,(STRUCT,sp)
      0010D6 CD 18 E4         [ 4] 1232     call ld_mnemonic
      0010D9 90 AE 10 C3      [ 2] 1233     ldw y,#fmt_op_adr24 
      0010DD CD 00 00         [ 4] 1234     call format 
      0010E0                       1235 _fn_exit 
      0010E0 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      0010E2 81               [ 4]    2     ret
                                   1236 
                                   1237 ;----------------------------
                                   1238 ;  form op adr8,r 
                                   1239 ;----------------------------
      0010E3 25 61 25 73 09 25 62  1240 fmt_op_adr8_r: .asciz "%a%s\t%b,%s"
             2C 25 73 00
                           000001  1241     SPC=1
                           000002  1242     MNEMO=2
                           000004  1243     ADR8=4
                           000005  1244     REG=5 
      0010EE                       1245 _fn_entry 6 fn_adr8_r 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      0010EE                          3 fn_adr8_r:
      0010EE 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      0010F0 CD 18 39         [ 4] 1246     call get_int8 
      0010F3 6B 04            [ 1] 1247     ld (ADR8,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0010F5 16 09            [ 2] 1248     ldw y,(STRUCT,sp)
      0010F7 CD 18 E4         [ 4] 1249     call ld_mnemonic
      0010FA 90 E6 04         [ 1] 1250     ld a,(FIELD_SRC,y)
      0010FD 90 AE 02 BC      [ 2] 1251     ldw y,#reg_index
      001101 CD 18 D1         [ 4] 1252     call ld_table_entry
      001104 17 05            [ 2] 1253     ldw (REG,sp),y
      001106 90 AE 10 E3      [ 2] 1254     ldw y,#fmt_op_adr8_r 
      00110A CD 00 00         [ 4] 1255     call format 
      00110D                       1256 _fn_exit 
      00110D 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      00110F 81               [ 4]    2     ret
                                   1257 
                                   1258 ;----------------------------
                                   1259 ; form op adr16,r 
                                   1260 ;----------------------------
      001110 25 61 25 73 09 25 77  1261 fmt_op_adr16_r: .asciz "%a%s\t%w,%s" 
             2C 25 73 00
                           000001  1262     SPC=1 
                           000002  1263     MNEMO=2
                           000004  1264     ADR16=4
                           000006  1265     REG=6 
      00111B                       1266 _fn_entry 7  fn_adr16_r
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      00111B                          3 fn_adr16_r:
      00111B 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      00111D CD 18 5A         [ 4] 1267     call get_int16 
      001120 17 04            [ 2] 1268     ldw (ADR16,sp),y 
      001122 16 0A            [ 2] 1269     ldw y,(STRUCT,sp)
      001124 CD 18 E4         [ 4] 1270     call ld_mnemonic
      001127 90 E6 04         [ 1] 1271     ld a,(FIELD_SRC,y)
      00112A 90 AE 02 BC      [ 2] 1272     ldw y,#reg_index 
      00112E CD 18 D1         [ 4] 1273     call ld_table_entry
      001131 17 06            [ 2] 1274     ldw (REG,sp),y 
      001133 90 AE 11 10      [ 2] 1275     ldw y,#fmt_op_adr16_r 
      001137 CD 00 00         [ 4] 1276     call format 
      00113A                       1277 _fn_exit
      00113A 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      00113C 81               [ 4]    2     ret
                                   1278 
                                   1279 ;----------------------------
                                   1280 ; form op adr24,r  
                                   1281 ;----------------------------
      00113D 25 61 25 73 09 25 65  1282 fmt_op_adr24_r: .asciz "%a%s\t%e,%s" 
             2C 25 73 00
                           000001  1283     SPC=1
                           000002  1284     MNEMO=2
                           000004  1285     ADR24=4
                           000007  1286     REG=7
      001148                       1287 _fn_entry 8 fn_adr24_r 
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      001148                          3 fn_adr24_r:
      001148 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      00114A CD 18 79         [ 4] 1288     call get_int24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00114D 17 04            [ 2] 1289     ldw (ADR24,sp),y 
      00114F 6B 06            [ 1] 1290     ld (ADR24+2,sp),a 
      001151 16 0B            [ 2] 1291     ldw y,(STRUCT,sp)
      001153 CD 18 E4         [ 4] 1292     call ld_mnemonic
      001156 90 E6 04         [ 1] 1293     ld a,(FIELD_SRC,y)
      001159 90 AE 02 BC      [ 2] 1294     ldw y,#reg_index 
      00115D CD 18 D1         [ 4] 1295     call ld_table_entry
      001160 17 07            [ 2] 1296     ldw (REG,sp),y 
      001162 90 AE 11 3D      [ 2] 1297     ldw y,#fmt_op_adr24_r 
      001166 CD 00 00         [ 4] 1298     call format 
      001169                       1299 _fn_exit 
      001169 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      00116B 81               [ 4]    2     ret
                                   1300 
                                   1301 ;----------------------------
                                   1302 ; form op r,adr8 
                                   1303 ; exemple:  ldw x,$50
                                   1304 ;----------------------------
      00116C 25 61 25 73 09 25 73  1305 fmt_op_r_adr8: .asciz "%a%s\t%s,%b"
             2C 25 62 00
                           000001  1306     SPC=1
                           000002  1307     MNEMO=2
                           000004  1308     REG=4
                           000006  1309     ADR8 = 6
      001177                       1310 _fn_entry 6 fn_r_adr8
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      001177                          3 fn_r_adr8:
      001177 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      001179 CD 18 39         [ 4] 1311     call get_int8 
      00117C 6B 06            [ 1] 1312     ld (ADR8,sp),a 
      00117E 16 09            [ 2] 1313     ldw y,(STRUCT,sp) 
      001180 CD 18 E4         [ 4] 1314     call ld_mnemonic
      001183 90 E6 03         [ 1] 1315     ld a,(FIELD_DEST,y)
      001186 90 AE 02 BC      [ 2] 1316     ldw y,#reg_index 
      00118A CD 18 D1         [ 4] 1317     call ld_table_entry
      00118D 17 04            [ 2] 1318     ldw (REG,sp),y 
      00118F 90 AE 11 6C      [ 2] 1319     ldw y,#fmt_op_r_adr8 
      001193 CD 00 00         [ 4] 1320     call format 
      001196                       1321 _fn_exit 
      001196 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      001198 81               [ 4]    2     ret
                                   1322 
                                   1323 ;----------------------------
                                   1324 ; form op r,adr16 
                                   1325 ; exemple:  ldw x,$5000 
                                   1326 ;----------------------------
      001199 25 61 25 73 09 25 73  1327 fmt_op_r_adr16: .asciz "%a%s\t%s,%w" 
             2C 25 77 00
                           000001  1328     SPC=1
                           000002  1329     MNEMO=2
                           000004  1330     REG=4
                           000006  1331     ADR16 = 6
      0011A4                       1332 _fn_entry 7 fn_r_adr16
                           000007     1     LOCAL_SIZE = 7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           00000A     2     STRUCT=3+LOCAL_SIZE
      0011A4                          3 fn_r_adr16:
      0011A4 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      0011A6 CD 18 5A         [ 4] 1333     call get_int16 
      0011A9 17 06            [ 2] 1334     ldw (ADR16,sp),y 
      0011AB 16 0A            [ 2] 1335     ldw y,(STRUCT,sp) 
      0011AD CD 18 E4         [ 4] 1336     call ld_mnemonic
      0011B0 90 E6 03         [ 1] 1337     ld a,(FIELD_DEST,y)
      0011B3 90 AE 02 BC      [ 2] 1338     ldw y,#reg_index 
      0011B7 CD 18 D1         [ 4] 1339     call ld_table_entry
      0011BA 17 04            [ 2] 1340     ldw (REG,sp),y 
      0011BC 90 AE 11 99      [ 2] 1341     ldw y,#fmt_op_r_adr16 
      0011C0 CD 00 00         [ 4] 1342     call format 
      0011C3                       1343 _fn_exit 
      0011C3 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      0011C5 81               [ 4]    2     ret
                                   1344 
                                   1345 ;----------------------------
                                   1346 ; form op r,adr24 
                                   1347 ; exemple:  ldf a,$12000  
                                   1348 ;----------------------------
      0011C6 25 61 25 73 09 25 73  1349 fmt_op_r_adr24: .asciz "%a%s\t%s,%e" 
             2C 25 65 00
                           000001  1350     SPC=1
                           000002  1351     MNEMO=2
                           000004  1352     REG=4    
                           000006  1353     ADR24 = 6
      0011D1                       1354 _fn_entry 8 fn_r_adr24 
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      0011D1                          3 fn_r_adr24:
      0011D1 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      0011D3 CD 18 79         [ 4] 1355     call get_int24 
      0011D6 17 06            [ 2] 1356     ldw (ADR24,sp),y
      0011D8 6B 08            [ 1] 1357     ld (ADR24+2,sp),a  
      0011DA 16 0B            [ 2] 1358     ldw y,(STRUCT,sp) 
      0011DC CD 18 E4         [ 4] 1359     call ld_mnemonic
      0011DF 90 E6 03         [ 1] 1360     ld a,(FIELD_DEST,y)
      0011E2 90 AE 02 BC      [ 2] 1361     ldw y,#reg_index
      0011E6 CD 18 D1         [ 4] 1362     call ld_table_entry
      0011E9 17 04            [ 2] 1363     ldw (REG,sp),y 
      0011EB 90 AE 11 C6      [ 2] 1364     ldw y,#fmt_op_r_adr24 
      0011EF CD 00 00         [ 4] 1365     call format 
      0011F2                       1366 _fn_exit 
      0011F2 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      0011F4 81               [ 4]    2     ret
                                   1367 
                                   1368 ;----------------------------
                                   1369 ; register indexed without offset 
                                   1370 ; form: op r,(r)
                                   1371 ; form: op (r)
                                   1372 ;----------------------------
      0011F5 25 61 25 73 09 28 25  1373 fmt_op_idx: .asciz "%a%s\t(%s)"
             73 29 00
      0011FF 25 61 25 73 09 25 73  1374 fmt_op_r_idx: .asciz "%a%s\t%s,(%s)"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



             2C 28 25 73 29 00
      00120C 11 F5 11 FF           1375 fmt_sel2: .word fmt_op_idx,fmt_op_r_idx 
                           000001  1376     SPC=1
                           000002  1377     MNEMO=2
                           000004  1378     DEST=4
                           000006  1379     SRC=6
                           000008  1380     FMT=8 
      001210                       1381 _fn_entry 8 fn_r_idx
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      001210                          3 fn_r_idx:
      001210 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      001212 0F 08            [ 1] 1382     clr (FMT,sp)
      001214 16 0B            [ 2] 1383     ldw y,(STRUCT,sp)
      001216 CD 18 E4         [ 4] 1384     call ld_mnemonic
      001219 90 E6 03         [ 1] 1385     ld a,(FIELD_DEST,y)
      00121C 90 AE 02 BC      [ 2] 1386     ldw y,#reg_index
      001220 CD 18 D1         [ 4] 1387     call ld_table_entry
      001223 17 04            [ 2] 1388     ldw (DEST,sp),y
      001225 16 0B            [ 2] 1389     ldw y,(STRUCT,sp)
      001227 90 E6 04         [ 1] 1390     ld a,(FIELD_SRC,y)
      00122A 27 02            [ 1] 1391     jreq 1$
      00122C 0C 08            [ 1] 1392     inc (FMT,sp)
      00122E 90 AE 02 BC      [ 2] 1393 1$: ldw y,#reg_index
      001232 CD 18 D1         [ 4] 1394     call ld_table_entry
      001235 17 06            [ 2] 1395     ldw (SRC,sp),y 
      001237 7B 08            [ 1] 1396     ld a,(FMT,sp)
      001239 90 AE 12 0C      [ 2] 1397     ldw y,#fmt_sel2
      00123D CD 18 D1         [ 4] 1398     call ld_table_entry 
      001240 CD 00 00         [ 4] 1399     call format 
      001243                       1400 _fn_exit 
      001243 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      001245 81               [ 4]    2     ret
                                   1401 
                                   1402 ;----------------------------
                                   1403 ; register indexed without offset 
                                   1404 ; form: op (r),r
                                   1405 ;----------------------------
      001246 25 61 25 73 09 28 25  1406 fmt_op_idx_r: .asciz "%a%s\t(%s),%s"
             73 29 2C 25 73 00
                           000001  1407     SPC=1
                           000002  1408     MNEMO=2
                           000004  1409     DEST=4
                           000006  1410     SRC=6
      001253                       1411 _fn_entry 7 fn_idx_r 
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      001253                          3 fn_idx_r:
      001253 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      001255 16 0A            [ 2] 1412     ldw y,(STRUCT,sp)
      001257 CD 18 E4         [ 4] 1413     call ld_mnemonic
      00125A 90 E6 03         [ 1] 1414     ld a,(FIELD_DEST,y)
      00125D 90 AE 02 BC      [ 2] 1415     ldw y,#reg_index 
      001261 CD 18 D1         [ 4] 1416     call ld_table_entry
      001264 17 04            [ 2] 1417     ldw (DEST,sp),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      001266 16 0A            [ 2] 1418     ldw y,(STRUCT,sp)
      001268 90 E6 04         [ 1] 1419     ld a,(FIELD_SRC,y)
      00126B 90 AE 02 BC      [ 2] 1420     ldw y,#reg_index 
      00126F CD 18 D1         [ 4] 1421     call ld_table_entry
      001272 17 06            [ 2] 1422     ldw (SRC,sp),y 
      001274 90 AE 12 46      [ 2] 1423     ldw y,#fmt_op_idx_r 
      001278 CD 00 00         [ 4] 1424     call format 
      00127B                       1425 _fn_exit 
      00127B 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      00127D 81               [ 4]    2     ret
                                   1426 
                                   1427 ;----------------------------
                                   1428 ;  decode format: op (ofs8,r)
                                   1429 ;----------------------------
      00127E 25 61 25 73 09 28 25  1430 fmt_op_ofs8_idx: .asciz "%a%s\t(%b,%s)"
             62 2C 25 73 29 00
                           000001  1431     SPC=1
                           000002  1432     MNEMO=2
                           000004  1433     OFS8=4  ; byte offset value 
                           000005  1434     REG=5 ;   pointer to register name
      00128B                       1435 _fn_entry 6 fn_ofs8_idx 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      00128B                          3 fn_ofs8_idx:
      00128B 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      00128D CD 18 39         [ 4] 1436     call get_int8 
      001290 6B 04            [ 1] 1437     ld (OFS8,sp),a 
      001292 16 09            [ 2] 1438     ldw y,(STRUCT,sp)
      001294 CD 18 E4         [ 4] 1439     call ld_mnemonic
      001297 90 E6 03         [ 1] 1440     ld a,(FIELD_DEST,y)
      00129A 90 AE 02 BC      [ 2] 1441     ldw y,#reg_index 
      00129E CD 18 D1         [ 4] 1442     call ld_table_entry
      0012A1 17 05            [ 2] 1443     ldw (REG,sp),y 
      0012A3 90 AE 12 7E      [ 2] 1444     ldw y,#fmt_op_ofs8_idx
      0012A7 CD 00 00         [ 4] 1445     call format 
      0012AA                       1446     _fn_exit
      0012AA 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      0012AC 81               [ 4]    2     ret
                                   1447 
                                   1448 ;--------------------------------
                                   1449 ; decode form: op adr16,#bit,rel 
                                   1450 ;--------------------------------
      0012AD 25 61 25 73 09 25 77  1451 fmt_op_adr16_bit_rel: .asciz "%a%s\t%w,#%c,%e" 
             2C 23 25 63 2C 25 65
             00
                           000001  1452     SPC=1
                           000002  1453     MNEMO=2
                           000004  1454     ADR16=4
                           000006  1455     BIT=6
                           000007  1456     REL=7
      0012BC                       1457 _fn_entry 9 fn_adr16_b_rel 
                           000009     1     LOCAL_SIZE = 9
                           00000C     2     STRUCT=3+LOCAL_SIZE
      0012BC                          3 fn_adr16_b_rel:
      0012BC 52 09            [ 2]    4     sub sp,#LOCAL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0012BE 6B 06            [ 1] 1458     ld (BIT,sp),a 
      0012C0 CD 18 5A         [ 4] 1459     call get_int16
      0012C3 17 04            [ 2] 1460     ldw (ADR16,sp),y
      0012C5 CD 18 39         [ 4] 1461     call get_int8
      0012C8 CD 18 A1         [ 4] 1462     call abs_addr
      0012CB 90 CE 00 00      [ 2] 1463     ldw y,acc24
      0012CF C6 00 00         [ 1] 1464     ld a,acc8 
      0012D2 17 07            [ 2] 1465     ldw (REL,sp),y
      0012D4 6B 09            [ 1] 1466     ld (REL+2,sp),a
      0012D6 A6 04            [ 1] 1467     ld a,#4
      0012D8 6B 01            [ 1] 1468     ld (SPC,sp),a 
      0012DA 7B 06            [ 1] 1469     ld a,(BIT,sp)
      0012DC A4 01            [ 1] 1470     and a,#1
      0012DE 27 06            [ 1] 1471     jreq 2$
      0012E0 90 AE 01 05      [ 2] 1472     ldw y,#M.BTJF 
      0012E4 20 04            [ 2] 1473     jra 3$
      0012E6 90 AE 01 0A      [ 2] 1474 2$: ldw y,#M.BTJT    
      0012EA 17 02            [ 2] 1475 3$: ldw (MNEMO,sp),y   
      0012EC 7B 06            [ 1] 1476     ld a,(BIT,sp)
      0012EE 44               [ 1] 1477     srl a 
      0012EF A4 07            [ 1] 1478     and a,#7 
      0012F1 AB 30            [ 1] 1479     add a,#'0 
      0012F3 6B 06            [ 1] 1480     ld (BIT,sp),a
      0012F5 90 AE 12 AD      [ 2] 1481     ldw y,#fmt_op_adr16_bit_rel
      0012F9 CD 00 00         [ 4] 1482     call format
      0012FC                       1483 _fn_exit
      0012FC 5B 09            [ 2]    1     addw sp,#LOCAL_SIZE 
      0012FE 81               [ 4]    2     ret
                                   1484 
                                   1485 ;--------------------------------------
                                   1486 ; decode form:  op adr16,#bit 
                                   1487 ;--------------------------------------
      0012FF 01 00 00 FB 00 F0 00  1488 bitop: .word M.BSET,M.BRES,M.BCPL,M.BCCM 
             E7
      001307 25 61 25 73 09 25 77  1489 fmt_adr16_bit: .asciz "%a%s\t%w,#%c" ;
             2C 23 25 63 00
                           000001  1490     SPC=1
                           000002  1491     MNEMO=2
                           000004  1492     ADR16=4
                           000006  1493     BIT=6 
      001313                       1494 _fn_entry 6 fn_adr16_bit 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      001313                          3 fn_adr16_bit:
      001313 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      001315 6B 06            [ 1] 1495     ld (BIT,sp),a
      001317 A6 08            [ 1] 1496     ld a,#8
      001319 6B 01            [ 1] 1497     ld (SPC,sp),a  
      00131B CD 18 5A         [ 4] 1498     call get_int16
      00131E 17 04            [ 2] 1499     ldw (ADR16,sp),y 
      001320 90 AE 12 FF      [ 2] 1500     ldw y,#bitop 
      001324 7B 06            [ 1] 1501     ld a,(BIT,sp)
      001326 A4 01            [ 1] 1502     and a,#1 
      001328 27 04            [ 1] 1503     jreq 1$
      00132A 72 A9 00 02      [ 2] 1504     addw y,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00132E 7B 06            [ 1] 1505 1$: ld a,(BIT,sp)
      001330 A4 F0            [ 1] 1506     and a,#0xf0 
      001332 27 04            [ 1] 1507     jreq 2$
      001334 72 A9 00 04      [ 2] 1508     addw y,#4
      001338 90 FE            [ 2] 1509 2$: ldw y,(y)
      00133A 17 02            [ 2] 1510     ldw (MNEMO,sp),y 
      00133C 7B 06            [ 1] 1511     ld a,(BIT,sp)  
      00133E 44               [ 1] 1512     srl a 
      00133F A4 07            [ 1] 1513     and a,#7 
      001341 AB 30            [ 1] 1514     add a,#'0
      001343 6B 06            [ 1] 1515     ld (BIT,sp),a
      001345 90 AE 13 07      [ 2] 1516     ldw y,#fmt_adr16_bit 
      001349 CD 00 00         [ 4] 1517     call format 
      00134C                       1518 _fn_exit
      00134C 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      00134E 81               [ 4]    2     ret
                                   1519 
                                   1520 ;---------------------------------
                                   1521 ; decode form  op r,(ofs8,r)
                                   1522 ;---------------------------------
      00134F 25 61 25 73 09 25 73  1523 fmt_r_ofs8_idx: .asciz "%a%s\t%s,(%b,%s)"
             2C 28 25 62 2C 25 73
             29 00
                           000001  1524     SPC=1
                           000002  1525     MNEMO=2
                           000004  1526     DEST=4
                           000006  1527     OFS8=6
                           000007  1528     SRC=7 
      00135F                       1529 _fn_entry 8 fn_r_ofs8_idx 
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      00135F                          3 fn_r_ofs8_idx:
      00135F 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      001361 CD 18 39         [ 4] 1530     call get_int8
      001364 6B 06            [ 1] 1531     ld (OFS8,sp),a 
      001366 16 0B            [ 2] 1532     ldw y,(STRUCT,sp)
      001368 CD 18 E4         [ 4] 1533     call ld_mnemonic
      00136B 90 E6 03         [ 1] 1534     ld a,(FIELD_DEST,y)
      00136E 90 AE 02 BC      [ 2] 1535     ldw y,#reg_index
      001372 CD 18 D1         [ 4] 1536     call ld_table_entry
      001375 17 04            [ 2] 1537     ldw (DEST,sp),y
      001377 16 0B            [ 2] 1538     ldw y,(STRUCT,sp)
      001379 90 E6 04         [ 1] 1539     ld a,(FIELD_SRC,y)
      00137C 90 AE 02 BC      [ 2] 1540     ldw y,#reg_index
      001380 CD 18 D1         [ 4] 1541     call ld_table_entry
      001383 17 07            [ 2] 1542     ldw (SRC,sp),y
      001385 90 AE 13 4F      [ 2] 1543     ldw y,#fmt_r_ofs8_idx 
      001389 CD 00 00         [ 4] 1544     call format 
      00138C                       1545 _fn_exit
      00138C 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      00138E 81               [ 4]    2     ret
                                   1546 
                                   1547 ;---------------------------------
                                   1548 ; form  op (ofs8,r),r
                                   1549 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00138F 25 61 25 73 09 28 25  1550 fmt_op_ofs8_idx_r: .asciz "%a%s\t(%b,%s),%s"
             62 2C 25 73 29 2C 25
             73 00
                           000001  1551     SPC=1
                           000002  1552     MNEMO=2
                           000004  1553     OFS8=4
                           000005  1554     DEST=5
                           000007  1555     SRC=7 
      00139F                       1556 _fn_entry 8 fn_ofs8_idx_r 
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      00139F                          3 fn_ofs8_idx_r:
      00139F 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      0013A1 CD 18 39         [ 4] 1557     call get_int8 
      0013A4 6B 04            [ 1] 1558     ld (OFS8,sp),a 
      0013A6 16 0B            [ 2] 1559     ldw y,(STRUCT,sp)
      0013A8 CD 18 E4         [ 4] 1560     call ld_mnemonic
      0013AB 90 E6 03         [ 1] 1561     ld a,(FIELD_DEST,y)
      0013AE 90 AE 02 BC      [ 2] 1562     ldw y,#reg_index 
      0013B2 CD 18 D1         [ 4] 1563     call ld_table_entry
      0013B5 17 05            [ 2] 1564     ldw (DEST,sp),y 
      0013B7 16 0B            [ 2] 1565     ldw y,(STRUCT,sp)
      0013B9 90 E6 04         [ 1] 1566     ld a,(FIELD_SRC,y)
      0013BC 90 AE 02 BC      [ 2] 1567     ldw y,#reg_index 
      0013C0 CD 18 D1         [ 4] 1568     call ld_table_entry
      0013C3 17 07            [ 2] 1569     ldw (SRC,sp),y 
      0013C5 90 AE 13 8F      [ 2] 1570     ldw y,#fmt_op_ofs8_idx_r
      0013C9 CD 00 00         [ 4] 1571     call format 
      0013CC                       1572 _fn_exit 
      0013CC 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      0013CE 81               [ 4]    2     ret
                                   1573 
                                   1574 ;---------------------------------
                                   1575 ;  decode form   op r,#imm8 
                                   1576 ;---------------------------------
      0013CF 25 61 25 73 09 25 73  1577 fmt_r_imm8: .asciz "%a%s\t%s,#%b" 
             2C 23 25 62 00
                           000001  1578     SPC=1
                           000002  1579     MNEMO=2
                           000004  1580     REG=4
                           000006  1581     IMM8=6
      0013DB                       1582 _fn_entry 6  fn_r_imm8 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      0013DB                          3 fn_r_imm8:
      0013DB 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      0013DD CD 18 39         [ 4] 1583     call get_int8
      0013E0 6B 06            [ 1] 1584     ld (IMM8,sp),a 
      0013E2 16 09            [ 2] 1585     ldw y,(STRUCT,sp)
      0013E4 CD 18 E4         [ 4] 1586     call ld_mnemonic 
      0013E7 90 E6 03         [ 1] 1587     ld a,(FIELD_DEST,y)
      0013EA 90 AE 02 BC      [ 2] 1588     ldw y,#reg_index 
      0013EE CD 18 D1         [ 4] 1589     call ld_table_entry
      0013F1 17 04            [ 2] 1590     ldw (REG,sp),y 
      0013F3 90 AE 13 CF      [ 2] 1591     ldw y,#fmt_r_imm8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0013F7 CD 00 00         [ 4] 1592     call format 
      0013FA                       1593 _fn_exit
      0013FA 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      0013FC 81               [ 4]    2     ret
                                   1594 
                                   1595 ;---------------------------------
                                   1596 ;  decode form   op r,#imm16 
                                   1597 ;---------------------------------
      0013FD 25 61 25 73 09 25 73  1598 fmt_r_imm16: .asciz "%a%s\t%s,#%w" 
             2C 23 25 77 00
                           000001  1599     SPC=1
                           000002  1600     MNEMO=2
                           000004  1601     DEST=4
                           000006  1602     IMM16=6
      001409                       1603 _fn_entry 7 fn_r_imm16
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      001409                          3 fn_r_imm16:
      001409 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      00140B CD 18 5A         [ 4] 1604     call get_int16
      00140E 17 06            [ 2] 1605     ldw (IMM16,sp),y 
      001410 16 0A            [ 2] 1606     ldw y,(STRUCT,sp)
      001412 CD 18 E4         [ 4] 1607     call ld_mnemonic 
      001415 90 E6 03         [ 1] 1608     ld a,(FIELD_DEST,y)
      001418 90 AE 02 BC      [ 2] 1609     ldw y,#reg_index 
      00141C CD 18 D1         [ 4] 1610     call ld_table_entry
      00141F 17 04            [ 2] 1611     ldw (DEST,sp),y 
      001421 90 AE 13 FD      [ 2] 1612     ldw y,#fmt_r_imm16
      001425 CD 00 00         [ 4] 1613     call format 
      001428                       1614 _fn_exit
      001428 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      00142A 81               [ 4]    2     ret
                                   1615 
                                   1616 
                                   1617 ;---------------------------------
                                   1618 ;  form  op adr16,#imm8 
                                   1619 ;---------------------------------
      00142B 25 61 25 73 09 25 77  1620 fmt_op_adr16_imm8: .asciz "%a%s\t%w,#%b"
             2C 23 25 62 00
                           000001  1621     SPC=1
                           000002  1622     MNEMO=2
                           000004  1623     ADR16=4
                           000006  1624     IMM8=6
      001437                       1625 _fn_entry 6 fn_adr16_imm8
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      001437                          3 fn_adr16_imm8:
      001437 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      001439 CD 18 39         [ 4] 1626     call get_int8 
      00143C 6B 06            [ 1] 1627     ld (IMM8,sp),a 
      00143E CD 18 5A         [ 4] 1628     call get_int16 
      001441 17 04            [ 2] 1629     ldw (ADR16,sp),y 
      001443 16 09            [ 2] 1630     ldw Y,(STRUCT,sp)
      001445 CD 18 E4         [ 4] 1631     call ld_mnemonic 
      001448 90 AE 14 2B      [ 2] 1632     ldw y,#fmt_op_adr16_imm8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00144C CD 00 00         [ 4] 1633     call format 
      00144F                       1634 _fn_exit 
      00144F 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      001451 81               [ 4]    2     ret
                                   1635 
                                   1636 ;---------------------------------
                                   1637 ;  form  op adr16,adr16 
                                   1638 ;---------------------------------
      001452 25 61 25 73 09 25 77  1639 fmt_op_adr16_adr16: .asciz "%a%s\t%w,%w"
             2C 25 77 00
                           000001  1640     SPC=1
                           000002  1641     MNEMO=2 
                           000004  1642     DEST16=4
                           000006  1643     SRC16=6
      00145D                       1644 _fn_entry 7 fn_adr16_adr16
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      00145D                          3 fn_adr16_adr16:
      00145D 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      00145F CD 18 5A         [ 4] 1645     call get_int16 
      001462 17 06            [ 2] 1646     ldw (SRC16,sp),y
      001464 CD 18 5A         [ 4] 1647     call get_int16 
      001467 17 04            [ 2] 1648     ldw (DEST16,sp),y 
      001469 16 0A            [ 2] 1649     ldw Y,(STRUCT,sp)
      00146B CD 18 E4         [ 4] 1650     call ld_mnemonic 
      00146E 90 AE 14 52      [ 2] 1651     ldw y,#fmt_op_adr16_adr16 
      001472 CD 00 00         [ 4] 1652     call format 
      001475                       1653 _fn_exit 
      001475 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      001477 81               [ 4]    2     ret
                                   1654 
                                   1655 ;---------------------------------
                                   1656 ;  form  op adr8,adr8  
                                   1657 ;---------------------------------
      001478 25 61 25 73 09 25 62  1658 fmt_op_adr8_adr8: .asciz "%a%s\t%b,%b"
             2C 25 62 00
                           000001  1659     SPC=1
                           000002  1660     MNEMO=2
                           000004  1661     DEST8=4
                           000005  1662     SRC8=5
      001483                       1663 _fn_entry 5 fn_adr8_adr8
                           000005     1     LOCAL_SIZE = 5
                           000008     2     STRUCT=3+LOCAL_SIZE
      001483                          3 fn_adr8_adr8:
      001483 52 05            [ 2]    4     sub sp,#LOCAL_SIZE
      001485 CD 18 39         [ 4] 1664     call get_int8 
      001488 6B 05            [ 1] 1665     ld (SRC8,sp),a 
      00148A CD 18 39         [ 4] 1666     call get_int8 
      00148D 6B 04            [ 1] 1667     ld (DEST8,sp),a 
      00148F 16 08            [ 2] 1668     ldw Y,(STRUCT,sp)
      001491 CD 18 E4         [ 4] 1669     call ld_mnemonic 
      001494 90 AE 14 78      [ 2] 1670     ldw y,#fmt_op_adr8_adr8 
      001498 CD 00 00         [ 4] 1671     call format 
      00149B                       1672 _fn_exit 
      00149B 5B 05            [ 2]    1     addw sp,#LOCAL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00149D 81               [ 4]    2     ret
                                   1673 
                                   1674 ;---------------------------------
                                   1675 ;   form op r,[ptr8]
                                   1676 ;---------------------------------
      00149E 25 61 25 73 09 25 73  1677 fmt_op_r_ptr8: .asciz "%a%s\t%s,[%b]"
             2C 5B 25 62 5D 00
                           000001  1678     SPC=1
                           000002  1679     MNEMO=2
                           000004  1680     REG=4
                           000006  1681     PTR8=6
      0014AB                       1682 _fn_entry 6 fn_r_ptr8
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      0014AB                          3 fn_r_ptr8:
      0014AB 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      0014AD CD 18 39         [ 4] 1683     call get_int8 
      0014B0 6B 06            [ 1] 1684     ld (PTR8,sp),a 
      0014B2 16 09            [ 2] 1685     ldw y,(STRUCT,sp)
      0014B4 CD 18 E4         [ 4] 1686     call ld_mnemonic
      0014B7 90 E6 03         [ 1] 1687     ld a,(FIELD_DEST,y)
      0014BA 90 AE 02 BC      [ 2] 1688     ldw y,#reg_index 
      0014BE CD 18 D1         [ 4] 1689     call ld_table_entry
      0014C1 17 04            [ 2] 1690     ldw (REG,sp),y 
      0014C3 90 AE 14 9E      [ 2] 1691     ldw y,#fmt_op_r_ptr8 
      0014C7 CD 00 00         [ 4] 1692     call format 
      0014CA                       1693 _fn_exit 
      0014CA 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      0014CC 81               [ 4]    2     ret
                                   1694 
                                   1695 
                                   1696 ;---------------------------------
                                   1697 ;   form op r,[ptr16]
                                   1698 ;---------------------------------
      0014CD 25 61 25 73 09 25 73  1699 fmt_op_r_ptr16: .asciz "%a%s\t%s,[%w]"
             2C 5B 25 77 5D 00
                           000001  1700     SPC=1
                           000002  1701     MNEMO=2
                           000004  1702     REG=4
                           000006  1703     PTR16=6
      0014DA                       1704 _fn_entry 7 fn_r_ptr16
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      0014DA                          3 fn_r_ptr16:
      0014DA 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      0014DC CD 18 5A         [ 4] 1705     call get_int16 
      0014DF 17 06            [ 2] 1706     ldw (PTR16,sp),y 
      0014E1 16 0A            [ 2] 1707     ldw y,(STRUCT,sp)
      0014E3 CD 18 E4         [ 4] 1708     call ld_mnemonic
      0014E6 90 E6 03         [ 1] 1709     ld a,(FIELD_DEST,y)
      0014E9 90 AE 02 BC      [ 2] 1710     ldw y,#reg_index
      0014ED CD 18 D1         [ 4] 1711     call ld_table_entry
      0014F0 17 04            [ 2] 1712     ldw (REG,sp),y 
      0014F2 90 AE 14 CD      [ 2] 1713     ldw y,#fmt_op_r_ptr16 
      0014F6 CD 00 00         [ 4] 1714     call format 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0014F9                       1715 _fn_exit 
      0014F9 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      0014FB 81               [ 4]    2     ret
                                   1716 
                                   1717 ;---------------------------------
                                   1718 ;   form op [ptr8],r
                                   1719 ;---------------------------------
      0014FC 25 61 25 73 09 5B 25  1720 fmt_op_ptr8_r: .asciz "%a%s\t[%b],%s"
             62 5D 2C 25 73 00
                           000001  1721     SPC=1
                           000002  1722     MNEMO=2
                           000004  1723     PTR8=4
                           000005  1724     SRC=5
      001509                       1725 _fn_entry 6 fn_ptr8_r
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      001509                          3 fn_ptr8_r:
      001509 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      00150B CD 18 39         [ 4] 1726     call get_int8 
      00150E 6B 04            [ 1] 1727     ld (PTR8,sp),a 
      001510 16 09            [ 2] 1728     ldw y,(STRUCT,sp)
      001512 CD 18 E4         [ 4] 1729     call ld_mnemonic
      001515 90 E6 04         [ 1] 1730     ld a,(FIELD_SRC,y)
      001518 90 AE 02 BC      [ 2] 1731     ldw y,#reg_index 
      00151C CD 18 D1         [ 4] 1732     call ld_table_entry
      00151F 17 05            [ 2] 1733     ldw (SRC,sp),y 
      001521 90 AE 14 FC      [ 2] 1734     ldw y,#fmt_op_ptr8_r 
      001525 CD 00 00         [ 4] 1735     call format 
      001528                       1736 _fn_exit 
      001528 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      00152A 81               [ 4]    2     ret
                                   1737 
                                   1738 
                                   1739 ;---------------------------------
                                   1740 ;   form op [ptr16],r
                                   1741 ;---------------------------------
      00152B 25 61 25 73 09 5B 25  1742 fmt_op_ptr16_r: .asciz "%a%s\t[%w],%s"
             77 5D 2C 25 73 00
                           000001  1743     SPC=1
                           000002  1744     MNEMO=2
                           000004  1745     PTR16=4
                           000006  1746     REG=6
      001538                       1747 _fn_entry 7 fn_ptr16_r
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      001538                          3 fn_ptr16_r:
      001538 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      00153A CD 18 5A         [ 4] 1748     call get_int16 
      00153D 17 04            [ 2] 1749     ldw (PTR16,sp),y 
      00153F 16 0A            [ 2] 1750     ldw y,(STRUCT,sp)
      001541 CD 18 E4         [ 4] 1751     call ld_mnemonic
      001544 90 E6 04         [ 1] 1752     ld a,(FIELD_SRC,y)
      001547 90 AE 02 BC      [ 2] 1753     ldw y,#reg_index
      00154B CD 18 D1         [ 4] 1754     call ld_table_entry
      00154E 17 06            [ 2] 1755     ldw (REG,sp),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      001550 90 AE 15 2B      [ 2] 1756     ldw y,#fmt_op_ptr16_r 
      001554 CD 00 00         [ 4] 1757     call format 
      001557                       1758 _fn_exit 
      001557 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      001559 81               [ 4]    2     ret
                                   1759 
                                   1760 ;---------------------------------
                                   1761 ;   form op r,([ptr8],r)
                                   1762 ;---------------------------------
      00155A 25 61 25 73 09 25 73  1763 fmt_op_r_ptr8_idx: .asciz "%a%s\t%s,([%b],%s)"
             2C 28 5B 25 62 5D 2C
             25 73 29 00
                           000001  1764     SPC=1
                           000002  1765     MNEMO=2
                           000004  1766     DEST=4
                           000006  1767     PTR8=6
                           000007  1768     SRC=7
      00156C                       1769 _fn_entry 8 fn_r_ptr8_idx  
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      00156C                          3 fn_r_ptr8_idx:
      00156C 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      00156E CD 18 39         [ 4] 1770     call get_int8 
      001571 6B 06            [ 1] 1771     ld (PTR8,sp),a 
      001573 16 0B            [ 2] 1772     ldw y,(STRUCT,sp)
      001575 CD 18 E4         [ 4] 1773     call ld_mnemonic
      001578 90 E6 03         [ 1] 1774     ld a,(FIELD_DEST,y)
      00157B 90 AE 02 BC      [ 2] 1775     ldw y,#reg_index 
      00157F CD 18 D1         [ 4] 1776     call ld_table_entry
      001582 17 04            [ 2] 1777     ldw (DEST,sp),y 
      001584 16 0B            [ 2] 1778     ldw y,(STRUCT,sp)
      001586 90 E6 04         [ 1] 1779     ld a,(FIELD_SRC,y)
      001589 90 AE 02 BC      [ 2] 1780     ldw y,#reg_index 
      00158D CD 18 D1         [ 4] 1781     call ld_table_entry
      001590 17 07            [ 2] 1782     ldw (SRC,sp),y 
      001592 90 AE 15 5A      [ 2] 1783     ldw y,#fmt_op_r_ptr8_idx  
      001596 CD 00 00         [ 4] 1784     call format 
      001599                       1785 _fn_exit 
      001599 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      00159B 81               [ 4]    2     ret
                                   1786 
                                   1787 ;---------------------------------
                                   1788 ;   form op r,([ptr16],r)
                                   1789 ;---------------------------------
      00159C 25 61 25 73 09 25 73  1790 fmt_op_r_ptr16_idx: .asciz "%a%s\t%s,([%w],%s)"
             2C 28 5B 25 77 5D 2C
             25 73 29 00
                           000001  1791     SPC=1
                           000002  1792     MNEMO=2
                           000004  1793     DEST=4
                           000006  1794     PTR16=6
                           000008  1795     SRC=8
      0015AE                       1796 _fn_entry 9 fn_r_ptr16_idx 
                           000009     1     LOCAL_SIZE = 9
                           00000C     2     STRUCT=3+LOCAL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0015AE                          3 fn_r_ptr16_idx:
      0015AE 52 09            [ 2]    4     sub sp,#LOCAL_SIZE
      0015B0 CD 18 5A         [ 4] 1797     call get_int16 
      0015B3 17 06            [ 2] 1798     ldw (PTR16,sp),y 
      0015B5 16 0C            [ 2] 1799     ldw y,(STRUCT,sp)
      0015B7 CD 18 E4         [ 4] 1800     call ld_mnemonic
      0015BA 90 E6 03         [ 1] 1801     ld a,(FIELD_DEST,y)
      0015BD 90 AE 02 BC      [ 2] 1802     ldw y,#reg_index
      0015C1 CD 18 D1         [ 4] 1803     call ld_table_entry
      0015C4 17 04            [ 2] 1804     ldw (DEST,sp),y
      0015C6 16 0C            [ 2] 1805     ldw y,(STRUCT,sp) 
      0015C8 90 E6 04         [ 1] 1806     ld a,(FIELD_SRC,y)
      0015CB 90 AE 02 BC      [ 2] 1807     ldw y,#reg_index
      0015CF CD 18 D1         [ 4] 1808     call ld_table_entry
      0015D2 17 08            [ 2] 1809     ldw (SRC,sp),y 
      0015D4 90 AE 15 9C      [ 2] 1810     ldw y,#fmt_op_r_ptr16_idx  
      0015D8 CD 00 00         [ 4] 1811     call format 
      0015DB                       1812 _fn_exit 
      0015DB 5B 09            [ 2]    1     addw sp,#LOCAL_SIZE 
      0015DD 81               [ 4]    2     ret
                                   1813 
                                   1814 ;---------------------------------
                                   1815 ;   form op ([ptr8],r),r
                                   1816 ;---------------------------------
      0015DE 25 61 25 73 09 28 5B  1817 fmt_op_ptr8_idx_r: .asciz "%a%s\t([%b],%s),%s"
             25 62 5D 2C 25 73 29
             2C 25 73 00
                           000001  1818     SPC=1
                           000002  1819     MNEMO=2
                           000004  1820     PTR8=4
                           000005  1821     DEST=5
                           000007  1822     SRC=7
      0015F0                       1823 _fn_entry 8 fn_ptr8_idx_r
                           000008     1     LOCAL_SIZE = 8
                           00000B     2     STRUCT=3+LOCAL_SIZE
      0015F0                          3 fn_ptr8_idx_r:
      0015F0 52 08            [ 2]    4     sub sp,#LOCAL_SIZE
      0015F2 CD 18 39         [ 4] 1824     call get_int8 
      0015F5 6B 04            [ 1] 1825     ld (PTR8,sp),a 
      0015F7 16 0B            [ 2] 1826     ldw y,(STRUCT,sp)
      0015F9 CD 18 E4         [ 4] 1827     call ld_mnemonic
      0015FC 90 E6 03         [ 1] 1828     ld a,(FIELD_DEST,y)
      0015FF 90 AE 02 BC      [ 2] 1829     ldw y,#reg_index 
      001603 CD 18 D1         [ 4] 1830     call ld_table_entry
      001606 17 05            [ 2] 1831     ldw (DEST,sp),y 
      001608 16 0B            [ 2] 1832     ldw y,(STRUCT,sp)
      00160A 90 E6 04         [ 1] 1833     ld a,(FIELD_SRC,y)
      00160D 90 AE 02 BC      [ 2] 1834     ldw y,#reg_index 
      001611 CD 18 D1         [ 4] 1835     call ld_table_entry
      001614 17 07            [ 2] 1836     ldw (SRC,sp),y 
      001616 90 AE 15 DE      [ 2] 1837     ldw y,#fmt_op_ptr8_idx_r 
      00161A CD 00 00         [ 4] 1838     call format 
      00161D                       1839 _fn_exit 
      00161D 5B 08            [ 2]    1     addw sp,#LOCAL_SIZE 
      00161F 81               [ 4]    2     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1840 
                                   1841 ;---------------------------------
                                   1842 ;   form op ([ptr16],r),r
                                   1843 ;---------------------------------
      001620 25 61 25 73 09 28 5B  1844 fmt_op_ptr16_idx_r: .asciz "%a%s\t([%w],%s),%s"
             25 77 5D 2C 25 73 29
             2C 25 73 00
                           000001  1845     SPC=1
                           000002  1846     MNEMO=2
                           000004  1847     PTR16=4
                           000006  1848     DEST=6
                           000008  1849     SRC=8
      001632                       1850 _fn_entry 9 fn_ptr16_idx_r 
                           000009     1     LOCAL_SIZE = 9
                           00000C     2     STRUCT=3+LOCAL_SIZE
      001632                          3 fn_ptr16_idx_r:
      001632 52 09            [ 2]    4     sub sp,#LOCAL_SIZE
      001634 CD 18 5A         [ 4] 1851     call get_int16
      001637 17 04            [ 2] 1852     ldw (PTR16,sp),y
      001639 16 0C            [ 2] 1853     ldw y,(STRUCT,sp)
      00163B CD 18 E4         [ 4] 1854     call ld_mnemonic
      00163E 90 E6 03         [ 1] 1855     ld a,(FIELD_DEST,y)
      001641 90 AE 02 BC      [ 2] 1856     ldw y,#reg_index 
      001645 CD 18 D1         [ 4] 1857     call ld_table_entry
      001648 17 06            [ 2] 1858     ldw (DEST,sp),y 
      00164A 16 0C            [ 2] 1859     ldw y,(STRUCT,sp)
      00164C 90 E6 04         [ 1] 1860     ld a,(FIELD_SRC,y)
      00164F 90 AE 02 BC      [ 2] 1861     ldw y,#reg_index 
      001653 CD 18 D1         [ 4] 1862     call ld_table_entry
      001656 17 08            [ 2] 1863     ldw (SRC,sp),y 
      001658 90 AE 16 20      [ 2] 1864     ldw y,#fmt_op_ptr16_idx_r 
      00165C CD 00 00         [ 4] 1865     call format 
      00165F                       1866 _fn_exit 
      00165F 5B 09            [ 2]    1     addw sp,#LOCAL_SIZE 
      001661 81               [ 4]    2     ret
                                   1867 
                                   1868 ;---------------------------------
                                   1869 ;   form op (ofs16,r)
                                   1870 ;---------------------------------
      001662 25 61 25 73 09 28 25  1871 fmt_op_ofs16_idx: .asciz "%a%s\t(%w,%s)"
             77 2C 25 73 29 00
                           000001  1872     SPC=1
                           000002  1873     MNEMO=2
                           000004  1874     OFS16=4
                           000006  1875     SRC=6
      00166F                       1876 _fn_entry 7 fn_ofs16_idx 
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      00166F                          3 fn_ofs16_idx:
      00166F 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      001671 CD 18 5A         [ 4] 1877     call get_int16  
      001674 17 04            [ 2] 1878     ldw (OFS16,sp),y 
      001676 16 0A            [ 2] 1879     ldw y,(STRUCT,sp)
      001678 CD 18 E4         [ 4] 1880     call ld_mnemonic
      00167B 90 E6 04         [ 1] 1881     ld a,(FIELD_SRC,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      00167E 90 AE 02 BC      [ 2] 1882     ldw y,#reg_index 
      001682 CD 18 D1         [ 4] 1883     call ld_table_entry
      001685 17 06            [ 2] 1884     ldw (SRC,sp),y 
      001687 90 AE 16 62      [ 2] 1885     ldw y,#fmt_op_ofs16_idx 
      00168B CD 00 00         [ 4] 1886     call format 
      00168E                       1887 _fn_exit 
      00168E 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      001690 81               [ 4]    2     ret
                                   1888 
                                   1889 
                                   1890 ;---------------------------------
                                   1891 ; form op r,(ofs16,r)
                                   1892 ;---------------------------------
      001691 25 61 25 73 09 25 73  1893 fmt_op_r_ofs16_idx: .asciz "%a%s\t%s,(%w,%s)"
             2C 28 25 77 2C 25 73
             29 00
                           000001  1894     SPC=1
                           000002  1895     MNEMO=2
                           000004  1896     DEST=4
                           000006  1897     OFS16=6 
                           000008  1898     SRC=8
      0016A1                       1899 _fn_entry 9 fn_r_ofs16_idx
                           000009     1     LOCAL_SIZE = 9
                           00000C     2     STRUCT=3+LOCAL_SIZE
      0016A1                          3 fn_r_ofs16_idx:
      0016A1 52 09            [ 2]    4     sub sp,#LOCAL_SIZE
      0016A3 CD 18 5A         [ 4] 1900     call get_int16 
      0016A6 17 06            [ 2] 1901     ldw (OFS16,sp),y 
      0016A8 16 0C            [ 2] 1902     ldw y,(STRUCT,sp)
      0016AA CD 18 E4         [ 4] 1903     call ld_mnemonic
      0016AD 90 E6 03         [ 1] 1904     ld a,(FIELD_DEST,y)
      0016B0 90 AE 02 BC      [ 2] 1905     ldw y,#reg_index
      0016B4 CD 18 D1         [ 4] 1906     call ld_table_entry
      0016B7 17 04            [ 2] 1907     ldw (DEST,sp),y 
      0016B9 16 0C            [ 2] 1908     ldw y,(STRUCT,sp)
      0016BB 90 E6 04         [ 1] 1909     ld a,(FIELD_SRC,y)
      0016BE 90 AE 02 BC      [ 2] 1910     ldw y,#reg_index 
      0016C2 CD 18 D1         [ 4] 1911     call ld_table_entry
      0016C5 17 08            [ 2] 1912     ldw (SRC,sp),y 
      0016C7 90 AE 16 91      [ 2] 1913     ldw y,#fmt_op_r_ofs16_idx
      0016CB CD 00 00         [ 4] 1914     call format 
      0016CE                       1915 _fn_exit 
      0016CE 5B 09            [ 2]    1     addw sp,#LOCAL_SIZE 
      0016D0 81               [ 4]    2     ret
                                   1916 
                                   1917 ;---------------------------------
                                   1918 ;  form op (ofs16,r),r 
                                   1919 ;---------------------------------
      0016D1 25 61 25 73 09 28 25  1920 fmt_op_ofs16_idx_r: .asciz "%a%s\t(%w,%s),%s"
             77 2C 25 73 29 2C 25
             73 00
                           000001  1921     SPC=1
                           000002  1922     MNEMO=2
                           000004  1923     OFS16=4
                           000006  1924     DEST=6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000008  1925     SRC=8
      0016E1                       1926 _fn_entry 9 fn_ofs16_idx_r
                           000009     1     LOCAL_SIZE = 9
                           00000C     2     STRUCT=3+LOCAL_SIZE
      0016E1                          3 fn_ofs16_idx_r:
      0016E1 52 09            [ 2]    4     sub sp,#LOCAL_SIZE
      0016E3 CD 18 5A         [ 4] 1927     call get_int16 
      0016E6 17 04            [ 2] 1928     ldw (OFS16,sp),y 
      0016E8 16 0C            [ 2] 1929     ldw y,(STRUCT,sp)
      0016EA CD 18 E4         [ 4] 1930     call ld_mnemonic
      0016ED 90 E6 03         [ 1] 1931     ld a,(FIELD_DEST,y)
      0016F0 90 AE 02 BC      [ 2] 1932     ldw y,#reg_index 
      0016F4 CD 18 D1         [ 4] 1933     call ld_table_entry
      0016F7 17 06            [ 2] 1934     ldw (DEST,sp),y 
      0016F9 16 0C            [ 2] 1935     ldw y,(STRUCT,sp)
      0016FB 90 E6 04         [ 1] 1936     ld a,(FIELD_SRC,y)
      0016FE 90 AE 02 BC      [ 2] 1937     ldw y,#reg_index 
      001702 CD 18 D1         [ 4] 1938     call ld_table_entry
      001705 17 08            [ 2] 1939     ldw (SRC,sp),y 
      001707 90 AE 16 D1      [ 2] 1940     ldw y,#fmt_op_ofs16_idx_r 
      00170B CD 00 00         [ 4] 1941     call format 
      00170E                       1942 _fn_exit 
      00170E 5B 09            [ 2]    1     addw sp,#LOCAL_SIZE 
      001710 81               [ 4]    2     ret
                                   1943 
                                   1944 ;---------------------------------
                                   1945 ;  op r,(ofs24,r)
                                   1946 ;---------------------------------
      001711 25 61 25 73 09 25 73  1947 fmt_op_r_ofs24_idx: .asciz "%a%s\t%s,(%e,%s)" 
             2C 28 25 65 2C 25 73
             29 00
                           000001  1948     SPC=1
                           000002  1949     MNEMO=2
                           000004  1950     DEST=4
                           000006  1951     OFS24=6
                           000009  1952     SRC=9
      001721                       1953 _fn_entry 10 fn_r_ofs24_idx 
                           00000A     1     LOCAL_SIZE = 10
                           00000D     2     STRUCT=3+LOCAL_SIZE
      001721                          3 fn_r_ofs24_idx:
      001721 52 0A            [ 2]    4     sub sp,#LOCAL_SIZE
      001723 CD 18 79         [ 4] 1954     call get_int24 
      001726 17 06            [ 2] 1955     ldw (OFS24,sp),y 
      001728 6B 08            [ 1] 1956     ld (OFS24+2,sp),a 
      00172A 16 0D            [ 2] 1957     ldw y,(STRUCT,sp)
      00172C CD 18 E4         [ 4] 1958     call ld_mnemonic
      00172F 90 E6 03         [ 1] 1959     ld a,(FIELD_DEST,y)
      001732 90 AE 02 BC      [ 2] 1960     ldw y,#reg_index 
      001736 CD 18 D1         [ 4] 1961     call ld_table_entry
      001739 17 04            [ 2] 1962     ldw (DEST,sp),y 
      00173B 16 0D            [ 2] 1963     ldw y,(STRUCT,sp)
      00173D 90 E6 04         [ 1] 1964     ld a,(FIELD_SRC,y)
      001740 90 AE 02 BC      [ 2] 1965     ldw y,#reg_index 
      001744 CD 18 D1         [ 4] 1966     call ld_table_entry
      001747 17 09            [ 2] 1967     ldw (SRC,sp),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      001749 90 AE 17 11      [ 2] 1968     ldw y,#fmt_op_r_ofs24_idx
      00174D CD 00 00         [ 4] 1969     call format 
      001750                       1970 _fn_exit 
      001750 5B 0A            [ 2]    1     addw sp,#LOCAL_SIZE 
      001752 81               [ 4]    2     ret
                                   1971 
                                   1972 ;---------------------------------
                                   1973 ; op (ofs24,r),r 
                                   1974 ;---------------------------------
      001753 25 61 25 73 09 28 25  1975 fmt_ofs24_idx_r: .asciz "%a%s\t(%e,%s),%s"
             65 2C 25 73 29 2C 25
             73 00
                           000001  1976     SPC=1
                           000002  1977     MNEMO=2
                           000004  1978     OFS24=4
                           000007  1979     DEST=7
                           000009  1980     SRC=9
      001763                       1981 _fn_entry 10 fn_ofs24_idx_r 
                           00000A     1     LOCAL_SIZE = 10
                           00000D     2     STRUCT=3+LOCAL_SIZE
      001763                          3 fn_ofs24_idx_r:
      001763 52 0A            [ 2]    4     sub sp,#LOCAL_SIZE
      001765 CD 18 79         [ 4] 1982     call get_int24 
      001768 17 04            [ 2] 1983     ldw (OFS24,sp),y
      00176A 6B 06            [ 1] 1984     ld (OFS24+2,sp),a
      00176C 16 0D            [ 2] 1985     ldw y,(STRUCT,sp)
      00176E CD 18 E4         [ 4] 1986     call ld_mnemonic
      001771 90 E6 03         [ 1] 1987     ld a,(FIELD_DEST,y)
      001774 90 AE 02 BC      [ 2] 1988     ldw y,#reg_index 
      001778 CD 18 D1         [ 4] 1989     call ld_table_entry
      00177B 17 07            [ 2] 1990     ldw (DEST,sp),y 
      00177D 16 0D            [ 2] 1991     ldw y,(STRUCT,sp)
      00177F 90 E6 04         [ 1] 1992     ld a,(FIELD_SRC,y)
      001782 90 AE 02 BC      [ 2] 1993     ldw y,#reg_index 
      001786 CD 18 D1         [ 4] 1994     call ld_table_entry
      001789 17 09            [ 2] 1995     ldw (SRC,sp),y
      00178B 90 AE 17 53      [ 2] 1996     ldw y,#fmt_ofs24_idx_r 
      00178F CD 00 00         [ 4] 1997     call format 
      001792                       1998 _fn_exit 
      001792 5B 0A            [ 2]    1     addw sp,#LOCAL_SIZE 
      001794 81               [ 4]    2     ret
                                   1999 
                                   2000 ;---------------------------------
                                   2001 ; form op [adr16]
                                   2002 ;---------------------------------
      001795 25 61 25 73 09 25 5B  2003 fmt_op_ptr8: .asciz "%a%s\t%[%b]"
             25 62 5D 00
                           000001  2004     SPC=1
                           000002  2005     MNEMO=2
                           000004  2006     ADR8=4
      0017A0                       2007 _fn_entry 4 fn_ptr8 
                           000004     1     LOCAL_SIZE = 4
                           000007     2     STRUCT=3+LOCAL_SIZE
      0017A0                          3 fn_ptr8:
      0017A0 52 04            [ 2]    4     sub sp,#LOCAL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      0017A2 CD 18 39         [ 4] 2008     call get_int8
      0017A5 6B 04            [ 1] 2009     ld (ADR8,sp),a 
      0017A7 16 07            [ 2] 2010     ldw y,(STRUCT,sp)
      0017A9 CD 18 E4         [ 4] 2011     call ld_mnemonic
      0017AC 90 AE 17 95      [ 2] 2012     ldw y,#fmt_op_ptr8 
      0017B0 CD 00 00         [ 4] 2013     call format 
      0017B3                       2014 _fn_exit 
      0017B3 5B 04            [ 2]    1     addw sp,#LOCAL_SIZE 
      0017B5 81               [ 4]    2     ret
                                   2015 
                                   2016 ;---------------------------------
                                   2017 ; form op [adr16]
                                   2018 ;---------------------------------
      0017B6 25 61 25 73 09 25 5B  2019 fmt_op_ptr16: .asciz "%a%s\t%[%w]"
             25 77 5D 00
                           000001  2020     SPC=1
                           000002  2021     MNEMO=2
                           000004  2022     ADR16=4
      0017C1                       2023 _fn_entry 5 fn_ptr16 
                           000005     1     LOCAL_SIZE = 5
                           000008     2     STRUCT=3+LOCAL_SIZE
      0017C1                          3 fn_ptr16:
      0017C1 52 05            [ 2]    4     sub sp,#LOCAL_SIZE
      0017C3 CD 18 5A         [ 4] 2024     call get_int16 
      0017C6 17 04            [ 2] 2025     ldw (ADR16,sp),y 
      0017C8 16 08            [ 2] 2026     ldw y,(STRUCT,sp)
      0017CA CD 18 E4         [ 4] 2027     call ld_mnemonic
      0017CD 90 AE 17 B6      [ 2] 2028     ldw y,#fmt_op_ptr16 
      0017D1 CD 00 00         [ 4] 2029     call format 
      0017D4                       2030 _fn_exit 
      0017D4 5B 05            [ 2]    1     addw sp,#LOCAL_SIZE 
      0017D6 81               [ 4]    2     ret
                                   2031 
                                   2032 ;---------------------------------
                                   2033 ; form op ([ptr8],r) 
                                   2034 ;---------------------------------
      0017D7 25 61 25 73 09 28 5B  2035 fmt_op_ptr8_idx: .asciz "%a%s\t([%b],%s)"
             25 62 5D 2C 25 73 29
             00
                           000001  2036     SPC=1
                           000002  2037     MNEMO=2
                           000004  2038     ADR8=4
                           000005  2039     DEST=5
      0017E6                       2040 _fn_entry 6 fn_ptr8_idx 
                           000006     1     LOCAL_SIZE = 6
                           000009     2     STRUCT=3+LOCAL_SIZE
      0017E6                          3 fn_ptr8_idx:
      0017E6 52 06            [ 2]    4     sub sp,#LOCAL_SIZE
      0017E8 CD 18 39         [ 4] 2041     call get_int8 
      0017EB 6B 04            [ 1] 2042     ld (ADR8,sp),a 
      0017ED 16 09            [ 2] 2043     ldw y,(STRUCT,sp)
      0017EF CD 18 E4         [ 4] 2044     call ld_mnemonic
      0017F2 90 E6 03         [ 1] 2045     ld a,(FIELD_DEST,y)
      0017F5 90 AE 02 BC      [ 2] 2046     ldw y,#reg_index 
      0017F9 CD 18 D1         [ 4] 2047     call ld_table_entry
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0017FC 17 05            [ 2] 2048     ldw (DEST,sp),y 
      0017FE 90 AE 17 D7      [ 2] 2049     ldw y,#fmt_op_ptr8_idx
      001802 CD 00 00         [ 4] 2050     call format 
      001805                       2051 _fn_exit 
      001805 5B 06            [ 2]    1     addw sp,#LOCAL_SIZE 
      001807 81               [ 4]    2     ret
                                   2052 
                                   2053 ;---------------------------------
                                   2054 ; form op ([ptr16],r) 
                                   2055 ;---------------------------------
      001808 25 61 25 73 09 28 5B  2056 fmt_op_ptr16_idx: .asciz "%a%s\t([%w],%s)"
             25 77 5D 2C 25 73 29
             00
                           000001  2057     SPC=1
                           000002  2058     MNEMO=2
                           000004  2059     ADR16=4
                           000006  2060     DEST=6
      001817                       2061 _fn_entry 7 fn_ptr16_idx 
                           000007     1     LOCAL_SIZE = 7
                           00000A     2     STRUCT=3+LOCAL_SIZE
      001817                          3 fn_ptr16_idx:
      001817 52 07            [ 2]    4     sub sp,#LOCAL_SIZE
      001819 CD 18 5A         [ 4] 2062     call get_int16 
      00181C 17 04            [ 2] 2063     ldw (ADR16,sp),y 
      00181E 16 0A            [ 2] 2064     ldw y,(STRUCT,sp)
      001820 CD 18 E4         [ 4] 2065     call ld_mnemonic
      001823 90 E6 03         [ 1] 2066     ld a,(FIELD_DEST,y)
      001826 90 AE 02 BC      [ 2] 2067     ldw y,#reg_index 
      00182A CD 18 D1         [ 4] 2068     call ld_table_entry
      00182D 17 06            [ 2] 2069     ldw (DEST,sp),y 
      00182F 90 AE 18 08      [ 2] 2070     ldw y,#fmt_op_ptr16_idx
      001833 CD 00 00         [ 4] 2071     call format 
      001836                       2072 _fn_exit 
      001836 5B 07            [ 2]    1     addw sp,#LOCAL_SIZE 
      001838 81               [ 4]    2     ret
                                   2073 
                                   2074 
                                   2075 ;---------------------------------
                                   2076 ; get_int8 
                                   2077 ; read 1 byte from code 
                                   2078 ; print byte in hexadecimal
                                   2079 ; input:
                                   2080 ;   farptr  pointer to code 
                                   2081 ;   X       index for farptr 
                                   2082 ; output:
                                   2083 ;   A       byte read 
                                   2084 ;   acc24   A sign extended to 24 bits 
                                   2085 ;   X       incremented by 1
                                   2086 ;---------------------------------
      001839                       2087 get_int8:
      001839 CD 00 00         [ 4] 2088     call peek
      00183C 88               [ 1] 2089     push a 
      00183D CD 00 00         [ 4] 2090     call print_byte 
      001840 84               [ 1] 2091     pop a 
      001841 C7 00 00         [ 1] 2092     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      001844 72 5F 00 00      [ 1] 2093     clr acc16
      001848 72 5F 00 00      [ 1] 2094     clr acc24
      00184C 72 0F 00 00 08   [ 2] 2095     btjf acc8,#7,1$
      001851 72 53 00 00      [ 1] 2096     cpl acc16 
      001855 72 53 00 00      [ 1] 2097     cpl acc24 
      001859                       2098 1$:          
      001859 81               [ 4] 2099     ret
                                   2100 
                                   2101 ;---------------------------------
                                   2102 ; get_int16 
                                   2103 ; read two bytes as 16 bits integer 
                                   2104 ; form code space  
                                   2105 ; print bytes separately
                                   2106 ; input:
                                   2107 ;   farptr      pointer to code 
                                   2108 ;   X           index for farptr 
                                   2109 ; output:
                                   2110 ;   Y           16 bits integer 
                                   2111 ;   acc24       Y zero extended    
                                   2112 ;   X           incremented by 2
                                   2113 ;--------------------------------
                           000001  2114     ADDR16 = 1
                           000002  2115     LOCAL_SIZE = 2
      00185A                       2116 get_int16:
      00185A 52 02            [ 2] 2117     sub sp,#LOCAL_SIZE
      00185C CD 00 00         [ 4] 2118     call peek 
      00185F 6B 01            [ 1] 2119     ld (ADDR16,sp),a 
      001861 CD 00 00         [ 4] 2120     call print_byte 
      001864 CD 00 00         [ 4] 2121     call peek 
      001867 6B 02            [ 1] 2122     ld (ADDR16+1,sp),a 
      001869 CD 00 00         [ 4] 2123     call print_byte
      00186C 16 01            [ 2] 2124     ldw y, (ADDR16,sp)
      00186E 90 CF 00 00      [ 2] 2125     ldw acc16,y
      001872 72 5F 00 00      [ 1] 2126     clr acc24 
      001876 5B 02            [ 2] 2127     addw sp,#LOCAL_SIZE 
      001878 81               [ 4] 2128     ret 
                                   2129 
                                   2130 ;--------------------------------
                                   2131 ;  get_int24
                                   2132 ;  read 3 bytes as a 24 bits integer 
                                   2133 ;  from code space 
                                   2134 ;  print bytes separately
                                   2135 ; input:
                                   2136 ;   farptr      pointer to code 
                                   2137 ;   X           index for farptr 
                                   2138 ; output:
                                   2139 ;   Y           bits 23:16 of integer
                                   2140 ;   A           bits 7:0  of integer 
                                   2141 ;   acc24       24 bits integer   
                                   2142 ;   X           incremented by 3
                                   2143 ;---------------------------------
                           000001  2144     ADDR24 = 1 
                           000003  2145     LOCAL_SIZE=3
      001879                       2146 get_int24:
      001879 52 03            [ 2] 2147     sub sp,#LOCAL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00187B CD 00 00         [ 4] 2148     call peek
      00187E 6B 01            [ 1] 2149     ld (ADDR24,sp),a 
      001880 CD 00 00         [ 4] 2150     call print_byte 
      001883 CD 00 00         [ 4] 2151     call peek 
      001886 6B 02            [ 1] 2152     ld (ADDR24+1,sp),a 
      001888 CD 00 00         [ 4] 2153     call print_byte 
      00188B CD 00 00         [ 4] 2154     call peek 
      00188E 6B 03            [ 1] 2155     ld (ADDR24+2,sp),a 
      001890 CD 00 00         [ 4] 2156     call print_byte 
      001893 16 01            [ 2] 2157     ldw y,(ADDR24,sp)
      001895 90 CF 00 00      [ 2] 2158     ldw acc24,y 
      001899 7B 03            [ 1] 2159     ld a, (ADDR24+2,sp)
      00189B C7 00 00         [ 1] 2160     ld acc8,a 
      00189E 5B 03            [ 2] 2161     addw sp,#LOCAL_SIZE
      0018A0 81               [ 4] 2162     ret 
                                   2163 
                                   2164 ;---------------------------------
                                   2165 ; compute absolute address 
                                   2166 ; from relative address 
                                   2167 ; input:
                                   2168 ;   A       rel8 
                                   2169 ;   X       table index, farptr[X]
                                   2170 ;   farptr  location pointer 
                                   2171 ; output:
                                   2172 ;   acc24    absolute address 
                                   2173 ;----------------------------------
      0018A1                       2174 abs_addr:
      0018A1 89               [ 2] 2175     pushw x
      0018A2 C7 00 00         [ 1] 2176     ld acc8,a 
      0018A5 72 5F 00 00      [ 1] 2177     clr acc16 
      0018A9 72 5F 00 00      [ 1] 2178     clr acc24
      0018AD 72 0F 00 00 08   [ 2] 2179     btjf acc8,#7,1$
      0018B2 72 53 00 00      [ 1] 2180     cpl acc16 
      0018B6 72 53 00 00      [ 1] 2181     cpl acc24 
      0018BA 4F               [ 1] 2182 1$: clr a 
      0018BB 72 BB 00 01      [ 2] 2183     addw x,farptr+1 
      0018BF C9 00 00         [ 1] 2184     adc a,farptr 
      0018C2 72 BB 00 00      [ 2] 2185     addw x,acc16 
      0018C6 C9 00 00         [ 1] 2186     adc a,acc24 
      0018C9 C7 00 00         [ 1] 2187     ld acc24,a 
      0018CC CF 00 00         [ 2] 2188     ldw acc16,x
      0018CF 85               [ 2] 2189     popw x 
      0018D0 81               [ 4] 2190     ret
                                   2191 
                                   2192 ;--------------------------------
                                   2193 ; y = y[2*A]
                                   2194 ; input:
                                   2195 ;   Y     address of .word table 
                                   2196 ;   A     index in table 
                                   2197 ; output:
                                   2198 ;   Y     Y=Y[2*A]
                                   2199 ;--------------------------------
      0018D1                       2200 ld_table_entry:
      0018D1 72 5F 00 00      [ 1] 2201     clr acc16
      0018D5 48               [ 1] 2202     sll a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      0018D6 72 59 00 00      [ 1] 2203     rlc acc16
      0018DA C7 00 00         [ 1] 2204     ld acc8,a 
      0018DD 72 B9 00 00      [ 2] 2205     addw y,acc16 
      0018E1 90 FE            [ 2] 2206     ldw y,(y)
      0018E3 81               [ 4] 2207     ret 
                                   2208     
                                   2209 ;---------------------------------
                                   2210 ; prepare SPC and MNEMO arguments
                                   2211 ; for format sub-routine.
                                   2212 ; This is the same for all fn_* subs.
                                   2213 ; input:
                                   2214 ;   Y       pointer to opcode structure 
                                   2215 ; output:
                                   2216 ;   none 
                                   2217 ;-------------------------------------
                           000005  2218     SPC=5
                           000006  2219     MNEMO=6 
      0018E4                       2220 ld_mnemonic:
                                   2221 ;compute alignment spaces 
      0018E4 90 89            [ 2] 2222     pushw y
      0018E6 9F               [ 1] 2223     ld a,xl 
      0018E7 48               [ 1] 2224     sll a 
      0018E8 48               [ 1] 2225     sll a 
      0018E9 C7 00 00         [ 1] 2226     ld acc8,a 
      0018EC A6 18            [ 1] 2227     ld a,#24
      0018EE C0 00 00         [ 1] 2228     sub a,acc8
      0018F1 6B 05            [ 1] 2229     ld (SPC,sp),a 
      0018F3 90 E6 01         [ 1] 2230     ld a,(FIELD_MNEMO,y)
      0018F6 72 5F 00 00      [ 1] 2231     clr acc16 
      0018FA 48               [ 1] 2232     sll a 
      0018FB 72 59 00 00      [ 1] 2233     rlc acc16 
      0018FF C7 00 00         [ 1] 2234     ld acc8,a
      001902 90 AE 00 00      [ 2] 2235     ldw y,#mnemo_index  
      001906 72 B9 00 00      [ 2] 2236     addw y,acc16
      00190A 90 FE            [ 2] 2237     ldw y,(y)
      00190C 17 06            [ 2] 2238     ldw (MNEMO,sp),y 
      00190E 90 85            [ 2] 2239     popw y 
      001910 81               [ 4] 2240     ret 
                                   2241 
                                   2242 
                                   2243 

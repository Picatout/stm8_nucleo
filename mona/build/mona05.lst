ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;  MONA   MONitor written in Assembly
                                     20 	.module MONA 
                                     21     .optsdcc -mstm8
                                     22 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     23 	.include "../inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36 ; B1 on schematic is user button
                                     37 ; connected to PE4
                                     38 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    39 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    40 USR_BTN_BIT = 4
                           000010    41 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     42 
                                     43 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     24 	.include "../inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 
                           000000    62  RAM_BASE = (0)
                           0017FF    63  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    64  EEPROM_BASE = (0x4000)
                           0047FF    65  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    66  SFR_BASE = (0x5000)
                           0057FF    67  SFR_END = (0x57FF)
                           006000    68  BOOT_ROM_BASE = (0x6000)
                           007FFF    69  BOOT_ROM_END = (0x7fff)
                           008000    70  FLASH_BASE = (0x8000)
                           027FFF    71  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    72  OPTION_BASE = (0x4800)
                           00487F    73  OPTION_END = (0x487F)
                           0048CD    74  DEVID_BASE = (0x48CD)
                           0048D8    75  DEVID_END = (0x48D8)
                           007F00    76  DEBUG_BASE = (0X7F00)
                           007FFF    77  DEBUG_END = (0X7FFF)
                                     78 
                                     79 ; options bytes
                                     80 ; this one can be programmed only from SWIM  (ICP)
                           004800    81  OPT0  = (0x4800)
                                     82 ; these can be programmed at runtime (IAP)
                           004801    83  OPT1  = (0x4801)
                           004802    84  NOPT1  = (0x4802)
                           004803    85  OPT2  = (0x4803)
                           004804    86  NOPT2  = (0x4804)
                           004805    87  OPT3  = (0x4805)
                           004806    88  NOPT3  = (0x4806)
                           004807    89  OPT4  = (0x4807)
                           004808    90  NOPT4  = (0x4808)
                           004809    91  OPT5  = (0x4809)
                           00480A    92  NOPT5  = (0x480A)
                           00480B    93  OPT6  = (0x480B)
                           00480C    94  NOPT6 = (0x480C)
                           00480D    95  OPT7 = (0x480D)
                           00480E    96  NOPT7 = (0x480E)
                           00487E    97  OPTBL  = (0x487E)
                           00487F    98  NOPTBL  = (0x487F)
                                     99 ; option registers usage
                                    100 ; read out protection, value 0xAA enable ROP
                           004800   101  ROP = OPT0  
                                    102 ; user boot code, {0..0x3e} 512 bytes row
                           004801   103  UBC = OPT1
                           004802   104  NUBC = NOPT1
                                    105 ; alternate function register
                           004803   106  AFR = OPT2
                           004804   107  NAFR = NOPT2
                                    108 ; miscelinous options
                           004805   109  WDGOPT = OPT3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           004806   110  NWDGOPT = NOPT3
                                    111 ; clock options
                           004807   112  CLKOPT = OPT4
                           004808   113  NCLKOPT = NOPT4
                                    114 ; HSE clock startup delay
                           004809   115  HSECNT = OPT5
                           00480A   116  NHSECNT = NOPT5
                                    117 ; flash wait state
                           00480D   118 FLASH_WS = OPT7
                           00480E   119 NFLASH_WS = NOPT7
                                    120 
                                    121 ; watchdog options bits
                           000003   122   WDGOPT_LSIEN   =  BIT3
                           000002   123   WDGOPT_IWDG_HW =  BIT2
                           000001   124   WDGOPT_WWDG_HW =  BIT1
                           000000   125   WDGOPT_WWDG_HALT = BIT0
                                    126 ; NWDGOPT bits
                           FFFFFFFC   127   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   128   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   129   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   130   NWDGOPT_WWDG_HALT = ~BIT0
                                    131 
                                    132 ; CLKOPT bits
                           000003   133  CLKOPT_EXT_CLK  = BIT3
                           000002   134  CLKOPT_CKAWUSEL = BIT2
                           000001   135  CLKOPT_PRS_C1   = BIT1
                           000000   136  CLKOPT_PRS_C0   = BIT0
                                    137 
                                    138 ; AFR option, remapable functions
                           000007   139  AFR7_BEEP    = BIT7
                           000006   140  AFR6_I2C     = BIT6
                           000005   141  AFR5_TIM1    = BIT5
                           000004   142  AFR4_TIM1    = BIT4
                           000003   143  AFR3_TIM1    = BIT3
                           000002   144  AFR2_CCO     = BIT2
                           000001   145  AFR1_TIM2    = BIT1
                           000000   146  AFR0_ADC     = BIT0
                                    147 
                                    148 ; device ID = (read only)
                           0048CD   149  DEVID_XL  = (0x48CD)
                           0048CE   150  DEVID_XH  = (0x48CE)
                           0048CF   151  DEVID_YL  = (0x48CF)
                           0048D0   152  DEVID_YH  = (0x48D0)
                           0048D1   153  DEVID_WAF  = (0x48D1)
                           0048D2   154  DEVID_LOT0  = (0x48D2)
                           0048D3   155  DEVID_LOT1  = (0x48D3)
                           0048D4   156  DEVID_LOT2  = (0x48D4)
                           0048D5   157  DEVID_LOT3  = (0x48D5)
                           0048D6   158  DEVID_LOT4  = (0x48D6)
                           0048D7   159  DEVID_LOT5  = (0x48D7)
                           0048D8   160  DEVID_LOT6  = (0x48D8)
                                    161 
                                    162 
                           005000   163 GPIO_BASE = (0x5000)
                           000005   164 GPIO_SIZE = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    165 ; PORTS SFR OFFSET
                           000000   166 PA = 0
                           000005   167 PB = 5
                           00000A   168 PC = 10
                           00000F   169 PD = 15
                           000014   170 PE = 20
                           000019   171 PF = 25
                           00001E   172 PG = 30
                                    173 
                                    174 ; GPIO
                                    175 ; gpio register offset to base
                           000000   176  GPIO_ODR = 0
                           000001   177  GPIO_IDR = 1
                           000002   178  GPIO_DDR = 2
                           000003   179  GPIO_CR1 = 3
                           000004   180  GPIO_CR2 = 4
                                    181 
                                    182 ; port A
                           005000   183  PA_BASE = (0X5000)
                           005000   184  PA_ODR  = (0x5000)
                           005001   185  PA_IDR  = (0x5001)
                           005002   186  PA_DDR  = (0x5002)
                           005003   187  PA_CR1  = (0x5003)
                           005004   188  PA_CR2  = (0x5004)
                                    189 ; port B
                           005005   190  PB_BASE = (0X5005)
                           005005   191  PB_ODR  = (0x5005)
                           005006   192  PB_IDR  = (0x5006)
                           005007   193  PB_DDR  = (0x5007)
                           005008   194  PB_CR1  = (0x5008)
                           005009   195  PB_CR2  = (0x5009)
                                    196 ; port C
                           00500A   197  PC_BASE = (0X500A)
                           00500A   198  PC_ODR  = (0x500A)
                           00500B   199  PC_IDR  = (0x500B)
                           00500C   200  PC_DDR  = (0x500C)
                           00500D   201  PC_CR1  = (0x500D)
                           00500E   202  PC_CR2  = (0x500E)
                                    203 ; port D
                           00500F   204  PD_BASE = (0X500F)
                           00500F   205  PD_ODR  = (0x500F)
                           005010   206  PD_IDR  = (0x5010)
                           005011   207  PD_DDR  = (0x5011)
                           005012   208  PD_CR1  = (0x5012)
                           005013   209  PD_CR2  = (0x5013)
                                    210 ; port E
                           005014   211  PE_BASE = (0X5014)
                           005014   212  PE_ODR  = (0x5014)
                           005015   213  PE_IDR  = (0x5015)
                           005016   214  PE_DDR  = (0x5016)
                           005017   215  PE_CR1  = (0x5017)
                           005018   216  PE_CR2  = (0x5018)
                                    217 ; port F
                           005019   218  PF_BASE = (0X5019)
                           005019   219  PF_ODR  = (0x5019)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           00501A   220  PF_IDR  = (0x501A)
                           00501B   221  PF_DDR  = (0x501B)
                           00501C   222  PF_CR1  = (0x501C)
                           00501D   223  PF_CR2  = (0x501D)
                                    224 ; port G
                           00501E   225  PG_BASE = (0X501E)
                           00501E   226  PG_ODR  = (0x501E)
                           00501F   227  PG_IDR  = (0x501F)
                           005020   228  PG_DDR  = (0x5020)
                           005021   229  PG_CR1  = (0x5021)
                           005022   230  PG_CR2  = (0x5022)
                                    231 ; port H not present on LQFP48/LQFP64 package
                           005023   232  PH_BASE = (0X5023)
                           005023   233  PH_ODR  = (0x5023)
                           005024   234  PH_IDR  = (0x5024)
                           005025   235  PH_DDR  = (0x5025)
                           005026   236  PH_CR1  = (0x5026)
                           005027   237  PH_CR2  = (0x5027)
                                    238 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   239  PI_BASE = (0X5028)
                           005028   240  PI_ODR  = (0x5028)
                           005029   241  PI_IDR  = (0x5029)
                           00502A   242  PI_DDR  = (0x502a)
                           00502B   243  PI_CR1  = (0x502b)
                           00502C   244  PI_CR2  = (0x502c)
                                    245 
                                    246 ; input modes CR1
                           000000   247  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   248  INPUT_PULLUP = (1)
                                    249 ; output mode CR1
                           000000   250  OUTPUT_OD = (0) ; open drain
                           000001   251  OUTPUT_PP = (1) ; push pull
                                    252 ; input modes CR2
                           000000   253  INPUT_DI = (0)
                           000001   254  INPUT_EI = (1)
                                    255 ; output speed CR2
                           000000   256  OUTPUT_SLOW = (0)
                           000001   257  OUTPUT_FAST = (1)
                                    258 
                                    259 
                                    260 ; Flash memory
                           00505A   261  FLASH_CR1  = (0x505A)
                           00505B   262  FLASH_CR2  = (0x505B)
                           00505C   263  FLASH_NCR2  = (0x505C)
                           00505D   264  FLASH_FPR  = (0x505D)
                           00505E   265  FLASH_NFPR  = (0x505E)
                           00505F   266  FLASH_IAPSR  = (0x505F)
                           005062   267  FLASH_PUKR  = (0x5062)
                           005064   268  FLASH_DUKR  = (0x5064)
                                    269 ; data memory unlock keys
                           0000AE   270  FLASH_DUKR_KEY1 = (0xae)
                           000056   271  FLASH_DUKR_KEY2 = (0x56)
                                    272 ; flash memory unlock keys
                           000056   273  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   274  FLASH_PUKR_KEY2 = (0xae)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    275 ; FLASH_CR1 bits
                           000003   276  FLASH_CR1_HALT = BIT3
                           000002   277  FLASH_CR1_AHALT = BIT2
                           000001   278  FLASH_CR1_IE = BIT1
                           000000   279  FLASH_CR1_FIX = BIT0
                                    280 ; FLASH_CR2 bits
                           000007   281  FLASH_CR2_OPT = BIT7
                           000006   282  FLASH_CR2_WPRG = BIT6
                           000005   283  FLASH_CR2_ERASE = BIT5
                           000004   284  FLASH_CR2_FPRG = BIT4
                           000000   285  FLASH_CR2_PRG = BIT0
                                    286 ; FLASH_FPR bits
                           000005   287  FLASH_FPR_WPB5 = BIT5
                           000004   288  FLASH_FPR_WPB4 = BIT4
                           000003   289  FLASH_FPR_WPB3 = BIT3
                           000002   290  FLASH_FPR_WPB2 = BIT2
                           000001   291  FLASH_FPR_WPB1 = BIT1
                           000000   292  FLASH_FPR_WPB0 = BIT0
                                    293 ; FLASH_NFPR bits
                           000005   294  FLASH_NFPR_NWPB5 = BIT5
                           000004   295  FLASH_NFPR_NWPB4 = BIT4
                           000003   296  FLASH_NFPR_NWPB3 = BIT3
                           000002   297  FLASH_NFPR_NWPB2 = BIT2
                           000001   298  FLASH_NFPR_NWPB1 = BIT1
                           000000   299  FLASH_NFPR_NWPB0 = BIT0
                                    300 ; FLASH_IAPSR bits
                           000006   301  FLASH_IAPSR_HVOFF = BIT6
                           000003   302  FLASH_IAPSR_DUL = BIT3
                           000002   303  FLASH_IAPSR_EOP = BIT2
                           000001   304  FLASH_IAPSR_PUL = BIT1
                           000000   305  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    306 
                                    307 ; Interrupt control
                           0050A0   308  EXTI_CR1  = (0x50A0)
                           0050A1   309  EXTI_CR2  = (0x50A1)
                                    310 
                                    311 ; Reset Status
                           0050B3   312  RST_SR  = (0x50B3)
                                    313 
                                    314 ; Clock Registers
                           0050C0   315  CLK_ICKR  = (0x50c0)
                           0050C1   316  CLK_ECKR  = (0x50c1)
                           0050C3   317  CLK_CMSR  = (0x50C3)
                           0050C4   318  CLK_SWR  = (0x50C4)
                           0050C5   319  CLK_SWCR  = (0x50C5)
                           0050C6   320  CLK_CKDIVR  = (0x50C6)
                           0050C7   321  CLK_PCKENR1  = (0x50C7)
                           0050C8   322  CLK_CSSR  = (0x50C8)
                           0050C9   323  CLK_CCOR  = (0x50C9)
                           0050CA   324  CLK_PCKENR2  = (0x50CA)
                           0050CC   325  CLK_HSITRIMR  = (0x50CC)
                           0050CD   326  CLK_SWIMCCR  = (0x50CD)
                                    327 
                                    328 ; Peripherals clock gating
                                    329 ; CLK_PCKENR1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000007   330  CLK_PCKENR1_TIM1 = (7)
                           000006   331  CLK_PCKENR1_TIM3 = (6)
                           000005   332  CLK_PCKENR1_TIM2 = (5)
                           000004   333  CLK_PCKENR1_TIM4 = (4)
                           000003   334  CLK_PCKENR1_UART3 = (3)
                           000002   335  CLK_PCKENR1_UART1 = (2)
                           000001   336  CLK_PCKENR1_SPI = (1)
                           000000   337  CLK_PCKENR1_I2C = (0)
                                    338 ; CLK_PCKENR2
                           000007   339  CLK_PCKENR2_CAN = (7)
                           000003   340  CLK_PCKENR2_ADC = (3)
                           000002   341  CLK_PCKENR2_AWU = (2)
                                    342 
                                    343 ; Clock bits
                           000005   344  CLK_ICKR_REGAH = (5)
                           000004   345  CLK_ICKR_LSIRDY = (4)
                           000003   346  CLK_ICKR_LSIEN = (3)
                           000002   347  CLK_ICKR_FHW = (2)
                           000001   348  CLK_ICKR_HSIRDY = (1)
                           000000   349  CLK_ICKR_HSIEN = (0)
                                    350 
                           000001   351  CLK_ECKR_HSERDY = (1)
                           000000   352  CLK_ECKR_HSEEN = (0)
                                    353 ; clock source
                           0000E1   354  CLK_SWR_HSI = 0xE1
                           0000D2   355  CLK_SWR_LSI = 0xD2
                           0000B4   356  CLK_SWR_HSE = 0xB4
                                    357 
                           000003   358  CLK_SWCR_SWIF = (3)
                           000002   359  CLK_SWCR_SWIEN = (2)
                           000001   360  CLK_SWCR_SWEN = (1)
                           000000   361  CLK_SWCR_SWBSY = (0)
                                    362 
                           000004   363  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   364  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   365  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   366  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   367  CLK_CKDIVR_CPUDIV0 = (0)
                                    368 
                                    369 ; Watchdog
                           0050D1   370  WWDG_CR  = (0x50D1)
                           0050D2   371  WWDG_WR  = (0x50D2)
                           0050E0   372  IWDG_KR  = (0x50E0)
                           0050E1   373  IWDG_PR  = (0x50E1)
                           0050E2   374  IWDG_RLR  = (0x50E2)
                           0050F0   375  AWU_CSR1  = (0x50F0)
                           0050F1   376  AWU_APR  = (0x50F1)
                           0050F2   377  AWU_TBR  = (0x50F2)
                                    378 
                                    379 ; Beeper
                                    380 ; beeper output is alternate function AFR7 on PD4
                                    381 ; connected to CN9-6
                           0050F3   382  BEEP_CSR  = (0x50F3)
                           00000F   383  BEEP_PORT = PD
                           000004   384  BEEP_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           000010   385  BEEP_MASK = B4_MASK
                                    386 
                                    387 ; SPI
                           005200   388  SPI_CR1  = (0x5200)
                           005201   389  SPI_CR2  = (0x5201)
                           005202   390  SPI_ICR  = (0x5202)
                           005203   391  SPI_SR  = (0x5203)
                           005204   392  SPI_DR  = (0x5204)
                           005205   393  SPI_CRCPR  = (0x5205)
                           005206   394  SPI_RXCRCR  = (0x5206)
                           005207   395  SPI_TXCRCR  = (0x5207)
                                    396 
                                    397 ; I2C
                           005210   398  I2C_CR1  = (0x5210)
                           005211   399  I2C_CR2  = (0x5211)
                           005212   400  I2C_FREQR  = (0x5212)
                           005213   401  I2C_OARL  = (0x5213)
                           005214   402  I2C_OARH  = (0x5214)
                           005216   403  I2C_DR  = (0x5216)
                           005217   404  I2C_SR1  = (0x5217)
                           005218   405  I2C_SR2  = (0x5218)
                           005219   406  I2C_SR3  = (0x5219)
                           00521A   407  I2C_ITR  = (0x521A)
                           00521B   408  I2C_CCRL  = (0x521B)
                           00521C   409  I2C_CCRH  = (0x521C)
                           00521D   410  I2C_TRISER  = (0x521D)
                           00521E   411  I2C_PECR  = (0x521E)
                                    412 
                           000007   413  I2C_CR1_NOSTRETCH = (7)
                           000006   414  I2C_CR1_ENGC = (6)
                           000000   415  I2C_CR1_PE = (0)
                                    416 
                           000007   417  I2C_CR2_SWRST = (7)
                           000003   418  I2C_CR2_POS = (3)
                           000002   419  I2C_CR2_ACK = (2)
                           000001   420  I2C_CR2_STOP = (1)
                           000000   421  I2C_CR2_START = (0)
                                    422 
                           000000   423  I2C_OARL_ADD0 = (0)
                                    424 
                           000009   425  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   426  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    427 
                           000007   428  I2C_OARH_ADDMODE = (7)
                           000006   429  I2C_OARH_ADDCONF = (6)
                           000002   430  I2C_OARH_ADD9 = (2)
                           000001   431  I2C_OARH_ADD8 = (1)
                                    432 
                           000007   433  I2C_SR1_TXE = (7)
                           000006   434  I2C_SR1_RXNE = (6)
                           000004   435  I2C_SR1_STOPF = (4)
                           000003   436  I2C_SR1_ADD10 = (3)
                           000002   437  I2C_SR1_BTF = (2)
                           000001   438  I2C_SR1_ADDR = (1)
                           000000   439  I2C_SR1_SB = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    440 
                           000005   441  I2C_SR2_WUFH = (5)
                           000003   442  I2C_SR2_OVR = (3)
                           000002   443  I2C_SR2_AF = (2)
                           000001   444  I2C_SR2_ARLO = (1)
                           000000   445  I2C_SR2_BERR = (0)
                                    446 
                           000007   447  I2C_SR3_DUALF = (7)
                           000004   448  I2C_SR3_GENCALL = (4)
                           000002   449  I2C_SR3_TRA = (2)
                           000001   450  I2C_SR3_BUSY = (1)
                           000000   451  I2C_SR3_MSL = (0)
                                    452 
                           000002   453  I2C_ITR_ITBUFEN = (2)
                           000001   454  I2C_ITR_ITEVTEN = (1)
                           000000   455  I2C_ITR_ITERREN = (0)
                                    456 
                                    457 ; Precalculated values, all in KHz
                           000080   458  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   459  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    460 ;
                                    461 ; Fast I2C mode max rise time = 300ns
                                    462 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    463 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    464 
                           000005   465  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    466 
                           0000C0   467  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   468  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   469  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    470 
                           000080   471  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   472  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   473  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    474 
                           000000   475  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   476  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    477 ;
                                    478 ; Standard I2C mode max rise time = 1000ns
                                    479 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    480 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    481 
                           000011   482  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    483 
                           000000   484  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   485  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   486  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    487 
                           000001   488  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   489  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   490  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    491 
                           000001   492  I2C_READ = 1
                           000000   493  I2C_WRITE = 0
                                    494 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    495 ; baudrate constant for brr_value table access
                           000000   496 B2400=0
                           000001   497 B4800=1
                           000002   498 B9600=2
                           000003   499 B19200=3
                           000004   500 B38400=4
                           000005   501 B57600=5
                           000006   502 B115200=6
                           000007   503 B230400=7
                           000008   504 B460800=8
                           000009   505 B921600=9
                                    506 
                                    507 ; UART1 
                           005230   508  UART1_SR    = (0x5230)
                           005231   509  UART1_DR    = (0x5231)
                           005232   510  UART1_BRR1  = (0x5232)
                           005233   511  UART1_BRR2  = (0x5233)
                           005234   512  UART1_CR1   = (0x5234)
                           005235   513  UART1_CR2   = (0x5235)
                           005236   514  UART1_CR3   = (0x5236)
                           005237   515  UART1_CR4   = (0x5237)
                           005238   516  UART1_CR5   = (0x5238)
                           005239   517  UART1_GTR   = (0x5239)
                           00523A   518  UART1_PSCR  = (0x523A)
                                    519 
                                    520 ; UART3
                           005240   521  UART3_SR    = (0x5240)
                           005241   522  UART3_DR    = (0x5241)
                           005242   523  UART3_BRR1  = (0x5242)
                           005243   524  UART3_BRR2  = (0x5243)
                           005244   525  UART3_CR1   = (0x5244)
                           005245   526  UART3_CR2   = (0x5245)
                           005246   527  UART3_CR3   = (0x5246)
                           005247   528  UART3_CR4   = (0x5247)
                           004249   529  UART3_CR6   = (0x4249)
                                    530 
                                    531 ; UART Status Register bits
                           000007   532  UART_SR_TXE = (7)
                           000006   533  UART_SR_TC = (6)
                           000005   534  UART_SR_RXNE = (5)
                           000004   535  UART_SR_IDLE = (4)
                           000003   536  UART_SR_OR = (3)
                           000002   537  UART_SR_NF = (2)
                           000001   538  UART_SR_FE = (1)
                           000000   539  UART_SR_PE = (0)
                                    540 
                                    541 ; Uart Control Register bits
                           000007   542  UART_CR1_R8 = (7)
                           000006   543  UART_CR1_T8 = (6)
                           000005   544  UART_CR1_UARTD = (5)
                           000004   545  UART_CR1_M = (4)
                           000003   546  UART_CR1_WAKE = (3)
                           000002   547  UART_CR1_PCEN = (2)
                           000001   548  UART_CR1_PS = (1)
                           000000   549  UART_CR1_PIEN = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    550 
                           000007   551  UART_CR2_TIEN = (7)
                           000006   552  UART_CR2_TCIEN = (6)
                           000005   553  UART_CR2_RIEN = (5)
                           000004   554  UART_CR2_ILIEN = (4)
                           000003   555  UART_CR2_TEN = (3)
                           000002   556  UART_CR2_REN = (2)
                           000001   557  UART_CR2_RWU = (1)
                           000000   558  UART_CR2_SBK = (0)
                                    559 
                           000006   560  UART_CR3_LINEN = (6)
                           000005   561  UART_CR3_STOP1 = (5)
                           000004   562  UART_CR3_STOP0 = (4)
                           000003   563  UART_CR3_CLKEN = (3)
                           000002   564  UART_CR3_CPOL = (2)
                           000001   565  UART_CR3_CPHA = (1)
                           000000   566  UART_CR3_LBCL = (0)
                                    567 
                           000006   568  UART_CR4_LBDIEN = (6)
                           000005   569  UART_CR4_LBDL = (5)
                           000004   570  UART_CR4_LBDF = (4)
                           000003   571  UART_CR4_ADD3 = (3)
                           000002   572  UART_CR4_ADD2 = (2)
                           000001   573  UART_CR4_ADD1 = (1)
                           000000   574  UART_CR4_ADD0 = (0)
                                    575 
                           000005   576  UART_CR5_SCEN = (5)
                           000004   577  UART_CR5_NACK = (4)
                           000003   578  UART_CR5_HDSEL = (3)
                           000002   579  UART_CR5_IRLP = (2)
                           000001   580  UART_CR5_IREN = (1)
                                    581 ; LIN mode config register
                           000007   582  UART_CR6_LDUM = (7)
                           000005   583  UART_CR6_LSLV = (5)
                           000004   584  UART_CR6_LASE = (4)
                           000002   585  UART_CR6_LHDIEN = (2) 
                           000001   586  UART_CR6_LHDF = (1)
                           000000   587  UART_CR6_LSF = (0)
                                    588 
                                    589 ; TIMERS
                                    590 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   591  TIM1_CR1  = (0x5250)
                           005251   592  TIM1_CR2  = (0x5251)
                           005252   593  TIM1_SMCR  = (0x5252)
                           005253   594  TIM1_ETR  = (0x5253)
                           005254   595  TIM1_IER  = (0x5254)
                           005255   596  TIM1_SR1  = (0x5255)
                           005256   597  TIM1_SR2  = (0x5256)
                           005257   598  TIM1_EGR  = (0x5257)
                           005258   599  TIM1_CCMR1  = (0x5258)
                           005259   600  TIM1_CCMR2  = (0x5259)
                           00525A   601  TIM1_CCMR3  = (0x525A)
                           00525B   602  TIM1_CCMR4  = (0x525B)
                           00525C   603  TIM1_CCER1  = (0x525C)
                           00525D   604  TIM1_CCER2  = (0x525D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           00525E   605  TIM1_CNTRH  = (0x525E)
                           00525F   606  TIM1_CNTRL  = (0x525F)
                           005260   607  TIM1_PSCRH  = (0x5260)
                           005261   608  TIM1_PSCRL  = (0x5261)
                           005262   609  TIM1_ARRH  = (0x5262)
                           005263   610  TIM1_ARRL  = (0x5263)
                           005264   611  TIM1_RCR  = (0x5264)
                           005265   612  TIM1_CCR1H  = (0x5265)
                           005266   613  TIM1_CCR1L  = (0x5266)
                           005267   614  TIM1_CCR2H  = (0x5267)
                           005268   615  TIM1_CCR2L  = (0x5268)
                           005269   616  TIM1_CCR3H  = (0x5269)
                           00526A   617  TIM1_CCR3L  = (0x526A)
                           00526B   618  TIM1_CCR4H  = (0x526B)
                           00526C   619  TIM1_CCR4L  = (0x526C)
                           00526D   620  TIM1_BKR  = (0x526D)
                           00526E   621  TIM1_DTR  = (0x526E)
                           00526F   622  TIM1_OISR  = (0x526F)
                                    623 
                                    624 ; Timer Control Register bits
                           000007   625  TIM_CR1_ARPE = (7)
                           000006   626  TIM_CR1_CMSH = (6)
                           000005   627  TIM_CR1_CMSL = (5)
                           000004   628  TIM_CR1_DIR = (4)
                           000003   629  TIM_CR1_OPM = (3)
                           000002   630  TIM_CR1_URS = (2)
                           000001   631  TIM_CR1_UDIS = (1)
                           000000   632  TIM_CR1_CEN = (0)
                                    633 
                           000006   634  TIM1_CR2_MMS2 = (6)
                           000005   635  TIM1_CR2_MMS1 = (5)
                           000004   636  TIM1_CR2_MMS0 = (4)
                           000002   637  TIM1_CR2_COMS = (2)
                           000000   638  TIM1_CR2_CCPC = (0)
                                    639 
                                    640 ; Timer Slave Mode Control bits
                           000007   641  TIM1_SMCR_MSM = (7)
                           000006   642  TIM1_SMCR_TS2 = (6)
                           000005   643  TIM1_SMCR_TS1 = (5)
                           000004   644  TIM1_SMCR_TS0 = (4)
                           000002   645  TIM1_SMCR_SMS2 = (2)
                           000001   646  TIM1_SMCR_SMS1 = (1)
                           000000   647  TIM1_SMCR_SMS0 = (0)
                                    648 
                                    649 ; Timer External Trigger Enable bits
                           000007   650  TIM1_ETR_ETP = (7)
                           000006   651  TIM1_ETR_ECE = (6)
                           000005   652  TIM1_ETR_ETPS1 = (5)
                           000004   653  TIM1_ETR_ETPS0 = (4)
                           000003   654  TIM1_ETR_ETF3 = (3)
                           000002   655  TIM1_ETR_ETF2 = (2)
                           000001   656  TIM1_ETR_ETF1 = (1)
                           000000   657  TIM1_ETR_ETF0 = (0)
                                    658 
                                    659 ; Timer Interrupt Enable bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000007   660  TIM1_IER_BIE = (7)
                           000006   661  TIM1_IER_TIE = (6)
                           000005   662  TIM1_IER_COMIE = (5)
                           000004   663  TIM1_IER_CC4IE = (4)
                           000003   664  TIM1_IER_CC3IE = (3)
                           000002   665  TIM1_IER_CC2IE = (2)
                           000001   666  TIM1_IER_CC1IE = (1)
                           000000   667  TIM1_IER_UIE = (0)
                                    668 
                                    669 ; Timer Status Register bits
                           000007   670  TIM1_SR1_BIF = (7)
                           000006   671  TIM1_SR1_TIF = (6)
                           000005   672  TIM1_SR1_COMIF = (5)
                           000004   673  TIM1_SR1_CC4IF = (4)
                           000003   674  TIM1_SR1_CC3IF = (3)
                           000002   675  TIM1_SR1_CC2IF = (2)
                           000001   676  TIM1_SR1_CC1IF = (1)
                           000000   677  TIM1_SR1_UIF = (0)
                                    678 
                           000004   679  TIM1_SR2_CC4OF = (4)
                           000003   680  TIM1_SR2_CC3OF = (3)
                           000002   681  TIM1_SR2_CC2OF = (2)
                           000001   682  TIM1_SR2_CC1OF = (1)
                                    683 
                                    684 ; Timer Event Generation Register bits
                           000007   685  TIM1_EGR_BG = (7)
                           000006   686  TIM1_EGR_TG = (6)
                           000005   687  TIM1_EGR_COMG = (5)
                           000004   688  TIM1_EGR_CC4G = (4)
                           000003   689  TIM1_EGR_CC3G = (3)
                           000002   690  TIM1_EGR_CC2G = (2)
                           000001   691  TIM1_EGR_CC1G = (1)
                           000000   692  TIM1_EGR_UG = (0)
                                    693 
                                    694 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   695  TIM1_CCMR1_OC1CE = (7)
                           000006   696  TIM1_CCMR1_OC1M2 = (6)
                           000005   697  TIM1_CCMR1_OC1M1 = (5)
                           000004   698  TIM1_CCMR1_OC1M0 = (4)
                           000003   699  TIM1_CCMR1_OC1PE = (3)
                           000002   700  TIM1_CCMR1_OC1FE = (2)
                           000001   701  TIM1_CCMR1_CC1S1 = (1)
                           000000   702  TIM1_CCMR1_CC1S0 = (0)
                                    703 
                                    704 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   705  TIM1_CCMR1_IC1F3 = (7)
                           000006   706  TIM1_CCMR1_IC1F2 = (6)
                           000005   707  TIM1_CCMR1_IC1F1 = (5)
                           000004   708  TIM1_CCMR1_IC1F0 = (4)
                           000003   709  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   710  TIM1_CCMR1_IC1PSC0 = (2)
                                    711 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   712  TIM1_CCMR1_CC1S0 = (0)
                                    713 
                                    714 ; Capture/Compare Mode Register 2 - channel configured in output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000007   715  TIM1_CCMR2_OC2CE = (7)
                           000006   716  TIM1_CCMR2_OC2M2 = (6)
                           000005   717  TIM1_CCMR2_OC2M1 = (5)
                           000004   718  TIM1_CCMR2_OC2M0 = (4)
                           000003   719  TIM1_CCMR2_OC2PE = (3)
                           000002   720  TIM1_CCMR2_OC2FE = (2)
                           000001   721  TIM1_CCMR2_CC2S1 = (1)
                           000000   722  TIM1_CCMR2_CC2S0 = (0)
                                    723 
                                    724 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   725  TIM1_CCMR2_IC2F3 = (7)
                           000006   726  TIM1_CCMR2_IC2F2 = (6)
                           000005   727  TIM1_CCMR2_IC2F1 = (5)
                           000004   728  TIM1_CCMR2_IC2F0 = (4)
                           000003   729  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   730  TIM1_CCMR2_IC2PSC0 = (2)
                                    731 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   732  TIM1_CCMR2_CC2S0 = (0)
                                    733 
                                    734 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   735  TIM1_CCMR3_OC3CE = (7)
                           000006   736  TIM1_CCMR3_OC3M2 = (6)
                           000005   737  TIM1_CCMR3_OC3M1 = (5)
                           000004   738  TIM1_CCMR3_OC3M0 = (4)
                           000003   739  TIM1_CCMR3_OC3PE = (3)
                           000002   740  TIM1_CCMR3_OC3FE = (2)
                           000001   741  TIM1_CCMR3_CC3S1 = (1)
                           000000   742  TIM1_CCMR3_CC3S0 = (0)
                                    743 
                                    744 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   745  TIM1_CCMR3_IC3F3 = (7)
                           000006   746  TIM1_CCMR3_IC3F2 = (6)
                           000005   747  TIM1_CCMR3_IC3F1 = (5)
                           000004   748  TIM1_CCMR3_IC3F0 = (4)
                           000003   749  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   750  TIM1_CCMR3_IC3PSC0 = (2)
                                    751 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   752  TIM1_CCMR3_CC3S0 = (0)
                                    753 
                                    754 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   755  TIM1_CCMR4_OC4CE = (7)
                           000006   756  TIM1_CCMR4_OC4M2 = (6)
                           000005   757  TIM1_CCMR4_OC4M1 = (5)
                           000004   758  TIM1_CCMR4_OC4M0 = (4)
                           000003   759  TIM1_CCMR4_OC4PE = (3)
                           000002   760  TIM1_CCMR4_OC4FE = (2)
                           000001   761  TIM1_CCMR4_CC4S1 = (1)
                           000000   762  TIM1_CCMR4_CC4S0 = (0)
                                    763 
                                    764 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   765  TIM1_CCMR4_IC4F3 = (7)
                           000006   766  TIM1_CCMR4_IC4F2 = (6)
                           000005   767  TIM1_CCMR4_IC4F1 = (5)
                           000004   768  TIM1_CCMR4_IC4F0 = (4)
                           000003   769  TIM1_CCMR4_IC4PSC1 = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000002   770  TIM1_CCMR4_IC4PSC0 = (2)
                                    771 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   772  TIM1_CCMR4_CC4S0 = (0)
                                    773 
                                    774 ; Timer 2 - 16-bit timer
                           005300   775  TIM2_CR1  = (0x5300)
                           005301   776  TIM2_IER  = (0x5301)
                           005302   777  TIM2_SR1  = (0x5302)
                           005303   778  TIM2_SR2  = (0x5303)
                           005304   779  TIM2_EGR  = (0x5304)
                           005305   780  TIM2_CCMR1  = (0x5305)
                           005306   781  TIM2_CCMR2  = (0x5306)
                           005307   782  TIM2_CCMR3  = (0x5307)
                           005308   783  TIM2_CCER1  = (0x5308)
                           005309   784  TIM2_CCER2  = (0x5309)
                           00530A   785  TIM2_CNTRH  = (0x530A)
                           00530B   786  TIM2_CNTRL  = (0x530B)
                           00530C   787  TIM2_PSCR  = (0x530C)
                           00530D   788  TIM2_ARRH  = (0x530D)
                           00530E   789  TIM2_ARRL  = (0x530E)
                           00530F   790  TIM2_CCR1H  = (0x530F)
                           005310   791  TIM2_CCR1L  = (0x5310)
                           005311   792  TIM2_CCR2H  = (0x5311)
                           005312   793  TIM2_CCR2L  = (0x5312)
                           005313   794  TIM2_CCR3H  = (0x5313)
                           005314   795  TIM2_CCR3L  = (0x5314)
                                    796 
                                    797 ; Timer 3
                           005320   798  TIM3_CR1  = (0x5320)
                           005321   799  TIM3_IER  = (0x5321)
                           005322   800  TIM3_SR1  = (0x5322)
                           005323   801  TIM3_SR2  = (0x5323)
                           005324   802  TIM3_EGR  = (0x5324)
                           005325   803  TIM3_CCMR1  = (0x5325)
                           005326   804  TIM3_CCMR2  = (0x5326)
                           005327   805  TIM3_CCER1  = (0x5327)
                           005328   806  TIM3_CNTRH  = (0x5328)
                           005329   807  TIM3_CNTRL  = (0x5329)
                           00532A   808  TIM3_PSCR  = (0x532A)
                           00532B   809  TIM3_ARRH  = (0x532B)
                           00532C   810  TIM3_ARRL  = (0x532C)
                           00532D   811  TIM3_CCR1H  = (0x532D)
                           00532E   812  TIM3_CCR1L  = (0x532E)
                           00532F   813  TIM3_CCR2H  = (0x532F)
                           005330   814  TIM3_CCR2L  = (0x5330)
                                    815 
                                    816 ; TIM3_CR1  fields
                           000000   817  TIM3_CR1_CEN = (0)
                           000001   818  TIM3_CR1_UDIS = (1)
                           000002   819  TIM3_CR1_URS = (2)
                           000003   820  TIM3_CR1_OPM = (3)
                           000007   821  TIM3_CR1_ARPE = (7)
                                    822 ; TIM3_CCR2  fields
                           000000   823  TIM3_CCMR2_CC2S_POS = (0)
                           000003   824  TIM3_CCMR2_OC2PE_POS = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000004   825  TIM3_CCMR2_OC2M_POS = (4)  
                                    826 ; TIM3_CCER1 fields
                           000000   827  TIM3_CCER1_CC1E = (0)
                           000001   828  TIM3_CCER1_CC1P = (1)
                           000004   829  TIM3_CCER1_CC2E = (4)
                           000005   830  TIM3_CCER1_CC2P = (5)
                                    831 ; TIM3_CCER2 fields
                           000000   832  TIM3_CCER2_CC3E = (0)
                           000001   833  TIM3_CCER2_CC3P = (1)
                                    834 
                                    835 ; Timer 4
                           005340   836  TIM4_CR1  = (0x5340)
                           005341   837  TIM4_IER  = (0x5341)
                           005342   838  TIM4_SR  = (0x5342)
                           005343   839  TIM4_EGR  = (0x5343)
                           005344   840  TIM4_CNTR  = (0x5344)
                           005345   841  TIM4_PSCR  = (0x5345)
                           005346   842  TIM4_ARR  = (0x5346)
                                    843 
                                    844 ; Timer 4 bitmasks
                                    845 
                           000007   846  TIM4_CR1_ARPE = (7)
                           000003   847  TIM4_CR1_OPM = (3)
                           000002   848  TIM4_CR1_URS = (2)
                           000001   849  TIM4_CR1_UDIS = (1)
                           000000   850  TIM4_CR1_CEN = (0)
                                    851 
                           000000   852  TIM4_IER_UIE = (0)
                                    853 
                           000000   854  TIM4_SR_UIF = (0)
                                    855 
                           000000   856  TIM4_EGR_UG = (0)
                                    857 
                           000002   858  TIM4_PSCR_PSC2 = (2)
                           000001   859  TIM4_PSCR_PSC1 = (1)
                           000000   860  TIM4_PSCR_PSC0 = (0)
                                    861 
                           000000   862  TIM4_PSCR_1 = 0
                           000001   863  TIM4_PSCR_2 = 1
                           000002   864  TIM4_PSCR_4 = 2
                           000003   865  TIM4_PSCR_8 = 3
                           000004   866  TIM4_PSCR_16 = 4
                           000005   867  TIM4_PSCR_32 = 5
                           000006   868  TIM4_PSCR_64 = 6
                           000007   869  TIM4_PSCR_128 = 7
                                    870 
                                    871 ; ADC2
                           005400   872  ADC_CSR  = (0x5400)
                           005401   873  ADC_CR1  = (0x5401)
                           005402   874  ADC_CR2  = (0x5402)
                           005403   875  ADC_CR3  = (0x5403)
                           005404   876  ADC_DRH  = (0x5404)
                           005405   877  ADC_DRL  = (0x5405)
                           005406   878  ADC_TDRH  = (0x5406)
                           005407   879  ADC_TDRL  = (0x5407)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    880  
                                    881 ; ADC bitmasks
                                    882 
                           000007   883  ADC_CSR_EOC = (7)
                           000006   884  ADC_CSR_AWD = (6)
                           000005   885  ADC_CSR_EOCIE = (5)
                           000004   886  ADC_CSR_AWDIE = (4)
                           000003   887  ADC_CSR_CH3 = (3)
                           000002   888  ADC_CSR_CH2 = (2)
                           000001   889  ADC_CSR_CH1 = (1)
                           000000   890  ADC_CSR_CH0 = (0)
                                    891 
                           000006   892  ADC_CR1_SPSEL2 = (6)
                           000005   893  ADC_CR1_SPSEL1 = (5)
                           000004   894  ADC_CR1_SPSEL0 = (4)
                           000001   895  ADC_CR1_CONT = (1)
                           000000   896  ADC_CR1_ADON = (0)
                                    897 
                           000006   898  ADC_CR2_EXTTRIG = (6)
                           000005   899  ADC_CR2_EXTSEL1 = (5)
                           000004   900  ADC_CR2_EXTSEL0 = (4)
                           000003   901  ADC_CR2_ALIGN = (3)
                           000001   902  ADC_CR2_SCAN = (1)
                                    903 
                           000007   904  ADC_CR3_DBUF = (7)
                           000006   905  ADC_CR3_DRH = (6)
                                    906 
                                    907 ; beCAN
                           005420   908  CAN_MCR = (0x5420)
                           005421   909  CAN_MSR = (0x5421)
                           005422   910  CAN_TSR = (0x5422)
                           005423   911  CAN_TPR = (0x5423)
                           005424   912  CAN_RFR = (0x5424)
                           005425   913  CAN_IER = (0x5425)
                           005426   914  CAN_DGR = (0x5426)
                           005427   915  CAN_FPSR = (0x5427)
                           005428   916  CAN_P0 = (0x5428)
                           005429   917  CAN_P1 = (0x5429)
                           00542A   918  CAN_P2 = (0x542A)
                           00542B   919  CAN_P3 = (0x542B)
                           00542C   920  CAN_P4 = (0x542C)
                           00542D   921  CAN_P5 = (0x542D)
                           00542E   922  CAN_P6 = (0x542E)
                           00542F   923  CAN_P7 = (0x542F)
                           005430   924  CAN_P8 = (0x5430)
                           005431   925  CAN_P9 = (0x5431)
                           005432   926  CAN_PA = (0x5432)
                           005433   927  CAN_PB = (0x5433)
                           005434   928  CAN_PC = (0x5434)
                           005435   929  CAN_PD = (0x5435)
                           005436   930  CAN_PE = (0x5436)
                           005437   931  CAN_PF = (0x5437)
                                    932 
                                    933 
                                    934 ; CPU
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           007F00   935  CPU_A  = (0x7F00)
                           007F01   936  CPU_PCE  = (0x7F01)
                           007F02   937  CPU_PCH  = (0x7F02)
                           007F03   938  CPU_PCL  = (0x7F03)
                           007F04   939  CPU_XH  = (0x7F04)
                           007F05   940  CPU_XL  = (0x7F05)
                           007F06   941  CPU_YH  = (0x7F06)
                           007F07   942  CPU_YL  = (0x7F07)
                           007F08   943  CPU_SPH  = (0x7F08)
                           007F09   944  CPU_SPL   = (0x7F09)
                           007F0A   945  CPU_CCR   = (0x7F0A)
                                    946 
                                    947 ; global configuration register
                           007F60   948  CFG_GCR   = (0x7F60)
                           000001   949  CFG_GCR_AL = 1
                           000000   950  CFG_GCR_SWIM = 0
                                    951 
                                    952 ; interrupt control registers
                           007F70   953  ITC_SPR1   = (0x7F70)
                           007F71   954  ITC_SPR2   = (0x7F71)
                           007F72   955  ITC_SPR3   = (0x7F72)
                           007F73   956  ITC_SPR4   = (0x7F73)
                           007F74   957  ITC_SPR5   = (0x7F74)
                           007F75   958  ITC_SPR6   = (0x7F75)
                           007F76   959  ITC_SPR7   = (0x7F76)
                           007F77   960  ITC_SPR8   = (0x7F77)
                                    961 
                                    962 ; SWIM, control and status register
                           007F80   963  SWIM_CSR   = (0x7F80)
                                    964 ; debug registers
                           007F90   965  DM_BK1RE   = (0x7F90)
                           007F91   966  DM_BK1RH   = (0x7F91)
                           007F92   967  DM_BK1RL   = (0x7F92)
                           007F93   968  DM_BK2RE   = (0x7F93)
                           007F94   969  DM_BK2RH   = (0x7F94)
                           007F95   970  DM_BK2RL   = (0x7F95)
                           007F96   971  DM_CR1   = (0x7F96)
                           007F97   972  DM_CR2   = (0x7F97)
                           007F98   973  DM_CSR1   = (0x7F98)
                           007F99   974  DM_CSR2   = (0x7F99)
                           007F9A   975  DM_ENFCTR   = (0x7F9A)
                                    976 
                                    977 ; Interrupt Numbers
                           000000   978  INT_TLI = 0
                           000001   979  INT_AWU = 1
                           000002   980  INT_CLK = 2
                           000003   981  INT_EXTI0 = 3
                           000004   982  INT_EXTI1 = 4
                           000005   983  INT_EXTI2 = 5
                           000006   984  INT_EXTI3 = 6
                           000007   985  INT_EXTI4 = 7
                           000008   986  INT_CAN_RX = 8
                           000009   987  INT_CAN_TX = 9
                           00000A   988  INT_SPI = 10
                           00000B   989  INT_TIM1_OVF = 11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           00000C   990  INT_TIM1_CCM = 12
                           00000D   991  INT_TIM2_OVF = 13
                           00000E   992  INT_TIM2_CCM = 14
                           00000F   993  INT_TIM3_OVF = 15
                           000010   994  INT_TIM3_CCM = 16
                           000011   995  INT_UART1_TX_COMPLETED = 17
                           000012   996  INT_AUART1_RX_FULL = 18
                           000013   997  INT_I2C = 19
                           000014   998  INT_UART3_TX_COMPLETED = 20
                           000015   999  INT_UART3_RX_FULL = 21
                           000016  1000  INT_ADC2 = 22
                           000017  1001  INT_TIM4_OVF = 23
                           000018  1002  INT_FLASH = 24
                                   1003 
                                   1004 ; Interrupt Vectors
                           008000  1005  INT_VECTOR_RESET = 0x8000
                           008004  1006  INT_VECTOR_TRAP = 0x8004
                           008008  1007  INT_VECTOR_TLI = 0x8008
                           00800C  1008  INT_VECTOR_AWU = 0x800C
                           008010  1009  INT_VECTOR_CLK = 0x8010
                           008014  1010  INT_VECTOR_EXTI0 = 0x8014
                           008018  1011  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1012  INT_VECTOR_EXTI2 = 0x801C
                           008020  1013  INT_VECTOR_EXTI3 = 0x8020
                           008024  1014  INT_VECTOR_EXTI4 = 0x8024
                           008028  1015  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1016  INT_VECTOR_CAN_TX = 0x802c
                           008030  1017  INT_VECTOR_SPI = 0x8030
                           008034  1018  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1019  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1020  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1021  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1022  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1023  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1024  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1025  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1026  INT_VECTOR_I2C = 0x8054
                           008058  1027  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1028  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1029  INT_VECTOR_ADC2 = 0x8060
                           008064  1030  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1031  INT_VECTOR_FLASH = 0x8068
                                   1032 
                                   1033 ; Condition code register bits
                           000007  1034 CC_V = 7  ; overflow flag 
                           000005  1035 CC_I1= 5  ; interrupt bit 1
                           000004  1036 CC_H = 4  ; half carry 
                           000003  1037 CC_I0 = 3 ; interrupt bit 0
                           000002  1038 CC_N = 2 ;  negative flag 
                           000001  1039 CC_Z = 1 ;  zero flag  
                           000000  1040 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                     25 	.include "../inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ;-------------------------------------------------------
                           000001    23 		CTRL_A = 1
                           000002    24 		CTRL_B = 2
                           000003    25 		CTRL_C = 3
                           000004    26 		CTRL_D = 4
                           000005    27 		CTRL_E = 5
                           000006    28 		CTRL_F = 6
                                     29 
                           000007    30         BELL = 7    ; vt100 terminal generate a sound.
                           000007    31 		CTRL_G = 7
                                     32 
                           000008    33 		BSP = 8     ; back space 
                           000008    34 		CTRL_H = 8  
                                     35 
                           000009    36     	TAB = 9     ; horizontal tabulation
                           000009    37         CTRL_I = 9
                                     38 
                           00000A    39 		NL = 10     ; new line 
                           00000A    40         CTRL_J = 10 
                                     41 
                           00000B    42         VT = 11     ; vertical tabulation 
                           00000B    43 		CTRL_K = 11
                                     44 
                           00000C    45         FF = 12      ; new page
                           00000C    46 		CTRL_L = 12
                                     47 
                           00000D    48 		CR = 13      ; carriage return 
                           00000D    49 		CTRL_M = 13
                                     50 
                           00000E    51 		CTRL_N = 14
                           00000F    52 		CTRL_O = 15
                           000010    53 		CTRL_P = 16
                           000011    54 		CTRL_Q = 17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           000012    55 		CTRL_R = 18
                           000013    56 		CTRL_S = 19
                           000014    57 		CTRL_T = 20
                           000015    58 		CTRL_U = 21
                           000016    59 		CTRL_V = 22
                           000017    60 		CTRL_W = 23
                           000018    61 		CTRL_X = 24
                           000019    62 		CTRL_Y = 25
                           00001A    63 		CTRL_Z = 26
                           00001B    64 		ESC = 27
                           000020    65 		SPACE = 32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     26 	.include "mona.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;  MONA   MONitor written in Assembly
                                     20 	.module MONA 
                                     21     .optsdcc -mstm8
                                     22 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                     23 	.include "../inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36 ; B1 on schematic is user button
                                     37 ; connected to PE4
                                     38 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    39 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    40 USR_BTN_BIT = 4
                           000010    41 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     42 
                                     43 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                     24 	.include "../inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 
                           000000    62  RAM_BASE = (0)
                           0017FF    63  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    64  EEPROM_BASE = (0x4000)
                           0047FF    65  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    66  SFR_BASE = (0x5000)
                           0057FF    67  SFR_END = (0x57FF)
                           006000    68  BOOT_ROM_BASE = (0x6000)
                           007FFF    69  BOOT_ROM_END = (0x7fff)
                           008000    70  FLASH_BASE = (0x8000)
                           027FFF    71  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    72  OPTION_BASE = (0x4800)
                           00487F    73  OPTION_END = (0x487F)
                           0048CD    74  DEVID_BASE = (0x48CD)
                           0048D8    75  DEVID_END = (0x48D8)
                           007F00    76  DEBUG_BASE = (0X7F00)
                           007FFF    77  DEBUG_END = (0X7FFF)
                                     78 
                                     79 ; options bytes
                                     80 ; this one can be programmed only from SWIM  (ICP)
                           004800    81  OPT0  = (0x4800)
                                     82 ; these can be programmed at runtime (IAP)
                           004801    83  OPT1  = (0x4801)
                           004802    84  NOPT1  = (0x4802)
                           004803    85  OPT2  = (0x4803)
                           004804    86  NOPT2  = (0x4804)
                           004805    87  OPT3  = (0x4805)
                           004806    88  NOPT3  = (0x4806)
                           004807    89  OPT4  = (0x4807)
                           004808    90  NOPT4  = (0x4808)
                           004809    91  OPT5  = (0x4809)
                           00480A    92  NOPT5  = (0x480A)
                           00480B    93  OPT6  = (0x480B)
                           00480C    94  NOPT6 = (0x480C)
                           00480D    95  OPT7 = (0x480D)
                           00480E    96  NOPT7 = (0x480E)
                           00487E    97  OPTBL  = (0x487E)
                           00487F    98  NOPTBL  = (0x487F)
                                     99 ; option registers usage
                                    100 ; read out protection, value 0xAA enable ROP
                           004800   101  ROP = OPT0  
                                    102 ; user boot code, {0..0x3e} 512 bytes row
                           004801   103  UBC = OPT1
                           004802   104  NUBC = NOPT1
                                    105 ; alternate function register
                           004803   106  AFR = OPT2
                           004804   107  NAFR = NOPT2
                                    108 ; miscelinous options
                           004805   109  WDGOPT = OPT3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           004806   110  NWDGOPT = NOPT3
                                    111 ; clock options
                           004807   112  CLKOPT = OPT4
                           004808   113  NCLKOPT = NOPT4
                                    114 ; HSE clock startup delay
                           004809   115  HSECNT = OPT5
                           00480A   116  NHSECNT = NOPT5
                                    117 ; flash wait state
                           00480D   118 FLASH_WS = OPT7
                           00480E   119 NFLASH_WS = NOPT7
                                    120 
                                    121 ; watchdog options bits
                           000003   122   WDGOPT_LSIEN   =  BIT3
                           000002   123   WDGOPT_IWDG_HW =  BIT2
                           000001   124   WDGOPT_WWDG_HW =  BIT1
                           000000   125   WDGOPT_WWDG_HALT = BIT0
                                    126 ; NWDGOPT bits
                           FFFFFFFC   127   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   128   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   129   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   130   NWDGOPT_WWDG_HALT = ~BIT0
                                    131 
                                    132 ; CLKOPT bits
                           000003   133  CLKOPT_EXT_CLK  = BIT3
                           000002   134  CLKOPT_CKAWUSEL = BIT2
                           000001   135  CLKOPT_PRS_C1   = BIT1
                           000000   136  CLKOPT_PRS_C0   = BIT0
                                    137 
                                    138 ; AFR option, remapable functions
                           000007   139  AFR7_BEEP    = BIT7
                           000006   140  AFR6_I2C     = BIT6
                           000005   141  AFR5_TIM1    = BIT5
                           000004   142  AFR4_TIM1    = BIT4
                           000003   143  AFR3_TIM1    = BIT3
                           000002   144  AFR2_CCO     = BIT2
                           000001   145  AFR1_TIM2    = BIT1
                           000000   146  AFR0_ADC     = BIT0
                                    147 
                                    148 ; device ID = (read only)
                           0048CD   149  DEVID_XL  = (0x48CD)
                           0048CE   150  DEVID_XH  = (0x48CE)
                           0048CF   151  DEVID_YL  = (0x48CF)
                           0048D0   152  DEVID_YH  = (0x48D0)
                           0048D1   153  DEVID_WAF  = (0x48D1)
                           0048D2   154  DEVID_LOT0  = (0x48D2)
                           0048D3   155  DEVID_LOT1  = (0x48D3)
                           0048D4   156  DEVID_LOT2  = (0x48D4)
                           0048D5   157  DEVID_LOT3  = (0x48D5)
                           0048D6   158  DEVID_LOT4  = (0x48D6)
                           0048D7   159  DEVID_LOT5  = (0x48D7)
                           0048D8   160  DEVID_LOT6  = (0x48D8)
                                    161 
                                    162 
                           005000   163 GPIO_BASE = (0x5000)
                           000005   164 GPIO_SIZE = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    165 ; PORTS SFR OFFSET
                           000000   166 PA = 0
                           000005   167 PB = 5
                           00000A   168 PC = 10
                           00000F   169 PD = 15
                           000014   170 PE = 20
                           000019   171 PF = 25
                           00001E   172 PG = 30
                                    173 
                                    174 ; GPIO
                                    175 ; gpio register offset to base
                           000000   176  GPIO_ODR = 0
                           000001   177  GPIO_IDR = 1
                           000002   178  GPIO_DDR = 2
                           000003   179  GPIO_CR1 = 3
                           000004   180  GPIO_CR2 = 4
                                    181 
                                    182 ; port A
                           005000   183  PA_BASE = (0X5000)
                           005000   184  PA_ODR  = (0x5000)
                           005001   185  PA_IDR  = (0x5001)
                           005002   186  PA_DDR  = (0x5002)
                           005003   187  PA_CR1  = (0x5003)
                           005004   188  PA_CR2  = (0x5004)
                                    189 ; port B
                           005005   190  PB_BASE = (0X5005)
                           005005   191  PB_ODR  = (0x5005)
                           005006   192  PB_IDR  = (0x5006)
                           005007   193  PB_DDR  = (0x5007)
                           005008   194  PB_CR1  = (0x5008)
                           005009   195  PB_CR2  = (0x5009)
                                    196 ; port C
                           00500A   197  PC_BASE = (0X500A)
                           00500A   198  PC_ODR  = (0x500A)
                           00500B   199  PC_IDR  = (0x500B)
                           00500C   200  PC_DDR  = (0x500C)
                           00500D   201  PC_CR1  = (0x500D)
                           00500E   202  PC_CR2  = (0x500E)
                                    203 ; port D
                           00500F   204  PD_BASE = (0X500F)
                           00500F   205  PD_ODR  = (0x500F)
                           005010   206  PD_IDR  = (0x5010)
                           005011   207  PD_DDR  = (0x5011)
                           005012   208  PD_CR1  = (0x5012)
                           005013   209  PD_CR2  = (0x5013)
                                    210 ; port E
                           005014   211  PE_BASE = (0X5014)
                           005014   212  PE_ODR  = (0x5014)
                           005015   213  PE_IDR  = (0x5015)
                           005016   214  PE_DDR  = (0x5016)
                           005017   215  PE_CR1  = (0x5017)
                           005018   216  PE_CR2  = (0x5018)
                                    217 ; port F
                           005019   218  PF_BASE = (0X5019)
                           005019   219  PF_ODR  = (0x5019)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                           00501A   220  PF_IDR  = (0x501A)
                           00501B   221  PF_DDR  = (0x501B)
                           00501C   222  PF_CR1  = (0x501C)
                           00501D   223  PF_CR2  = (0x501D)
                                    224 ; port G
                           00501E   225  PG_BASE = (0X501E)
                           00501E   226  PG_ODR  = (0x501E)
                           00501F   227  PG_IDR  = (0x501F)
                           005020   228  PG_DDR  = (0x5020)
                           005021   229  PG_CR1  = (0x5021)
                           005022   230  PG_CR2  = (0x5022)
                                    231 ; port H not present on LQFP48/LQFP64 package
                           005023   232  PH_BASE = (0X5023)
                           005023   233  PH_ODR  = (0x5023)
                           005024   234  PH_IDR  = (0x5024)
                           005025   235  PH_DDR  = (0x5025)
                           005026   236  PH_CR1  = (0x5026)
                           005027   237  PH_CR2  = (0x5027)
                                    238 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   239  PI_BASE = (0X5028)
                           005028   240  PI_ODR  = (0x5028)
                           005029   241  PI_IDR  = (0x5029)
                           00502A   242  PI_DDR  = (0x502a)
                           00502B   243  PI_CR1  = (0x502b)
                           00502C   244  PI_CR2  = (0x502c)
                                    245 
                                    246 ; input modes CR1
                           000000   247  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   248  INPUT_PULLUP = (1)
                                    249 ; output mode CR1
                           000000   250  OUTPUT_OD = (0) ; open drain
                           000001   251  OUTPUT_PP = (1) ; push pull
                                    252 ; input modes CR2
                           000000   253  INPUT_DI = (0)
                           000001   254  INPUT_EI = (1)
                                    255 ; output speed CR2
                           000000   256  OUTPUT_SLOW = (0)
                           000001   257  OUTPUT_FAST = (1)
                                    258 
                                    259 
                                    260 ; Flash memory
                           00505A   261  FLASH_CR1  = (0x505A)
                           00505B   262  FLASH_CR2  = (0x505B)
                           00505C   263  FLASH_NCR2  = (0x505C)
                           00505D   264  FLASH_FPR  = (0x505D)
                           00505E   265  FLASH_NFPR  = (0x505E)
                           00505F   266  FLASH_IAPSR  = (0x505F)
                           005062   267  FLASH_PUKR  = (0x5062)
                           005064   268  FLASH_DUKR  = (0x5064)
                                    269 ; data memory unlock keys
                           0000AE   270  FLASH_DUKR_KEY1 = (0xae)
                           000056   271  FLASH_DUKR_KEY2 = (0x56)
                                    272 ; flash memory unlock keys
                           000056   273  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   274  FLASH_PUKR_KEY2 = (0xae)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                    275 ; FLASH_CR1 bits
                           000003   276  FLASH_CR1_HALT = BIT3
                           000002   277  FLASH_CR1_AHALT = BIT2
                           000001   278  FLASH_CR1_IE = BIT1
                           000000   279  FLASH_CR1_FIX = BIT0
                                    280 ; FLASH_CR2 bits
                           000007   281  FLASH_CR2_OPT = BIT7
                           000006   282  FLASH_CR2_WPRG = BIT6
                           000005   283  FLASH_CR2_ERASE = BIT5
                           000004   284  FLASH_CR2_FPRG = BIT4
                           000000   285  FLASH_CR2_PRG = BIT0
                                    286 ; FLASH_FPR bits
                           000005   287  FLASH_FPR_WPB5 = BIT5
                           000004   288  FLASH_FPR_WPB4 = BIT4
                           000003   289  FLASH_FPR_WPB3 = BIT3
                           000002   290  FLASH_FPR_WPB2 = BIT2
                           000001   291  FLASH_FPR_WPB1 = BIT1
                           000000   292  FLASH_FPR_WPB0 = BIT0
                                    293 ; FLASH_NFPR bits
                           000005   294  FLASH_NFPR_NWPB5 = BIT5
                           000004   295  FLASH_NFPR_NWPB4 = BIT4
                           000003   296  FLASH_NFPR_NWPB3 = BIT3
                           000002   297  FLASH_NFPR_NWPB2 = BIT2
                           000001   298  FLASH_NFPR_NWPB1 = BIT1
                           000000   299  FLASH_NFPR_NWPB0 = BIT0
                                    300 ; FLASH_IAPSR bits
                           000006   301  FLASH_IAPSR_HVOFF = BIT6
                           000003   302  FLASH_IAPSR_DUL = BIT3
                           000002   303  FLASH_IAPSR_EOP = BIT2
                           000001   304  FLASH_IAPSR_PUL = BIT1
                           000000   305  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    306 
                                    307 ; Interrupt control
                           0050A0   308  EXTI_CR1  = (0x50A0)
                           0050A1   309  EXTI_CR2  = (0x50A1)
                                    310 
                                    311 ; Reset Status
                           0050B3   312  RST_SR  = (0x50B3)
                                    313 
                                    314 ; Clock Registers
                           0050C0   315  CLK_ICKR  = (0x50c0)
                           0050C1   316  CLK_ECKR  = (0x50c1)
                           0050C3   317  CLK_CMSR  = (0x50C3)
                           0050C4   318  CLK_SWR  = (0x50C4)
                           0050C5   319  CLK_SWCR  = (0x50C5)
                           0050C6   320  CLK_CKDIVR  = (0x50C6)
                           0050C7   321  CLK_PCKENR1  = (0x50C7)
                           0050C8   322  CLK_CSSR  = (0x50C8)
                           0050C9   323  CLK_CCOR  = (0x50C9)
                           0050CA   324  CLK_PCKENR2  = (0x50CA)
                           0050CC   325  CLK_HSITRIMR  = (0x50CC)
                           0050CD   326  CLK_SWIMCCR  = (0x50CD)
                                    327 
                                    328 ; Peripherals clock gating
                                    329 ; CLK_PCKENR1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000007   330  CLK_PCKENR1_TIM1 = (7)
                           000006   331  CLK_PCKENR1_TIM3 = (6)
                           000005   332  CLK_PCKENR1_TIM2 = (5)
                           000004   333  CLK_PCKENR1_TIM4 = (4)
                           000003   334  CLK_PCKENR1_UART3 = (3)
                           000002   335  CLK_PCKENR1_UART1 = (2)
                           000001   336  CLK_PCKENR1_SPI = (1)
                           000000   337  CLK_PCKENR1_I2C = (0)
                                    338 ; CLK_PCKENR2
                           000007   339  CLK_PCKENR2_CAN = (7)
                           000003   340  CLK_PCKENR2_ADC = (3)
                           000002   341  CLK_PCKENR2_AWU = (2)
                                    342 
                                    343 ; Clock bits
                           000005   344  CLK_ICKR_REGAH = (5)
                           000004   345  CLK_ICKR_LSIRDY = (4)
                           000003   346  CLK_ICKR_LSIEN = (3)
                           000002   347  CLK_ICKR_FHW = (2)
                           000001   348  CLK_ICKR_HSIRDY = (1)
                           000000   349  CLK_ICKR_HSIEN = (0)
                                    350 
                           000001   351  CLK_ECKR_HSERDY = (1)
                           000000   352  CLK_ECKR_HSEEN = (0)
                                    353 ; clock source
                           0000E1   354  CLK_SWR_HSI = 0xE1
                           0000D2   355  CLK_SWR_LSI = 0xD2
                           0000B4   356  CLK_SWR_HSE = 0xB4
                                    357 
                           000003   358  CLK_SWCR_SWIF = (3)
                           000002   359  CLK_SWCR_SWIEN = (2)
                           000001   360  CLK_SWCR_SWEN = (1)
                           000000   361  CLK_SWCR_SWBSY = (0)
                                    362 
                           000004   363  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   364  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   365  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   366  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   367  CLK_CKDIVR_CPUDIV0 = (0)
                                    368 
                                    369 ; Watchdog
                           0050D1   370  WWDG_CR  = (0x50D1)
                           0050D2   371  WWDG_WR  = (0x50D2)
                           0050E0   372  IWDG_KR  = (0x50E0)
                           0050E1   373  IWDG_PR  = (0x50E1)
                           0050E2   374  IWDG_RLR  = (0x50E2)
                           0050F0   375  AWU_CSR1  = (0x50F0)
                           0050F1   376  AWU_APR  = (0x50F1)
                           0050F2   377  AWU_TBR  = (0x50F2)
                                    378 
                                    379 ; Beeper
                                    380 ; beeper output is alternate function AFR7 on PD4
                                    381 ; connected to CN9-6
                           0050F3   382  BEEP_CSR  = (0x50F3)
                           00000F   383  BEEP_PORT = PD
                           000004   384  BEEP_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000010   385  BEEP_MASK = B4_MASK
                                    386 
                                    387 ; SPI
                           005200   388  SPI_CR1  = (0x5200)
                           005201   389  SPI_CR2  = (0x5201)
                           005202   390  SPI_ICR  = (0x5202)
                           005203   391  SPI_SR  = (0x5203)
                           005204   392  SPI_DR  = (0x5204)
                           005205   393  SPI_CRCPR  = (0x5205)
                           005206   394  SPI_RXCRCR  = (0x5206)
                           005207   395  SPI_TXCRCR  = (0x5207)
                                    396 
                                    397 ; I2C
                           005210   398  I2C_CR1  = (0x5210)
                           005211   399  I2C_CR2  = (0x5211)
                           005212   400  I2C_FREQR  = (0x5212)
                           005213   401  I2C_OARL  = (0x5213)
                           005214   402  I2C_OARH  = (0x5214)
                           005216   403  I2C_DR  = (0x5216)
                           005217   404  I2C_SR1  = (0x5217)
                           005218   405  I2C_SR2  = (0x5218)
                           005219   406  I2C_SR3  = (0x5219)
                           00521A   407  I2C_ITR  = (0x521A)
                           00521B   408  I2C_CCRL  = (0x521B)
                           00521C   409  I2C_CCRH  = (0x521C)
                           00521D   410  I2C_TRISER  = (0x521D)
                           00521E   411  I2C_PECR  = (0x521E)
                                    412 
                           000007   413  I2C_CR1_NOSTRETCH = (7)
                           000006   414  I2C_CR1_ENGC = (6)
                           000000   415  I2C_CR1_PE = (0)
                                    416 
                           000007   417  I2C_CR2_SWRST = (7)
                           000003   418  I2C_CR2_POS = (3)
                           000002   419  I2C_CR2_ACK = (2)
                           000001   420  I2C_CR2_STOP = (1)
                           000000   421  I2C_CR2_START = (0)
                                    422 
                           000000   423  I2C_OARL_ADD0 = (0)
                                    424 
                           000009   425  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   426  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    427 
                           000007   428  I2C_OARH_ADDMODE = (7)
                           000006   429  I2C_OARH_ADDCONF = (6)
                           000002   430  I2C_OARH_ADD9 = (2)
                           000001   431  I2C_OARH_ADD8 = (1)
                                    432 
                           000007   433  I2C_SR1_TXE = (7)
                           000006   434  I2C_SR1_RXNE = (6)
                           000004   435  I2C_SR1_STOPF = (4)
                           000003   436  I2C_SR1_ADD10 = (3)
                           000002   437  I2C_SR1_BTF = (2)
                           000001   438  I2C_SR1_ADDR = (1)
                           000000   439  I2C_SR1_SB = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                    440 
                           000005   441  I2C_SR2_WUFH = (5)
                           000003   442  I2C_SR2_OVR = (3)
                           000002   443  I2C_SR2_AF = (2)
                           000001   444  I2C_SR2_ARLO = (1)
                           000000   445  I2C_SR2_BERR = (0)
                                    446 
                           000007   447  I2C_SR3_DUALF = (7)
                           000004   448  I2C_SR3_GENCALL = (4)
                           000002   449  I2C_SR3_TRA = (2)
                           000001   450  I2C_SR3_BUSY = (1)
                           000000   451  I2C_SR3_MSL = (0)
                                    452 
                           000002   453  I2C_ITR_ITBUFEN = (2)
                           000001   454  I2C_ITR_ITEVTEN = (1)
                           000000   455  I2C_ITR_ITERREN = (0)
                                    456 
                                    457 ; Precalculated values, all in KHz
                           000080   458  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   459  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    460 ;
                                    461 ; Fast I2C mode max rise time = 300ns
                                    462 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    463 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    464 
                           000005   465  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    466 
                           0000C0   467  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   468  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   469  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    470 
                           000080   471  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   472  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   473  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    474 
                           000000   475  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   476  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    477 ;
                                    478 ; Standard I2C mode max rise time = 1000ns
                                    479 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    480 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    481 
                           000011   482  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    483 
                           000000   484  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   485  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   486  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    487 
                           000001   488  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   489  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   490  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    491 
                           000001   492  I2C_READ = 1
                           000000   493  I2C_WRITE = 0
                                    494 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    495 ; baudrate constant for brr_value table access
                           000000   496 B2400=0
                           000001   497 B4800=1
                           000002   498 B9600=2
                           000003   499 B19200=3
                           000004   500 B38400=4
                           000005   501 B57600=5
                           000006   502 B115200=6
                           000007   503 B230400=7
                           000008   504 B460800=8
                           000009   505 B921600=9
                                    506 
                                    507 ; UART1 
                           005230   508  UART1_SR    = (0x5230)
                           005231   509  UART1_DR    = (0x5231)
                           005232   510  UART1_BRR1  = (0x5232)
                           005233   511  UART1_BRR2  = (0x5233)
                           005234   512  UART1_CR1   = (0x5234)
                           005235   513  UART1_CR2   = (0x5235)
                           005236   514  UART1_CR3   = (0x5236)
                           005237   515  UART1_CR4   = (0x5237)
                           005238   516  UART1_CR5   = (0x5238)
                           005239   517  UART1_GTR   = (0x5239)
                           00523A   518  UART1_PSCR  = (0x523A)
                                    519 
                                    520 ; UART3
                           005240   521  UART3_SR    = (0x5240)
                           005241   522  UART3_DR    = (0x5241)
                           005242   523  UART3_BRR1  = (0x5242)
                           005243   524  UART3_BRR2  = (0x5243)
                           005244   525  UART3_CR1   = (0x5244)
                           005245   526  UART3_CR2   = (0x5245)
                           005246   527  UART3_CR3   = (0x5246)
                           005247   528  UART3_CR4   = (0x5247)
                           004249   529  UART3_CR6   = (0x4249)
                                    530 
                                    531 ; UART Status Register bits
                           000007   532  UART_SR_TXE = (7)
                           000006   533  UART_SR_TC = (6)
                           000005   534  UART_SR_RXNE = (5)
                           000004   535  UART_SR_IDLE = (4)
                           000003   536  UART_SR_OR = (3)
                           000002   537  UART_SR_NF = (2)
                           000001   538  UART_SR_FE = (1)
                           000000   539  UART_SR_PE = (0)
                                    540 
                                    541 ; Uart Control Register bits
                           000007   542  UART_CR1_R8 = (7)
                           000006   543  UART_CR1_T8 = (6)
                           000005   544  UART_CR1_UARTD = (5)
                           000004   545  UART_CR1_M = (4)
                           000003   546  UART_CR1_WAKE = (3)
                           000002   547  UART_CR1_PCEN = (2)
                           000001   548  UART_CR1_PS = (1)
                           000000   549  UART_CR1_PIEN = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    550 
                           000007   551  UART_CR2_TIEN = (7)
                           000006   552  UART_CR2_TCIEN = (6)
                           000005   553  UART_CR2_RIEN = (5)
                           000004   554  UART_CR2_ILIEN = (4)
                           000003   555  UART_CR2_TEN = (3)
                           000002   556  UART_CR2_REN = (2)
                           000001   557  UART_CR2_RWU = (1)
                           000000   558  UART_CR2_SBK = (0)
                                    559 
                           000006   560  UART_CR3_LINEN = (6)
                           000005   561  UART_CR3_STOP1 = (5)
                           000004   562  UART_CR3_STOP0 = (4)
                           000003   563  UART_CR3_CLKEN = (3)
                           000002   564  UART_CR3_CPOL = (2)
                           000001   565  UART_CR3_CPHA = (1)
                           000000   566  UART_CR3_LBCL = (0)
                                    567 
                           000006   568  UART_CR4_LBDIEN = (6)
                           000005   569  UART_CR4_LBDL = (5)
                           000004   570  UART_CR4_LBDF = (4)
                           000003   571  UART_CR4_ADD3 = (3)
                           000002   572  UART_CR4_ADD2 = (2)
                           000001   573  UART_CR4_ADD1 = (1)
                           000000   574  UART_CR4_ADD0 = (0)
                                    575 
                           000005   576  UART_CR5_SCEN = (5)
                           000004   577  UART_CR5_NACK = (4)
                           000003   578  UART_CR5_HDSEL = (3)
                           000002   579  UART_CR5_IRLP = (2)
                           000001   580  UART_CR5_IREN = (1)
                                    581 ; LIN mode config register
                           000007   582  UART_CR6_LDUM = (7)
                           000005   583  UART_CR6_LSLV = (5)
                           000004   584  UART_CR6_LASE = (4)
                           000002   585  UART_CR6_LHDIEN = (2) 
                           000001   586  UART_CR6_LHDF = (1)
                           000000   587  UART_CR6_LSF = (0)
                                    588 
                                    589 ; TIMERS
                                    590 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   591  TIM1_CR1  = (0x5250)
                           005251   592  TIM1_CR2  = (0x5251)
                           005252   593  TIM1_SMCR  = (0x5252)
                           005253   594  TIM1_ETR  = (0x5253)
                           005254   595  TIM1_IER  = (0x5254)
                           005255   596  TIM1_SR1  = (0x5255)
                           005256   597  TIM1_SR2  = (0x5256)
                           005257   598  TIM1_EGR  = (0x5257)
                           005258   599  TIM1_CCMR1  = (0x5258)
                           005259   600  TIM1_CCMR2  = (0x5259)
                           00525A   601  TIM1_CCMR3  = (0x525A)
                           00525B   602  TIM1_CCMR4  = (0x525B)
                           00525C   603  TIM1_CCER1  = (0x525C)
                           00525D   604  TIM1_CCER2  = (0x525D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00525E   605  TIM1_CNTRH  = (0x525E)
                           00525F   606  TIM1_CNTRL  = (0x525F)
                           005260   607  TIM1_PSCRH  = (0x5260)
                           005261   608  TIM1_PSCRL  = (0x5261)
                           005262   609  TIM1_ARRH  = (0x5262)
                           005263   610  TIM1_ARRL  = (0x5263)
                           005264   611  TIM1_RCR  = (0x5264)
                           005265   612  TIM1_CCR1H  = (0x5265)
                           005266   613  TIM1_CCR1L  = (0x5266)
                           005267   614  TIM1_CCR2H  = (0x5267)
                           005268   615  TIM1_CCR2L  = (0x5268)
                           005269   616  TIM1_CCR3H  = (0x5269)
                           00526A   617  TIM1_CCR3L  = (0x526A)
                           00526B   618  TIM1_CCR4H  = (0x526B)
                           00526C   619  TIM1_CCR4L  = (0x526C)
                           00526D   620  TIM1_BKR  = (0x526D)
                           00526E   621  TIM1_DTR  = (0x526E)
                           00526F   622  TIM1_OISR  = (0x526F)
                                    623 
                                    624 ; Timer Control Register bits
                           000007   625  TIM_CR1_ARPE = (7)
                           000006   626  TIM_CR1_CMSH = (6)
                           000005   627  TIM_CR1_CMSL = (5)
                           000004   628  TIM_CR1_DIR = (4)
                           000003   629  TIM_CR1_OPM = (3)
                           000002   630  TIM_CR1_URS = (2)
                           000001   631  TIM_CR1_UDIS = (1)
                           000000   632  TIM_CR1_CEN = (0)
                                    633 
                           000006   634  TIM1_CR2_MMS2 = (6)
                           000005   635  TIM1_CR2_MMS1 = (5)
                           000004   636  TIM1_CR2_MMS0 = (4)
                           000002   637  TIM1_CR2_COMS = (2)
                           000000   638  TIM1_CR2_CCPC = (0)
                                    639 
                                    640 ; Timer Slave Mode Control bits
                           000007   641  TIM1_SMCR_MSM = (7)
                           000006   642  TIM1_SMCR_TS2 = (6)
                           000005   643  TIM1_SMCR_TS1 = (5)
                           000004   644  TIM1_SMCR_TS0 = (4)
                           000002   645  TIM1_SMCR_SMS2 = (2)
                           000001   646  TIM1_SMCR_SMS1 = (1)
                           000000   647  TIM1_SMCR_SMS0 = (0)
                                    648 
                                    649 ; Timer External Trigger Enable bits
                           000007   650  TIM1_ETR_ETP = (7)
                           000006   651  TIM1_ETR_ECE = (6)
                           000005   652  TIM1_ETR_ETPS1 = (5)
                           000004   653  TIM1_ETR_ETPS0 = (4)
                           000003   654  TIM1_ETR_ETF3 = (3)
                           000002   655  TIM1_ETR_ETF2 = (2)
                           000001   656  TIM1_ETR_ETF1 = (1)
                           000000   657  TIM1_ETR_ETF0 = (0)
                                    658 
                                    659 ; Timer Interrupt Enable bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000007   660  TIM1_IER_BIE = (7)
                           000006   661  TIM1_IER_TIE = (6)
                           000005   662  TIM1_IER_COMIE = (5)
                           000004   663  TIM1_IER_CC4IE = (4)
                           000003   664  TIM1_IER_CC3IE = (3)
                           000002   665  TIM1_IER_CC2IE = (2)
                           000001   666  TIM1_IER_CC1IE = (1)
                           000000   667  TIM1_IER_UIE = (0)
                                    668 
                                    669 ; Timer Status Register bits
                           000007   670  TIM1_SR1_BIF = (7)
                           000006   671  TIM1_SR1_TIF = (6)
                           000005   672  TIM1_SR1_COMIF = (5)
                           000004   673  TIM1_SR1_CC4IF = (4)
                           000003   674  TIM1_SR1_CC3IF = (3)
                           000002   675  TIM1_SR1_CC2IF = (2)
                           000001   676  TIM1_SR1_CC1IF = (1)
                           000000   677  TIM1_SR1_UIF = (0)
                                    678 
                           000004   679  TIM1_SR2_CC4OF = (4)
                           000003   680  TIM1_SR2_CC3OF = (3)
                           000002   681  TIM1_SR2_CC2OF = (2)
                           000001   682  TIM1_SR2_CC1OF = (1)
                                    683 
                                    684 ; Timer Event Generation Register bits
                           000007   685  TIM1_EGR_BG = (7)
                           000006   686  TIM1_EGR_TG = (6)
                           000005   687  TIM1_EGR_COMG = (5)
                           000004   688  TIM1_EGR_CC4G = (4)
                           000003   689  TIM1_EGR_CC3G = (3)
                           000002   690  TIM1_EGR_CC2G = (2)
                           000001   691  TIM1_EGR_CC1G = (1)
                           000000   692  TIM1_EGR_UG = (0)
                                    693 
                                    694 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   695  TIM1_CCMR1_OC1CE = (7)
                           000006   696  TIM1_CCMR1_OC1M2 = (6)
                           000005   697  TIM1_CCMR1_OC1M1 = (5)
                           000004   698  TIM1_CCMR1_OC1M0 = (4)
                           000003   699  TIM1_CCMR1_OC1PE = (3)
                           000002   700  TIM1_CCMR1_OC1FE = (2)
                           000001   701  TIM1_CCMR1_CC1S1 = (1)
                           000000   702  TIM1_CCMR1_CC1S0 = (0)
                                    703 
                                    704 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   705  TIM1_CCMR1_IC1F3 = (7)
                           000006   706  TIM1_CCMR1_IC1F2 = (6)
                           000005   707  TIM1_CCMR1_IC1F1 = (5)
                           000004   708  TIM1_CCMR1_IC1F0 = (4)
                           000003   709  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   710  TIM1_CCMR1_IC1PSC0 = (2)
                                    711 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   712  TIM1_CCMR1_CC1S0 = (0)
                                    713 
                                    714 ; Capture/Compare Mode Register 2 - channel configured in output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           000007   715  TIM1_CCMR2_OC2CE = (7)
                           000006   716  TIM1_CCMR2_OC2M2 = (6)
                           000005   717  TIM1_CCMR2_OC2M1 = (5)
                           000004   718  TIM1_CCMR2_OC2M0 = (4)
                           000003   719  TIM1_CCMR2_OC2PE = (3)
                           000002   720  TIM1_CCMR2_OC2FE = (2)
                           000001   721  TIM1_CCMR2_CC2S1 = (1)
                           000000   722  TIM1_CCMR2_CC2S0 = (0)
                                    723 
                                    724 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   725  TIM1_CCMR2_IC2F3 = (7)
                           000006   726  TIM1_CCMR2_IC2F2 = (6)
                           000005   727  TIM1_CCMR2_IC2F1 = (5)
                           000004   728  TIM1_CCMR2_IC2F0 = (4)
                           000003   729  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   730  TIM1_CCMR2_IC2PSC0 = (2)
                                    731 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   732  TIM1_CCMR2_CC2S0 = (0)
                                    733 
                                    734 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   735  TIM1_CCMR3_OC3CE = (7)
                           000006   736  TIM1_CCMR3_OC3M2 = (6)
                           000005   737  TIM1_CCMR3_OC3M1 = (5)
                           000004   738  TIM1_CCMR3_OC3M0 = (4)
                           000003   739  TIM1_CCMR3_OC3PE = (3)
                           000002   740  TIM1_CCMR3_OC3FE = (2)
                           000001   741  TIM1_CCMR3_CC3S1 = (1)
                           000000   742  TIM1_CCMR3_CC3S0 = (0)
                                    743 
                                    744 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   745  TIM1_CCMR3_IC3F3 = (7)
                           000006   746  TIM1_CCMR3_IC3F2 = (6)
                           000005   747  TIM1_CCMR3_IC3F1 = (5)
                           000004   748  TIM1_CCMR3_IC3F0 = (4)
                           000003   749  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   750  TIM1_CCMR3_IC3PSC0 = (2)
                                    751 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   752  TIM1_CCMR3_CC3S0 = (0)
                                    753 
                                    754 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   755  TIM1_CCMR4_OC4CE = (7)
                           000006   756  TIM1_CCMR4_OC4M2 = (6)
                           000005   757  TIM1_CCMR4_OC4M1 = (5)
                           000004   758  TIM1_CCMR4_OC4M0 = (4)
                           000003   759  TIM1_CCMR4_OC4PE = (3)
                           000002   760  TIM1_CCMR4_OC4FE = (2)
                           000001   761  TIM1_CCMR4_CC4S1 = (1)
                           000000   762  TIM1_CCMR4_CC4S0 = (0)
                                    763 
                                    764 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   765  TIM1_CCMR4_IC4F3 = (7)
                           000006   766  TIM1_CCMR4_IC4F2 = (6)
                           000005   767  TIM1_CCMR4_IC4F1 = (5)
                           000004   768  TIM1_CCMR4_IC4F0 = (4)
                           000003   769  TIM1_CCMR4_IC4PSC1 = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000002   770  TIM1_CCMR4_IC4PSC0 = (2)
                                    771 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   772  TIM1_CCMR4_CC4S0 = (0)
                                    773 
                                    774 ; Timer 2 - 16-bit timer
                           005300   775  TIM2_CR1  = (0x5300)
                           005301   776  TIM2_IER  = (0x5301)
                           005302   777  TIM2_SR1  = (0x5302)
                           005303   778  TIM2_SR2  = (0x5303)
                           005304   779  TIM2_EGR  = (0x5304)
                           005305   780  TIM2_CCMR1  = (0x5305)
                           005306   781  TIM2_CCMR2  = (0x5306)
                           005307   782  TIM2_CCMR3  = (0x5307)
                           005308   783  TIM2_CCER1  = (0x5308)
                           005309   784  TIM2_CCER2  = (0x5309)
                           00530A   785  TIM2_CNTRH  = (0x530A)
                           00530B   786  TIM2_CNTRL  = (0x530B)
                           00530C   787  TIM2_PSCR  = (0x530C)
                           00530D   788  TIM2_ARRH  = (0x530D)
                           00530E   789  TIM2_ARRL  = (0x530E)
                           00530F   790  TIM2_CCR1H  = (0x530F)
                           005310   791  TIM2_CCR1L  = (0x5310)
                           005311   792  TIM2_CCR2H  = (0x5311)
                           005312   793  TIM2_CCR2L  = (0x5312)
                           005313   794  TIM2_CCR3H  = (0x5313)
                           005314   795  TIM2_CCR3L  = (0x5314)
                                    796 
                                    797 ; Timer 3
                           005320   798  TIM3_CR1  = (0x5320)
                           005321   799  TIM3_IER  = (0x5321)
                           005322   800  TIM3_SR1  = (0x5322)
                           005323   801  TIM3_SR2  = (0x5323)
                           005324   802  TIM3_EGR  = (0x5324)
                           005325   803  TIM3_CCMR1  = (0x5325)
                           005326   804  TIM3_CCMR2  = (0x5326)
                           005327   805  TIM3_CCER1  = (0x5327)
                           005328   806  TIM3_CNTRH  = (0x5328)
                           005329   807  TIM3_CNTRL  = (0x5329)
                           00532A   808  TIM3_PSCR  = (0x532A)
                           00532B   809  TIM3_ARRH  = (0x532B)
                           00532C   810  TIM3_ARRL  = (0x532C)
                           00532D   811  TIM3_CCR1H  = (0x532D)
                           00532E   812  TIM3_CCR1L  = (0x532E)
                           00532F   813  TIM3_CCR2H  = (0x532F)
                           005330   814  TIM3_CCR2L  = (0x5330)
                                    815 
                                    816 ; TIM3_CR1  fields
                           000000   817  TIM3_CR1_CEN = (0)
                           000001   818  TIM3_CR1_UDIS = (1)
                           000002   819  TIM3_CR1_URS = (2)
                           000003   820  TIM3_CR1_OPM = (3)
                           000007   821  TIM3_CR1_ARPE = (7)
                                    822 ; TIM3_CCR2  fields
                           000000   823  TIM3_CCMR2_CC2S_POS = (0)
                           000003   824  TIM3_CCMR2_OC2PE_POS = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                           000004   825  TIM3_CCMR2_OC2M_POS = (4)  
                                    826 ; TIM3_CCER1 fields
                           000000   827  TIM3_CCER1_CC1E = (0)
                           000001   828  TIM3_CCER1_CC1P = (1)
                           000004   829  TIM3_CCER1_CC2E = (4)
                           000005   830  TIM3_CCER1_CC2P = (5)
                                    831 ; TIM3_CCER2 fields
                           000000   832  TIM3_CCER2_CC3E = (0)
                           000001   833  TIM3_CCER2_CC3P = (1)
                                    834 
                                    835 ; Timer 4
                           005340   836  TIM4_CR1  = (0x5340)
                           005341   837  TIM4_IER  = (0x5341)
                           005342   838  TIM4_SR  = (0x5342)
                           005343   839  TIM4_EGR  = (0x5343)
                           005344   840  TIM4_CNTR  = (0x5344)
                           005345   841  TIM4_PSCR  = (0x5345)
                           005346   842  TIM4_ARR  = (0x5346)
                                    843 
                                    844 ; Timer 4 bitmasks
                                    845 
                           000007   846  TIM4_CR1_ARPE = (7)
                           000003   847  TIM4_CR1_OPM = (3)
                           000002   848  TIM4_CR1_URS = (2)
                           000001   849  TIM4_CR1_UDIS = (1)
                           000000   850  TIM4_CR1_CEN = (0)
                                    851 
                           000000   852  TIM4_IER_UIE = (0)
                                    853 
                           000000   854  TIM4_SR_UIF = (0)
                                    855 
                           000000   856  TIM4_EGR_UG = (0)
                                    857 
                           000002   858  TIM4_PSCR_PSC2 = (2)
                           000001   859  TIM4_PSCR_PSC1 = (1)
                           000000   860  TIM4_PSCR_PSC0 = (0)
                                    861 
                           000000   862  TIM4_PSCR_1 = 0
                           000001   863  TIM4_PSCR_2 = 1
                           000002   864  TIM4_PSCR_4 = 2
                           000003   865  TIM4_PSCR_8 = 3
                           000004   866  TIM4_PSCR_16 = 4
                           000005   867  TIM4_PSCR_32 = 5
                           000006   868  TIM4_PSCR_64 = 6
                           000007   869  TIM4_PSCR_128 = 7
                                    870 
                                    871 ; ADC2
                           005400   872  ADC_CSR  = (0x5400)
                           005401   873  ADC_CR1  = (0x5401)
                           005402   874  ADC_CR2  = (0x5402)
                           005403   875  ADC_CR3  = (0x5403)
                           005404   876  ADC_DRH  = (0x5404)
                           005405   877  ADC_DRL  = (0x5405)
                           005406   878  ADC_TDRH  = (0x5406)
                           005407   879  ADC_TDRL  = (0x5407)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    880  
                                    881 ; ADC bitmasks
                                    882 
                           000007   883  ADC_CSR_EOC = (7)
                           000006   884  ADC_CSR_AWD = (6)
                           000005   885  ADC_CSR_EOCIE = (5)
                           000004   886  ADC_CSR_AWDIE = (4)
                           000003   887  ADC_CSR_CH3 = (3)
                           000002   888  ADC_CSR_CH2 = (2)
                           000001   889  ADC_CSR_CH1 = (1)
                           000000   890  ADC_CSR_CH0 = (0)
                                    891 
                           000006   892  ADC_CR1_SPSEL2 = (6)
                           000005   893  ADC_CR1_SPSEL1 = (5)
                           000004   894  ADC_CR1_SPSEL0 = (4)
                           000001   895  ADC_CR1_CONT = (1)
                           000000   896  ADC_CR1_ADON = (0)
                                    897 
                           000006   898  ADC_CR2_EXTTRIG = (6)
                           000005   899  ADC_CR2_EXTSEL1 = (5)
                           000004   900  ADC_CR2_EXTSEL0 = (4)
                           000003   901  ADC_CR2_ALIGN = (3)
                           000001   902  ADC_CR2_SCAN = (1)
                                    903 
                           000007   904  ADC_CR3_DBUF = (7)
                           000006   905  ADC_CR3_DRH = (6)
                                    906 
                                    907 ; beCAN
                           005420   908  CAN_MCR = (0x5420)
                           005421   909  CAN_MSR = (0x5421)
                           005422   910  CAN_TSR = (0x5422)
                           005423   911  CAN_TPR = (0x5423)
                           005424   912  CAN_RFR = (0x5424)
                           005425   913  CAN_IER = (0x5425)
                           005426   914  CAN_DGR = (0x5426)
                           005427   915  CAN_FPSR = (0x5427)
                           005428   916  CAN_P0 = (0x5428)
                           005429   917  CAN_P1 = (0x5429)
                           00542A   918  CAN_P2 = (0x542A)
                           00542B   919  CAN_P3 = (0x542B)
                           00542C   920  CAN_P4 = (0x542C)
                           00542D   921  CAN_P5 = (0x542D)
                           00542E   922  CAN_P6 = (0x542E)
                           00542F   923  CAN_P7 = (0x542F)
                           005430   924  CAN_P8 = (0x5430)
                           005431   925  CAN_P9 = (0x5431)
                           005432   926  CAN_PA = (0x5432)
                           005433   927  CAN_PB = (0x5433)
                           005434   928  CAN_PC = (0x5434)
                           005435   929  CAN_PD = (0x5435)
                           005436   930  CAN_PE = (0x5436)
                           005437   931  CAN_PF = (0x5437)
                                    932 
                                    933 
                                    934 ; CPU
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           007F00   935  CPU_A  = (0x7F00)
                           007F01   936  CPU_PCE  = (0x7F01)
                           007F02   937  CPU_PCH  = (0x7F02)
                           007F03   938  CPU_PCL  = (0x7F03)
                           007F04   939  CPU_XH  = (0x7F04)
                           007F05   940  CPU_XL  = (0x7F05)
                           007F06   941  CPU_YH  = (0x7F06)
                           007F07   942  CPU_YL  = (0x7F07)
                           007F08   943  CPU_SPH  = (0x7F08)
                           007F09   944  CPU_SPL   = (0x7F09)
                           007F0A   945  CPU_CCR   = (0x7F0A)
                                    946 
                                    947 ; global configuration register
                           007F60   948  CFG_GCR   = (0x7F60)
                           000001   949  CFG_GCR_AL = 1
                           000000   950  CFG_GCR_SWIM = 0
                                    951 
                                    952 ; interrupt control registers
                           007F70   953  ITC_SPR1   = (0x7F70)
                           007F71   954  ITC_SPR2   = (0x7F71)
                           007F72   955  ITC_SPR3   = (0x7F72)
                           007F73   956  ITC_SPR4   = (0x7F73)
                           007F74   957  ITC_SPR5   = (0x7F74)
                           007F75   958  ITC_SPR6   = (0x7F75)
                           007F76   959  ITC_SPR7   = (0x7F76)
                           007F77   960  ITC_SPR8   = (0x7F77)
                                    961 
                                    962 ; SWIM, control and status register
                           007F80   963  SWIM_CSR   = (0x7F80)
                                    964 ; debug registers
                           007F90   965  DM_BK1RE   = (0x7F90)
                           007F91   966  DM_BK1RH   = (0x7F91)
                           007F92   967  DM_BK1RL   = (0x7F92)
                           007F93   968  DM_BK2RE   = (0x7F93)
                           007F94   969  DM_BK2RH   = (0x7F94)
                           007F95   970  DM_BK2RL   = (0x7F95)
                           007F96   971  DM_CR1   = (0x7F96)
                           007F97   972  DM_CR2   = (0x7F97)
                           007F98   973  DM_CSR1   = (0x7F98)
                           007F99   974  DM_CSR2   = (0x7F99)
                           007F9A   975  DM_ENFCTR   = (0x7F9A)
                                    976 
                                    977 ; Interrupt Numbers
                           000000   978  INT_TLI = 0
                           000001   979  INT_AWU = 1
                           000002   980  INT_CLK = 2
                           000003   981  INT_EXTI0 = 3
                           000004   982  INT_EXTI1 = 4
                           000005   983  INT_EXTI2 = 5
                           000006   984  INT_EXTI3 = 6
                           000007   985  INT_EXTI4 = 7
                           000008   986  INT_CAN_RX = 8
                           000009   987  INT_CAN_TX = 9
                           00000A   988  INT_SPI = 10
                           00000B   989  INT_TIM1_OVF = 11
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                           00000C   990  INT_TIM1_CCM = 12
                           00000D   991  INT_TIM2_OVF = 13
                           00000E   992  INT_TIM2_CCM = 14
                           00000F   993  INT_TIM3_OVF = 15
                           000010   994  INT_TIM3_CCM = 16
                           000011   995  INT_UART1_TX_COMPLETED = 17
                           000012   996  INT_AUART1_RX_FULL = 18
                           000013   997  INT_I2C = 19
                           000014   998  INT_UART3_TX_COMPLETED = 20
                           000015   999  INT_UART3_RX_FULL = 21
                           000016  1000  INT_ADC2 = 22
                           000017  1001  INT_TIM4_OVF = 23
                           000018  1002  INT_FLASH = 24
                                   1003 
                                   1004 ; Interrupt Vectors
                           008000  1005  INT_VECTOR_RESET = 0x8000
                           008004  1006  INT_VECTOR_TRAP = 0x8004
                           008008  1007  INT_VECTOR_TLI = 0x8008
                           00800C  1008  INT_VECTOR_AWU = 0x800C
                           008010  1009  INT_VECTOR_CLK = 0x8010
                           008014  1010  INT_VECTOR_EXTI0 = 0x8014
                           008018  1011  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1012  INT_VECTOR_EXTI2 = 0x801C
                           008020  1013  INT_VECTOR_EXTI3 = 0x8020
                           008024  1014  INT_VECTOR_EXTI4 = 0x8024
                           008028  1015  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1016  INT_VECTOR_CAN_TX = 0x802c
                           008030  1017  INT_VECTOR_SPI = 0x8030
                           008034  1018  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1019  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1020  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1021  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1022  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1023  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1024  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1025  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1026  INT_VECTOR_I2C = 0x8054
                           008058  1027  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1028  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1029  INT_VECTOR_ADC2 = 0x8060
                           008064  1030  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1031  INT_VECTOR_FLASH = 0x8068
                                   1032 
                                   1033 ; Condition code register bits
                           000007  1034 CC_V = 7  ; overflow flag 
                           000005  1035 CC_I1= 5  ; interrupt bit 1
                           000004  1036 CC_H = 4  ; half carry 
                           000003  1037 CC_I0 = 3 ; interrupt bit 0
                           000002  1038 CC_N = 2 ;  negative flag 
                           000001  1039 CC_Z = 1 ;  zero flag  
                           000000  1040 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                     25 	.include "../inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ;-------------------------------------------------------
                           000001    23 		CTRL_A = 1
                           000002    24 		CTRL_B = 2
                           000003    25 		CTRL_C = 3
                           000004    26 		CTRL_D = 4
                           000005    27 		CTRL_E = 5
                           000006    28 		CTRL_F = 6
                                     29 
                           000007    30         BELL = 7    ; vt100 terminal generate a sound.
                           000007    31 		CTRL_G = 7
                                     32 
                           000008    33 		BSP = 8     ; back space 
                           000008    34 		CTRL_H = 8  
                                     35 
                           000009    36     	TAB = 9     ; horizontal tabulation
                           000009    37         CTRL_I = 9
                                     38 
                           00000A    39 		NL = 10     ; new line 
                           00000A    40         CTRL_J = 10 
                                     41 
                           00000B    42         VT = 11     ; vertical tabulation 
                           00000B    43 		CTRL_K = 11
                                     44 
                           00000C    45         FF = 12      ; new page
                           00000C    46 		CTRL_L = 12
                                     47 
                           00000D    48 		CR = 13      ; carriage return 
                           00000D    49 		CTRL_M = 13
                                     50 
                           00000E    51 		CTRL_N = 14
                           00000F    52 		CTRL_O = 15
                           000010    53 		CTRL_P = 16
                           000011    54 		CTRL_Q = 17
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                           000012    55 		CTRL_R = 18
                           000013    56 		CTRL_S = 19
                           000014    57 		CTRL_T = 20
                           000015    58 		CTRL_U = 21
                           000016    59 		CTRL_V = 22
                           000017    60 		CTRL_W = 23
                           000018    61 		CTRL_X = 24
                           000019    62 		CTRL_Y = 25
                           00001A    63 		CTRL_Z = 26
                           00001B    64 		ESC = 27
                           000020    65 		SPACE = 32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                     26 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                     28 
                                     29 	.macro idx_tbl name value ptr  
                                     30 		name=value
                                     31 		.word ptr 
                                     32 	.endm
                                     33 
                                     34 ;-------------------------------------
                                     35 ;   MONA global assembler constants 
                                     36 ;-------------------------------------
                                     37 
                           000050    38 		TIB_SIZE = 80 ; transaction input buffer size
                           000050    39 		PAD_SIZE = 80 ; workding pad size
                                     40 
                                     41 ;------------------------------------------
                                     42 ;    boolean flags in variable 'flags'
                                     43 ;------------------------------------------
                           000000    44 	F_TRAP = 0  ; set by TrapHandler,cleared by 'q' command.
                           000001    45 	F_CC   = 1  ; save carry flag here 
                           000002    46 	F_FOUND = 2 ; set when a search_code succeed  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                     27 
                                     28 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     30 
                                     31 ;-------------------------------------------------------
                                     32 ; History:
                                     33 ;   2019-11-20  version 0.5
                                     34 ;				Code rework and modules reorganization
                                     35 ;				added 'd' command for disassembler
                                     36 ;		
                                     37 ;   2019-11-10  version 0.4
                                     38 ;				Added 'f' command to search string. 
                                     39 ;
                                     40 ;				parser rework.
                                     41 ;		
                                     42 ;	2019-11-05  version 0.3 
                                     43 ;				Added user button interrupt to exit from
                                     44 ;				infinite loop program and fall back du MONA.
                                     45 ;
                                     46 ;				A user application installed after MONA or in RAM 
                                     47 ;				can use *trap* instruction for debugging in MONA.
                                     48 ;				This fall to MONA shell. The application can be
                                     49 ;				resume with the 'q' command in the shell.
                                     50 ;
                                     51 ;				Added 'q' command for when MONA is entered from 
                                     52 ;				from a *trap* instruction. This will resume application
                                     53 ;               after the trap. Otherwise this instruction as no effect.
                                     54 ;
                                     55 ;				This version does not use *uart rx full* (int21) interrupt.
                                     56 ;				It is not working inside TrapHandler even though *rim*
                                     57 ;				instruction called.
                                     58 ;
                                     59 ;				The *main* function check if there is code at *flash_free_base*
                                     60 ;				and jump to it instead of entering MONA shell. The user button
                                     61 ;				can be used to fallback to MONA shell.
                                     62 ;
                                     63 ;				Change behavior of 'x' command. If no address given and 
                                     64 ;				there is an application installed jump to that application.
                                     65 ;
                                     66 ;   2019-11-04  version 0.2
                                     67 ;				Added 'e'rase command.
                                     68 ;				! command accept .asciz argument 
                                     69 ;
                                     70 ;	2019-10-28  starting work on version 0.2 to remove
                                     71 ; 				version 0.1 adressing range limitation.
                                     72 ;               version 0.1 was adapted from 
                                     73 ;			https://github.com/Picatout/stm8s-discovery/tree/master/mona
                                     74 ;
                                     75 ;-------------------------------------------------------
                                     76 
                                     77 
                                     78 ;--------------------------------------------------------
                                     79 ;      MACROS
                                     80 ;--------------------------------------------------------
                                     81 		.macro _ledenable ; set PC5 as push-pull output fast mode
                                     82 		bset PC_CR1,#LED2_BIT
                                     83 		bset PC_CR2,#LED2_BIT
                                     84 		bset PC_DDR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                     85 		.endm
                                     86 		
                                     87 		.macro _ledon ; turn on green LED 
                                     88 		bset PC_ODR,#LED2_BIT
                                     89 		.endm
                                     90 		
                                     91 		.macro _ledoff ; turn off green LED
                                     92 		bres PC_ODR,#LED2_BIT
                                     93 		.endm
                                     94 		
                                     95 		.macro _ledtoggle ; invert green LED state
                                     96 		ld a,#LED2_MASK
                                     97 		xor a,PC_ODR
                                     98 		ld PC_ODR,a
                                     99 		.endm
                                    100 		
                                    101 		
                                    102 		.macro  _int_enable ; enable interrupts
                                    103 		 rim
                                    104 		.endm
                                    105 		
                                    106 		.macro _int_disable ; disable interrupts
                                    107 		sim
                                    108 		.endm
                                    109 
                                    110 ;--------------------------------------------------------
                                    111 ;some constants used by this program.
                                    112 ;--------------------------------------------------------
                           000100   113 		STACK_SIZE = 256 ; call stack size
                           001700   114 		STACK_BASE = RAM_SIZE-STACK_SIZE ; lowest address of stack
                           0017FF   115 		STACK_TOP = RAM_SIZE-1 ; stack top at end of ram
                                    116 		; vesrion major.minor
                           000000   117 		VERS_MAJOR = 0 ; major version number
                           000005   118 		VERS_MINOR = 5 ; minor version number
                                    119 
                                    120 ;--------------------------------------------------------
                                    121 ;   application variables 
                                    122 ;---------------------------------------------------------		
                                    123         .area DATA
      000000                        124 in.w:  .blkb 1 ; when 16 bits is required for indexing i.e. ld a,([in.w],y) 
      000001                        125 in:		.blkb 1; parser position in tib
      000002                        126 count:  .blkb 1; length of string in tib
      000003                        127 tib:	.blkb TIB_SIZE ; transaction input buffer
      000053                        128 trap_sp: .blkw 1; value of sp at trap entry point.
      000055                        129 ram_free_base: .blkw 1
      000057                        130 flash_free_base: .blkw 1
                                    131 
                                    132 		.area USER_RAM_BASE
                                    133 ;--------------------------------------------------------
                                    134 ;   the following RAM is not used by MONA
                                    135 ;--------------------------------------------------------
      000000                        136  _user_ram:		
                                    137 
                                    138 ;--------------------------------------------------------
                                    139 ;  stack segment
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                    140 ;--------------------------------------------------------
                                    141        .area SSEG  (ABS)
      001700                        142 	   .org RAM_SIZE-STACK_SIZE
      001700                        143  __stack_bottom:
      001700                        144 	   .ds  256
                                    145 
                                    146 ;--------------------------------------------------------
                                    147 ; interrupt vector 
                                    148 ;--------------------------------------------------------
                                    149 	.area HOME
      000000                        150 __interrupt_vect:
      000000 82 00 00 96            151 	int init0 ;RESET vector
      000004 82 00 01 66            152 	int TrapHandler 		;TRAP  software interrupt
      000008 82 00 01 61            153 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 01 61            154 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 01 61            155 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 01 61            156 	int NonHandledInterrupt ;int3 EXTI0 port A external interrupts
      000018 82 00 01 61            157 	int NonHandledInterrupt ;int4 EXTI1 port B external interrupts
      00001C 82 00 01 61            158 	int NonHandledInterrupt ;int5 EXTI2 port C external interrupts
      000020 82 00 01 61            159 	int NonHandledInterrupt ;int6 EXTI3 port D external interrupts
      000024 82 00 01 B5            160 	int UserButtonHandler   ;int7 EXTI4 port E external interrupts
      000028 82 00 01 61            161 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 01 61            162 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 01 61            163 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 01 61            164 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 01 61            165 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 01 61            166 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 01 61            167 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 01 61            168 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 01 61            169 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 01 61            170 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 01 61            171 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 01 61            172 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 01 61            173 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 01 61            174 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 01 61            175 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 01 61            176 	int NonHandledInterrupt	;int23 TIM4 update/overflow
      000068 82 00 01 61            177 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 01 61            178 	int NonHandledInterrupt ;int25  not used
      000070 82 00 01 61            179 	int NonHandledInterrupt ;int26  not used
      000074 82 00 01 61            180 	int NonHandledInterrupt ;int27  not used
      000078 82 00 01 61            181 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 01 61            182 	int NonHandledInterrupt ;int29  not used
                                    183 
                                    184 	.area CODE
      000000 4D 4F 4E 41            185 .ascii "MONA"
                                    186 	;initialize clock to use HSE 8 Mhz crystal
      000004                        187 clock_init:	
      000004 72 12 50 C5      [ 1]  188 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000008 A6 B4            [ 1]  189 	ld a,#CLK_SWR_HSE
      00000A C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      00000D C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      000010 26 FB            [ 1]  192 	jrne 1$
      000012 81               [ 4]  193 	ret
                                    194 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                    195 		; initialize TIMER4 ticks counter
                                    196 ;timer4_init:
                                    197 ;	clr ticks
                                    198 ;	clr cntdwn
                                    199 ;	ld a,#TIM4_PSCR_128 
                                    200 ;	ld TIM4_PSCR,a
                                    201 ;	bset TIM4_IER,#TIM4_IER_UIE
                                    202 ;	bres TIM4_SR,#TIM4_SR_UIF
                                    203 ;	ld a,#125
                                    204 ;	ld TIM4_ARR,a ; 1 msec interval
                                    205 ;	ld a,#((1<<TIM4_CR1_CEN)+(1<<TIM4_CR1_ARPE)) 
                                    206 ;	ld TIM4_CR1,a
                                    207 ;	ret
                                    208 
                                    209 ; initialize UART3, 115200 8N1
      000013                        210 uart3_init:
                                    211 	; configure tx pin
      000013 72 1A 50 11      [ 1]  212 	bset PD_DDR,#BIT5 ; tx pin
      000017 72 1A 50 12      [ 1]  213 	bset PD_CR1,#BIT5 ; push-pull output
      00001B 72 1A 50 13      [ 1]  214 	bset PD_CR2,#BIT5 ; fast output
                                    215 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00001F 35 05 52 43      [ 1]  216 	mov UART3_BRR2,#0x05 ; must be loaded first
      000023 35 04 52 42      [ 1]  217 	mov UART3_BRR1,#0x4
      000027 35 0C 52 45      [ 1]  218 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
      00002B 81               [ 4]  219 	ret
                                    220 	
                                    221 	; pause in milliseconds
                                    222     ; input:  y delay
                                    223     ; output: none
                                    224 ;pause:
                                    225 ;	 ldw cntdwn,y
                                    226 ;1$: ldw y,cntdwn
                                    227 ;	 jrne 1$
                                    228 ;    ret
                                    229 
                                    230 ;-------------------------
                                    231 ;  zero all free ram
                                    232 ;-------------------------
      00002C                        233 clear_all_free_ram:
      00002C AE 00 00         [ 2]  234 	ldw x,#0
      00002F                        235 1$:	
      00002F 7F               [ 1]  236 	clr (x)
      000030 5C               [ 1]  237 	incw x
      000031 A3 17 FD         [ 2]  238 	cpw x,#STACK_TOP-2
      000034 23 F9            [ 2]  239 	jrule 1$
      000036 81               [ 4]  240 	ret
                                    241 
                                    242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    243 ;  information printed at reset
                                    244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000037                        245 print_mona_info:
      000037 52 02            [ 2]  246 	sub sp,#2
      000039 A6 00            [ 1]  247 	ld a, #VERS_MAJOR
      00003B AB 30            [ 1]  248 	add a,#'0
      00003D 6B 01            [ 1]  249 	ld (1,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00003F A6 05            [ 1]  250 	ld a, #VERS_MINOR
      000041 AB 30            [ 1]  251 	add a,#'0
      000043 6B 02            [ 1]  252 	ld (2,sp),a 
      000045 90 AE 0A D7      [ 2]  253 	ldw y,#VERSION
      000049 CD 00 00         [ 4]  254 	call format 
      00004C 5B 02            [ 2]  255 	addw sp,#2 
      00004E 90 AE 0A EC      [ 2]  256 	ldw y,#CPU_MODEL
      000052 CD 00 00         [ 4]  257 	call uart_print
      000055 90 AE 0B 24      [ 2]  258 	ldw y,#RAM_FREE_MSG
      000059 CD 00 00         [ 4]  259 	call uart_print
      00005C 72 5F 00 00      [ 1]  260 	clr acc24
      000060 55 00 55 00 01   [ 1]  261 	mov acc24+1,ram_free_base
      000065 55 00 56 00 02   [ 1]  262 	mov acc24+2,ram_free_base+1 
      00006A 5F               [ 1]  263 	clrw x
      00006B A6 10            [ 1]  264 	ld a,#16
      00006D CD 00 00         [ 4]  265 	call print_int 
      000070 90 AE 0B 2F      [ 2]  266 	ldw y,#RAM_LAST_FREE_MSG
      000074 CD 00 00         [ 4]  267 	call uart_print
      000077 90 AE 0B 38      [ 2]  268 	ldw y,#FLASH_FREE_MSG
      00007B CD 00 00         [ 4]  269 	call uart_print
      00007E A6 10            [ 1]  270 	ld a,#16
      000080 55 00 57 00 01   [ 1]  271 	mov acc24+1,flash_free_base
      000085 55 00 58 00 02   [ 1]  272 	mov acc24+2,flash_free_base+1 
      00008A 5F               [ 1]  273 	clrw x 
      00008B CD 00 00         [ 4]  274 	call print_int 
      00008E 90 AE 0B 45      [ 2]  275 	ldw y,#EEPROM_MSG
      000092 CD 00 00         [ 4]  276 	call uart_print
      000095 81               [ 4]  277 	ret
                                    278 
      000096                        279 init0:
                                    280 	; initialize SP
      000096 AE 17 FF         [ 2]  281 	ldw x,#STACK_TOP
      000099 94               [ 1]  282 	ldw sp,x
      00009A CD 00 04         [ 4]  283 	call clock_init
      00009D CD 00 2C         [ 4]  284 	call clear_all_free_ram
                                    285 ;	clr ticks
                                    286 ;	clr cntdwn
      0000A0 A6 FF            [ 1]  287 	ld a,#255
      0000A2 C7 00 00         [ 1]  288 	ld rx_char,a
                                    289 ;	call timer4_init
      0000A5 CD 00 13         [ 4]  290 	call uart3_init
      0000A8                        291 	_ledenable
      0000A8 72 1A 50 0D      [ 1]    1 		bset PC_CR1,#LED2_BIT
      0000AC 72 1A 50 0E      [ 1]    2 		bset PC_CR2,#LED2_BIT
      0000B0 72 1A 50 0C      [ 1]    3 		bset PC_DDR,#LED2_BIT
      0000B4                        292 	_ledoff
      0000B4 72 1B 50 0A      [ 1]    1 		bres PC_ODR,#LED2_BIT
      0000B8 72 5F 00 00      [ 1]  293 	clr in.w ; must always be 0
                                    294 	; initialize free_ram_base variable
      0000BC 90 AE 00 00      [ 2]  295 	ldw y,#_user_ram ;#ram_free_base
                                    296 	; align on 16 bytes boundary
      0000C0 72 A9 00 0F      [ 2]  297 	addw y,#0xf
      0000C4 90 9F            [ 1]  298 	ld a,yl
      0000C6 A4 F0            [ 1]  299 	and a,#0xf0
      0000C8 90 97            [ 1]  300 	ld yl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0000CA 90 CF 00 55      [ 2]  301 	ldw ram_free_base,y
                                    302 	; initialize flash_free_base variable
      0000CE 90 AE 00 00      [ 2]  303 	ldw y,#mona_end
      0000D2 90 CF 00 57      [ 2]  304 	ldw flash_free_base,y
                                    305 ; active l'interruption sur PE_4 (bouton utilisateur)
      0000D6 72 18 50 18      [ 1]  306     bset PE_CR2,#USR_BTN_BIT
                                    307 
                                    308 ;------------------------
                                    309 ; program main function
                                    310 ;------------------------
      0000DA                        311 main:	
                                    312 ; enable interrupts
      0000DA                        313 	_int_enable 
      0000DA 9A               [ 1]    1 		 rim
                                    314 ; check for user application and run it 
                                    315 ; if there is one located at *flash_free_base*
      0000DB 72 C6 00 57      [ 4]  316 	ld a,[flash_free_base]
      0000DF 27 0F            [ 1]  317 	jreq 1$
      0000E1 90 AE 01 0F      [ 2]  318 	ldw y, #APP_MSG
      0000E5 CD 00 00         [ 4]  319 	call uart_print
      0000E8 90 CE 00 57      [ 2]  320 	ldw y,flash_free_base
      0000EC 90 5C            [ 1]  321 	incw y
      0000EE 90 FC            [ 2]  322 	jp 	(y)	
                                    323 ; information printed at mcu reset.	
      0000F0 CD 00 37         [ 4]  324 1$:	call print_mona_info
                                    325 ; Read Execute Print Loop
                                    326 ; MONA spend is time in this loop
      0000F3                        327 repl: 
                                    328 ; move terminal cursor to next line
      0000F3 A6 0A            [ 1]  329 	ld a,#NL 
      0000F5 CD 00 00         [ 4]  330 	call uart_tx
                                    331 ; print prompt sign	 
      0000F8 A6 3E            [ 1]  332 	ld a,#'>
      0000FA CD 00 00         [ 4]  333 	call uart_tx
                                    334 ; read command line	
      0000FD CD 02 C4         [ 4]  335 	call readln 
                                    336 ;if empty line -> ignore it, loop.	
      000100 72 5D 00 02      [ 1]  337 	tnz count
      000104 27 ED            [ 1]  338 	jreq repl
                                    339 ; initialize parser and call eval function	  
      000106 72 5F 00 01      [ 1]  340 	clr in
      00010A CD 06 BF         [ 4]  341 	call eval
                                    342 ; start over	
      00010D 20 E4            [ 2]  343 	jra repl  ; loop
                                    344 
      00010F 0A 41 70 70 6C 69 63   345 APP_MSG: .ascii "\nApplication dectected, running it.\n"
             61 74 69 6F 6E 20 64
             65 63 74 65 63 74 65
             64 2C 20 72 75 6E 6E
             69 6E 67 20 69 74 2E
             0A
      000133 50 72 65 73 73 20 55   346 		 .asciz "Press USER button to fallback to MONA shell.\n"
             53 45 52 20 62 75 74
             74 6F 6E 20 74 6F 20
             66 61 6C 6C 62 61 63
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



             6B 20 74 6F 20 4D 4F
             4E 41 20 73 68 65 6C
             6C 2E 0A 00
                                    347 
                                    348 ;------------------------------------
                                    349 ;	interrupt NonHandledInterrupt
                                    350 ;   non handled interrupt reset MCU
                                    351 ;------------------------------------
      000161                        352 NonHandledInterrupt:
      000161 A6 80            [ 1]  353 	ld a,#0x80
      000163 C7 50 D1         [ 1]  354 	ld WWDG_CR,a
                                    355 	;iret
                                    356 ;------------------------------------
                                    357 ; gestionnaire pour l'instrcution trap 
                                    358 ;------------------------------------
      000166                        359 TrapHandler:
                                    360 ; save sp for 'q' command resume.
      000166 90 96            [ 1]  361 	ldw y, sp 
      000168 90 CF 00 53      [ 2]  362 	ldw trap_sp,y
      00016C 90 AE 01 7E      [ 2]  363 	ldw y, #SOFT_TRAP 
      000170 CD 00 00         [ 4]  364 	call uart_print 
      000173 CD 01 D4         [ 4]  365 	call print_registers
      000176 72 10 00 00      [ 1]  366 	bset flags,#F_TRAP 
                                    367 ; enable interrupts 
                                    368 ;	ld a,#(1<<CC_I1)
                                    369 ;	push a 
                                    370 ;	pop cc  
      00017A CC 00 F3         [ 2]  371 	jp repl
      00017D                        372 app_resume:	
      00017D 80               [11]  373 	iret
                                    374 
      00017E 50 72 6F 67 72 61 6D   375 SOFT_TRAP: .asciz "Program interrupted by a software trap. 'q' to resume\n"
             20 69 6E 74 65 72 72
             75 70 74 65 64 20 62
             79 20 61 20 73 6F 66
             74 77 61 72 65 20 74
             72 61 70 2E 20 27 71
             27 20 74 6F 20 72 65
             73 75 6D 65 0A 00
                                    376 
                                    377 ;------------------------------------
                                    378 ;    user button interrupt handler
                                    379 ;    Cette interruption ne retourne pas
                                    380 ;    Après avoir affiché l'état des 
                                    381 ;    registres au moment de l'interruption
                                    382 ;    le pointeur de pile est réinitialiser
                                    383 ;    et un saut vers repl: est effectué.
                                    384 ;------------------------------------
      0001B5                        385 UserButtonHandler:
                                    386 	; attend que le bouton soit relâché
      0001B5 CE FF FF         [ 2]  387 0$:	ldw x,0xffff
      0001B8 5A               [ 2]  388 1$: decw x 
      0001B9 26 FD            [ 1]  389 	jrne 1$
      0001BB 72 08 50 15 02   [ 2]  390 	btjt USR_BTN_PORT,#USR_BTN_BIT, 2$
      0001C0 20 F3            [ 2]  391 	jra 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0001C2 90 AE 02 53      [ 2]  392 2$:	ldw y,#USER_ABORT
      0001C6 CD 00 00         [ 4]  393 	call uart_print
      0001C9 CD 01 D4         [ 4]  394     call print_registers 
      0001CC                        395 	_int_enable 
      0001CC 9A               [ 1]    1 		 rim
      0001CD AE 17 FF         [ 2]  396 	ldw x, #RAM_SIZE-1
      0001D0 94               [ 1]  397 	ldw sp, x
      0001D1 CC 00 F3         [ 2]  398 	jp repl
                                    399 
                                    400 
                                    401 ; affiche les registres sauvegardés
                                    402 ; par l'interruption sur la pile.
      0001D4                        403 print_registers:
      0001D4 90 AE 02 6D      [ 2]  404 	ldw y,#STATES
      0001D8 CD 00 00         [ 4]  405 	call uart_print
                                    406 ; print EPC 
      0001DB 90 AE 02 A9      [ 2]  407 	ldw y, #REG_EPC
      0001DF CD 00 00         [ 4]  408 	call uart_print 
      0001E2 7B 0B            [ 1]  409 	ld a, (11,sp)
      0001E4 C7 00 02         [ 1]  410 	ld acc24+2,a 
      0001E7 7B 0A            [ 1]  411 	ld a, (10,sp) 
      0001E9 C7 00 01         [ 1]  412 	ld acc24+1,a 
      0001EC 7B 09            [ 1]  413 	ld a,(9,sp) 
      0001EE C7 00 00         [ 1]  414 	ld acc24,a
      0001F1 5F               [ 1]  415 	clrw x  
      0001F2 A6 10            [ 1]  416 	ld a,#16
      0001F4 CD 00 00         [ 4]  417 	call print_int  
                                    418 ; print Y 
      0001F7 90 AE 02 AF      [ 2]  419 	ldw y,#REG_Y
      0001FB CD 00 00         [ 4]  420 	call uart_print 
      0001FE 72 5F 00 00      [ 1]  421 	clr acc24 
      000202 7B 08            [ 1]  422 	ld a,(8,sp)
      000204 C7 00 02         [ 1]  423 	ld acc24+2,a 
      000207 7B 07            [ 1]  424 	ld a,(7,sp)
      000209 C7 00 01         [ 1]  425 	ld acc24+1,a 
      00020C A6 10            [ 1]  426 	ld a,#16 
      00020E CD 00 00         [ 4]  427 	call print_int 
                                    428 ; print X
      000211 90 AE 02 B4      [ 2]  429 	ldw y,#REG_X
      000215 CD 00 00         [ 4]  430 	call uart_print  
      000218 7B 06            [ 1]  431 	ld a,(6,sp)
      00021A C7 00 02         [ 1]  432 	ld acc24+2,a 
      00021D 7B 05            [ 1]  433 	ld a,(5,sp)
      00021F C7 00 01         [ 1]  434 	ld acc24+1,a 
      000222 A6 10            [ 1]  435 	ld a,#16 
      000224 CD 00 00         [ 4]  436 	call print_int 
                                    437 ; print A 
      000227 90 AE 02 B9      [ 2]  438 	ldw y,#REG_A 
      00022B CD 00 00         [ 4]  439 	call uart_print 
      00022E 72 5F 00 01      [ 1]  440 	clr acc24+1
      000232 7B 04            [ 1]  441 	ld a, (4,sp) 
      000234 C7 00 02         [ 1]  442 	ld acc24+2,a 
      000237 A6 10            [ 1]  443 	ld a,#16
      000239 CD 00 00         [ 4]  444 	call print_int 
                                    445 ; print CC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      00023C 90 AE 02 BE      [ 2]  446 	ldw y,#REG_CC 
      000240 CD 00 00         [ 4]  447 	call uart_print 
      000243 7B 03            [ 1]  448 	ld a, (3,sp) 
      000245 C7 00 02         [ 1]  449 	ld acc24+2,a
      000248 A6 10            [ 1]  450 	ld a,#16  
      00024A CD 00 00         [ 4]  451 	call print_int 
      00024D A6 0A            [ 1]  452 	ld a,#'\n' 
      00024F CD 00 00         [ 4]  453 	call uart_tx  
      000252 81               [ 4]  454 	ret
                                    455 
      000253 50 72 6F 67 72 61 6D   456 USER_ABORT: .asciz "Program aborted by user.\n"
             20 61 62 6F 72 74 65
             64 20 62 79 20 75 73
             65 72 2E 0A 00
      00026D 52 65 67 69 73 74 65   457 STATES:  .asciz "Registers state at abort point.\n--------------------------\n"
             72 73 20 73 74 61 74
             65 20 61 74 20 61 62
             6F 72 74 20 70 6F 69
             6E 74 2E 0A 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
      0002A9 45 50 43 3A 20 00      458 REG_EPC: .asciz "EPC: "
      0002AF 0A 59 3A 20 00         459 REG_Y:   .asciz "\nY: " 
      0002B4 0A 58 3A 20 00         460 REG_X:   .asciz "\nX: "
      0002B9 0A 41 3A 20 00         461 REG_A:   .asciz "\nA: " 
      0002BE 0A 43 43 3A 20 00      462 REG_CC:  .asciz "\nCC: "
                                    463 
                                    464 ;------------------------------------
                                    465 ; TIMER4 interrupt service routine
                                    466 ;------------------------------------
                                    467 ;timer4_isr:
                                    468 ;	ldw y,ticks
                                    469 ;	incw y
                                    470 ;	ldw ticks,y
                                    471 ;	ldw y,cntdwn
                                    472 ;	jreq 1$
                                    473 ;	decw y
                                    474 ;	ldw cntdwn,y
                                    475 ;1$: bres TIM4_SR,#TIM4_SR_UIF
                                    476 ;	iret
                                    477 
                                    478 ;------------------------------------
                                    479 ; uart3 receive interrupt service
                                    480 ;------------------------------------
                                    481 ;uart_rx_isr:
                                    482 ; local variables
                                    483 ;  UART_STATUS = 2
                                    484 ;  UART_DATA = 1
                                    485 ; read uart registers and save them in local variables  
                                    486 ;  ld a, UART3_SR
                                    487 ;  push a  ; local variable UART_STATUS
                                    488 ;  ld a,UART3_DR
                                    489 ;  push a ; local variable UART_DATA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    490 ; test uart status register
                                    491 ; bit RXNE must 1
                                    492 ; bits OR|FE|NF must be 0	
                                    493 ;  ld a, (UART_STATUS,sp)
                                    494 ; keep only significant bits
                                    495 ;  and a, #((1<<UART_SR_RXNE)|(1<<UART_SR_OR)|(1<<UART_SR_FE)|(1<<UART_SR_NF))
                                    496 ; A value shoudl be == (1<<UART_SR_RNXE)  
                                    497 ;  cp a, #(1<<UART_SR_RXNE)
                                    498 ;  jrne 1$
                                    499 ; no receive error accept it.  
                                    500 ;  ld a,(UART_DATA,sp)
                                    501 ;  ld rx_char,a
                                    502 ;1$: 
                                    503 ; drop local variables
                                    504 ;  popw X	
                                    505 ;  iret
                                    506 
                                    507 ;------------------------------------
                                    508 ; read a line of text from terminal
                                    509 ; input:
                                    510 ;	none
                                    511 ; local variable on stack:
                                    512 ;	LEN (1,sp)
                                    513 ;   RXCHAR (2,sp)
                                    514 ; output:
                                    515 ;   text in tib  buffer
                                    516 ;   len in count variable
                                    517 ;------------------------------------
                                    518 	; local variables
                           000001   519 	LEN = 1  ; accepted line length
                           000002   520 	RXCHAR = 2 ; last char received
      0002C4                        521 readln::
      0002C4 4B 00            [ 1]  522 	push #0  ; RXCHAR 
      0002C6 4B 00            [ 1]  523 	push #0  ; LEN
      0002C8 90 AE 00 03      [ 2]  524  	ldw y,#tib ; input buffer
      0002CC                        525 readln_loop:
      0002CC CD 00 00         [ 4]  526 	call uart_getchar
      0002CF 6B 02            [ 1]  527 	ld (RXCHAR,sp),a
      0002D1 A1 03            [ 1]  528 	cp a,#CTRL_C
      0002D3 26 03            [ 1]  529 	jrne 2$
      0002D5 CC 03 50         [ 2]  530 	jp cancel
      0002D8 A1 12            [ 1]  531 2$:	cp a,#CTRL_R
      0002DA 27 50            [ 1]  532 	jreq reprint
      0002DC A1 0D            [ 1]  533 	cp a,#CR
      0002DE 26 03            [ 1]  534 	jrne 1$
      0002E0 CC 03 5A         [ 2]  535 	jp readln_quit
      0002E3 A1 0A            [ 1]  536 1$:	cp a,#NL
      0002E5 27 73            [ 1]  537 	jreq readln_quit
      0002E7 A1 08            [ 1]  538 	cp a,#BSP
      0002E9 27 1B            [ 1]  539 	jreq del_back
      0002EB A1 04            [ 1]  540 	cp a,#CTRL_D
      0002ED 27 06            [ 1]  541 	jreq del_line
      0002EF A1 20            [ 1]  542 	cp a,#SPACE
      0002F1 2A 24            [ 1]  543 	jrpl accept_char
      0002F3 20 D7            [ 2]  544 	jra readln_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0002F5                        545 del_line:
      0002F5 7B 01            [ 1]  546 	ld a,(LEN,sp)
      0002F7 CD 00 00         [ 4]  547 	call uart_delete
      0002FA 90 AE 00 03      [ 2]  548 	ldw y,#tib
      0002FE 72 5F 00 02      [ 1]  549 	clr count
      000302 0F 01            [ 1]  550 	clr (LEN,sp)
      000304 20 C6            [ 2]  551 	jra readln_loop
      000306                        552 del_back:
      000306 0D 01            [ 1]  553     tnz (LEN,sp)
      000308 27 C2            [ 1]  554     jreq readln_loop
      00030A 0A 01            [ 1]  555     dec (LEN,sp)
      00030C 90 5A            [ 2]  556     decw y
      00030E 90 7F            [ 1]  557     clr  (y)
      000310 A6 01            [ 1]  558     ld a,#1
      000312 CD 00 00         [ 4]  559     call uart_delete
      000315 20 B5            [ 2]  560     jra readln_loop	
      000317                        561 accept_char:
      000317 A6 4F            [ 1]  562 	ld a,#TIB_SIZE-1
      000319 11 01            [ 1]  563 	cp a, (1,sp)
      00031B 27 AF            [ 1]  564 	jreq readln_loop
      00031D 7B 02            [ 1]  565 	ld a,(RXCHAR,sp)
      00031F 90 F7            [ 1]  566 	ld (y),a
      000321 0C 01            [ 1]  567 	inc (LEN,sp)
      000323 90 5C            [ 1]  568 	incw y
      000325 90 7F            [ 1]  569 	clr (y)
      000327 CD 00 00         [ 4]  570 	call uart_tx
      00032A 20 A0            [ 2]  571 	jra readln_loop
      00032C                        572 reprint:
      00032C 0D 01            [ 1]  573 	tnz (LEN,sp)
      00032E 26 9C            [ 1]  574 	jrne readln_loop
      000330 72 5D 00 02      [ 1]  575 	tnz count
      000334 27 96            [ 1]  576 	jreq readln_loop
      000336 90 AE 00 03      [ 2]  577 	ldw y,#tib
      00033A 90 89            [ 2]  578 	pushw y
      00033C CD 00 00         [ 4]  579 	call uart_print
      00033F 90 85            [ 2]  580 	popw y
      000341 C6 00 02         [ 1]  581 	ld a,count
      000344 6B 01            [ 1]  582 	ld (LEN,sp),a
      000346 90 9F            [ 1]  583 	ld a,yl
      000348 CB 00 02         [ 1]  584 	add a,count
      00034B 90 97            [ 1]  585 	ld yl,a
      00034D CC 02 CC         [ 2]  586 	jp readln_loop
      000350                        587 cancel:
      000350 72 5F 00 03      [ 1]  588 	clr tib
      000354 72 5F 00 02      [ 1]  589 	clr count
      000358 20 05            [ 2]  590 	jra readln_quit2
      00035A                        591 readln_quit:
      00035A 7B 01            [ 1]  592 	ld a,(LEN,sp)
      00035C C7 00 02         [ 1]  593 	ld count,a
      00035F                        594 readln_quit2:
      00035F 5B 02            [ 2]  595 	addw sp,#2
      000361 A6 0A            [ 1]  596 	ld a,#NL
      000363 CD 00 00         [ 4]  597 	call uart_tx
      000366 81               [ 4]  598 	ret
                                    599 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    600 ;------------------------------------
                                    601 ; skip character c in tib starting from 'in'
                                    602 ; input:
                                    603 ;	 y 		point to tib 
                                    604 ;    a 		character to skip
                                    605 ; output:  
                                    606 ;	'in' ajusted to new position
                                    607 ;------------------------------------
                           000001   608 	C = 1 ; local var
      000367                        609 skip:
      000367 88               [ 1]  610 	push a
      000368 91 D6 00         [ 4]  611 1$:	ld a,([in.w],y)
      00036B 27 0A            [ 1]  612 	jreq 2$
      00036D 11 01            [ 1]  613 	cp a,(C,sp)
      00036F 26 06            [ 1]  614 	jrne 2$
      000371 72 5C 00 01      [ 1]  615 	inc in
      000375 20 F1            [ 2]  616 	jra 1$
      000377 84               [ 1]  617 2$: pop a
      000378 81               [ 4]  618 	ret
                                    619 	
                                    620 ;------------------------------------
                                    621 ; scan tib for charater 'c' starting from 'in'
                                    622 ; input:
                                    623 ;	y  point to tib 
                                    624 ;	a character to skip
                                    625 ; output:
                                    626 ;	in point to chacter 'c'
                                    627 ;------------------------------------
                           000001   628 	C = 1 ; local var
      000379                        629 scan: 
      000379 88               [ 1]  630 	push a
      00037A 91 D6 00         [ 4]  631 1$:	ld a,([in.w],y)
      00037D 27 0A            [ 1]  632 	jreq 2$
      00037F 11 01            [ 1]  633 	cp a,(C,sp)
      000381 27 06            [ 1]  634 	jreq 2$
      000383 72 5C 00 01      [ 1]  635 	inc in
      000387 20 F1            [ 2]  636 	jra 1$
      000389 84               [ 1]  637 2$: pop a
      00038A 81               [ 4]  638 	ret
                                    639 
                                    640 ;------------------------------------
                                    641 ; parse quoted string 
                                    642 ; input:
                                    643 ;   Y 	pointer to tib 
                                    644 ;   X   pointer to tab 
                                    645 ; output:
                                    646 ;	pad   containt string 
                                    647 ;------------------------------------
                           000001   648 	PREV = 1
      00038B                        649 parse_quote:
      00038B 4F               [ 1]  650 	clr a
      00038C 88               [ 1]  651 	push a
      00038D 6B 01            [ 1]  652 1$:	ld (PREV,sp),a 
      00038F 72 5C 00 01      [ 1]  653 	inc in
      000393 91 D6 00         [ 4]  654 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000396 27 22            [ 1]  655 	jreq 4$
      000398 88               [ 1]  656 	push a
      000399 7B 01            [ 1]  657 	ld a, (PREV,sp)
      00039B A1 5C            [ 1]  658 	cp a,#'\
      00039D 84               [ 1]  659 	pop a 
      00039E 26 08            [ 1]  660 	jrne 11$
      0003A0 0F 01            [ 1]  661 	clr (PREV,sp)
      0003A2 AD 19            [ 4]  662 	callr convert_escape
      0003A4 F7               [ 1]  663 	ld (x),a 
      0003A5 5C               [ 1]  664 	incw x 
      0003A6 20 E5            [ 2]  665 	jra 1$
      0003A8                        666 11$: 
      0003A8 A1 5C            [ 1]  667 	cp a,#'\'
      0003AA 26 04            [ 1]  668 	jrne 2$
      0003AC 6B 01            [ 1]  669 	ld (PREV,sp),a 
      0003AE 20 DD            [ 2]  670 	jra 1$
      0003B0 F7               [ 1]  671 2$:	ld (x),a 
      0003B1 5C               [ 1]  672 	incw x 
      0003B2 A1 22            [ 1]  673 	cp a,#'"'
      0003B4 26 D7            [ 1]  674 	jrne 1$
      0003B6 72 5C 00 01      [ 1]  675 	inc in 
      0003BA 7F               [ 1]  676 4$:	clr (x)
      0003BB 84               [ 1]  677 	pop a 
      0003BC 81               [ 4]  678 	ret 
                                    679 
                                    680 ;---------------------------------------
                                    681 ; called by parse_quote
                                    682 ; subtitute escaped character 
                                    683 ; by their ASCII value .
                                    684 ; input:
                                    685 ;   A  character following '\'
                                    686 ; output:
                                    687 ;   A  substitued char or same if not valid.
                                    688 ;---------------------------------------
      0003BD                        689 convert_escape:
      0003BD A1 61            [ 1]  690 	cp a,#'a'
      0003BF 26 03            [ 1]  691 	jrne 1$
      0003C1 A6 07            [ 1]  692 	ld a,#7
      0003C3 81               [ 4]  693 	ret 
      0003C4 A1 62            [ 1]  694 1$: cp a,#'b'
      0003C6 26 03            [ 1]  695 	jrne 2$
      0003C8 A6 08            [ 1]  696 	ld a,#8
      0003CA 81               [ 4]  697 	ret 
      0003CB A1 65            [ 1]  698 2$: cp a,#'e' 
      0003CD 26 03            [ 1]  699     jrne 3$
      0003CF A6 5C            [ 1]  700 	ld a,#'\'
      0003D1 81               [ 4]  701 	ret  
      0003D2 A1 5C            [ 1]  702 3$: cp a,#'\'
      0003D4 26 03            [ 1]  703 	jrne 4$
      0003D6 A6 5C            [ 1]  704 	ld a,#'\'
      0003D8 81               [ 4]  705 	ret 
      0003D9 A1 66            [ 1]  706 4$: cp a,#'f' 
      0003DB 26 03            [ 1]  707 	jrne 5$ 
      0003DD A6 0C            [ 1]  708 	ld a,#FF 
      0003DF 81               [ 4]  709 	ret  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0003E0 A1 6E            [ 1]  710 5$: cp a,#'n' 
      0003E2 26 03            [ 1]  711     jrne 6$ 
      0003E4 A6 0A            [ 1]  712 	ld a,#0xa 
      0003E6 81               [ 4]  713 	ret  
      0003E7 A1 72            [ 1]  714 6$: cp a,#'r' 
      0003E9 26 03            [ 1]  715 	jrne 7$
      0003EB A6 0D            [ 1]  716 	ld a,#0xd 
      0003ED 81               [ 4]  717 	ret  
      0003EE A1 74            [ 1]  718 7$: cp a,#'t' 
      0003F0 26 03            [ 1]  719 	jrne 8$ 
      0003F2 A6 09            [ 1]  720 	ld a,#9 
      0003F4 81               [ 4]  721 	ret  
      0003F5 A1 76            [ 1]  722 8$: cp a,#'v' 
      0003F7 26 02            [ 1]  723 	jrne 9$  
      0003F9 A6 0B            [ 1]  724 	ld a,#0xb 
      0003FB 81               [ 4]  725 9$:	ret 
                                    726 
                                    727 ;------------------------------------
                                    728 ; Command line tokenizer
                                    729 ; scan tib for next word
                                    730 ; move token in 'pad'
                                    731 ; use:
                                    732 ;	Y   pointer to tib 
                                    733 ;   X	pointer to pad 
                                    734 ;   in.w   index in tib
                                    735 ; output:
                                    736 ;   pad 	token as .asciz  
                                    737 ;------------------------------------
      0003FC                        738 next_word::
      0003FC 89               [ 2]  739 	pushw x 
      0003FD 90 89            [ 2]  740 	pushw y 
      0003FF AE 00 00         [ 2]  741 	ldw x, #pad 
      000402 90 AE 00 03      [ 2]  742 	ldw y, #tib  	
      000406 A6 20            [ 1]  743 	ld a,#SPACE
      000408 CD 03 67         [ 4]  744 	call skip
      00040B 91 D6 00         [ 4]  745 	ld a,([in.w],y)
      00040E 27 1D            [ 1]  746 	jreq 8$
      000410 A1 22            [ 1]  747 	cp a,#'"
      000412 26 07            [ 1]  748 	jrne 1$
      000414 F7               [ 1]  749 	ld (x),a 
      000415 5C               [ 1]  750 	incw x 
      000416 CD 03 8B         [ 4]  751 	call parse_quote
      000419 20 13            [ 2]  752 	jra 9$
      00041B A1 20            [ 1]  753 1$: cp a,#SPACE
      00041D 27 0E            [ 1]  754 	jreq 8$
      00041F CD 04 32         [ 4]  755 	call to_lower 
      000422 F7               [ 1]  756 	ld (x),a 
      000423 5C               [ 1]  757 	incw x 
      000424 72 5C 00 01      [ 1]  758 	inc in
      000428 91 D6 00         [ 4]  759 	ld a,([in.w],y) 
      00042B 26 EE            [ 1]  760 	jrne 1$
      00042D 7F               [ 1]  761 8$: clr (x)
      00042E 90 85            [ 2]  762 9$:	popw y 
      000430 85               [ 2]  763 	popw x 
      000431 81               [ 4]  764 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                    765 
                                    766 ;----------------------------------
                                    767 ; convert to lower case
                                    768 ; input: 
                                    769 ;   A 		character to convert
                                    770 ; output:
                                    771 ;   A		result 
                                    772 ;----------------------------------
      000432                        773 to_lower::
      000432 A1 41            [ 1]  774 	cp a,#'A
      000434 25 06            [ 1]  775 	jrult 9$
      000436 A1 5A            [ 1]  776 	cp a,#'Z 
      000438 22 02            [ 1]  777 	jrugt 9$
      00043A AB 20            [ 1]  778 	add a,#32
      00043C 81               [ 4]  779 9$: ret
                                    780 
                                    781 ;------------------------------------
                                    782 ; convert alpha to uppercase
                                    783 ; input:
                                    784 ;    a  character to convert
                                    785 ; output:
                                    786 ;    a  uppercase character
                                    787 ;------------------------------------
      00043D                        788 to_upper::
      00043D A1 61            [ 1]  789 	cp a,#'a
      00043F 2A 01            [ 1]  790 	jrpl 1$
      000441 81               [ 4]  791 0$:	ret
      000442 A1 7A            [ 1]  792 1$: cp a,#'z	
      000444 22 FB            [ 1]  793 	jrugt 0$
      000446 A0 20            [ 1]  794 	sub a,#32
      000448 81               [ 4]  795 	ret
                                    796 	
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;        arithmetic operations
                                    799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    800 
                                    801 ;--------------------------------------
                                    802 ;	24 bit integers addition
                                    803 ; input:
                                    804 ;	X 		*v1 
                                    805 ;	Y 		*v2 
                                    806 ; output:
                                    807 ;	X 		*v1+=*v2 
                                    808 ;--------------------------------------
      000449                        809 add24::
      000449 E6 02            [ 1]  810 	ld a,(2,x)
      00044B 90 EB 02         [ 1]  811 	add a,(2,y)
      00044E E7 02            [ 1]  812 	ld (2,x),a 
      000450 E6 01            [ 1]  813 	ld a,(1,x)
      000452 90 E9 01         [ 1]  814 	adc a,(1,y)
      000455 E7 01            [ 1]  815 	ld (1,x),a 
      000457 F6               [ 1]  816 	ld a,(x)
      000458 90 F9            [ 1]  817 	adc a,(y)
      00045A F7               [ 1]  818 	ld (x),a 
      00045B 81               [ 4]  819 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                    820 
                                    821 
                                    822 ;--------------------------------------
                                    823 ; unsigned multiply uint24_t by uint8_t
                                    824 ; use to convert numerical string to uint24_t
                                    825 ; input:
                                    826 ;	acc24	uint24_t 
                                    827 ;   A		uint8_t
                                    828 ; output:
                                    829 ;   acc24   A*acc24
                                    830 ;-------------------------------------
                                    831 ; local variables offset  on sp
                           000003   832 	U8   = 3   ; A pushed on stack
                           000002   833 	OVFL = 2  ; multiplicaton overflow low byte
                           000001   834 	OVFH = 1  ; multiplication overflow high byte
                           000003   835 	LOCAL_SIZE = 3
      00045C                        836 mulu24_8::
      00045C 89               [ 2]  837 	pushw x    ; save X
                                    838 	; local variables
      00045D 88               [ 1]  839 	push a     ; U8
      00045E 5F               [ 1]  840 	clrw x     ; initialize overflow to 0
      00045F 89               [ 2]  841 	pushw x    ; multiplication overflow
                                    842 ; multiply low byte.
      000460 C6 00 02         [ 1]  843 	ld a,acc24+2
      000463 97               [ 1]  844 	ld xl,a
      000464 7B 03            [ 1]  845 	ld a,(U8,sp)
      000466 42               [ 4]  846 	mul x,a
      000467 9F               [ 1]  847 	ld a,xl
      000468 C7 00 02         [ 1]  848 	ld acc24+2,a
      00046B 9E               [ 1]  849 	ld a, xh
      00046C 6B 02            [ 1]  850 	ld (OVFL,sp),a
                                    851 ; multipy middle byte
      00046E C6 00 01         [ 1]  852 	ld a,acc24+1
      000471 97               [ 1]  853 	ld xl,a
      000472 7B 03            [ 1]  854 	ld a, (U8,sp)
      000474 42               [ 4]  855 	mul x,a
                                    856 ; add overflow to this partial product
      000475 72 FB 01         [ 2]  857 	addw x,(OVFH,sp)
      000478 9F               [ 1]  858 	ld a,xl
      000479 C7 00 01         [ 1]  859 	ld acc24+1,a
      00047C 4F               [ 1]  860 	clr a
      00047D A9 00            [ 1]  861 	adc a,#0
      00047F 6B 01            [ 1]  862 	ld (OVFH,sp),a
      000481 9E               [ 1]  863 	ld a,xh
      000482 6B 02            [ 1]  864 	ld (OVFL,sp),a
                                    865 ; multiply most signficant byte	
      000484 C6 00 00         [ 1]  866 	ld a, acc24
      000487 97               [ 1]  867 	ld xl, a
      000488 7B 03            [ 1]  868 	ld a, (U8,sp)
      00048A 42               [ 4]  869 	mul x,a
      00048B 72 FB 01         [ 2]  870 	addw x, (OVFH,sp)
      00048E 9F               [ 1]  871 	ld a, xl
      00048F C7 00 00         [ 1]  872 	ld acc24,a
      000492 5B 03            [ 2]  873     addw sp,#LOCAL_SIZE
      000494 85               [ 2]  874 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000495 81               [ 4]  875 	ret
                                    876 
                                    877 ;-------------------------------------
                                    878 ; divide uint24_t by uint8_t
                                    879 ; used to convert uint24_t to string
                                    880 ; input:
                                    881 ;	acc24	dividend
                                    882 ;   A 		divisor
                                    883 ; output:
                                    884 ;   acc24	quotient
                                    885 ;   A		remainder
                                    886 ;------------------------------------- 
                                    887 ; offset  on sp of arguments and locals
                           000001   888 	U8   = 1   ; divisor on stack
                           000001   889 	LOCAL_SIZE =1
      000496                        890 divu24_8::
      000496 89               [ 2]  891 	pushw x ; save x
      000497 88               [ 1]  892 	push a 
                                    893 	; ld dividend UU:MM bytes in X
      000498 C6 00 00         [ 1]  894 	ld a, acc24
      00049B 95               [ 1]  895 	ld xh,a
      00049C C6 00 01         [ 1]  896 	ld a,acc24+1
      00049F 97               [ 1]  897 	ld xl,a
      0004A0 7B 01            [ 1]  898 	ld a,(U8,SP) ; divisor
      0004A2 62               [ 2]  899 	div x,a ; UU:MM/U8
      0004A3 88               [ 1]  900 	push a  ;save remainder
      0004A4 9E               [ 1]  901 	ld a,xh
      0004A5 C7 00 00         [ 1]  902 	ld acc24,a
      0004A8 9F               [ 1]  903 	ld a,xl
      0004A9 C7 00 01         [ 1]  904 	ld acc24+1,a
      0004AC 84               [ 1]  905 	pop a
      0004AD 95               [ 1]  906 	ld xh,a
      0004AE C6 00 02         [ 1]  907 	ld a,acc24+2
      0004B1 97               [ 1]  908 	ld xl,a
      0004B2 7B 01            [ 1]  909 	ld a,(U8,sp) ; divisor
      0004B4 62               [ 2]  910 	div x,a  ; R:LL/U8
      0004B5 6B 01            [ 1]  911 	ld (U8,sp),a ; save remainder
      0004B7 9F               [ 1]  912 	ld a,xl
      0004B8 C7 00 02         [ 1]  913 	ld acc24+2,a
      0004BB 84               [ 1]  914 	pop a
      0004BC 85               [ 2]  915 	popw x
      0004BD 81               [ 4]  916 	ret
                                    917 
                                    918 ;------------------------------------
                                    919 ;  two's complement acc24
                                    920 ;  input:
                                    921 ;		acc24 variable
                                    922 ;  output:
                                    923 ;		acc24 variable
                                    924 ;-------------------------------------
      0004BE                        925 neg_acc24::
      0004BE 72 53 00 02      [ 1]  926 	cpl acc24+2
      0004C2 72 53 00 01      [ 1]  927 	cpl acc24+1
      0004C6 72 53 00 00      [ 1]  928 	cpl acc24
      0004CA A6 01            [ 1]  929 	ld a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0004CC CB 00 02         [ 1]  930 	add a,acc24+2
      0004CF C7 00 02         [ 1]  931 	ld acc24+2,a
      0004D2 4F               [ 1]  932 	clr a
      0004D3 C9 00 01         [ 1]  933 	adc a,acc24+1
      0004D6 C7 00 01         [ 1]  934 	ld acc24+1,a 
      0004D9 4F               [ 1]  935 	clr a 
      0004DA C9 00 00         [ 1]  936 	adc a,acc24 
      0004DD C7 00 00         [ 1]  937 	ld acc24,a 
      0004E0 81               [ 4]  938 	ret
                                    939 
                                    940 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    941 ; incremente acc24 
                                    942 ; input:
                                    943 ;   X 		adresse de la variable 
                                    944 ;   A		incrément
                                    945 ; output:
                                    946 ;	aucun 
                                    947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004E1                        948 inc_var24::
      0004E1 EB 02            [ 1]  949 	add a, (2,x)
      0004E3 E7 02            [ 1]  950 	ld (2,x),a
      0004E5 4F               [ 1]  951 	clr a
      0004E6 E9 01            [ 1]  952 	adc a,(1,x)
      0004E8 E7 01            [ 1]  953 	ld (1,x),a 
      0004EA 4F               [ 1]  954 	clr a 
      0004EB F9               [ 1]  955 	adc a,(x)
      0004EC F7               [ 1]  956 	ld (x),a
      0004ED 81               [ 4]  957 	ret 
                                    958 	
                                    959 
                                    960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    961 ; copy 24 bits variable 
                                    962 ; input:
                                    963 ;	X 		address var source
                                    964 ;   y		address var destination
                                    965 ; output:
                                    966 ;   dest = src
                                    967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EE                        968 copy_var24::
      0004EE E6 00            [ 1]  969 	ld a,(0,x)
      0004F0 90 E7 00         [ 1]  970 	ld (0,y),a 
      0004F3 E6 01            [ 1]  971 	ld a,(1,x)
      0004F5 90 E7 01         [ 1]  972 	ld (1,y),a 
      0004F8 E6 02            [ 1]  973 	ld a,(2,x)
      0004FA 90 E7 02         [ 1]  974 	ld (2,y),a 
      0004FD 81               [ 4]  975 	ret
                                    976 
                                    977 ;------------------------------------
                                    978 ; check if A containt an ASCII letter.
                                    979 ; input:
                                    980 ;    A 		character to test 
                                    981 ; output:
                                    982 ;    A 		same 
                                    983 ;    C      0 not letter, 1 letter 
                                    984 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0004FE                        985 is_alpha::
      0004FE 88               [ 1]  986 	push a 
      0004FF AA 20            [ 1]  987 	or a,#32
      000501 A1 61            [ 1]  988 	cp a,#'a 
      000503 25 07            [ 1]  989 	jrult not_alpha
      000505 A1 7A            [ 1]  990 	cp a,#'z 
      000507 22 03            [ 1]  991 	jrugt not_alpha 
      000509 99               [ 1]  992 	scf 
      00050A 84               [ 1]  993 	pop a 
      00050B 81               [ 4]  994 	ret 
      00050C                        995 not_alpha:
      00050C 98               [ 1]  996 	rcf 
      00050D 84               [ 1]  997 	pop a 
      00050E 81               [ 4]  998 	ret 
                                    999 
                                   1000 
                                   1001 ;------------------------------------
                                   1002 ; check if character in {'0'..'9'}
                                   1003 ; input:
                                   1004 ;    A  character to test
                                   1005 ; output:
                                   1006 ;    A  0|1
                                   1007 ;------------------------------------
      00050F                       1008 is_digit::
      00050F A1 30            [ 1] 1009 	cp a,#'0
      000511 2A 02            [ 1] 1010 	jrpl 1$
      000513 4F               [ 1] 1011 0$:	clr a
      000514 81               [ 4] 1012 	ret
      000515 A1 39            [ 1] 1013 1$: cp a,#'9
      000517 22 FA            [ 1] 1014     jrugt 0$
      000519 A6 01            [ 1] 1015     ld a,#1
      00051B 81               [ 4] 1016     ret
                                   1017 	
                                   1018 ;------------------------------------
                                   1019 ; check if character in {'0'..'9','A'..'F'}
                                   1020 ; input:
                                   1021 ;   a  character to test
                                   1022 ; output:
                                   1023 ;   a   0|1 
                                   1024 ;------------------------------------
      00051C                       1025 is_hex::
      00051C 88               [ 1] 1026 	push a
      00051D CD 05 0F         [ 4] 1027 	call is_digit
      000520 A1 01            [ 1] 1028 	cp a,#1
      000522 26 03            [ 1] 1029 	jrne 1$
      000524 5B 01            [ 2] 1030 	addw sp,#1
      000526 81               [ 4] 1031 	ret
      000527 84               [ 1] 1032 1$:	pop a
      000528 A1 61            [ 1] 1033 	cp a,#'a
      00052A 2B 02            [ 1] 1034 	jrmi 2$
      00052C A0 20            [ 1] 1035 	sub a,#32
      00052E A1 41            [ 1] 1036 2$: cp a,#'A
      000530 2A 02            [ 1] 1037     jrpl 3$
      000532 4F               [ 1] 1038 0$: clr a
      000533 81               [ 4] 1039     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000534 A1 46            [ 1] 1040 3$: cp a,#'F
      000536 22 FA            [ 1] 1041     jrugt 0$
      000538 A6 01            [ 1] 1042     ld a,#1
      00053A 81               [ 4] 1043     ret
                                   1044             	
                                   1045 ;------------------------------------
                                   1046 ; convert pad content in integer
                                   1047 ; input:
                                   1048 ;    pad		.asciz to convert
                                   1049 ; output:
                                   1050 ;    acc24      int24_t
                                   1051 ;------------------------------------
                                   1052 	; local variables
                           000001  1053 	SIGN=1 ; 1 byte, 
                           000002  1054 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1055 	TEMP=3 ; 1 byte, temporary storage
                           000003  1056 	LOCAL_SIZE=3 ; 3 bytes reserved for local storage
      00053B                       1057 atoi::
      00053B 89               [ 2] 1058 	pushw x ;save x
      00053C 52 03            [ 2] 1059 	sub sp,#LOCAL_SIZE
                                   1060 	; acc24=0 
      00053E 72 5F 00 00      [ 1] 1061 	clr acc24    
      000542 72 5F 00 00      [ 1] 1062 	clr acc16
      000546 72 5F 00 00      [ 1] 1063 	clr acc8 
      00054A C6 00 00         [ 1] 1064 	ld a, pad 
      00054D 27 59            [ 1] 1065 	jreq atoi_exit
      00054F 0F 01            [ 1] 1066 	clr (SIGN,sp)
      000551 A6 0A            [ 1] 1067 	ld a,#10
      000553 6B 02            [ 1] 1068 	ld (BASE,sp),a ; default base decimal
      000555 AE 00 00         [ 2] 1069 	ldw x,#pad ; pointer to string to convert
      000558 F6               [ 1] 1070 	ld a,(x)
      000559 27 47            [ 1] 1071 	jreq 9$  ; completed if 0
      00055B A1 2D            [ 1] 1072 	cp a,#'-
      00055D 26 04            [ 1] 1073 	jrne 1$
      00055F 03 01            [ 1] 1074 	cpl (SIGN,sp)
      000561 20 08            [ 2] 1075 	jra 2$
      000563 A1 24            [ 1] 1076 1$: cp a,#'$
      000565 26 06            [ 1] 1077 	jrne 3$
      000567 A6 10            [ 1] 1078 	ld a,#16
      000569 6B 02            [ 1] 1079 	ld (BASE,sp),a
      00056B 5C               [ 1] 1080 2$:	incw x
      00056C F6               [ 1] 1081 	ld a,(x)
      00056D                       1082 3$:	
      00056D A1 61            [ 1] 1083 	cp a,#'a
      00056F 2B 02            [ 1] 1084 	jrmi 4$
      000571 A0 20            [ 1] 1085 	sub a,#32
      000573 A1 30            [ 1] 1086 4$:	cp a,#'0
      000575 2B 2B            [ 1] 1087 	jrmi 9$
      000577 A0 30            [ 1] 1088 	sub a,#'0
      000579 A1 0A            [ 1] 1089 	cp a,#10
      00057B 2B 06            [ 1] 1090 	jrmi 5$
      00057D A0 07            [ 1] 1091 	sub a,#7
      00057F 11 02            [ 1] 1092 	cp a,(BASE,sp)
      000581 2A 1F            [ 1] 1093 	jrpl 9$
      000583 6B 03            [ 1] 1094 5$:	ld (TEMP,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000585 7B 02            [ 1] 1095 	ld a,(BASE,sp)
      000587 CD 04 5C         [ 4] 1096 	call mulu24_8
      00058A 7B 03            [ 1] 1097 	ld a,(TEMP,sp)
      00058C CB 00 02         [ 1] 1098 	add a,acc24+2
      00058F C7 00 02         [ 1] 1099 	ld acc24+2,a
      000592 4F               [ 1] 1100 	clr a
      000593 C9 00 01         [ 1] 1101 	adc a,acc24+1
      000596 C7 00 01         [ 1] 1102 	ld acc24+1,a
      000599 4F               [ 1] 1103 	clr a
      00059A C9 00 00         [ 1] 1104 	adc a,acc24
      00059D C7 00 00         [ 1] 1105 	ld acc24,a
      0005A0 20 C9            [ 2] 1106 	jra 2$
      0005A2 0D 01            [ 1] 1107 9$:	tnz (SIGN,sp)
      0005A4 27 02            [ 1] 1108     jreq atoi_exit
      0005A6 90 50            [ 2] 1109     negw y
      0005A8                       1110 atoi_exit: 
      0005A8 5B 03            [ 2] 1111 	addw sp,#LOCAL_SIZE
      0005AA 85               [ 2] 1112 	popw x ; restore x
      0005AB 81               [ 4] 1113 	ret
                                   1114 
                                   1115 ;------------------------------------
                                   1116 ;strlen  return .asciz string length
                                   1117 ; input:
                                   1118 ;	y  	pointer to string
                                   1119 ; output:
                                   1120 ;	a   length  < 256
                                   1121 ;------------------------------------
                           000001  1122 	LEN=1
      0005AC                       1123 strlen::
      0005AC 90 89            [ 2] 1124     pushw y
      0005AE 4B 00            [ 1] 1125     push #0 ; length 
      0005B0 90 F6            [ 1] 1126 0$: ld a,(y)
      0005B2 27 06            [ 1] 1127     jreq 1$
      0005B4 0C 01            [ 1] 1128     inc (LEN,sp)
      0005B6 90 5C            [ 1] 1129     incw y
      0005B8 20 F6            [ 2] 1130     jra 0$
      0005BA 84               [ 1] 1131 1$: pop a
      0005BB 90 85            [ 2] 1132     popw y
      0005BD 81               [ 4] 1133     ret
                                   1134 
                                   1135 
                                   1136 ;------------------------------------
                                   1137 ;  print padded text with spaces 
                                   1138 ;  input:
                                   1139 ;	Y 		pointer to text 
                                   1140 ;   A 		field width 
                                   1141 ;------------------------------------
      0005BE                       1142 print_padded::
      0005BE 88               [ 1] 1143 	push a 
      0005BF 90 89            [ 2] 1144 	pushw y 
      0005C1 CD 00 00         [ 4] 1145 	call uart_print 
      0005C4 90 85            [ 2] 1146 	popw y 
      0005C6 CD 05 AC         [ 4] 1147 	call strlen 
      0005C9 C7 00 00         [ 1] 1148 	ld acc8,a
      0005CC 84               [ 1] 1149 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0005CD C0 00 00         [ 1] 1150 	sub a,acc8 
      0005D0 23 03            [ 2] 1151 	jrule 2$
      0005D2 CD 00 00         [ 4] 1152 	call spaces
      0005D5 81               [ 4] 1153 2$:	ret 
                                   1154 
                                   1155 ;------------------------------------
                                   1156 ; sign extend a byte acc8 in acc24 
                                   1157 ; input:
                                   1158 ;	acc8 	 
                                   1159 ; output:
                                   1160 ;   acc24	acc8 sign extended
                                   1161 ;-------------------------------------
      0005D6                       1162 sex_acc8::
      0005D6 A6 80            [ 1] 1163 	ld a,#128
      0005D8 C4 00 00         [ 1] 1164 	and a,acc8 
      0005DB 27 01            [ 1] 1165 	jreq 1$
      0005DD 43               [ 1] 1166 	cpl a 
      0005DE C7 00 00         [ 1] 1167 1$:	ld acc16,a  
      0005E1 C7 00 00         [ 1] 1168 	ld acc24,a 
      0005E4 81               [ 4] 1169 	ret 
                                   1170 
                                   1171 ;------------------------------------
                                   1172 ; get byte at address 
                                   1173 ; farptr[X]
                                   1174 ; input:
                                   1175 ;	 farptr   address to peek
                                   1176 ;    X		  farptr index 	
                                   1177 ; output:
                                   1178 ;	 A 		  byte from memory  
                                   1179 ;    x		  incremented by 1
                                   1180 ;------------------------------------
      0005E5                       1181 peek::
      0005E5 92 AF 00 00      [ 5] 1182 	ldf a,([farptr],x)
      0005E9 5C               [ 1] 1183 	incw x
      0005EA 81               [ 4] 1184 	ret
                                   1185 
                                   1186 ;------------------------------------
                                   1187 ; get word at at address 
                                   1188 ; farptr[X]
                                   1189 ; input:
                                   1190 ;	 farptr   address to peek
                                   1191 ;    X		  farptr index 	
                                   1192 ; output:
                                   1193 ;    Y:   	  word from memory 
                                   1194 ;	 X:		  incremented by 2 
                                   1195 ;------------------------------------
      0005EB                       1196 peek16::
      0005EB 72 5F 00 00      [ 1] 1197 	 clr acc24 
      0005EF 92 AF 00 00      [ 5] 1198 	 ldf a,([farptr],x)
      0005F3 90 95            [ 1] 1199 	 ld yh,a 
      0005F5 5C               [ 1] 1200 	 incw x 
      0005F6 92 AF 00 00      [ 5] 1201 	 ldf a,([farptr],x)
      0005FA 90 97            [ 1] 1202 	 ld yl,a 
      0005FC 5C               [ 1] 1203 	 incw x 
      0005FD 81               [ 4] 1204 	 ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   1205 
                                   1206 
                                   1207 ;------------------------------------
                                   1208 ; get 24 bits integer at address
                                   1209 ; pointed by farptr[x] 
                                   1210 ; input:
                                   1211 ;	 farptr   address to peek
                                   1212 ;    X		  farptr index 	
                                   1213 ;    A   	  numeric base for convertion
                                   1214 ; output:
                                   1215 ;    acc24 	  value
                                   1216 ;    x		  incremented by 3 
                                   1217 ;------------------------------------
      0005FE                       1218 peek24::
      0005FE 92 AF 00 00      [ 5] 1219 	 ldf a,([farptr],x)
      000602 C7 00 00         [ 1] 1220 	 ld acc24,a 
      000605 5C               [ 1] 1221 	 incw x 
      000606 92 AF 00 00      [ 5] 1222 	 ldf a,([farptr],x)
      00060A C7 00 00         [ 1] 1223 	 ld acc16,a 
      00060D 5C               [ 1] 1224 	 incw x 
      00060E 92 AF 00 00      [ 5] 1225 	 ldf a,([farptr],x)
      000612 C7 00 00         [ 1] 1226 	 ld acc8,a 
      000615 5C               [ 1] 1227 	 incw x 
      000616 81               [ 4] 1228 	 ret
                                   1229 
                                   1230 ;------------------------------------
                                   1231 ; expect a number from command line next argument
                                   1232 ;  input:
                                   1233 ;	  none
                                   1234 ;  output:
                                   1235 ;    acc24   int24_t 
                                   1236 ;------------------------------------
      000617                       1237 number::
      000617 CD 03 FC         [ 4] 1238 	call next_word
      00061A CD 05 3B         [ 4] 1239 	call atoi
      00061D 81               [ 4] 1240 	ret
                                   1241 
                                   1242 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1243 ; write a byte in memory
                                   1244 ; input:
                                   1245 ;    a  		byte to write
                                   1246 ;    farptr  	address
                                   1247 ;    x          farptr[x]
                                   1248 ; output:
                                   1249 ;    none
                                   1250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1251 	; variables locales
                           000001  1252 	BTW = 1   ; byte to write offset on stack
                           000002  1253 	OPT = 2   ; OPTION flag offset on stack
                           000002  1254 	LOCAL_SIZE = 2
      00061E                       1255 write_byte:
      00061E 90 89            [ 2] 1256 	pushw y
      000620 52 02            [ 2] 1257 	sub sp,#LOCAL_SIZE  ; réservation d'espace pour variables locales  
      000622 6B 01            [ 1] 1258 	ld (BTW,sp),a ; byte to write 
      000624 0F 02            [ 1] 1259 	clr (OPT,sp)  ; OPTION flag
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   1260 	; put addr[15:0] in Y, for bounds check.
      000626 C6 00 01         [ 1] 1261 	ld a, farptr+1
      000629 90 95            [ 1] 1262 	ld yh,a
      00062B C6 00 02         [ 1] 1263 	ld a, farptr+2
      00062E 90 97            [ 1] 1264 	ld yl,a  ; Y=addr15:0
                                   1265 	; check addr[23:16], if <> 0 then it is extened flash memory
      000630 72 5D 00 00      [ 1] 1266 	tnz farptr 
      000634 26 26            [ 1] 1267 	jrne write_flash
      000636 90 C3 00 57      [ 2] 1268     cpw y,flash_free_base
      00063A 24 20            [ 1] 1269     jruge write_flash
      00063C 90 A3 50 00      [ 2] 1270     cpw y,#SFR_BASE
      000640 24 12            [ 1] 1271 	jruge write_ram
      000642 90 A3 40 00      [ 2] 1272 	cpw y,#EEPROM_BASE  
      000646 24 34            [ 1] 1273     jruge write_eeprom
      000648 90 C3 00 55      [ 2] 1274 	cpw y,ram_free_base
      00064C 25 6C            [ 1] 1275     jrult write_exit
      00064E 90 A3 17 00      [ 2] 1276     cpw y,#STACK_BASE
      000652 24 66            [ 1] 1277     jruge write_exit
                                   1278 
                                   1279 ;write RAM and SFR 
      000654                       1280 write_ram:
      000654 7B 01            [ 1] 1281 	ld a,(BTW,sp)
      000656 92 A7 00 00      [ 4] 1282 	ldf ([farptr],x),a
      00065A 20 5E            [ 2] 1283 	jra write_exit
                                   1284 
                                   1285 ; write program memory
      00065C                       1286 write_flash:
      00065C 35 56 50 62      [ 1] 1287 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      000660 35 AE 50 62      [ 1] 1288 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      000664 72 03 50 5F FB   [ 2] 1289 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000669                       1290 1$:	_int_disable
      000669 9B               [ 1]    1 		sim
      00066A 7B 01            [ 1] 1291 	ld a,(BTW,sp)
      00066C 92 A7 00 00      [ 4] 1292 	ldf ([farptr],x),a ; farptr[x]=A
      000670 72 05 50 5F FB   [ 2] 1293 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000675                       1294     _int_enable
      000675 9A               [ 1]    1 		 rim
      000676 72 13 50 5F      [ 1] 1295     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00067A 20 3E            [ 2] 1296     jra write_exit
                                   1297 
                                   1298 ; write eeprom and option
      00067C                       1299 write_eeprom:
                                   1300 	; check for data eeprom or option eeprom
      00067C 90 A3 48 00      [ 2] 1301 	cpw y,#OPTION_BASE
      000680 2B 08            [ 1] 1302 	jrmi 1$
      000682 90 A3 48 80      [ 2] 1303 	cpw y,#OPTION_END+1
      000686 2A 02            [ 1] 1304 	jrpl 1$
      000688 03 02            [ 1] 1305 	cpl (OPT,sp)
      00068A 35 AE 50 64      [ 1] 1306 1$: mov FLASH_DUKR,#FLASH_DUKR_KEY1
      00068E 35 56 50 64      [ 1] 1307     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000692 0D 02            [ 1] 1308     tnz (OPT,sp)
      000694 27 08            [ 1] 1309     jreq 2$
                                   1310 	; pour modifier une option il faut modifier ces 2 bits
      000696 72 1E 50 5B      [ 1] 1311     bset FLASH_CR2,#FLASH_CR2_OPT
      00069A 72 1F 50 5C      [ 1] 1312     bres FLASH_NCR2,#FLASH_CR2_OPT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00069E 72 07 50 5F FB   [ 2] 1313 2$: btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006A3 7B 01            [ 1] 1314     ld a,(BTW,sp)
      0006A5 92 A7 00 00      [ 4] 1315     ldf ([farptr],x),a
      0006A9 0D 02            [ 1] 1316     tnz (OPT,sp)
      0006AB 27 08            [ 1] 1317     jreq 3$
      0006AD 5C               [ 1] 1318     incw x
      0006AE 7B 01            [ 1] 1319     ld a,(BTW,sp)
      0006B0 43               [ 1] 1320     cpl a
      0006B1 92 A7 00 00      [ 4] 1321     ldf ([farptr],x),a
      0006B5 72 05 50 5F FB   [ 2] 1322 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0006BA                       1323 write_exit:
                                   1324 ; ne pas oublier de réajuster sp 
                                   1325 ; et de restaurer les register empilés.
      0006BA 5B 02            [ 2] 1326 	addw sp,#LOCAL_SIZE 
      0006BC 90 85            [ 2] 1327 	popw y
      0006BE 81               [ 4] 1328     ret
                                   1329         
                                   1330 		  
                                   1331 ;------------------------------------
                                   1332 ; evaluate command string in tib
                                   1333 ; list of commands
                                   1334 ;   @  addr display content at address
                                   1335 ;   !  addr byte [byte ]* store bytes at address
                                   1336 ;   ?  diplay command help
                                   1337 ;   b  n    convert n in the other base
                                   1338 ;	c  addr bitmask  clear  bits at address
                                   1339 ;	d addr  desassemble code starting at addr
                                   1340 ;   h  addr hex dump memory starting at address
                                   1341 ;   m  src dest count,  move memory block
                                   1342 ;   r  reset MCU
                                   1343 ;   s  addr bitmask  set a bits at address
                                   1344 ;   t  addr bitmask  toggle bits at address
                                   1345 ;   x  addr execute  code at address  
                                   1346 ;------------------------------------
      0006BF                       1347 eval:
      0006BF C6 00 01         [ 1] 1348 	ld a, in
      0006C2 C1 00 02         [ 1] 1349 	cp a, count
      0006C5 26 01            [ 1] 1350 	jrne 0$
      0006C7 81               [ 4] 1351 	ret ; nothing to evaluate
      0006C8 CD 03 FC         [ 4] 1352 0$:	call next_word
      0006CB 90 AE 00 00      [ 2] 1353 	ldw y,#pad
      0006CF 90 F6            [ 1] 1354     ld a,(y)
      0006D1 A1 40            [ 1] 1355 	cp a,#'@
      0006D3 26 03            [ 1] 1356 	jrne 1$
      0006D5 CC 07 5E         [ 2] 1357 	jp fetch
      0006D8 A1 21            [ 1] 1358 1$:	cp a,#'!
      0006DA 26 03            [ 1] 1359 	jrne 10$
      0006DC CC 07 9D         [ 2] 1360 	jp store
      0006DF                       1361 10$:
      0006DF A1 3F            [ 1] 1362 	cp a,#'?
      0006E1 26 03            [ 1] 1363 	jrne 15$
      0006E3 CC 07 F1         [ 2] 1364 	jp help
      0006E6                       1365 15$: 
      0006E6 A1 62            [ 1] 1366 	cp a,#'b
      0006E8 26 03            [ 1] 1367     jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0006EA CC 07 F9         [ 2] 1368     jp base_convert	
      0006ED A1 63            [ 1] 1369 2$:	cp a,#'c
      0006EF 26 03            [ 1] 1370 	jrne 21$
      0006F1 CC 08 14         [ 2] 1371 	jp clear_bits
      0006F4                       1372 21$:
      0006F4 A1 64            [ 1] 1373 	cp a,#'d
      0006F6 26 04            [ 1] 1374 	jrne 23$
      0006F8 CD 00 00         [ 4] 1375 	call dasm
      0006FB 81               [ 4] 1376 	ret 
      0006FC                       1377 23$:
      0006FC A1 65            [ 1] 1378 	cp a,#'e 
      0006FE 26 03            [ 1] 1379 	jrne 25$
      000700 CC 08 49         [ 2] 1380 	jp erase
      000703                       1381 25$:
      000703 A1 66            [ 1] 1382 	cp a,#'f
      000705 26 03            [ 1] 1383 	jrne 3$
      000707 CC 08 87         [ 2] 1384 	jp find 	 	
      00070A A1 68            [ 1] 1385 3$:	cp a,#'h
      00070C 26 03            [ 1] 1386 	jrne 4$
      00070E CC 09 47         [ 2] 1387 	jp hexdump
      000711 A1 6D            [ 1] 1388 4$:	cp a,#'m
      000713 26 03            [ 1] 1389 	jrne 45$
      000715 CC 09 C7         [ 2] 1390 	jp move_memory
      000718                       1391 45$:
      000718 A1 71            [ 1] 1392     cp a,#'q 
      00071A 26 13            [ 1] 1393 	jrne 5$
      00071C 72 01 00 00 0D   [ 2] 1394 	btjf flags,#F_TRAP,455$
      000721 72 11 00 00      [ 1] 1395 	bres flags,#F_TRAP
      000725 90 CE 00 53      [ 2] 1396 	ldw y,trap_sp
      000729 90 94            [ 1] 1397 	ldw sp,y
      00072B CC 01 7D         [ 2] 1398 	jp app_resume
      00072E                       1399 455$:
      00072E 81               [ 4] 1400 	ret 
      00072F A1 72            [ 1] 1401 5$: cp a,#'r
      000731 26 03            [ 1] 1402     jrne 6$
      000733 CD 01 61         [ 4] 1403 	call NonHandledInterrupt	
      000736 A1 73            [ 1] 1404 6$:	cp a,#'s
      000738 26 03            [ 1] 1405 	jrne 7$
      00073A CC 0A 35         [ 2] 1406 	jp set_bits
      00073D A1 74            [ 1] 1407 7$:	cp a,#'t
      00073F 26 03            [ 1] 1408 	jrne 8$
      000741 CC 0A 67         [ 2] 1409 	jp toggle_bits
      000744 A1 78            [ 1] 1410 8$:	cp a,#'x
      000746 26 03            [ 1] 1411 	jrne 9$
      000748 CC 0A 99         [ 2] 1412 	jp execute
      00074B CD 00 00         [ 4] 1413 9$:	call uart_print
      00074E CD 00 00         [ 4] 1414 	call uart_tx
      000751 A6 20            [ 1] 1415 	ld a,#SPACE 
      000753 CD 00 00         [ 4] 1416 	call uart_tx 
      000756 90 AE 0B A7      [ 2] 1417 	ldw y,#BAD_CMD
      00075A CD 00 00         [ 4] 1418 	call uart_print
      00075D 81               [ 4] 1419 	ret
                                   1420 	
                                   1421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1422 ;;      MONA commands 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   1423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1424 
                                   1425 ;------------------------------------
                                   1426 ; @ addr, fetch a byte and display it.
                                   1427 ;------------------------------------
      00075E                       1428 fetch:
      00075E 89               [ 2] 1429 	pushw x
      00075F 90 89            [ 2] 1430 	pushw y
      000761 CD 06 17         [ 4] 1431 	call number
      000764 C6 00 00         [ 1] 1432 	ld a,pad
      000767 27 2D            [ 1] 1433 	jreq fetch_miss_arg ; pas d'adresse 
      000769 AE 00 00         [ 2] 1434 	ldw x,#acc24
      00076C 90 AE 00 00      [ 2] 1435 	ldw y,#farptr
      000770 CD 04 EE         [ 4] 1436 	call copy_var24
      000773 CD 00 00         [ 4] 1437 	call print_addr 
      000776 A6 3D            [ 1] 1438 	ld a,#'=
      000778 CD 00 00         [ 4] 1439 	call uart_tx
      00077B A6 20            [ 1] 1440 	ld a,#SPACE 
      00077D CD 00 00         [ 4] 1441 	call uart_tx 	
      000780 C6 00 00         [ 1] 1442 	ld a,pad
      000783 A1 24            [ 1] 1443 	cp a,#'$
      000785 27 04            [ 1] 1444 	jreq 1$
      000787 A6 0A            [ 1] 1445 	ld a,#10
      000789 20 02            [ 2] 1446 	jra 2$
      00078B A6 10            [ 1] 1447 1$: ld a,#16
      00078D                       1448 2$:	
      00078D 5F               [ 1] 1449 	clrw x  ; pour farptr[0]
      00078E CD 05 E5         [ 4] 1450 	call peek
      000791 CD 00 00         [ 4] 1451 	call print_byte 
      000794 20 03            [ 2] 1452 	jra fetch_exit
      000796                       1453 fetch_miss_arg:
      000796 CD 0A C5         [ 4] 1454 	call error_print	
      000799                       1455 fetch_exit:	
      000799 90 85            [ 2] 1456 	popw y
      00079B 85               [ 2] 1457 	popw x 
      00079C 81               [ 4] 1458 	ret
                                   1459 	
                                   1460 ;------------------------------------
                                   1461 ; ! addr byte [byte ]*, store byte(s)
                                   1462 ;------------------------------------
      00079D                       1463 store:
      00079D 89               [ 2] 1464 	pushw x 
      00079E 90 89            [ 2] 1465 	pushw y
      0007A0 CD 06 17         [ 4] 1466 	call number
      0007A3 C6 00 00         [ 1] 1467 	ld a,pad 
      0007A6 27 42            [ 1] 1468 	jreq store_miss_arg ; pas d'arguments
      0007A8 AE 00 00         [ 2] 1469 	ldw x,#acc24
      0007AB 90 AE 00 00      [ 2] 1470 	ldw y,#farptr
      0007AF CD 04 EE         [ 4] 1471 	call copy_var24  ; farptr=acc24 
      0007B2 5F               [ 1] 1472 	clrw x ; index pour farptr[x]
      0007B3 CD 06 17         [ 4] 1473 	call number
      0007B6 C6 00 00         [ 1] 1474 	ld a,pad 
      0007B9 26 0E            [ 1] 1475 	jrne str01 ; missing data
      0007BB CD 0A C5         [ 4] 1476 	call error_print
      0007BE CC 07 ED         [ 2] 1477 	jp store_exit  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0007C1                       1478 store_loop:
      0007C1 CD 06 17         [ 4] 1479 	call number
      0007C4 C6 00 00         [ 1] 1480 	ld a, pad
      0007C7 27 24            [ 1] 1481 	jreq store_exit ; pas d'octet à écrire.
      0007C9                       1482 str01:	
      0007C9 A1 22            [ 1] 1483 	cp a,#'"'
      0007CB 27 09            [ 1] 1484 	jreq store_string	
      0007CD C6 00 02         [ 1] 1485 	ld a,acc24+2 ; octet à écrire.
      0007D0 CD 06 1E         [ 4] 1486 	call write_byte
      0007D3 5C               [ 1] 1487 	incw x ; x++
      0007D4 20 EB            [ 2] 1488 	jra store_loop 
      0007D6                       1489 store_string:
      0007D6 90 AE 00 00      [ 2] 1490 	ldw y,#pad 
      0007DA                       1491 str_loop:	
      0007DA 90 5C            [ 1] 1492     incw y 
      0007DC 90 F6            [ 1] 1493 	ld a, (y)
      0007DE 27 E1            [ 1] 1494 	jreq store_loop 
      0007E0 A1 22            [ 1] 1495 	cp a,#'"'
      0007E2 27 DD            [ 1] 1496 	jreq store_loop
      0007E4                       1497 write_char:
      0007E4 CD 06 1E         [ 4] 1498 	call write_byte 
      0007E7 5C               [ 1] 1499 	incw x 
      0007E8 20 F0            [ 2] 1500 	jra str_loop 
      0007EA                       1501 store_miss_arg:
      0007EA CD 0A C5         [ 4] 1502 	call error_print	
      0007ED                       1503 store_exit:	
      0007ED 90 85            [ 2] 1504 	popw y
      0007EF 85               [ 2] 1505 	popw x
      0007F0 81               [ 4] 1506 	ret
                                   1507 
                                   1508 
                                   1509 
                                   1510 ;------------------------------------
                                   1511 ; ? , display command information
                                   1512 ;------------------------------------
      0007F1                       1513 help:
      0007F1 90 AE 0B BA      [ 2] 1514 	ldw y, #HELP
      0007F5 CD 00 00         [ 4] 1515 	call uart_print
      0007F8 81               [ 4] 1516 	ret
                                   1517 
                                   1518 ;-------------------------------------------
                                   1519 ;  b n|$n
                                   1520 ; convert from one numeric base to the other
                                   1521 ;-------------------------------------------
      0007F9                       1522 base_convert:
      0007F9 CD 06 17         [ 4] 1523     call number
      0007FC C6 00 00         [ 1] 1524     ld a,pad
      0007FF 27 0F            [ 1] 1525 	jreq base_miss_arg 
      000801 A1 24            [ 1] 1526     cp a,#'$
      000803 26 04            [ 1] 1527     jrne 1$
      000805 A6 0A            [ 1] 1528     ld a,#10
      000807 20 02            [ 2] 1529     jra 2$
      000809 A6 10            [ 1] 1530 1$: ld a,#16
      00080B 5F               [ 1] 1531 2$: clrw x 
      00080C CD 00 00         [ 4] 1532     call print_int 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00080F 81               [ 4] 1533     ret
      000810                       1534 base_miss_arg:
      000810 CD 0A C5         [ 4] 1535 	call error_print
      000813 81               [ 4] 1536 	ret
                                   1537 	
                                   1538 ;------------------------------------
                                   1539 ; c addr mask, clear bitmask 
                                   1540 ;------------------------------------
      000814                       1541 clear_bits:
      000814 89               [ 2] 1542 	pushw x 
      000815 90 89            [ 2] 1543 	pushw y 
      000817 CD 06 17         [ 4] 1544 	call number
      00081A C6 00 00         [ 1] 1545 	ld a, pad 
      00081D 27 23            [ 1] 1546 	jreq 8$ ; pas d'adresse 
      00081F AE 00 00         [ 2] 1547 	ldw x, #acc24 
      000822 90 AE 00 00      [ 2] 1548 	ldw y, #farptr 
      000826 CD 04 EE         [ 4] 1549 	call copy_var24 
      000829 CD 06 17         [ 4] 1550 	call number
      00082C C6 00 00         [ 1] 1551 	ld a, pad 
      00082F 27 11            [ 1] 1552 	jreq 8$ ; pas de masque 
      000831 72 53 00 02      [ 1] 1553 	cpl acc24+2 ; inverse masque de bits 
      000835 92 BC 00 00      [ 5] 1554 	ldf a,[farptr]
      000839 C4 00 02         [ 1] 1555 	and a,acc24+2
      00083C 5F               [ 1] 1556 	clrw x 
      00083D CD 06 1E         [ 4] 1557 	call write_byte
      000840 20 03            [ 2] 1558 	jra 9$
      000842 CD 0A C5         [ 4] 1559 8$: call error_print	 
      000845 90 85            [ 2] 1560 9$:	popw y 
      000847 85               [ 2] 1561 	popw x
      000848 81               [ 4] 1562     ret
                                   1563 
                                   1564 ;----------------------------------------
                                   1565 ; e addr count, efface une plage mémoire
                                   1566 ; cible la mémoire RAM,EEPROM ou FLASH
                                   1567 ;----------------------------------------
                                   1568 	; variables locales
                           000001  1569 	CNTR=1  ; nombre d'octets à effacer
                           000002  1570 	LOCAL_SIZE = 2
      000849                       1571 erase:
      000849 89               [ 2] 1572 	pushw x 
      00084A 90 89            [ 2] 1573 	pushw y
      00084C 52 02            [ 2] 1574 	sub sp,#LOCAL_SIZE 
      00084E CD 06 17         [ 4] 1575 	call number
      000851 C6 00 00         [ 1] 1576 	ld a, pad 
      000854 27 28            [ 1] 1577 	jreq erase_miss_arg ; pas de paramètres
      000856 AE 00 00         [ 2] 1578 	ldw x, #acc24 
      000859 90 AE 00 00      [ 2] 1579 	ldw y, #farptr
      00085D CD 04 EE         [ 4] 1580 	call copy_var24
      000860 CD 06 17         [ 4] 1581 	call number 
      000863 C6 00 00         [ 1] 1582 	ld a, pad 
      000866 27 16            [ 1] 1583 	jreq erase_miss_arg ; count manquant 
      000868 C6 00 01         [ 1] 1584 	ld a, acc24+1
      00086B 90 95            [ 1] 1585 	ld yh,a 
      00086D C6 00 02         [ 1] 1586 	ld a, acc24+2
      000870 90 97            [ 1] 1587 	ld yl,a   ; Y= count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      000872 5F               [ 1] 1588 	clrw X 
      000873                       1589 1$:
      000873 4F               [ 1] 1590 	clr a 
      000874 CD 06 1E         [ 4] 1591 	call write_byte 
      000877 90 5A            [ 2] 1592 	decw y 
      000879 27 06            [ 1] 1593 	jreq erase_exit 
      00087B 5C               [ 1] 1594 	incw x 
      00087C 20 F5            [ 2] 1595 	jra 1$
      00087E                       1596 erase_miss_arg:
      00087E CD 0A C5         [ 4] 1597 	call error_print
      000881                       1598 erase_exit:
      000881 5B 02            [ 2] 1599 	addw sp,#LOCAL_SIZE 
      000883 90 85            [ 2] 1600 	popw y 
      000885 85               [ 2] 1601 	popw x 
      000886 81               [ 4] 1602 	ret  
                                   1603 
                                   1604 ;------------------------------------------
                                   1605 ; f addr [i] string,  search string in memory
                                   1606 ; stop at first occurence or end of memory
                                   1607 ;------------------------------------------
                                   1608 	; variable locale 
                           000001  1609 	CASE_SENSE=1  ; indicateur recherche sensible à casse.
      000887                       1610 find:
      000887 4F               [ 1] 1611 	clr a 
      000888 88               [ 1] 1612 	push a  ; case sensitive
      000889 CD 06 17         [ 4] 1613 	call number
      00088C C6 00 00         [ 1] 1614 	ld a,pad
      00088F 26 04            [ 1] 1615 	jrne 0$
      000891 AC 00 09 0D      [ 2] 1616 	jpf find_miss_arg 
      000895 AE 00 00         [ 2] 1617 0$:	ldw x, #acc24 
      000898 90 AE 00 00      [ 2] 1618 	ldw y, #farptr
      00089C CD 04 EE         [ 4] 1619 	call copy_var24
      00089F CD 03 FC         [ 4] 1620 	call next_word 
      0008A2 C6 00 00         [ 1] 1621 	ld a,pad
      0008A5 A1 69            [ 1] 1622 	cp a,#'i
      0008A7 26 0A            [ 1] 1623 	jrne 2$
      0008A9 A6 20            [ 1] 1624 1$:	ld a,#32
      0008AB 6B 01            [ 1] 1625 	ld (CASE_SENSE,sp),a ; case insensitive
      0008AD CD 03 FC         [ 4] 1626 	call next_word 
      0008B0 C6 00 00         [ 1] 1627 	ld a,pad 
      0008B3 A1 22            [ 1] 1628 2$: cp a,#'" 
      0008B5 26 5B            [ 1] 1629 	jrne find_bad_arg
                                   1630 ; remove ["] character at end of string.
                                   1631 ; and convert to lower case if option [i]
      0008B7 AE 00 01         [ 2] 1632 	ldw x, #pad+1
      0008BA F6               [ 1] 1633 4$:	ld a,(x)
      0008BB 27 0B            [ 1] 1634 	jreq 5$
      0008BD CD 04 FE         [ 4] 1635 	call is_alpha 
      0008C0 24 02            [ 1] 1636 	jrnc 41$
      0008C2 1A 01            [ 1] 1637 	or a,(CASE_SENSE,sp)
      0008C4                       1638 41$:	
      0008C4 F7               [ 1] 1639 	ld (x),a 
      0008C5 5C               [ 1] 1640 	incw x 
      0008C6 20 F2            [ 2] 1641 	jra 4$
      0008C8 5A               [ 2] 1642 5$: decw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008C9 7F               [ 1] 1643 	clr (x)
                                   1644 ; search loop 
      0008CA                       1645 20$:
                                   1646 ; initialize X at string first char.	
      0008CA AE 00 01         [ 2] 1647 	ldw x, #pad+1
      0008CD 90 5F            [ 1] 1648 	clrw y ; farptr index 
                                   1649 ; string compare 	
      0008CF                       1650 21$:
      0008CF F6               [ 1] 1651 	ld a,(x)
      0008D0 27 2F            [ 1] 1652 	jreq found 
      0008D2 91 AF 00 00      [ 1] 1653 	ldf a,([farptr],y)
                                   1654 ; if letter and [i] convert to lower case 	
      0008D6 A1 41            [ 1] 1655 	cp a,#'A
      0008D8 25 06            [ 1] 1656 	jrult 24$
      0008DA A1 5A            [ 1] 1657 	cp a,#'Z
      0008DC 22 02            [ 1] 1658 	jrugt 24$
      0008DE 1A 01            [ 1] 1659 	or a,(CASE_SENSE,sp)	 
      0008E0 F1               [ 1] 1660 24$: cp a,(x) 
      0008E1 26 05            [ 1] 1661 	jrne 30$
      0008E3 5C               [ 1] 1662 	incw x 
      0008E4 90 5C            [ 1] 1663 	incw y 
      0008E6 20 E7            [ 2] 1664 	jra 21$
                                   1665 ; increment farptr for next comparison
      0008E8 A6 01            [ 1] 1666 30$: ld a,#1 
      0008EA AE 00 00         [ 2] 1667 	ldw x,#farptr 
      0008ED CD 04 E1         [ 4] 1668 	call inc_var24
                                   1669 ; check for memory end 	
      0008F0 AE 02 7F         [ 2] 1670 	ldw x,#(FLASH_END>>8) 
      0008F3 C3 00 00         [ 2] 1671 	cpw x, farptr
      0008F6 26 D2            [ 1] 1672 	jrne 20$
      0008F8 C6 00 02         [ 1] 1673 	ld a,farptr+2 
      0008FB A1 FF            [ 1] 1674 	cp a,#FLASH_END 
      0008FD 27 1A            [ 1] 1675 	jreq  find_failed ; not found 
      0008FF 20 C9            [ 2] 1676 	jra 20$		
      000901                       1677 found:
      000901 90 AE 09 22      [ 2] 1678 	ldw y,#FOUND_AT 
      000905 CD 00 00         [ 4] 1679 	call uart_print
      000908 CD 00 00         [ 4] 1680 	call print_addr 
      00090B 20 13            [ 2] 1681 	jra find_exit
      00090D                       1682 find_miss_arg:
      00090D CD 0A C5         [ 4] 1683 	call error_print
      000910 20 0E            [ 2] 1684 	jra find_exit  
      000912                       1685 find_bad_arg:
      000912 A6 01            [ 1] 1686 	ld a,#1
      000914 CD 0A C5         [ 4] 1687 	call error_print 
      000917 20 07            [ 2] 1688 	jra find_exit 
      000919                       1689 find_failed:
      000919 90 AE 09 35      [ 2] 1690 	ldw y, #NOT_FOUND
      00091D CD 00 00         [ 4] 1691 	call uart_print 
      000920                       1692 find_exit:
      000920 84               [ 1] 1693 	pop a 
      000921 81               [ 4] 1694 	ret 
                                   1695 
      000922 46 6F 75 6E 64 20 61  1696 FOUND_AT:	.asciz "Found at address: "
             74 20 61 64 64 72 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



             73 73 3A 20 00
      000935 53 74 72 69 6E 67 20  1697 NOT_FOUND:  .asciz "String not found."
             6E 6F 74 20 66 6F 75
             6E 64 2E 00
                                   1698 
                                   1699 ;------------------------------------
                                   1700 ; h addr, memory dump in hexadecimal 
                                   1701 ; stop after each row, SPACE continue, other stop
                                   1702 ;------------------------------------
                           000008  1703 	ROW_CNT = 8 ; nombre d'octets par ligne 
                           000001  1704 	IDX=1 ; index pour farptr[x]
                           000002  1705 	LOCAL_SIZE=2
      000947                       1706 hexdump: 
      000947 52 02            [ 2] 1707 	sub sp,#LOCAL_SIZE
      000949 CD 03 FC         [ 4] 1708 	call next_word
      00094C C6 00 00         [ 1] 1709 	ld a, pad 
      00094F 26 03            [ 1] 1710 	jrne 1$
      000951 CC 09 C1         [ 2] 1711 	jp hdump_missing_arg ; adresse manquante
      000954                       1712 1$:	
      000954 CD 05 3B         [ 4] 1713 	call atoi ; acc24=addr 
                                   1714 	; farptr = addr 
      000957 AE 00 00         [ 2] 1715 	ldw x,#acc24
      00095A 90 AE 00 00      [ 2] 1716 	ldw y,#farptr
      00095E CD 04 EE         [ 4] 1717 	call copy_var24
      000961                       1718 row_init:
      000961 5F               [ 1] 1719 	clrw x 
      000962 1F 01            [ 2] 1720 	ldw (IDX,sp),x
                                   1721 	; affiche l'adresse en début de ligne 
      000964 CD 00 00         [ 4] 1722 	call print_addr 
      000967 A6 09            [ 1] 1723 	ld a,#TAB 
      000969 CD 00 00         [ 4] 1724 	call uart_tx
      00096C CD 00 00         [ 4] 1725 	call uart_tx 
      00096F 90 AE 00 00      [ 2] 1726 	ldw y, #pad
      000973 1E 01            [ 2] 1727 	ldw x,(IDX,sp)
      000975                       1728 row:
      000975 89               [ 2] 1729 	pushw x 
      000976 CD 05 E5         [ 4] 1730 	call peek
      000979 CD 00 00         [ 4] 1731 	call print_byte 
      00097C 85               [ 2] 1732 	popw x  
      00097D 92 AF 00 00      [ 5] 1733 	ldf a,([farptr],x)
      000981 A1 20            [ 1] 1734 	cp a,#SPACE
      000983 2A 02            [ 1] 1735 	jrpl 1$
      000985 A6 20            [ 1] 1736 	ld a,#SPACE
      000987 A1 80            [ 1] 1737 1$:	cp a,#128
      000989 2B 02            [ 1] 1738     jrmi 2$
      00098B A6 20            [ 1] 1739     ld a,#SPACE
      00098D 90 F7            [ 1] 1740 2$: ld (y),a
      00098F 90 5C            [ 1] 1741 	incw y 
      000991 5C               [ 1] 1742 	incw x
      000992 A3 00 08         [ 2] 1743 	cpw x,#ROW_CNT
      000995 26 DE            [ 1] 1744 	jrne row
      000997 A6 08            [ 1] 1745 	ld a,#ROW_CNT 
      000999 AE 00 00         [ 2] 1746 	ldw x,#farptr
      00099C CD 04 E1         [ 4] 1747 	call inc_var24
      00099F A6 20            [ 1] 1748 	ld a,#SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0009A1 CD 00 00         [ 4] 1749 	call uart_tx
      0009A4 4F               [ 1] 1750 	clr a
      0009A5 90 F7            [ 1] 1751 	ld (y),a
      0009A7 A6 20            [ 1] 1752 	ld a,#SPACE 
      0009A9 CD 00 00         [ 4] 1753 	call uart_tx  
      0009AC 90 AE 00 00      [ 2] 1754 	ldw y,#pad
      0009B0 CD 00 00         [ 4] 1755 	call uart_print
      0009B3 A6 0A            [ 1] 1756 	ld a,#NL
      0009B5 CD 00 00         [ 4] 1757 	call uart_tx
      0009B8 CD 00 00         [ 4] 1758 	call uart_getchar
      0009BB A1 20            [ 1] 1759 	cp a,#SPACE
      0009BD 27 A2            [ 1] 1760 	jreq row_init
      0009BF 20 03            [ 2] 1761 	jra hdump_exit 
      0009C1                       1762 hdump_missing_arg:
      0009C1 CD 0A C5         [ 4] 1763 	call error_print 	
      0009C4                       1764 hdump_exit:	
      0009C4 5B 02            [ 2] 1765     addw sp,#LOCAL_SIZE
      0009C6 81               [ 4] 1766     ret
                                   1767     
                                   1768 ;------------------------------------
                                   1769 ; m src dest count, move memory block
                                   1770 ;------------------------------------
                           000001  1771     COUNT=1
                           000003  1772     SOURCE=3
                           000005  1773 	LOCAL_SIZE=5    
      0009C7                       1774 move_memory:
      0009C7 52 05            [ 2] 1775 	sub sp,#LOCAL_SIZE
      0009C9 CD 06 17         [ 4] 1776 	call number 
      0009CC C6 00 00         [ 1] 1777 	ld a, pad 
      0009CF 27 5E            [ 1] 1778 	jreq move_missing_arg ; pas d'arguments 
                                   1779 	; save source address on stack
      0009D1 C6 00 02         [ 1] 1780 	ld a, acc24+2
      0009D4 6B 05            [ 1] 1781 	ld (SOURCE+2,sp),a
      0009D6 C6 00 01         [ 1] 1782 	ld a, acc24+1
      0009D9 6B 04            [ 1] 1783 	ld (SOURCE+1,sp),a
      0009DB C6 00 00         [ 1] 1784 	ld a,acc24
      0009DE 6B 03            [ 1] 1785 	ld (SOURCE,sp),a
      0009E0 CD 06 17         [ 4] 1786 	call number
      0009E3 C6 00 00         [ 1] 1787 	ld a,pad
      0009E6 27 47            [ 1] 1788 	jreq move_missing_arg ; dest count manquant 
                                   1789 	; copy dest address in farptr
      0009E8 55 00 02 00 02   [ 1] 1790 	mov farptr+2,acc24+2
      0009ED 55 00 01 00 01   [ 1] 1791 	mov farptr+1,acc24+1
      0009F2 55 00 00 00 00   [ 1] 1792 	mov farptr,acc24
      0009F7 CD 06 17         [ 4] 1793     call number 
      0009FA C6 00 00         [ 1] 1794 	ld a, pad 
      0009FD 27 30            [ 1] 1795 	jreq move_missing_arg ; count manquant 
      0009FF C6 00 01         [ 1] 1796 	ld a, acc24+1 
      000A02 90 95            [ 1] 1797 	ld yh, a
      000A04 C6 00 02         [ 1] 1798 	ld a, acc24+2 
      000A07 90 97            [ 1] 1799 	ld yl,a  ; Y = count
      000A09 17 01            [ 2] 1800 	ldw (COUNT,sp),y
                                   1801 	; put back source in acc24
      000A0B 7B 03            [ 1] 1802 	ld a,(SOURCE,sp)
      000A0D C7 00 00         [ 1] 1803 	ld acc24,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      000A10 7B 04            [ 1] 1804 	ld a,(SOURCE+1,sp) 
      000A12 C7 00 01         [ 1] 1805 	ld acc24+1,a 
      000A15 7B 05            [ 1] 1806 	ld a,(SOURCE+2,sp)
      000A17 C7 00 02         [ 1] 1807 	ld acc24+2,a
      000A1A 5F               [ 1] 1808 	clrw x
      000A1B                       1809 move_loop:
      000A1B 92 AF 00 00      [ 5] 1810     ldf a,([acc24],x)
      000A1F CD 06 1E         [ 4] 1811 	call write_byte
      000A22 5C               [ 1] 1812     incw x
      000A23 16 01            [ 2] 1813 	ldw y, (COUNT,sp)
      000A25 90 5A            [ 2] 1814 	decw y
      000A27 27 09            [ 1] 1815 	jreq move_exit
      000A29 17 01            [ 2] 1816     ldw (COUNT,sp),y
      000A2B 20 EE            [ 2] 1817     jra move_loop
      000A2D 20 03            [ 2] 1818 	jra move_exit
      000A2F                       1819 move_missing_arg:
      000A2F CD 0A C5         [ 4] 1820 	call error_print 	
      000A32                       1821 move_exit:
      000A32 5B 05            [ 2] 1822     addw sp,#LOCAL_SIZE
      000A34 81               [ 4] 1823     ret
                                   1824     
                                   1825 ;------------------------------------
                                   1826 ;  s addr mask, set bitmask 
                                   1827 ;------------------------------------
      000A35                       1828 set_bits:
      000A35 89               [ 2] 1829 	pushw x 
      000A36 90 89            [ 2] 1830 	pushw y 
      000A38 CD 06 17         [ 4] 1831 	call number 
      000A3B C6 00 00         [ 1] 1832 	ld a, pad 
      000A3E 27 20            [ 1] 1833 	jreq 8$ ; arguments manquant
      000A40 AE 00 00         [ 2] 1834 	ldw x, #acc24
      000A43 90 AE 00 00      [ 2] 1835 	ldw y, #farptr 
      000A47 CD 04 EE         [ 4] 1836 	call copy_var24 
      000A4A CD 06 17         [ 4] 1837 	call number  
      000A4D C6 00 00         [ 1] 1838 	ld a, pad 
      000A50 27 0E            [ 1] 1839 	jreq 8$ ; mask manquant
      000A52 92 BC 00 00      [ 5] 1840 	ldf a,[farptr]
      000A56 CA 00 02         [ 1] 1841 	or a, acc24+2
      000A59 5F               [ 1] 1842 	clrw x 
      000A5A CD 06 1E         [ 4] 1843 	call write_byte 
      000A5D CC 0A 63         [ 2] 1844 	jp 9$
      000A60 CD 0A C5         [ 4] 1845 8$: call error_print
      000A63                       1846 9$:
      000A63 90 85            [ 2] 1847 	popw y 
      000A65 85               [ 2] 1848 	popw x 
      000A66 81               [ 4] 1849     ret
                                   1850     
                                   1851 ;------------------------------------
                                   1852 ; t addr mask, toggle bitmask
                                   1853 ;------------------------------------
      000A67                       1854 toggle_bits:
      000A67 89               [ 2] 1855 	pushw x 
      000A68 90 89            [ 2] 1856 	pushw y 
      000A6A CD 06 17         [ 4] 1857 	call number
      000A6D C6 00 00         [ 1] 1858 	ld a, pad
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A70 27 20            [ 1] 1859 	jreq 8$  ; pas d'adresse 
      000A72 AE 00 00         [ 2] 1860 	ldw x,#acc24 
      000A75 90 AE 00 00      [ 2] 1861 	ldw y,#farptr
      000A79 CD 04 EE         [ 4] 1862 	call copy_var24
      000A7C CD 06 17         [ 4] 1863     call number
      000A7F C6 00 00         [ 1] 1864 	ld a, pad 
      000A82 27 0E            [ 1] 1865 	jreq 8$ ; pas de masque 
      000A84 92 BC 00 00      [ 5] 1866 	ldf a,[farptr]
      000A88 C8 00 02         [ 1] 1867     xor a,acc24+2
      000A8B 5F               [ 1] 1868     clrw x 
      000A8C CD 06 1E         [ 4] 1869 	call write_byte 
      000A8F CC 0A 95         [ 2] 1870 	jp 9$
      000A92 CD 0A C5         [ 4] 1871 8$: call error_print
      000A95                       1872 9$:
      000A95 90 85            [ 2] 1873 	popw y
      000A97 85               [ 2] 1874  	popw x 
      000A98 81               [ 4] 1875     ret
                                   1876     
                                   1877 ;------------------------------------
                                   1878 ; x addr, execute programme
                                   1879 ; addr < $10000 (<65536)
                                   1880 ;------------------------------------
      000A99                       1881 execute:
      000A99 CD 06 17         [ 4] 1882 	call number
      000A9C C6 00 00         [ 1] 1883 	ld a, pad 
      000A9F 27 18            [ 1] 1884 	jreq no_addr ; addr manquante 
      000AA1 72 5D 00 00      [ 1] 1885 	tnz acc24
      000AA5 26 11            [ 1] 1886 	jrne 9$ ; adresse > 0xFFFF ; adresse invalide.
      000AA7 C6 00 01         [ 1] 1887 	ld a, acc24+1
      000AAA 90 95            [ 1] 1888 	ld yh,a 
      000AAC CA 00 02         [ 1] 1889 	or a, acc24+2 
      000AAF 27 07            [ 1] 1890 	jreq 9$ ; pointeur NULL 
      000AB1 C6 00 02         [ 1] 1891 	ld a,acc24+2 
      000AB4 90 97            [ 1] 1892 	ld yl,a 
      000AB6 90 FC            [ 2] 1893 	jp (y)
      000AB8 4C               [ 1] 1894 9$: inc a
                                   1895 
      000AB9                       1896 no_addr:
      000AB9 90 CE 00 57      [ 2] 1897 	ldw y,flash_free_base
      000ABD 90 5C            [ 1] 1898 	incw y
      000ABF 90 F6            [ 1] 1899 	ld a,(y)
      000AC1 27 02            [ 1] 1900 	jreq error_print 
      000AC3 90 FC            [ 2] 1901 	jp (y)
                                   1902 
                                   1903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1904 ; print error messages
                                   1905 ; input:
                                   1906 ;	A 		error code 
                                   1907 ; output:
                                   1908 ;	none 
                                   1909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AC5                       1910 error_print::
      000AC5 A1 00            [ 1] 1911 	cp a,#0 ; missing argment
      000AC7 26 06            [ 1] 1912 	jrne 1$
      000AC9 90 AE 0D D5      [ 2] 1913 	ldw y, #MISS_ARG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000ACD 20 04            [ 2] 1914 	jra 9$
      000ACF 90 AE 0D E8      [ 2] 1915 1$: ldw y, #BAD_ARG
      000AD3 CD 00 00         [ 4] 1916 9$:	call uart_print 
      000AD6 81               [ 4] 1917 	ret
                                   1918 
                                   1919 ;------------------------
                                   1920 ;  run time CONSTANTS
                                   1921 ;------------------------
                                   1922 ; messages strings
                                   1923 ;------------------------	
      000AD7 0A 4D 4F 4E 41 20 56  1924 VERSION:	.asciz "\nMONA VERSION %c.%c\n"
             45 52 53 49 4F 4E 20
             25 63 2E 25 63 0A 00
      000AEC 73 74 6D 38 73 32 30  1925 CPU_MODEL:  .asciz "stm8s208rb     memory map\n----------------------------\n"
             38 72 62 20 20 20 20
             20 6D 65 6D 6F 72 79
             20 6D 61 70 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 0A 00
      000B24 72 61 6D 20 66 72 65  1926 RAM_FREE_MSG: .asciz "ram free: "
             65 3A 20 00
      000B2F 2D 20 24 31 36 46 46  1927 RAM_LAST_FREE_MSG: .asciz "- $16FF\n"
             0A 00
      000B38 66 72 65 65 20 66 6C  1928 FLASH_FREE_MSG: .asciz "free flash: "
             61 73 68 3A 20 00
      000B45 20 2D 20 24 32 37 46  1929 EEPROM_MSG: .ascii " - $27FFF\n"
             46 46 0A
      000B4F 65 65 70 72 6F 6D 3A  1930             .ascii "eeprom: $4000 - $47ff\n"
             20 24 34 30 30 30 20
             2D 20 24 34 37 66 66
             0A
      000B65 6F 70 74 69 6F 6E 3A  1931             .ascii "option: $4800 - $487f\n"
             20 24 34 38 30 30 20
             2D 20 24 34 38 37 66
             0A
      000B7B 53 46 52 3A 20 24 35  1932             .ascii "SFR: $5000 - $57FF\n"
             30 30 30 20 2D 20 24
             35 37 46 46 0A
      000B8E 62 6F 6F 74 20 52 4F  1933             .asciz "boot ROM: $6000 - $67FF\n"
             4D 3A 20 24 36 30 30
             30 20 2D 20 24 36 37
             46 46 0A 00
      000BA7 20 69 73 20 6E 6F 74  1934 BAD_CMD:    .asciz " is not a command\n"	
             20 61 20 63 6F 6D 6D
             61 6E 64 0A 00
      000BBA 63 6F 6D 6D 61 6E 64  1935 HELP: .ascii "commands:\n"
             73 3A 0A
      000BC4 40 20 61 64 64 72 2C  1936 	  .ascii "@ addr, display content at address\n"
             20 64 69 73 70 6C 61
             79 20 63 6F 6E 74 65
             6E 74 20 61 74 20 61
             64 64 72 65 73 73 0A
      000BE7 21 20 61 64 64 72 20  1937 	  .ascii "! addr byte|string [byte|string ]*, store bytes or string at addr++\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



             62 79 74 65 7C 73 74
             72 69 6E 67 20 5B 62
             79 74 65 7C 73 74 72
             69 6E 67 20 5D 2A 2C
             20 73 74 6F 72 65 20
             62 79 74 65 73 20 6F
             72 20 73 74 72 69 6E
             67 20 61 74 20 61 64
             64 72 2B 2B 0A
      000C2B 3F 2C 20 64 69 70 6C  1938 	  .ascii "?, diplay command help\n"
             61 79 20 63 6F 6D 6D
             61 6E 64 20 68 65 6C
             70 0A
      000C42 62 20 6E 7C 24 6E 2C  1939 	  .ascii "b n|$n, convert n in the other base\n"
             20 63 6F 6E 76 65 72
             74 20 6E 20 69 6E 20
             74 68 65 20 6F 74 68
             65 72 20 62 61 73 65
             0A
      000C66 63 20 61 64 64 72 20  1940 	  .ascii "c addr bitmask, clear bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 63 6C 65 61 72
             20 62 69 74 73 20 61
             74 20 61 64 64 72 65
             73 73 0A
      000C8C 64 20 61 64 64 72 2C  1941 	  .ascii "d addr, desassemble\n" 
             20 64 65 73 61 73 73
             65 6D 62 6C 65 0A
      000CA0 65 20 61 64 64 72 20  1942 	  .ascii "e addr count, clear memory range\n" 
             63 6F 75 6E 74 2C 20
             63 6C 65 61 72 20 6D
             65 6D 6F 72 79 20 72
             61 6E 67 65 0A
      000CC1 66 20 61 64 64 72 20  1943 	  .ascii "f addr [i] string, find string in memory\n"
             5B 69 5D 20 73 74 72
             69 6E 67 2C 20 66 69
             6E 64 20 73 74 72 69
             6E 67 20 69 6E 20 6D
             65 6D 6F 72 79 0A
      000CEA 68 20 61 64 64 72 2C  1944 	  .ascii "h addr, hex dump memory starting at address\n"
             20 68 65 78 20 64 75
             6D 70 20 6D 65 6D 6F
             72 79 20 73 74 61 72
             74 69 6E 67 20 61 74
             20 61 64 64 72 65 73
             73 0A
      000D16 6D 20 73 72 63 20 64  1945 	  .ascii "m src dest count, move memory block\n"
             65 73 74 20 63 6F 75
             6E 74 2C 20 6D 6F 76
             65 20 6D 65 6D 6F 72
             79 20 62 6C 6F 63 6B
             0A
      000D3A 71 20 2C 20 71 75 69  1946 	  .ascii "q , quit MONA after a trap entry.\n"
             74 20 4D 4F 4E 41 20
             61 66 74 65 72 20 61
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



             20 74 72 61 70 20 65
             6E 74 72 79 2E 0A
      000D5C 72 20 72 65 73 65 74  1947 	  .ascii "r reset MCU\n"
             20 4D 43 55 0A
      000D68 73 20 61 64 64 72 20  1948 	  .ascii "s addr bitmask, set bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 73 65 74 20 62
             69 74 73 20 61 74 20
             61 64 64 72 65 73 73
             0A
      000D8C 74 20 61 64 64 72 20  1949 	  .ascii "t addr bitmask, toggle bits at address\n"
             62 69 74 6D 61 73 6B
             2C 20 74 6F 67 67 6C
             65 20 62 69 74 73 20
             61 74 20 61 64 64 72
             65 73 73 0A
      000DB3 78 20 61 64 64 72 2C  1950 	  .asciz "x addr, execute  code at address\n"
             20 65 78 65 63 75 74
             65 20 20 63 6F 64 65
             20 61 74 20 61 64 64
             72 65 73 73 0A 00
      000DD5 4D 69 73 73 69 6E 67  1951 MISS_ARG: .asciz "Missing arguments\n"
             20 61 72 67 75 6D 65
             6E 74 73 0A 00
      000DE8 62 61 64 20 61 72 67  1952 BAD_ARG:  .asciz "bad arguments\n"
             75 6D 65 6E 74 73 0A
             00

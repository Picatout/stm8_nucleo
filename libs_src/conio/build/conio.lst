ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-05
                                     21 ;   NOTE: global routines interface designed 
                                     22 ;         to be callable from C with the
                                     23 ;         prototype given. SDCC for stm8 
                                     24 ;         pass functions arguments on stack
                                     25 ;         pushed from right to left.
                                     26 ;   DEPENDENCIES:
                                     27 ;          uart.lib, math24.lib string.lib 
                                     28 ;--------------------------------------
                                     29     .module CONIO
                                     30 
                                        	.include "../../inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "../../inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "../../inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            .include "../../inc/conio.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-05
                                        ;   NOTE: global routines interface designed 
                                        ;         to be callable from C with the
                                        ;         prototype given. SDCC for stm8 
                                        ;         pass functions arguments on stack
                                        ;         pushed from right to left.
                                        ;--------------------------------------
                                        
                                 
                                            .include "../../inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                     37     .list 
                                     38 
                                     39 ;------------------------------------
                                     40 ;       MACROS
                                     41 ;------------------------------------
                                     42     ; insert function exit code
                                     43     .macro _fn_exit 
                                     44     _drop VSIZE 
                                     45     ret 
                                     46     .endm 
                                     47 
                                     48 ;-----------------------------------------
                                     49     .area DATA 
      000000                         50 std_dev: .blkb 1  ; standard device identifier
      000001                         51 ptr:    .blkw 1 ; pointer used by printf 
      000003                         52 fmt_buffer:: .ds FMT_BUFFER_SIZE
                                     53 ;------------------------------------------
                                     54     .area CODE 
      000000 43 4F 4E 49 4F 00       55 .asciz "CONIO"
                                     56 
                                     57 ;----------------------------
                                     58 ; configure uart and select standard I/O device
                                     59 ; c prototype: void conio_init(uint8_t baud, uint8_t dev_id)
                                     60 ; input:
                                     61 ;   BAUD       uint8_t 
                                     62 ;   DEV_ID     uint8_t 
                                     63 ; output:
                                     64 ;   std_dev
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     65 ;----------------------------
                           000002    66     ARG_OFS=2
                           000003    67     BAUD=ARG_OFS+1
                           000004    68     DEV_ID=ARG_OFS+2  ; one byte 
      000006                         69 _conio_init::
      000006                         70 conio_init::
      000006 7B 04            [ 1]   71     ld a,(DEV_ID,sp)
      000008 C7 00 00         [ 1]   72     ld std_dev,a
      00000B CC 00 00         [ 2]   73     jp uart_init
                                     74 
                                     75 ;--------------------------------------
                                     76 ; name: set_dev
                                     77 ; desc: select standard device 
                                     78 ; input:
                                     79 ;   DEV_ID      device identifier
                                     80 ; output:
                                     81 ;   none    
                                     82 ;-------------------------------------
                           000002    83     ARG_OFS=2 
                           000003    84     DEV_ID=ARG_OFS+1
      00000E                         85 _set_dev::
      00000E                         86 set_dev::
      00000E 7B 03            [ 1]   87     ld a,(DEV_ID,sp)
      000010 C7 00 00         [ 1]   88     ld std_dev,a 
      000013 81               [ 4]   89     ret
                                     90 
                                     91 ;--------------------------------------
                                     92 ; name: get_dev
                                     93 ; desc: give standard device id.
                                     94 ; input:
                                     95 ;   none 
                                     96 ; output:
                                     97 ;   A           std_dev
                                     98 ;-------------------------------------
      000014                         99 _get_dev::
      000014                        100 get_dev::
      000014 C6 00 00         [ 1]  101     ld a,std_dev
      000017 81               [ 4]  102     ret 
                                    103 
                                    104 ;----------------------------------------
                                    105 ; output a character to standard output
                                    106 ;  C prototype:  int putchar(int char)
                                    107 ; input:
                                    108 ;   CHAR        int, character to output
                                    109 ; output:
                                    110 ;    X          same character  
                                    111 ;----------------------------------------
                           000002   112     VSIZE=2
                           000004   113     ARG_OFS=2+VSIZE
                           000005   114     CHAR=ARG_OFS+1
                                    115 ; local variables 
                           000001   116     UCHAR=1
                           000002   117     UART_ID=2
      000018                        118 _putchar::
      000018                        119 putchar::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000018                        120     _vars VSIZE
      000018 52 02            [ 2]    1     sub sp,#VSIZE 
      00001A 7B 06            [ 1]  121     ld a,(CHAR+1,sp)
      00001C 6B 01            [ 1]  122     ld (UCHAR,sp),a 
      00001E C6 00 00         [ 1]  123     ld a,std_dev 
      000021 6B 02            [ 1]  124     ld (UART_ID,sp),a 
      000023 CD 00 00         [ 4]  125     call uart_putc
      000026 1E 05            [ 2]  126     ldw x,(CHAR,sp) 
      000028                        127 _fn_exit 
      000028                          1     _drop VSIZE 
      000028 5B 02            [ 2]    1     addw sp,#VSIZE 
      00002A 81               [ 4]    2     ret 
                                    128 
                                    129 ;------------------------------------------
                                    130 ; wait a character from standard input 
                                    131 ; C prototype: int getchar(void)
                                    132 ; input:
                                    133 ;   none
                                    134 ; output:
                                    135 ;   X       int character received 
                                    136 ;--------------------------------------------
      00002B                        137 _getchar::
      00002B                        138 getchar::
      00002B C6 00 00         [ 1]  139     ld a,std_dev
      00002E 88               [ 1]  140     push a 
      00002F CD 00 00         [ 4]  141     call uart_getc 
      000032                        142     _drop 1 
      000032 5B 01            [ 2]    1     addw sp,#1 
      000034 81               [ 4]  143     ret
                                    144 
                                    145 ;----------------------------------------------
                                    146 ; output a string to standard output
                                    147 ; C prototype: int puts(const char*); 
                                    148 ; input:
                                    149 ;   STR         pointer to string 
                                    150 ; output:
                                    151 ;   X           string length
                                    152 ;------------------------------------------------
                           000003   153         VSIZE=3
                           000005   154         ARG_OFS=2+VSIZE
                           000006   155         STR=ARG_OFS+1 
                                    156 ; uart_puts arguments
                           000001   157         PUTS_STR=1   ; 2 bytes
                           000003   158         PUTS_UART=3  ; 1 byte      
      000035                        159 _puts::
      000035                        160 puts::
      000035                        161     _vars VSIZE 
      000035 52 03            [ 2]    1     sub sp,#VSIZE 
      000037 C6 00 00         [ 1]  162     ld a,std_dev 
      00003A 6B 03            [ 1]  163     ld (PUTS_UART,sp),a 
      00003C 1E 06            [ 2]  164     ldw x,(STR,sp)
      00003E 1F 01            [ 2]  165     ldw (PUTS_STR,sp),x 
      000040 CD 00 00         [ 4]  166     call uart_puts
      000043 4B 0D            [ 1]  167     push #CR
      000045 4B 00            [ 1]  168     push #0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000047 CD 00 18         [ 4]  169     call putchar
      00004A                        170     _drop 2  
      00004A 5B 02            [ 2]    1     addw sp,#2 
      00004C                        171 _fn_exit 
      00004C                          1     _drop VSIZE 
      00004C 5B 03            [ 2]    1     addw sp,#VSIZE 
      00004E 81               [ 4]    2     ret 
                                    172 
                                    173 
                                    174 ;------------------------------------------------
                                    175 ; read a string from standard input. 
                                    176 ; buffer size is limited to 80 characters
                                    177 ; C prototype: char *gets(char *buffer)
                                    178 ; input:
                                    179 ;   BUFFER          char* receive buffer 
                                    180 ; output:
                                    181 ;   BUFFER          int line length.
                                    182 ;-------------------------------------------------
                           00004F   183         MAX_LEN=79 ; maximum input string length
                           000002   184         VSIZE=2
                           000004   185         ARG_OFS=2+VSIZE
                           000001   186         BUFFER=1
                                    187 	; local variables
                           000001   188 	LEN = 1  ; accepted line length
                           000002   189 	RXCHAR = 2 ; last char received
      00004F                        190 _gets::
      00004F                        191 gets::
      00004F                        192     _vars VSIZE 
      00004F 52 02            [ 2]    1     sub sp,#VSIZE 
      000051 0F 02            [ 1]  193 	clr (RXCHAR,sp) 
      000053 0F 01            [ 1]  194 	clr (LEN,sp)
      000055 16 01            [ 2]  195  	ldw y,(BUFFER,sp) ; input buffer
      000057                        196 gets_loop:
      000057 CD 00 2B         [ 4]  197 	call getchar
      00005A 9F               [ 1]  198 	ld a,xl 
      00005B 6B 02            [ 1]  199     ld (RXCHAR,sp),a 
      00005D A1 03            [ 1]  200 	cp a,#CTRL_C
      00005F 26 03            [ 1]  201 	jrne 2$
      000061 CC 00 E3         [ 2]  202 	jp cancel
      000064 A1 12            [ 1]  203 2$:	cp a,#CTRL_R
      000066 27 58            [ 1]  204 	jreq reprint
      000068 A1 0D            [ 1]  205 	cp a,#CR
      00006A 26 03            [ 1]  206 	jrne 1$
      00006C CC 00 E6         [ 2]  207 	jp gets_quit
      00006F A1 0A            [ 1]  208 1$:	cp a,#NL
      000071 27 73            [ 1]  209 	jreq gets_quit
      000073 A1 08            [ 1]  210 	cp a,#BSP
      000075 27 1C            [ 1]  211 	jreq del_back
      000077 A1 04            [ 1]  212 	cp a,#CTRL_D
      000079 27 06            [ 1]  213 	jreq del_line
      00007B A1 20            [ 1]  214 	cp a,#SPACE
      00007D 2A 2C            [ 1]  215 	jrpl accept_char
      00007F 20 D6            [ 2]  216 	jra gets_loop
      000081                        217 del_line:
      000081 C6 00 00         [ 1]  218     ld a,std_dev
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000084 88               [ 1]  219     push a 
      000085 7B 01            [ 1]  220 	ld a,(LEN,sp)
      000087 88               [ 1]  221     push a 
      000088 CD 00 00         [ 4]  222 	call uart_delete
      00008B                        223     _drop 2 
      00008B 5B 02            [ 2]    1     addw sp,#2 
      00008D 16 01            [ 2]  224 	ldw y,(BUFFER,sp)
      00008F 0F 01            [ 1]  225 	clr (LEN,sp)
      000091 20 C4            [ 2]  226 	jra gets_loop
      000093                        227 del_back:
      000093 0D 01            [ 1]  228     tnz (LEN,sp)
      000095 27 C0            [ 1]  229     jreq gets_loop
      000097 0A 01            [ 1]  230     dec (LEN,sp)
      000099 90 5A            [ 2]  231     decw y
      00009B 90 7F            [ 1]  232     clr  (y)
      00009D C6 00 00         [ 1]  233     ld a,std_dev
      0000A0 88               [ 1]  234     push a 
      0000A1 A6 01            [ 1]  235     ld a,#1
      0000A3 88               [ 1]  236     push a 
      0000A4 CD 00 00         [ 4]  237     call uart_delete
      0000A7                        238     _drop 2 
      0000A7 5B 02            [ 2]    1     addw sp,#2 
      0000A9 20 AC            [ 2]  239     jra gets_loop	
      0000AB                        240 accept_char:
      0000AB A6 4F            [ 1]  241 	ld a,#MAX_LEN
      0000AD 11 01            [ 1]  242 	cp a, (LEN,sp)
      0000AF 27 A6            [ 1]  243 	jreq gets_loop
      0000B1 7B 02            [ 1]  244 	ld a,(RXCHAR,sp)
      0000B3 90 F7            [ 1]  245 	ld (y),a
      0000B5 0C 01            [ 1]  246 	inc (LEN,sp)
      0000B7 90 5C            [ 1]  247 	incw y
      0000B9 90 7F            [ 1]  248 	clr (y)
      0000BB CD 00 18         [ 4]  249 	call putchar 
      0000BE 20 97            [ 2]  250 	jra gets_loop
      0000C0                        251 reprint:
      0000C0 0D 01            [ 1]  252 	tnz (LEN,sp)
      0000C2 26 93            [ 1]  253 	jrne gets_loop
      0000C4 16 01            [ 2]  254 	ldw y,(BUFFER,sp)
      0000C6 90 89            [ 2]  255 	pushw y
      0000C8 CD 00 35         [ 4]  256 	call puts 
      0000CB 90 85            [ 2]  257 	popw y
      0000CD 9F               [ 1]  258 	ld a,xl 
      0000CE 6B 01            [ 1]  259 	ld (LEN,sp),a
      0000D0 90 9F            [ 1]  260 	ld a,yl
      0000D2 1B 01            [ 1]  261 	add a,(LEN,sp)
      0000D4 90 97            [ 1]  262 	ld yl,a
      0000D6 24 03            [ 1]  263     jrnc 1$
      0000D8 CC 00 57         [ 2]  264     jp gets_loop
      0000DB 90 9E            [ 1]  265 1$: ld a,yh 
      0000DD 4C               [ 1]  266     inc a 
      0000DE 90 95            [ 1]  267     ld yh,a 
      0000E0 CC 00 57         [ 2]  268 	jp gets_loop
      0000E3                        269 cancel:
      0000E3 1E 01            [ 2]  270 	ldw x,(BUFFER,sp)
      0000E5 7F               [ 1]  271     clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000E6                        272 gets_quit:
      0000E6 90 5F            [ 1]  273 	clrw y
      0000E8 A6 0D            [ 1]  274     ld a,#CR 
      0000EA 90 97            [ 1]  275     ld yl,a 
      0000EC 90 89            [ 2]  276     pushw y  
      0000EE CD 00 18         [ 4]  277 	call putchar 
      0000F1                        278     _drop 2 
      0000F1 5B 02            [ 2]    1     addw sp,#2 
      0000F3 1E 01            [ 2]  279     ldw x,(BUFFER,sp)
      0000F5                        280 _fn_exit 
      0000F5                          1     _drop VSIZE 
      0000F5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0000F7 81               [ 4]    2     ret 
                                    281 
                                    282 ;-----------------------------------
                                    283 ; name: is_digit 
                                    284 ; check if character is in range
                                    285 ; '0'..'9'
                                    286 ; input:
                                    287 ;   A       CHAR 
                                    288 ; ouput:
                                    289 ;   A       true|false 
                                    290 ;----------------------------------
                           000002   291     ARG_OFS=2
                           000003   292     CHAR=ARG_OFS+1
      0000F8                        293 _is_digit::
      0000F8                        294 is_digit::
      0000F8 7B 03            [ 1]  295     ld a,(CHAR,sp)
      0000FA A1 30            [ 1]  296     cp a,#'0
      0000FC 8C               [ 1]  297     ccf 
      0000FD 24 02            [ 1]  298     jrnc 1$ 
      0000FF A1 3A            [ 1]  299     cp a,#'9+1 
      000101 8A               [ 1]  300 1$: push cc 
      000102 84               [ 1]  301     pop a 
      000103 81               [ 4]  302     ret 
                                    303 
                                    304 ;-----------------------------------
                                    305 ; name: is_hex 
                                    306 ; check if character is in ranges
                                    307 ; '0'..'9','A'..'F'
                                    308 ; input:
                                    309 ;   A       CHAR 
                                    310 ; ouput:
                                    311 ;   A       true|false
                                    312 ;----------------------------------
                           000002   313     ARG_OFS=2
                           000003   314     CHAR=ARG_OFS+1
      000104                        315 _is_hex::
      000104                        316 is_hex::
      000104 7B 03            [ 1]  317     ld a,(CHAR,sp) 
      000106 A1 30            [ 1]  318     cp a,#'0
      000108 8C               [ 1]  319     ccf 
      000109 24 0A            [ 1]  320     jrnc 9$
      00010B A1 3A            [ 1]  321     cp a,#'9+1 
      00010D 25 06            [ 1]  322     jrc 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00010F A0 07            [ 1]  323     sub a,#7 
      000111 A4 DF            [ 1]  324     and a,#0xdf
      000113 A1 47            [ 1]  325     cp a,#'F+1 
      000115 8A               [ 1]  326 9$: push cc 
      000116 84               [ 1]  327     pop a 
      000117 81               [ 4]  328     ret 
                                    329 
                                    330 
                                    331 
                                    332 ;----------------------------------
                                    333 ; name: printf
                                    334 ; C prototype: int printf(fmt,...)
                                    335 ; input:
                                    336 ;   FMT     format strint 
                                    337 ;   VARARG  variable length args list 
                                    338 ; output:
                                    339 ;   X       printed string length
                                    340 ;----------------------------------
                           00000B   341     VSIZE=11 ; local variables space 
                           00000D   342     ARG_OFS=2+VSIZE
                           00000E   343     FMT=ARG_OFS+1
                           000010   344     VARARG=ARG_OFS+3 
                                    345 ;*******  local vars **********
                                    346 ; ** in registers **
                                    347 ;  x vararg pointer 
                                    348 ;  y format pointer
                                    349 ; ** on stack **
                                    350 ; ACC24 for integer conversion 
                           000001   351     ACC24=1  ; 24 bits accumulator 
                           000002   352     ACC16=2
                           000003   353     ACC8=3 
                           000004   354     BASE=4
                           000005   355     BUFFER=5
                           000007   356     STRLEN=7 ; string length 
                           000008   357     XSAVE=8  ; temporary X storage 
                           00000A   358     YSAVE=10  ; temporary y storage 
                                    359 ;    
      000118                        360 _printf::
      000118                        361 printf::
      000118                        362     _vars VSIZE
      000118 52 0B            [ 2]    1     sub sp,#VSIZE 
      00011A 5F               [ 1]  363     clrw x 
      00011B 1F 07            [ 2]  364     ldw (STRLEN,sp),x 
                                    365 ; X used as vararg pointer
      00011D 96               [ 1]  366     ldw x,sp  
      00011E 1C 00 10         [ 2]  367     addw x,#VARARG 
                                    368 ; y used as format pointer 
      000121 16 0E            [ 2]  369     ldw y,(FMT,sp)
      000123                        370 printf_loop:
      000123 90 F6            [ 1]  371     ld a,(y)
      000125 26 03            [ 1]  372     jrne 1$
      000127 CC 01 ED         [ 2]  373     jp printf_exit
      00012A 90 5C            [ 1]  374 1$: incw y 
      00012C A1 25            [ 1]  375     cp a,#'%
      00012E 27 03            [ 1]  376     jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000130 CC 01 D7         [ 2]  377     jp print_char
      000133                        378 2$:
      000133 90 F6            [ 1]  379     ld a,(y)
      000135 26 03            [ 1]  380     jrne 21$
      000137 CC 01 ED         [ 2]  381     jp printf_exit 
      00013A                        382 21$:
      00013A 90 5C            [ 1]  383     incw y
      00013C A1 61            [ 1]  384     cp a,#'a' 
      00013E 26 24            [ 1]  385     jrne 3$
                                    386 ; *** spaces ***    
      000140 1F 08            [ 2]  387     ldw (XSAVE,sp),x
      000142 17 0A            [ 2]  388     ldw (YSAVE,sp),y  
      000144                        389     _vars 2 
      000144 52 02            [ 2]    1     sub sp,#2 
      000146 F6               [ 1]  390     ld a,(x)
      000147 6B 01            [ 1]  391     ld (1,sp),a 
      000149 C6 00 00         [ 1]  392     ld a,std_dev 
      00014C 6B 02            [ 1]  393     ld (2,sp),a   
      00014E CD 00 00         [ 4]  394     call uart_spaces
      000151                        395     _drop 2 
      000151 5B 02            [ 2]    1     addw sp,#2 
      000153 1E 08            [ 2]  396     ldw x,(XSAVE,sp)
      000155 F6               [ 1]  397     ld a,(x)
      000156 5C               [ 1]  398     incw x 
      000157 1B 08            [ 1]  399     add a,(STRLEN+1,sp)
      000159 6B 08            [ 1]  400     ld (STRLEN+1,sp),a 
      00015B 4F               [ 1]  401     clr a
      00015C 19 07            [ 1]  402     adc a,(STRLEN,sp)
      00015E 6B 07            [ 1]  403     ld (STRLEN,sp),a
      000160 16 0A            [ 2]  404     ldw y,(YSAVE,sp)   
      000162 20 BF            [ 2]  405     jra printf_loop 
      000164 A1 63            [ 1]  406 3$: cp a,#'c 
      000166 26 05            [ 1]  407     jrne 4$
                                    408 ; *** ASCII character ***
      000168 F6               [ 1]  409     ld a,(x)
      000169 5C               [ 1]  410     incw x
      00016A CC 01 D7         [ 2]  411     jp print_char  
      00016D A1 64            [ 1]  412 4$: cp a,#'d 
      00016F 26 38            [ 1]  413     jrne 6$
                                    414 ; *** print int24_t arg in decimal ***
      000171 17 0A            [ 2]  415     ldw (YSAVE,sp),y 
      000173 A6 0A            [ 1]  416     ld a,#10 
      000175 6B 04            [ 1]  417 5$: ld (BASE,sp),a  
      000177 F6               [ 1]  418     ld a,(x)
      000178 5C               [ 1]  419     incw x 
      000179 6B 01            [ 1]  420     ld (ACC24,sp),a 
      00017B F6               [ 1]  421     ld a,(x)
      00017C 5C               [ 1]  422     incw x 
      00017D 6B 02            [ 1]  423     ld (ACC24+1,sp),a 
      00017F F6               [ 1]  424     ld a,(x)
      000180 5C               [ 1]  425     incw x 
      000181 6B 03            [ 1]  426     ld (ACC24+2,sp),a 
      000183 1F 08            [ 2]  427     ldw (XSAVE,sp),x 
      000185                        428     _vars 2 
      000185 52 02            [ 2]    1     sub sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000187 AE 00 03         [ 2]  429     ldw x,#fmt_buffer 
      00018A 1F 01            [ 2]  430     ldw (1,sp),x  
      00018C CD 00 00         [ 4]  431     call i24toa  
      00018F                        432     _vars 1 
      00018F 52 01            [ 2]    1     sub sp,#1 
      000191 1F 01            [ 2]  433     ldw (1,sp),x
      000193 C6 00 00         [ 1]  434     ld a,std_dev 
      000196 6B 03            [ 1]  435     ld (3,sp),a  
      000198 CD 00 00         [ 4]  436     call uart_puts 
      00019B                        437     _drop 3 
      00019B 5B 03            [ 2]    1     addw sp,#3 
      00019D 72 FB 07         [ 2]  438     addw x,(STRLEN,sp)
      0001A0 1F 07            [ 2]  439     ldw (STRLEN,sp),x 
      0001A2 1E 08            [ 2]  440     ldw x,(XSAVE,sp) 
      0001A4 16 0A            [ 2]  441     ldw y,(YSAVE,sp)
      0001A6 CC 01 23         [ 2]  442     jp printf_loop
      0001A9 A1 73            [ 1]  443 6$: cp a,#'s 
      0001AB 26 1E            [ 1]  444     jrne 8$
                                    445 ; *** string type parameter ***
      0001AD 1F 08            [ 2]  446     ldw (XSAVE,sp),x
      0001AF 17 0A            [ 2]  447     ldw (YSAVE,sp),y  
      0001B1 C6 00 00         [ 1]  448     ld a,std_dev 
      0001B4 88               [ 1]  449     push a 
      0001B5 FE               [ 2]  450     ldw x,(x)
      0001B6 89               [ 2]  451     pushw x  
      0001B7 CD 00 00         [ 4]  452     call uart_puts 
      0001BA                        453     _drop 3
      0001BA 5B 03            [ 2]    1     addw sp,#3 
      0001BC 72 FB 07         [ 2]  454     addw x,(STRLEN,sp)
      0001BF 1F 07            [ 2]  455     ldw (STRLEN,sp),x 
      0001C1 1E 08            [ 2]  456     ldw x,(XSAVE,sp) 
      0001C3 1C 00 02         [ 2]  457     addw x,#2
      0001C6 16 0A            [ 2]  458     ldw y,(YSAVE,sp)
      0001C8 CC 01 23         [ 2]  459     jp printf_loop 
      0001CB A1 78            [ 1]  460 8$: cp a,#'x 
      0001CD 26 08            [ 1]  461     jrne print_char 
                                    462 ; *** print_int in hexadecimal ***
      0001CF 1F 08            [ 2]  463     ldw (XSAVE,sp),x
      0001D1 17 0A            [ 2]  464     ldw (YSAVE,sp),y 
      0001D3 A6 10            [ 1]  465     ld a,#16 
      0001D5 20 9E            [ 2]  466     jra 5$
      0001D7                        467 print_char:
      0001D7 1F 08            [ 2]  468     ldw (XSAVE,sp),x
      0001D9 88               [ 1]  469     push a
      0001DA 3B 00 00         [ 1]  470     push 0 
      0001DD CD 00 18         [ 4]  471     call putchar 
      0001E0                        472     _drop 2 
      0001E0 5B 02            [ 2]    1     addw sp,#2 
      0001E2 1E 08            [ 2]  473     ldw x,(XSAVE,sp)
      0001E4 0C 08            [ 1]  474     inc (STRLEN+1,sp)
      0001E6 26 02            [ 1]  475     jrne 2$
      0001E8 0C 07            [ 1]  476     inc (STRLEN,sp)             
      0001EA                        477 2$:
      0001EA CC 01 23         [ 2]  478     jp printf_loop 
      0001ED                        479 printf_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001ED 1E 07            [ 2]  480     ldw x,(STRLEN,sp)
      0001EF                        481     _fn_exit 
      0001EF                          1     _drop VSIZE 
      0001EF 5B 0B            [ 2]    1     addw sp,#VSIZE 
      0001F1 81               [ 4]    2     ret 
                                    482     
                                    483 
                                    484 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ACC16   =  000002     |     ACC24   =  000001 
    ACC8    =  000003     |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_OFS =  00000D 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000004     |     BAUD    =  000003     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BSP     =  000008 
    BUFFER  =  000005     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |     CHAR    =  000003 
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]

Symbol Table

    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DEV_ID  =  000003     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |     FMT     =  00000E     |     FMT_BUFF=  000010 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000001     |     MAX_LEN =  00004F     |     NAFR    =  004804 
    NCLKOPT =  004808     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    PA      =  000000     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]

Symbol Table

    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
    PUTS_STR=  000001     |     PUTS_UAR=  000003     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |     ROP     =  004800 
    RST_SR  =  0050B3     |     RXCHAR  =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     STR     =  000006     |     STRLEN  =  000007 
    SWIM_CSR=  007F80     |     TAB     =  000009     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_ID =  000002 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |     UCHAR   =  000001 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    VARARG  =  000010     |     VSIZE   =  00000B     |     VT      =  00000B 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XSAVE   =  000008     |     YSAVE   =  00000A 
  2 _conio_i   000006 GR  |   2 _get_dev   000014 GR  |   2 _getchar   00002B GR
  2 _gets      00004F GR  |   2 _is_digi   0000F8 GR  |   2 _is_hex    000104 GR
  2 _printf    000118 GR  |   2 _putchar   000018 GR  |   2 _puts      000035 GR
  2 _set_dev   00000E GR  |   2 accept_c   0000AB R   |   2 cancel     0000E3 R
  2 conio_in   000006 GR  |   2 del_back   000093 R   |   2 del_line   000081 R
  1 fmt_buff   000003 GR  |   2 get_dev    000014 GR  |   2 getchar    00002B GR
  2 gets       00004F GR  |   2 gets_loo   000057 R   |   2 gets_qui   0000E6 R
    i24toa     ****** GX  |   2 is_digit   0000F8 GR  |   2 is_hex     000104 GR
  2 print_ch   0001D7 R   |   2 printf     000118 GR  |   2 printf_e   0001ED R
  2 printf_l   000123 R   |   1 ptr        000001 R   |   2 putchar    000018 GR
  2 puts       000035 GR  |   2 reprint    0000C0 R   |   2 set_dev    00000E GR
  1 std_dev    000000 R   |     uart_del   ****** GX  |     uart_get   ****** GX
    uart_ini   ****** GX  |     uart_put   ****** GX  |     uart_put   ****** GX
    uart_spa   ****** GX

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     13   flags    0
   2 CODE       size    1F2   flags    0


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   librairie de fonctions arithmétiques sur entiers 24 bits.
                                      3 ;   Date: 2019-11-28
                                      4 ;   Copyright Jacques Deschêens, 2019
                                      5 ;   licence:  GPL v3 
                                      6 ;
                                      7 ;   Description: 
                                      8 ;       *  add24    addition. résultat dans X:A
                                      9 ;       *  sub24    soustraciton. résutlat dans X:A 
                                     10 ;       *  mul24    multiplication non signée. résultat dans X:A
                                     11 ;       *  div24    divisition non signée 24b/16b quotient dans X:A reste dans Y
                                     12 ;       *  neg24    complément à 2 d'un entier 24b. résutlant dans X:A 
                                     13 ;       Le résultat est retourné dans X:A, les 16 bits les plus
                                     14 ;       significatifs sont dans X et les 8 moins significatifs dans
                                     15 ;       A. 
                                     16 ;  NOTE:
                                     17 ;       Cette librairie est pour utilisation par les progammes
                                     18 ;       écris en assembleur seulement. Il n'existe pas de type
                                     19 ;       entier 24 bits en C.
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21     .module MATH24
                                            .include "../../inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                            .include "../../inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            .include "../../inc/gen_macros.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                     26     .list 
                                     27 
                                     28 ; NOTE: pour l'assembleur sdas une étiquette terminée par **::** est une 
                                     29 ; étiquette globale qui peut être référencée dans un autre module.
                                     30 
                                     31     .area CODE 
                                     32 
                                     33 ;----------------------------------
                                     34 ; addition 24 bits
                                     35 ; input:
                                     36 ;  N1       premier argument 
                                     37 ;  N2       deuxième argument 
                                     38 ; output:
                                     39 ;   X:A     somme N1+N2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     40 ;--------------------------------
                           000002    41     ARG_OFS=2
                           000003    42     N1=ARG_OFS+1
                           000006    43     N2=ARG_OFS+4
      000000                         44  add24::
      000000 1E 03            [ 2]   45     ldw x,(N1,sp)
      000002 7B 05            [ 1]   46     ld a,(N1+2,sp)
      000004 1B 08            [ 1]   47     add a,(N2+2,sp)
      000006 24 01            [ 1]   48     jrnc 1$
      000008 5C               [ 1]   49     incw x 
      000009 72 FB 06         [ 2]   50 1$: addw x,(N2,sp)
      00000C 81               [ 4]   51     ret 
                                     52 
                                     53 ;----------------------------------
                                     54 ; soustraction 24 bits
                                     55 ; input:
                                     56 ;  N1       premier argument 
                                     57 ;  N2       deuxième argument 
                                     58 ; output:
                                     59 ;   X:A     somme N1-N2 
                                     60 ;--------------------------------
                           000002    61     ARG_OFS=2
                           000003    62     N1=ARG_OFS+1
                           000006    63     N2=ARG_OFS+4
      00000D                         64 sub24::
      00000D 1E 03            [ 2]   65     ldw x,(N1,sp)
      00000F 7B 05            [ 1]   66     ld a,(N1+2,sp)
      000011 10 08            [ 1]   67     sub a,(N2+2,sp)
      000013 24 01            [ 1]   68     jrnc 1$
      000015 5A               [ 2]   69     decw x 
      000016 72 F0 06         [ 2]   70 1$: subw x,(N2,sp)
      000019 81               [ 4]   71     ret 
                                     72 
                                     73 
                                     74 ;----------------------------------------
                                     75 ; multiplication non signée d'un 
                                     76 ; entier 24 bits par un entier 8 bits.
                                     77 ; input:
                                     78 ;   U24         entier non signé 24 bits 
                                     79 ;   U8          entier non signé 8 bits
                                     80 ; output:
                                     81 ;   X:A         produit U24*U8
                                     82 ; NOTE: cette routine jette le débordement
                                     83 ;       au delà du bit 23.
                                     84 ;---------------------------------------
                                     85 ; les arguments sont décalés de 5 octets à cause
                                     86 ; de la variable locale ACC24 de 3 octets.
                           000005    87     ARG_OFS=5
                           000006    88     U24 = ARG_OFS+1
                           000009    89     U8 = ARG_OFS+4
                                     90 ; variable locale pour produit partiel
                           000001    91     ACC24=1
                           000003    92     LOCAL_SIZE=3 
      00001A                         93 mul24_8u::
      00001A 52 03            [ 2]   94     sub sp,#LOCAL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      00001C 0F 01            [ 1]   95     clr (ACC24,sp)
                                     96 ; U24bits7:0 x U8      
      00001E 7B 08            [ 1]   97     ld a,(U24+2,sp)
      000020 97               [ 1]   98     ld xl,a 
      000021 7B 09            [ 1]   99     ld a,(U8,sp)
      000023 42               [ 4]  100     mul x,a
      000024 1F 02            [ 2]  101     ldw (ACC24+1,sp),x ; produit partiel 1
                                    102 ; produit U24bits15:8 x U8 
      000026 7B 07            [ 1]  103     ld a,(U24+1,sp)
      000028 97               [ 1]  104     ld xl,a 
      000029 7B 09            [ 1]  105     ld a,(U8,sp)
      00002B 42               [ 4]  106     mul x,a
      00002C 72 FB 01         [ 2]  107     addw x,(ACC24,sp)
      00002F 1F 01            [ 2]  108     ldw (ACC24,sp),x ; produit partiel 2
                                    109 ; produit U24bits23:16 x U8 
      000031 7B 06            [ 1]  110     ld a,(U24,sp)
      000033 97               [ 1]  111     ld xl,a
      000034 7B 09            [ 1]  112     ld a,(U8,sp) 
      000036 42               [ 4]  113     mul x,a 
                                    114 ; le contenu de xh est un débordement au delà du bit 23 
                                    115 ; donc on l'ignore. xl représente les 23:16 de ce produit partiel.    
      000037 9F               [ 1]  116     ld a,xl 
      000038 1B 01            [ 1]  117     add a,(ACC24,sp)
      00003A 95               [ 1]  118     ld xh,a ; produit final bits 23:16
      00003B 7B 02            [ 1]  119     ld a,(ACC24+1,sp)
      00003D 97               [ 1]  120     ld xl,a  ; produit final bits 15:8
      00003E 7B 03            [ 1]  121     ld a,(ACC24+2,sp) ; produit final bits 7:0
      000040 5B 03            [ 2]  122     addw sp,#LOCAL_SIZE 
      000042 81               [ 4]  123     ret 
                                    124 
                                    125 ;----------------------------------
                                    126 ; multiplication non signée de 24 bits
                                    127 ; input:
                                    128 ;  N1       premier argument 
                                    129 ;  N2       deuxième argument 
                                    130 ; output:
                                    131 ;   X:A     somme N1*N2 
                                    132 ; NOTE: cette routine jette le débordement
                                    133 ;       au delà du bit 23.
                                    134 ;--------------------------------
                                    135 ; les arguments sont décalés de 9 octets:
                                    136 ;   2 pour l'adresse de retour 
                                    137 ;   7 pour LOCAL_SIZE 
                           000009   138     ARG_OFS=9
                           00000A   139     N1=ARG_OFS+1  ; argument 1 
                           00000D   140     N2=ARG_OFS+4  ; argument 2
                                    141 ; variable locale de 24 bits
                           000001   142     U24 = 1 ; arg1 pour mul24_8u
                           000004   143     U8 = 4  ; arg2 pour mul24_8u
                           000005   144     ACC24=5 ; 3 octets
                           000007   145     LOCAL_SIZE=7
      000043                        146 mul24u::
      000043 52 07            [ 2]  147     sub sp,#LOCAL_SIZE
                                    148 ; multiplie  N1 * N2bit7:0  
      000045 7B 0F            [ 1]  149     ld a,(N2+2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000047 6B 04            [ 1]  150     ld (U8,sp),a 
      000049 7B 0C            [ 1]  151     ld a,(N1+2,sp)
      00004B 6B 03            [ 1]  152     ld (U24+2,sp),a 
      00004D 1E 0A            [ 2]  153     ldw x,(N1,sp)
      00004F 1F 01            [ 2]  154     ldw (U24,sp),x 
      000051 CD 00 1A         [ 4]  155     call mul24_8u
                                    156 ; produit partiel 1
      000054 6B 07            [ 1]  157     ld (ACC24+2,sp),a 
      000056 1F 05            [ 2]  158     ldw (ACC24,sp),x
                                    159 ; multiplie N1 * N2bit15:8     
      000058 7B 0E            [ 1]  160     ld a,(N2+1,sp)
      00005A 6B 04            [ 1]  161     ld (U8,sp),a 
      00005C 7B 0C            [ 1]  162     ld a,(N1+2,sp)
      00005E 6B 03            [ 1]  163     ld (U24+2,sp),a 
      000060 1E 0A            [ 2]  164     ldw x,(N1,sp)
      000062 1F 01            [ 2]  165     ldw (U24,sp),x 
      000064 CD 00 1A         [ 4]  166     call mul24_8u
                                    167 ; additionne produit partiel 2 à produit partiel 1
                                    168 ;  xh représente un débordement après le bit 23 donc ignoré.
      000067 02               [ 1]  169     rlwa x 
      000068 72 FB 05         [ 2]  170     addw x,(ACC24,sp)
      00006B 1F 05            [ 2]  171     ldw (ACC24,sp),x 
                                    172 ; multiplie N1 * N2bits23:16
      00006D 7B 0D            [ 1]  173     ld a,(N2,sp)
      00006F 6B 04            [ 1]  174     ld (U8,sp),a 
      000071 7B 0C            [ 1]  175     ld a,(N1+2,sp)
      000073 6B 03            [ 1]  176     ld (U24+2,sp),a 
      000075 1E 0A            [ 2]  177     ldw x,(N1,sp)
      000077 1F 01            [ 2]  178     ldw (U24,sp),x 
      000079 CD 00 1A         [ 4]  179     call mul24_8u
                                    180 ; additionne produit partiel 3 à acc24 
      00007C 1B 05            [ 1]  181     add a,(ACC24,sp)
      00007E 6B 05            [ 1]  182     ld (ACC24,sp),a 
                                    183 ; retourne le produit dans X:A 
      000080                        184 result: ; X:A 
      000080 1E 05            [ 2]  185     ldw x,(ACC24,sp)
      000082 7B 07            [ 1]  186     ld a,(ACC24+2,sp)
      000084 5B 07            [ 2]  187     addw sp,#LOCAL_SIZE 
      000086 81               [ 4]  188     ret 
                                    189 
                                    190 ;----------------------------------------
                                    191 ; multiplication non signée d'un 
                                    192 ; entier 24 bits par un entier 8 bits.
                                    193 ; input:
                                    194 ;   I1         entier signé 24 bits 
                                    195 ;   I2          entier signé 24 bits
                                    196 ; output:
                                    197 ;   X:A         produit I1*I2
                                    198 ; NOTE: cette routine jette le débordement
                                    199 ;       au delà du bit 23.
                                    200 ;---------------------------------------
                           000009   201     ARG_OFS=9
                           00000A   202     I1=ARG_OFS+1
                           00000D   203     I2=ARG_OFS+4
                                    204 ; local variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000001   205     U1=1
                           000004   206     U2=4
                           000007   207     SIGN=7   
                           000007   208     LOCAL_SIZE=7
      000087                        209 mul24s::
      000087 52 07            [ 2]  210     sub sp,#LOCAL_SIZE 
      000089 0F 07            [ 1]  211     clr (SIGN,sp)
      00008B 7B 0C            [ 1]  212     ld a,(I1+2,sp)
      00008D 1E 0A            [ 2]  213     ldw x,(I1,sp)
      00008F 0D 0A            [ 1]  214     tnz (I1,sp)
      000091 2A 05            [ 1]  215     jrpl 0$
      000093 03 07            [ 1]  216     cpl (SIGN,sp)
      000095 CD 01 F9         [ 4]  217     call neg24
      000098 6B 03            [ 1]  218 0$: ld (U1+2,sp),a 
      00009A 1F 01            [ 2]  219     ldw (U1,sp),x
      00009C 7B 0F            [ 1]  220 1$: ld a,(I2+2,sp)
      00009E 1E 0D            [ 2]  221     ldw x,(I2,sp)
      0000A0 0D 0D            [ 1]  222     tnz (I2,sp)
      0000A2 2A 05            [ 1]  223     jrpl 2$
      0000A4 CD 01 F9         [ 4]  224     call neg24
      0000A7 03 07            [ 1]  225     cpl (SIGN,sp)
      0000A9 6B 06            [ 1]  226 2$: ld (U2+2,sp),a 
      0000AB 1F 04            [ 2]  227     ldw (U2,sp),x 
      0000AD CD 00 43         [ 4]  228     call mul24u 
      0000B0 0D 07            [ 1]  229     tnz (SIGN,sp)
      0000B2 27 03            [ 1]  230     jreq 3$
      0000B4 CD 01 F9         [ 4]  231     call neg24    
      0000B7 5B 07            [ 2]  232 3$: addw sp,#LOCAL_SIZE
      0000B9 81               [ 4]  233     ret
                                    234 
                                    235 ;-------------------------------------
                                    236 ; division non signée uint24_t by uint8_t
                                    237 ; input:
                                    238 ;	dividend    uint24_t
                                    239 ;   divisor		uint8_t 
                                    240 ; output:
                                    241 ;    divident   quotient
                                    242 ;    A          remainder 
                                    243 ;------------------------------------- 
                           000002   244     ARG_OFS=2
                           000003   245     U24 = ARG_OFS+1
                           000006   246 	U8   = ARG_OFS+4
      0000BA                        247 div24_8u::
                                    248 	;dividende bits 23:8 in X
      0000BA 1E 03            [ 2]  249 	ldw x,(U24,sp)
      0000BC 7B 06            [ 1]  250 	ld a,(U8,SP) ; diviseur
      0000BE 62               [ 2]  251 	div x,a ; 
      0000BF 1F 03            [ 2]  252     ldw (U24,sp),x 
      0000C1 95               [ 1]  253 	ld xh,a
      0000C2 7B 05            [ 1]  254 	ld a,(U24+2,sp)
      0000C4 97               [ 1]  255 	ld xl,a
      0000C5 7B 06            [ 1]  256 	ld a,(U8,sp) ; diviseur
      0000C7 62               [ 2]  257 	div x,a  
      0000C8 6B 06            [ 1]  258 	ld (U8,sp),a ; sauve reste 
      0000CA 9F               [ 1]  259 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000CB 6B 05            [ 1]  260 	ld (U24+2,sp),a
      0000CD 7B 06            [ 1]  261     ld a,(U8,sp)
      0000CF 81               [ 4]  262 	ret
                                    263 
                                    264 ;---------------------------------------
                                    265 ; compte le nombre de bits à zéro
                                    266 ; avant de rencontrer un 1 à partir
                                    267 ; du bit le plus significatif
                                    268 ; input:
                                    269 ;   X        adresse de l'entier 24 bits 
                                    270 ; output:
                                    271 ;   A        nombre de zéro à gauche
                                    272 ;--------------------------------------    
                           000001   273     LZ=1  ; compteur de zéros
                           000001   274     LOCAL_SIZE=1
      0000D0                        275 clz24::
      0000D0 4F               [ 1]  276     clr a
      0000D1 88               [ 1]  277     push a 
      0000D2 99               [ 1]  278     scf 
      0000D3 46               [ 1]  279 1$: rrc a 
      0000D4 24 02            [ 1]  280     jrnc 2$
      0000D6 5C               [ 1]  281     incw x
      0000D7 46               [ 1]  282     rrc a    
      0000D8 F5               [ 1]  283 2$: bcp a,(X)
      0000D9 26 0F            [ 1]  284     jrne 3$
      0000DB 0C 01            [ 1]  285     inc (LZ,sp)
      0000DD 90 97            [ 1]  286     ld yl,a 
      0000DF A6 18            [ 1]  287     ld a,#24
      0000E1 11 01            [ 1]  288     cp a,(LZ,sp)
      0000E3 27 05            [ 1]  289     jreq 3$
      0000E5 90 9F            [ 1]  290     ld a,yl
      0000E7 98               [ 1]  291     rcf  
      0000E8 20 E9            [ 2]  292     jra 1$
      0000EA 84               [ 1]  293 3$: pop a 
      0000EB 81               [ 4]  294     ret
                                    295 
                                    296 
                                    297 ;-------------------------------
                                    298 ;  division non signée de DVDEND/DVSOR 
                                    299 ; input:
                                    300 ;   DVDEND      dividende 24 bits
                                    301 ;   DVSOR      diviseur  24 bits 
                                    302 ; output:
                                    303 ;   X:A     quotient U1/DVSOR 
                                    304 ;   U1      reste 
                                    305 ;------------------------------
                           000008   306     ARG_OFS= 8
                           000009   307     DVDEND = ARG_OFS+1
                           00000C   308     DVSOR = ARG_OFS+4
                                    309 ; variable locale 
                           000001   310     QUOT_LB = 1 ; quotient bits 7:0, 1 octets
                           000002   311     SHIFT=2 ;  compteur de décalage, 1 octet
                           000003   312     DIFF=3  ;  différence entre DVDEND et DVSOR, 3 octets
                           000006   313     SHIFTR=6 ; décalage du reste vers la droite, 1 octet
                           000006   314     LOCAL_SIZE=6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0000EC                        315 div24u::
      0000EC 52 06            [ 2]  316     sub sp,#LOCAL_SIZE
      0000EE 0F 01            [ 1]  317     clr (QUOT_LB,sp)
                                    318 ; si diviseur zéro gènère exception fatale
      0000F0 7B 0C            [ 1]  319     ld a,(DVSOR,sp)
      0000F2 1A 0D            [ 1]  320     or a,(DVSOR+1,sp)
      0000F4 1A 0E            [ 1]  321     or a,(DVSOR+2,sp)
      0000F6 26 01            [ 1]  322     jrne 1$
      0000F8 83               [ 9]  323     trap ; excepction division par zéro.
      0000F9                        324 1$: ; si dividende < diviseur retourne X:A=0 R=dividende
      0000F9 96               [ 1]  325     ldw x,sp 
      0000FA 1C 00 09         [ 2]  326     addw x,#DVDEND ; dividente 
      0000FD CD 00 D0         [ 4]  327     call clz24 
      000100 6B 02            [ 1]  328     ld (SHIFT,sp),a 
      000102 96               [ 1]  329     ldw x,sp 
      000103 1C 00 0C         [ 2]  330     addw x,#DVSOR ; diviseur 
      000106 CD 00 D0         [ 4]  331     call clz24
      000109 11 02            [ 1]  332     cp a,(SHIFT,sp)
      00010B 24 04            [ 1]  333     jruge 2$
      00010D 5F               [ 1]  334     clrw x 
      00010E 4F               [ 1]  335     clr a 
      00010F 20 62            [ 2]  336     jra 9$ 
                                    337 ; décale diviseur vers la gauche jusqu'à ce que A==SHIFT 
      000111 10 02            [ 1]  338 2$: sub a,(SHIFT,sp)
      000113 6B 02            [ 1]  339     ld (SHIFT,sp),a 
      000115 6B 06            [ 1]  340     ld (SHIFTR,sp),a 
      000117 16 0C            [ 2]  341     ldw y,(DVSOR,sp)
      000119 4D               [ 1]  342 3$: tnz a 
      00011A 27 07            [ 1]  343     jreq 4$
      00011C 08 0E            [ 1]  344     sll (DVSOR+2,sp)
      00011E 90 59            [ 2]  345     rlcw y
      000120 4A               [ 1]  346     dec a
      000121 20 F6            [ 2]  347     jra 3$
      000123 17 0C            [ 2]  348 4$: ldw (DVSOR,sp),y 
                                    349 ; boucle de division
      000125 5F               [ 1]  350     clrw x  ; quotient bits 23:8 
      000126 7B 0B            [ 1]  351 5$: ld a,(DVDEND+2,sp) ; dividende bits 7:0
      000128 16 09            [ 2]  352     ldw y,(DVDEND,sp); dividende bits 23:8
      00012A 10 0E            [ 1]  353     sub a,(DVSOR+2,sp) ; diviseur bits 7:0
      00012C 6B 05            [ 1]  354     ld (DIFF+2,sp),a
      00012E 90 9F            [ 1]  355     ld a,yl 
      000130 12 0D            [ 1]  356     sbc a,(DVSOR+1,sp)
      000132 6B 04            [ 1]  357     ld (DIFF+1,sp),a 
      000134 90 9E            [ 1]  358     ld a,yh 
      000136 12 0C            [ 1]  359     sbc a,(DVSOR,sp)
      000138 6B 03            [ 1]  360     ld (DIFF,sp),a 
      00013A 25 0A            [ 1]  361     jrc 6$
      00013C 16 03            [ 2]  362     ldw y,(DIFF,sp)
      00013E 17 09            [ 2]  363     ldw (DVDEND,sp),y
      000140 7B 05            [ 1]  364     ld a,(DIFF+2,sp) 
      000142 6B 0B            [ 1]  365     ld (DVDEND+2,sp),a 
      000144 20 08            [ 2]  366     jra 7$
      000146 7B 0B            [ 1]  367 6$: ld a,(DVDEND+2,sp)
      000148 16 09            [ 2]  368     ldw y,(DVDEND,sp)
      00014A 6B 05            [ 1]  369     ld (DIFF+2,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00014C 17 03            [ 2]  370     ldw (DIFF,sp),y 
      00014E 8C               [ 1]  371 7$: ccf
      00014F 09 01            [ 1]  372     rlc (QUOT_LB,sp)
      000151 59               [ 2]  373     rlcw x
      000152 0D 02            [ 1]  374     tnz (SHIFT,sp)
      000154 27 0A            [ 1]  375     jreq 8$ 
      000156 08 0B            [ 1]  376     sll (DVDEND+2,sp) 
      000158 09 0A            [ 1]  377     rlc (DVDEND+1,sp) 
      00015A 09 09            [ 1]  378     rlc (DVDEND,sp)
      00015C 0A 02            [ 1]  379     dec (SHIFT,sp)
      00015E 20 C6            [ 2]  380     jra 5$
      000160 7B 05            [ 1]  381 8$: ld a,(DIFF+2,sp)
      000162 16 03            [ 2]  382     ldw y,(DIFF,sp) 
      000164                        383 80$: ; réaligne le reste sur le bit 0.
      000164 0D 06            [ 1]  384     tnz (SHIFTR,sp)
      000166 27 07            [ 1]  385     jreq 81$
      000168 90 54            [ 2]  386     srlw y 
      00016A 46               [ 1]  387     rrc a
      00016B 0A 06            [ 1]  388     dec (SHIFTR,sp)
      00016D 20 F5            [ 2]  389     jra 80$ 
      00016F                        390 81$: 
      00016F 6B 0B            [ 1]  391     ld (DVDEND+2,sp),a 
      000171 17 09            [ 2]  392     ldw (DVDEND,sp),y
                                    393 
      000173 7B 01            [ 1]  394 9$: ld a,(QUOT_LB,sp) 
      000175 5B 06            [ 2]  395     addw sp,#LOCAL_SIZE 
      000177 81               [ 4]  396     ret 
                                    397 
                                    398 ;------------------------------------------
                                    399 ; division signé int24_t/int24_t 
                                    400 ; input:
                                    401 ;   I1          dividende
                                    402 ;   I2          diviseur
                                    403 ; output:
                                    404 ;   X:A         quotient 
                                    405 ;   I1          reste 
                                    406 ;NOTE: le reste doit toujours être positif 
                                    407 ;REF: https://fr.wikipedia.org/wiki/Division_euclidienne#Extension_aux_entiers_relatifs
                                    408 ;--------------------------------------------
                           00000C   409     ARG_OFS=12
                           00000D   410     I1=ARG_OFS+1 
                           000010   411     I2=ARG_OFS+4
                                    412 ; variables locales 
                           000001   413     U1=1 
                           000004   414     U2=4 
                           000007   415     SIGN=7
                           000008   416     UDIV=8
                           00000A   417     LOCAL_SIZE=10
      000178                        418 div24s::
      000178 52 0A            [ 2]  419     sub sp,#LOCAL_SIZE
      00017A 0F 07            [ 1]  420     clr (SIGN,sp)
      00017C 7B 0F            [ 1]  421     ld a,(I1+2,sp)
      00017E 1E 0D            [ 2]  422     ldw x,(I1,sp)
      000180 0D 0D            [ 1]  423     tnz (I1,sp)
      000182 2A 05            [ 1]  424     jrpl 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000184 03 07            [ 1]  425     cpl (SIGN,sp)
      000186 CD 01 F9         [ 4]  426     call neg24
      000189 6B 03            [ 1]  427 1$: ld (U1+2,sp),a 
      00018B 1F 01            [ 2]  428     ldw (U1,sp),x 
      00018D 7B 12            [ 1]  429     ld a,(I2+2,sp)
      00018F 1E 10            [ 2]  430     ldw x,(I2,sp)
      000191 0D 10            [ 1]  431     tnz (I2,sp)
      000193 2A 05            [ 1]  432     jrpl 2$ 
      000195 03 07            [ 1]  433     cpl (SIGN,sp)
      000197 CD 01 F9         [ 4]  434     call neg24 
      00019A 6B 06            [ 1]  435 2$: ld (U2+2,sp),a
      00019C 1F 04            [ 2]  436     ldw (U2,sp),x
      00019E 6B 0A            [ 1]  437     ld (UDIV+2,sp),a 
      0001A0 1F 08            [ 2]  438     ldw (UDIV,sp),x 
      0001A2 CD 00 EC         [ 4]  439     call div24u 
      0001A5                        440 3$: ; dénominateur négatif et SIGN négatif incrémente quotient si R<>0
                                    441     ; et ajuste le reste=U2-mod(U1/U2)
                                    442     ; sauvegarde quotient
      0001A5 6B 12            [ 1]  443     ld (I2+2,sp),a 
      0001A7 1F 10            [ 2]  444     ldw (I2,sp),x 
                                    445 ; si le reste est 0 on ne fait aucun ajustement.    
      0001A9 7B 01            [ 1]  446     ld a,(U1,sp)
      0001AB 1A 02            [ 1]  447     or a,(U1+1,sp)
      0001AD 1A 03            [ 1]  448     or a,(U1+2,sp)
      0001AF 27 21            [ 1]  449     jreq 5$
                                    450 ;vérifie signe du dénominateur et du quotient 
      0001B1 7B 0D            [ 1]  451     ld a,(I1,sp)
      0001B3 A4 80            [ 1]  452     and a,#0x80 
      0001B5 14 07            [ 1]  453     and a,(SIGN,sp)
      0001B7 27 19            [ 1]  454     jreq 5$
      0001B9 7B 12            [ 1]  455     ld a,(I2+2,sp)
      0001BB CD 01 F3         [ 4]  456     call inc24u 
      0001BE 6B 12            [ 1]  457     ld (I2+2,sp),a 
      0001C0 1F 10            [ 2]  458     ldw (I2,sp),x 
                                    459 ; ajuste le reste UDIV-mod(U1/U2)
      0001C2 7B 0A            [ 1]  460     ld a,(UDIV+2,sp)
      0001C4 1E 08            [ 2]  461     ldw x,(UDIV,sp)
      0001C6 10 03            [ 1]  462     sub a,(U1+2,sp)
      0001C8 24 01            [ 1]  463     jrnc 4$
      0001CA 5A               [ 2]  464     decw x 
      0001CB 72 F0 01         [ 2]  465 4$: subw x,(U1,sp)
      0001CE 6B 03            [ 1]  466     ld (U1+2,sp),a 
      0001D0 1F 01            [ 2]  467     ldw (U1,sp),x 
                                    468 ; si le signe est négatif ajuste le quotient
      0001D2                        469 5$:
      0001D2 7B 03            [ 1]  470     ld a,(U1+2,sp)
      0001D4 1E 01            [ 2]  471     ldw x,(U1,sp)
      0001D6 6B 0F            [ 1]  472     ld (I1+2,sp),a 
      0001D8 1F 0D            [ 2]  473     ldw (I1,sp),x 
      0001DA 7B 12            [ 1]  474     ld a,(I2+2,sp)
      0001DC 1E 10            [ 2]  475     ldw x,(I2,sp)
      0001DE 0D 07            [ 1]  476     tnz (SIGN,sp)
      0001E0 27 03            [ 1]  477     jreq 6$ 
      0001E2 CD 01 F9         [ 4]  478     call neg24
      0001E5                        479 6$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001E5 5B 0A            [ 2]  480     addw sp,#LOCAL_SIZE 
      0001E7 81               [ 4]  481     ret 
                                    482 
                                    483 ;------------------------------------------------------
                                    484 ;  retourne la valeur absolue d'un entier 24 bits
                                    485 ;  input:
                                    486 ;       X:A         int24_t 
                                    487 ;  output:
                                    488 ;       X:A         abs(X:A)
                                    489 ;       Y           0 si était positif, -1 si était négatif
                                    490 ;-----------------------------------------------------
      0001E8                        491 abs24::
      0001E8 88               [ 1]  492     push a 
      0001E9 9E               [ 1]  493     ld a,xh 
      0001EA A5 80            [ 1]  494     bcp a,#0x80
      0001EC 84               [ 1]  495     pop a 
      0001ED 27 03            [ 1]  496     jreq 1$
      0001EF CD 01 F9         [ 4]  497     call neg24 
      0001F2 81               [ 4]  498 1$: ret 
                                    499 
                                    500 
                                    501 ;-------------------------------------------
                                    502 ; incrémente de 1 un entier 24 bits non signé 
                                    503 ; input:
                                    504 ;   X:A          entier non signér à incrémenté
                                    505 ; output:
                                    506 ;   X:A         entier incrémenté de 1.
                                    507 ;-----------------------------------------------
      0001F3                        508 inc24u::
      0001F3 AB 01            [ 1]  509     add a,#1  
      0001F5 24 01            [ 1]  510     jrnc 1$ 
      0001F7 5C               [ 1]  511     incw x 
      0001F8 81               [ 4]  512 1$: ret 
                                    513 
                                    514 
                                    515 ;-------------------------------------------
                                    516 ; complément à 2 
                                    517 ; input:
                                    518 ;   X:A     entier 24 bits 
                                    519 ; output:
                                    520 ;   X:A     complément à 2 de l'entier.
                                    521 ;------------------------------------------
      0001F9                        522 neg24::
      0001F9 43               [ 1]  523     cpl a 
      0001FA 53               [ 2]  524     cplw x 
      0001FB AB 01            [ 1]  525     add a,#1
      0001FD 24 01            [ 1]  526     jrnc 1$
      0001FF 5C               [ 1]  527     incw x 
      000200 81               [ 4]  528 1$: ret 
                                    529 
                                    530 ;-------------------------------------------------------------
                                    531 ; name: cmp24 
                                    532 ; compare 2 entiers , retourne 1,0,-1
                                    533 ; input:
                                    534 ;  n1       int24_t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    535 ;  n2       int24_t 
                                    536 ; output:
                                    537 ;   X:A     n1>n2 alors X:A=1, n1=n2 alors X:A=0, n1<n2 alors X:A=-1 
                                    538 ;--------------------------------------------------------------
      000201                        539     _argofs 0 
                           000002     1     ARG_OFS=2+0 
      000201                        540     _arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000201                        541     _arg N2 4 
                           000006     1     N2=ARG_OFS+4 
      000201                        542 cmp24::
      000201 7B 03            [ 1]  543     ld a,(N1,sp)
      000203 11 06            [ 1]  544     cp a,(N2,sp) 
      000205 2F 15            [ 1]  545     jrslt  1$ 
      000207 2C 17            [ 1]  546     jrsgt  3$ 
      000209 7B 04            [ 1]  547     ld a,(N1+1,sp)
      00020B 11 07            [ 1]  548     cp a,(N2+1,sp)
      00020D 2F 0D            [ 1]  549     jrslt 1$ 
      00020F 2C 0F            [ 1]  550     jrsgt 3$ 
      000211 7B 05            [ 1]  551     ld a,(N1+2,sp)
      000213 11 08            [ 1]  552     cp a,(N2+2,sp)
      000215 2F 05            [ 1]  553     jrslt 1$ 
      000217 2C 07            [ 1]  554     jrsgt 3$
      000219 4F               [ 1]  555     clr a 
      00021A 20 06            [ 2]  556     jra 9$ 
      00021C A6 FF            [ 1]  557 1$: ld a,#0xff 
      00021E 20 02            [ 2]  558     jra 9$ 
      000220 A6 01            [ 1]  559 3$: ld a,#1 
      000222 5F               [ 1]  560 9$: clrw x 
      000223 A5 80            [ 1]  561     bcp a,#0x80 
      000225 27 01            [ 1]  562     jreq 4$ 
      000227 53               [ 2]  563     cplw x 
      000228 81               [ 4]  564 4$: ret 
                                    565 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     ACC24   =  000005     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
    ARG_OFS =  000002     |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]

Symbol Table

    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |     DIFF    =  000003     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |     DVDEND  =  000009     |     DVSOR   =  00000C 
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
    HSECNT  =  004809     |     I1      =  00000D     |     I2      =  000010 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LOCAL_SI=  00000A     |     LZ      =  000001 
    N1      =  000003     |     N2      =  000006     |     NAFR    =  004804 
    NCLKOPT =  004808     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     PA      =  000000 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]

Symbol Table

    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
    QUOT_LB =  000001     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |     ROP     =  004800     |     RST_SR  =  0050B3 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHIFT   =  000002 
    SHIFTR  =  000006     |     SIGN    =  000007     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SWIM_CSR=  007F80     |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     U1      =  000001 
    U2      =  000004     |     U24     =  000003     |     U8      =  000006 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]

Symbol Table

    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |     UDIV    =  000008 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   1 abs24      0001E8 GR  |   1 add24      000000 GR
  1 clz24      0000D0 GR  |   1 cmp24      000201 GR  |   1 div24_8u   0000BA GR
  1 div24s     000178 GR  |   1 div24u     0000EC GR  |   1 inc24u     0001F3 GR
  1 mul24_8u   00001A GR  |   1 mul24s     000087 GR  |   1 mul24u     000043 GR
  1 neg24      0001F9 GR  |   1 result     000080 R   |   1 sub24      00000D GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 CODE       size    229   flags    0


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                     10 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     11 	.include "../inc/nucleo_8s208.inc"
                                      1 ; NUCLEO-8S208RB board specific definitions
                                      2 
                                      3 ; mcu on board is stm8s208rbt6
                                      4 
                                      5 ; crystal on board is 8Mhz
                           7A1200     6 FHSE = 8000000
                                      7 
                                      8 ; LED2 is user LED
                                      9 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    10 LED2_PORT = 0x500a ;port C
                           000005    11 LED2_BIT = 5
                           000020    12 LED2_MASK = (1<<5) ;bit 5 mask
                                     13 
                                     14 ; B1 is user button
                                     15 ; connected to PE4
                                     16 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005014    17 BTN1_PORT = 0x5014 ; port E
                           000004    18 BTN1_BIT = 4
                           000010    19 BTN1_MASK = (1<<4) ;bit 4 mask
                                     20 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     12 	.include "../inc/stm8s208.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ; 2019/10/18
                                      3 ; STM8S208RB ÂµC registers map
                                      4 ; sdas file
                                      5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      6 	.module stm8s208rb
                                      7 
                                      8 ;;;;;;;;;;;;
                                      9 ; bits
                                     10 ;;;;;;;;;;;;
                           000000    11  BIT0 = 0
                           000001    12  BIT1 = 1
                           000002    13  BIT2 = 2
                           000003    14  BIT3 = 3
                           000004    15  BIT4 = 4
                           000005    16  BIT5 = 5
                           000006    17  BIT6 = 6
                           000007    18  BIT7 = 7
                                     19  	
                                     20 ;;;;;;;;;;;;
                                     21 ; bits masks
                                     22 ;;;;;;;;;;;;
                           000001    23  B0_MASK = (1<<0)
                           000002    24  B1_MASK = (1<<1)
                           000004    25  B2_MASK = (1<<2)
                           000008    26  B3_MASK = (1<<3)
                           000010    27  B4_MASK = (1<<4)
                           000020    28  B5_MASK = (1<<5)
                           000040    29  B6_MASK = (1<<6)
                           000080    30  B7_MASK = (1<<7)
                                     31 
                                     32 ; HSI oscillator frequency 16Mhz
                           F42400    33  FHSI = 16000000
                                     34 ; LSI oscillator frequency 128Khz
                           01F400    35  FLSI = 128000 
                                     36 
                                     37 ; controller memory regions
                           001800    38  RAM_SIZE = (0x1800) ; 6KB 
                           000800    39  EEPROM_SIZE = (0x800) ; 2KB
                                     40 ; STM8S208RB have 128K flash
                           020000    41  FLASH_SIZE = (0x20000)
                                     42 
                           000000    43  RAM_BASE = (0)
                           0017FF    44  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    45  EEPROM_BASE = (0x4000)
                           0047FF    46  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    47  SFR_BASE = (0x5000)
                           0057FF    48  SFR_END = (0x57FF)
                           006000    49  BOOT_ROM_BASE = (0x6000)
                           007FFF    50  BOOT_ROM_END = (0x7fff)
                           008000    51  FLASH_BASE = (0x8000)
                           027FFF    52  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    53  OPTION_BASE = (0x4800)
                           00487F    54  OPTION_END = (0x487F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           0048CD    55  DEVID_BASE = (0x48CD)
                           0048D8    56  DEVID_END = (0x48D8)
                           007F00    57  DEBUG_BASE = (0X7F00)
                           007FFF    58  DEBUG_END = (0X7FFF)
                                     59 
                                     60 ; options bytes
                                     61 ; this one can be programmed only from SWIM  (ICP)
                           004800    62  OPT0  = (0x4800)
                                     63 ; these can be programmed at runtime (IAP)
                           004801    64  OPT1  = (0x4801)
                           004802    65  NOPT1  = (0x4802)
                           004803    66  OPT2  = (0x4803)
                           004804    67  NOPT2  = (0x4804)
                           004805    68  OPT3  = (0x4805)
                           004806    69  NOPT3  = (0x4806)
                           004807    70  OPT4  = (0x4807)
                           004808    71  NOPT4  = (0x4808)
                           004809    72  OPT5  = (0x4809)
                           00480A    73  NOPT5  = (0x480A)
                           00480B    74  OPT6  = (0x480B)
                           00480C    75  NOPT6 = (0x480C)
                           00480D    76  OPT7 = (0x480D)
                           00480E    77  NOPT7 = (0x480E)
                           00487E    78  OPTBL  = (0x487E)
                           00487F    79  NOPTBL  = (0x487F)
                                     80 ; option registers usage
                                     81 ; read out protection, value 0xAA enable ROP
                           004800    82  ROP = OPT0  
                                     83 ; user boot code, {0..0x3e} 512 bytes row
                           004801    84  UBC = OPT1
                           004802    85  NUBC = NOPT1
                                     86 ; alternate function register
                           004803    87  AFR = OPT2
                           004804    88  NAFR = NOPT2
                                     89 ; miscelinous options
                           004805    90  WDGOPT = OPT3
                           004806    91  NWDGOPT = NOPT3
                                     92 ; clock options
                           004807    93  CLKOPT = OPT4
                           004808    94  NCLKOPT = NOPT4
                                     95 ; HSE clock startup delay
                           004809    96  HSECNT = OPT5
                           00480A    97  NHSECNT = NOPT5
                                     98 ; flash wait state
                           00480D    99 FLASH_WS = OPT7
                           00480E   100 NFLASH_WS = NOPT7
                                    101 
                                    102 ; watchdog options bits
                           000003   103   WDGOPT_LSIEN   =  BIT3
                           000002   104   WDGOPT_IWDG_HW =  BIT2
                           000001   105   WDGOPT_WWDG_HW =  BIT1
                           000000   106   WDGOPT_WWDG_HALT = BIT0
                                    107 ; NWDGOPT bits
                           FFFFFFFC   108   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   109   NWDGOPT_IWDG_HW  = ~BIT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           FFFFFFFE   110   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   111   NWDGOPT_WWDG_HALT = ~BIT0
                                    112 
                                    113 ; CLKOPT bits
                           000003   114  CLKOPT_EXT_CLK  = BIT3
                           000002   115  CLKOPT_CKAWUSEL = BIT2
                           000001   116  CLKOPT_PRS_C1   = BIT1
                           000000   117  CLKOPT_PRS_C0   = BIT0
                                    118 
                                    119 ; AFR option, remapable functions
                           000007   120  AFR7_BEEP    = BIT7
                           000006   121  AFR6_I2C     = BIT6
                           000005   122  AFR5_TIM1    = BIT5
                           000004   123  AFR4_TIM1    = BIT4
                           000003   124  AFR3_TIM1    = BIT3
                           000002   125  AFR2_CCO     = BIT2
                           000001   126  AFR1_TIM2    = BIT1
                           000000   127  AFR0_ADC     = BIT0
                                    128 
                                    129 ; device ID = (read only)
                           0048CD   130  DEVID_XL  = (0x48CD)
                           0048CE   131  DEVID_XH  = (0x48CE)
                           0048CF   132  DEVID_YL  = (0x48CF)
                           0048D0   133  DEVID_YH  = (0x48D0)
                           0048D1   134  DEVID_WAF  = (0x48D1)
                           0048D2   135  DEVID_LOT0  = (0x48D2)
                           0048D3   136  DEVID_LOT1  = (0x48D3)
                           0048D4   137  DEVID_LOT2  = (0x48D4)
                           0048D5   138  DEVID_LOT3  = (0x48D5)
                           0048D6   139  DEVID_LOT4  = (0x48D6)
                           0048D7   140  DEVID_LOT5  = (0x48D7)
                           0048D8   141  DEVID_LOT6  = (0x48D8)
                                    142 
                                    143 
                           005000   144 GPIO_BASE = (0x5000)
                           000005   145 GPIO_SIZE = (5)
                                    146 ; PORTS SFR OFFSET
                           000000   147 PA = 0
                           000005   148 PB = 5
                           00000A   149 PC = 10
                           00000F   150 PD = 15
                           000014   151 PE = 20
                           000019   152 PF = 25
                           00001E   153 PG = 30
                                    154 
                                    155 ; GPIO
                                    156 ; gpio register offset to base
                           000000   157  GPIO_ODR = 0
                           000001   158  GPIO_IDR = 1
                           000002   159  GPIO_DDR = 2
                           000003   160  GPIO_CR1 = 3
                           000004   161  GPIO_CR2 = 4
                                    162 
                                    163 ; port A
                           005000   164  PA_BASE = (0X5000)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                           005000   165  PA_ODR  = (0x5000)
                           005001   166  PA_IDR  = (0x5001)
                           005002   167  PA_DDR  = (0x5002)
                           005003   168  PA_CR1  = (0x5003)
                           005004   169  PA_CR2  = (0x5004)
                                    170 ; port B
                           005005   171  PB_BASE = (0X5005)
                           005005   172  PB_ODR  = (0x5005)
                           005006   173  PB_IDR  = (0x5006)
                           005007   174  PB_DDR  = (0x5007)
                           005008   175  PB_CR1  = (0x5008)
                           005009   176  PB_CR2  = (0x5009)
                                    177 ; port C
                           00500A   178  PC_BASE = (0X500A)
                           00500A   179  PC_ODR  = (0x500A)
                           00500B   180  PC_IDR  = (0x500B)
                           00500C   181  PC_DDR  = (0x500C)
                           00500D   182  PC_CR1  = (0x500D)
                           00500E   183  PC_CR2  = (0x500E)
                                    184 ; port D
                           00500F   185  PD_BASE = (0X500F)
                           00500F   186  PD_ODR  = (0x500F)
                           005010   187  PD_IDR  = (0x5010)
                           005011   188  PD_DDR  = (0x5011)
                           005012   189  PD_CR1  = (0x5012)
                           005013   190  PD_CR2  = (0x5013)
                                    191 ; port E
                           005014   192  PE_BASE = (0X5014)
                           005014   193  PE_ODR  = (0x5014)
                           005015   194  PE_IDR  = (0x5015)
                           005016   195  PE_DDR  = (0x5016)
                           005017   196  PE_CR1  = (0x5017)
                           005018   197  PE_CR2  = (0x5018)
                                    198 ; port F
                           005019   199  PF_BASE = (0X5019)
                           005019   200  PF_ODR  = (0x5019)
                           00501A   201  PF_IDR  = (0x501A)
                           00501B   202  PF_DDR  = (0x501B)
                           00501C   203  PF_CR1  = (0x501C)
                           00501D   204  PF_CR2  = (0x501D)
                                    205 ; port G
                           00501E   206  PG_BASE = (0X501E)
                           00501E   207  PG_ODR  = (0x501E)
                           00501F   208  PG_IDR  = (0x501F)
                           005020   209  PG_DDR  = (0x5020)
                           005021   210  PG_CR1  = (0x5021)
                           005022   211  PG_CR2  = (0x5022)
                                    212 ; port H not present on LQFP48/LQFP64 package
                           005023   213  PH_BASE = (0X5023)
                           005023   214  PH_ODR  = (0x5023)
                           005024   215  PH_IDR  = (0x5024)
                           005025   216  PH_DDR  = (0x5025)
                           005026   217  PH_CR1  = (0x5026)
                           005027   218  PH_CR2  = (0x5027)
                                    219 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005028   220  PI_BASE = (0X5028)
                           005028   221  PI_ODR  = (0x5028)
                           005029   222  PI_IDR  = (0x5029)
                           00502A   223  PI_DDR  = (0x502a)
                           00502B   224  PI_CR1  = (0x502b)
                           00502C   225  PI_CR2  = (0x502c)
                                    226 
                                    227 ; input modes CR1
                           000000   228  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   229  INPUT_PULLUP = (1)
                                    230 ; output mode CR1
                           000000   231  OUTPUT_OD = (0) ; open drain
                           000001   232  OUTPUT_PP = (1) ; push pull
                                    233 ; input modes CR2
                           000000   234  INPUT_DI = (0)
                           000001   235  INPUT_EI = (1)
                                    236 ; output speed CR2
                           000000   237  OUTPUT_SLOW = (0)
                           000001   238  OUTPUT_FAST = (1)
                                    239 
                                    240 
                                    241 ; Flash memory
                           00505A   242  FLASH_CR1  = (0x505A)
                           00505B   243  FLASH_CR2  = (0x505B)
                           00505C   244  FLASH_NCR2  = (0x505C)
                           00505D   245  FLASH_FPR  = (0x505D)
                           00505E   246  FLASH_NFPR  = (0x505E)
                           00505F   247  FLASH_IAPSR  = (0x505F)
                           005062   248  FLASH_PUKR  = (0x5062)
                           005064   249  FLASH_DUKR  = (0x5064)
                                    250 ; data memory unlock keys
                           0000AE   251  FLASH_DUKR_KEY1 = (0xae)
                           000056   252  FLASH_DUKR_KEY2 = (0x56)
                                    253 ; flash memory unlock keys
                           000056   254  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   255  FLASH_PUKR_KEY2 = (0xae)
                                    256 ; FLASH_CR1 bits
                           000003   257  FLASH_CR1_HALT = BIT3
                           000002   258  FLASH_CR1_AHALT = BIT2
                           000001   259  FLASH_CR1_IE = BIT1
                           000000   260  FLASH_CR1_FIX = BIT0
                                    261 ; FLASH_CR2 bits
                           000007   262  FLASH_CR2_OPT = BIT7
                           000006   263  FLASH_CR2_WPRG = BIT6
                           000005   264  FLASH_CR2_ERASE = BIT5
                           000004   265  FLASH_CR2_FPRG = BIT4
                           000000   266  FLASH_CR2_PRG = BIT0
                                    267 ; FLASH_FPR bits
                           000005   268  FLASH_FPR_WPB5 = BIT5
                           000004   269  FLASH_FPR_WPB4 = BIT4
                           000003   270  FLASH_FPR_WPB3 = BIT3
                           000002   271  FLASH_FPR_WPB2 = BIT2
                           000001   272  FLASH_FPR_WPB1 = BIT1
                           000000   273  FLASH_FPR_WPB0 = BIT0
                                    274 ; FLASH_NFPR bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000005   275  FLASH_NFPR_NWPB5 = BIT5
                           000004   276  FLASH_NFPR_NWPB4 = BIT4
                           000003   277  FLASH_NFPR_NWPB3 = BIT3
                           000002   278  FLASH_NFPR_NWPB2 = BIT2
                           000001   279  FLASH_NFPR_NWPB1 = BIT1
                           000000   280  FLASH_NFPR_NWPB0 = BIT0
                                    281 ; FLASH_IAPSR bits
                           000006   282  FLASH_IAPSR_HVOFF = BIT6
                           000003   283  FLASH_IAPSR_DUL = BIT3
                           000002   284  FLASH_IAPSR_EOP = BIT2
                           000001   285  FLASH_IAPSR_PUL = BIT1
                           000000   286  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    287 
                                    288 ; Interrupt control
                           0050A0   289  EXTI_CR1  = (0x50A0)
                           0050A1   290  EXTI_CR2  = (0x50A1)
                                    291 
                                    292 ; Reset Status
                           0050B3   293  RST_SR  = (0x50B3)
                                    294 
                                    295 ; Clock Registers
                           0050C0   296  CLK_ICKR  = (0x50c0)
                           0050C1   297  CLK_ECKR  = (0x50c1)
                           0050C3   298  CLK_CMSR  = (0x50C3)
                           0050C4   299  CLK_SWR  = (0x50C4)
                           0050C5   300  CLK_SWCR  = (0x50C5)
                           0050C6   301  CLK_CKDIVR  = (0x50C6)
                           0050C7   302  CLK_PCKENR1  = (0x50C7)
                           0050C8   303  CLK_CSSR  = (0x50C8)
                           0050C9   304  CLK_CCOR  = (0x50C9)
                           0050CA   305  CLK_PCKENR2  = (0x50CA)
                           0050CC   306  CLK_HSITRIMR  = (0x50CC)
                           0050CD   307  CLK_SWIMCCR  = (0x50CD)
                                    308 
                                    309 ; Peripherals clock gating
                                    310 ; CLK_PCKENR1 
                           000007   311  CLK_PCKENR1_TIM1 = (7)
                           000006   312  CLK_PCKENR1_TIM3 = (6)
                           000005   313  CLK_PCKENR1_TIM2 = (5)
                           000004   314  CLK_PCKENR1_TIM4 = (4)
                           000003   315  CLK_PCKENR1_UART3 = (3)
                           000002   316  CLK_PCKENR1_UART1 = (2)
                           000001   317  CLK_PCKENR1_SPI = (1)
                           000000   318  CLK_PCKENR1_I2C = (0)
                                    319 ; CLK_PCKENR2
                           000007   320  CLK_PCKENR2_CAN = (7)
                           000003   321  CLK_PCKENR2_ADC = (3)
                           000002   322  CLK_PCKENR2_AWU = (2)
                                    323 
                                    324 ; Clock bits
                           000005   325  CLK_ICKR_REGAH = (5)
                           000004   326  CLK_ICKR_LSIRDY = (4)
                           000003   327  CLK_ICKR_LSIEN = (3)
                           000002   328  CLK_ICKR_FHW = (2)
                           000001   329  CLK_ICKR_HSIRDY = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000000   330  CLK_ICKR_HSIEN = (0)
                                    331 
                           000001   332  CLK_ECKR_HSERDY = (1)
                           000000   333  CLK_ECKR_HSEEN = (0)
                                    334 ; clock source
                           0000E1   335  CLK_SWR_HSI = 0xE1
                           0000D2   336  CLK_SWR_LSI = 0xD2
                           0000B4   337  CLK_SWR_HSE = 0xB4
                                    338 
                           000003   339  CLK_SWCR_SWIF = (3)
                           000002   340  CLK_SWCR_SWIEN = (2)
                           000001   341  CLK_SWCR_SWEN = (1)
                           000000   342  CLK_SWCR_SWBSY = (0)
                                    343 
                           000004   344  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   345  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   346  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   347  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   348  CLK_CKDIVR_CPUDIV0 = (0)
                                    349 
                                    350 ; Watchdog
                           0050D1   351  WWDG_CR  = (0x50D1)
                           0050D2   352  WWDG_WR  = (0x50D2)
                           0050E0   353  IWDG_KR  = (0x50E0)
                           0050E1   354  IWDG_PR  = (0x50E1)
                           0050E2   355  IWDG_RLR  = (0x50E2)
                           0050F0   356  AWU_CSR1  = (0x50F0)
                           0050F1   357  AWU_APR  = (0x50F1)
                           0050F2   358  AWU_TBR  = (0x50F2)
                                    359 
                                    360 ; Beeper
                                    361 ; beeper output is alternate function AFR7 on PD4
                                    362 ; connected to CN9-6
                           0050F3   363  BEEP_CSR  = (0x50F3)
                           00000F   364  BEEP_PORT = PD
                           000004   365  BEEP_BIT = 4
                           000010   366  BEEP_MASK = B4_MASK
                                    367 
                                    368 ; SPI
                           005200   369  SPI_CR1  = (0x5200)
                           005201   370  SPI_CR2  = (0x5201)
                           005202   371  SPI_ICR  = (0x5202)
                           005203   372  SPI_SR  = (0x5203)
                           005204   373  SPI_DR  = (0x5204)
                           005205   374  SPI_CRCPR  = (0x5205)
                           005206   375  SPI_RXCRCR  = (0x5206)
                           005207   376  SPI_TXCRCR  = (0x5207)
                                    377 
                                    378 ; I2C
                           005210   379  I2C_CR1  = (0x5210)
                           005211   380  I2C_CR2  = (0x5211)
                           005212   381  I2C_FREQR  = (0x5212)
                           005213   382  I2C_OARL  = (0x5213)
                           005214   383  I2C_OARH  = (0x5214)
                           005216   384  I2C_DR  = (0x5216)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005217   385  I2C_SR1  = (0x5217)
                           005218   386  I2C_SR2  = (0x5218)
                           005219   387  I2C_SR3  = (0x5219)
                           00521A   388  I2C_ITR  = (0x521A)
                           00521B   389  I2C_CCRL  = (0x521B)
                           00521C   390  I2C_CCRH  = (0x521C)
                           00521D   391  I2C_TRISER  = (0x521D)
                           00521E   392  I2C_PECR  = (0x521E)
                                    393 
                           000007   394  I2C_CR1_NOSTRETCH = (7)
                           000006   395  I2C_CR1_ENGC = (6)
                           000000   396  I2C_CR1_PE = (0)
                                    397 
                           000007   398  I2C_CR2_SWRST = (7)
                           000003   399  I2C_CR2_POS = (3)
                           000002   400  I2C_CR2_ACK = (2)
                           000001   401  I2C_CR2_STOP = (1)
                           000000   402  I2C_CR2_START = (0)
                                    403 
                           000000   404  I2C_OARL_ADD0 = (0)
                                    405 
                           000009   406  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   407  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    408 
                           000007   409  I2C_OARH_ADDMODE = (7)
                           000006   410  I2C_OARH_ADDCONF = (6)
                           000002   411  I2C_OARH_ADD9 = (2)
                           000001   412  I2C_OARH_ADD8 = (1)
                                    413 
                           000007   414  I2C_SR1_TXE = (7)
                           000006   415  I2C_SR1_RXNE = (6)
                           000004   416  I2C_SR1_STOPF = (4)
                           000003   417  I2C_SR1_ADD10 = (3)
                           000002   418  I2C_SR1_BTF = (2)
                           000001   419  I2C_SR1_ADDR = (1)
                           000000   420  I2C_SR1_SB = (0)
                                    421 
                           000005   422  I2C_SR2_WUFH = (5)
                           000003   423  I2C_SR2_OVR = (3)
                           000002   424  I2C_SR2_AF = (2)
                           000001   425  I2C_SR2_ARLO = (1)
                           000000   426  I2C_SR2_BERR = (0)
                                    427 
                           000007   428  I2C_SR3_DUALF = (7)
                           000004   429  I2C_SR3_GENCALL = (4)
                           000002   430  I2C_SR3_TRA = (2)
                           000001   431  I2C_SR3_BUSY = (1)
                           000000   432  I2C_SR3_MSL = (0)
                                    433 
                           000002   434  I2C_ITR_ITBUFEN = (2)
                           000001   435  I2C_ITR_ITEVTEN = (1)
                           000000   436  I2C_ITR_ITERREN = (0)
                                    437 
                                    438 ; Precalculated values, all in KHz
                           000080   439  I2C_CCRH_16MHZ_FAST_400 = 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           00000D   440  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    441 ;
                                    442 ; Fast I2C mode max rise time = 300ns
                                    443 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    444 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    445 
                           000005   446  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    447 
                           0000C0   448  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   449  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   450  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    451 
                           000080   452  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   453  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   454  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    455 
                           000000   456  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   457  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    458 ;
                                    459 ; Standard I2C mode max rise time = 1000ns
                                    460 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    461 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    462 
                           000011   463  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    464 
                           000000   465  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   466  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   467  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    468 
                           000001   469  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   470  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   471  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    472 
                           000001   473  I2C_READ = 1
                           000000   474  I2C_WRITE = 0
                                    475 
                                    476 ; baudrate constant for brr_value table access
                           000000   477 B2400=0
                           000001   478 B4800=1
                           000002   479 B9600=2
                           000003   480 B19200=3
                           000004   481 B38400=4
                           000005   482 B57600=5
                           000006   483 B115200=6
                           000007   484 B230400=7
                           000008   485 B460800=8
                           000009   486 B921600=9
                                    487 
                                    488 ; UART1 
                           005230   489  UART1_SR    = (0x5230)
                           005231   490  UART1_DR    = (0x5231)
                           005232   491  UART1_BRR1  = (0x5232)
                           005233   492  UART1_BRR2  = (0x5233)
                           005234   493  UART1_CR1   = (0x5234)
                           005235   494  UART1_CR2   = (0x5235)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           005236   495  UART1_CR3   = (0x5236)
                           005237   496  UART1_CR4   = (0x5237)
                           005238   497  UART1_CR5   = (0x5238)
                           005239   498  UART1_GTR   = (0x5239)
                           00523A   499  UART1_PSCR  = (0x523A)
                                    500 
                                    501 ; UART3
                           005240   502  UART3_SR    = (0x5240)
                           005241   503  UART3_DR    = (0x5241)
                           005242   504  UART3_BRR1  = (0x5242)
                           005243   505  UART3_BRR2  = (0x5243)
                           005244   506  UART3_CR1   = (0x5244)
                           005245   507  UART3_CR2   = (0x5245)
                           005246   508  UART3_CR3   = (0x5246)
                           005247   509  UART3_CR4   = (0x5247)
                           004249   510  UART3_CR6   = (0x4249)
                                    511 
                                    512 ; UART Status Register bits
                           000007   513  UART_SR_TXE = (7)
                           000006   514  UART_SR_TC = (6)
                           000005   515  UART_SR_RXNE = (5)
                           000004   516  UART_SR_IDLE = (4)
                           000003   517  UART_SR_OR = (3)
                           000002   518  UART_SR_NF = (2)
                           000001   519  UART_SR_FE = (1)
                           000000   520  UART_SR_PE = (0)
                                    521 
                                    522 ; Uart Control Register bits
                           000007   523  UART_CR1_R8 = (7)
                           000006   524  UART_CR1_T8 = (6)
                           000005   525  UART_CR1_UARTD = (5)
                           000004   526  UART_CR1_M = (4)
                           000003   527  UART_CR1_WAKE = (3)
                           000002   528  UART_CR1_PCEN = (2)
                           000001   529  UART_CR1_PS = (1)
                           000000   530  UART_CR1_PIEN = (0)
                                    531 
                           000007   532  UART_CR2_TIEN = (7)
                           000006   533  UART_CR2_TCIEN = (6)
                           000005   534  UART_CR2_RIEN = (5)
                           000004   535  UART_CR2_ILIEN = (4)
                           000003   536  UART_CR2_TEN = (3)
                           000002   537  UART_CR2_REN = (2)
                           000001   538  UART_CR2_RWU = (1)
                           000000   539  UART_CR2_SBK = (0)
                                    540 
                           000006   541  UART_CR3_LINEN = (6)
                           000005   542  UART_CR3_STOP1 = (5)
                           000004   543  UART_CR3_STOP0 = (4)
                           000003   544  UART_CR3_CLKEN = (3)
                           000002   545  UART_CR3_CPOL = (2)
                           000001   546  UART_CR3_CPHA = (1)
                           000000   547  UART_CR3_LBCL = (0)
                                    548 
                           000006   549  UART_CR4_LBDIEN = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           000005   550  UART_CR4_LBDL = (5)
                           000004   551  UART_CR4_LBDF = (4)
                           000003   552  UART_CR4_ADD3 = (3)
                           000002   553  UART_CR4_ADD2 = (2)
                           000001   554  UART_CR4_ADD1 = (1)
                           000000   555  UART_CR4_ADD0 = (0)
                                    556 
                           000005   557  UART_CR5_SCEN = (5)
                           000004   558  UART_CR5_NACK = (4)
                           000003   559  UART_CR5_HDSEL = (3)
                           000002   560  UART_CR5_IRLP = (2)
                           000001   561  UART_CR5_IREN = (1)
                                    562 ; LIN mode config register
                           000007   563  UART_CR6_LDUM = (7)
                           000005   564  UART_CR6_LSLV = (5)
                           000004   565  UART_CR6_LASE = (4)
                           000002   566  UART_CR6_LHDIEN = (2) 
                           000001   567  UART_CR6_LHDF = (1)
                           000000   568  UART_CR6_LSF = (0)
                                    569 
                                    570 ; TIMERS
                                    571 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   572  TIM1_CR1  = (0x5250)
                           005251   573  TIM1_CR2  = (0x5251)
                           005252   574  TIM1_SMCR  = (0x5252)
                           005253   575  TIM1_ETR  = (0x5253)
                           005254   576  TIM1_IER  = (0x5254)
                           005255   577  TIM1_SR1  = (0x5255)
                           005256   578  TIM1_SR2  = (0x5256)
                           005257   579  TIM1_EGR  = (0x5257)
                           005258   580  TIM1_CCMR1  = (0x5258)
                           005259   581  TIM1_CCMR2  = (0x5259)
                           00525A   582  TIM1_CCMR3  = (0x525A)
                           00525B   583  TIM1_CCMR4  = (0x525B)
                           00525C   584  TIM1_CCER1  = (0x525C)
                           00525D   585  TIM1_CCER2  = (0x525D)
                           00525E   586  TIM1_CNTRH  = (0x525E)
                           00525F   587  TIM1_CNTRL  = (0x525F)
                           005260   588  TIM1_PSCRH  = (0x5260)
                           005261   589  TIM1_PSCRL  = (0x5261)
                           005262   590  TIM1_ARRH  = (0x5262)
                           005263   591  TIM1_ARRL  = (0x5263)
                           005264   592  TIM1_RCR  = (0x5264)
                           005265   593  TIM1_CCR1H  = (0x5265)
                           005266   594  TIM1_CCR1L  = (0x5266)
                           005267   595  TIM1_CCR2H  = (0x5267)
                           005268   596  TIM1_CCR2L  = (0x5268)
                           005269   597  TIM1_CCR3H  = (0x5269)
                           00526A   598  TIM1_CCR3L  = (0x526A)
                           00526B   599  TIM1_CCR4H  = (0x526B)
                           00526C   600  TIM1_CCR4L  = (0x526C)
                           00526D   601  TIM1_BKR  = (0x526D)
                           00526E   602  TIM1_DTR  = (0x526E)
                           00526F   603  TIM1_OISR  = (0x526F)
                                    604 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    605 ; Timer Control Register bits
                           000007   606  TIM_CR1_ARPE = (7)
                           000006   607  TIM_CR1_CMSH = (6)
                           000005   608  TIM_CR1_CMSL = (5)
                           000004   609  TIM_CR1_DIR = (4)
                           000003   610  TIM_CR1_OPM = (3)
                           000002   611  TIM_CR1_URS = (2)
                           000001   612  TIM_CR1_UDIS = (1)
                           000000   613  TIM_CR1_CEN = (0)
                                    614 
                           000006   615  TIM1_CR2_MMS2 = (6)
                           000005   616  TIM1_CR2_MMS1 = (5)
                           000004   617  TIM1_CR2_MMS0 = (4)
                           000002   618  TIM1_CR2_COMS = (2)
                           000000   619  TIM1_CR2_CCPC = (0)
                                    620 
                                    621 ; Timer Slave Mode Control bits
                           000007   622  TIM1_SMCR_MSM = (7)
                           000006   623  TIM1_SMCR_TS2 = (6)
                           000005   624  TIM1_SMCR_TS1 = (5)
                           000004   625  TIM1_SMCR_TS0 = (4)
                           000002   626  TIM1_SMCR_SMS2 = (2)
                           000001   627  TIM1_SMCR_SMS1 = (1)
                           000000   628  TIM1_SMCR_SMS0 = (0)
                                    629 
                                    630 ; Timer External Trigger Enable bits
                           000007   631  TIM1_ETR_ETP = (7)
                           000006   632  TIM1_ETR_ECE = (6)
                           000005   633  TIM1_ETR_ETPS1 = (5)
                           000004   634  TIM1_ETR_ETPS0 = (4)
                           000003   635  TIM1_ETR_ETF3 = (3)
                           000002   636  TIM1_ETR_ETF2 = (2)
                           000001   637  TIM1_ETR_ETF1 = (1)
                           000000   638  TIM1_ETR_ETF0 = (0)
                                    639 
                                    640 ; Timer Interrupt Enable bits
                           000007   641  TIM1_IER_BIE = (7)
                           000006   642  TIM1_IER_TIE = (6)
                           000005   643  TIM1_IER_COMIE = (5)
                           000004   644  TIM1_IER_CC4IE = (4)
                           000003   645  TIM1_IER_CC3IE = (3)
                           000002   646  TIM1_IER_CC2IE = (2)
                           000001   647  TIM1_IER_CC1IE = (1)
                           000000   648  TIM1_IER_UIE = (0)
                                    649 
                                    650 ; Timer Status Register bits
                           000007   651  TIM1_SR1_BIF = (7)
                           000006   652  TIM1_SR1_TIF = (6)
                           000005   653  TIM1_SR1_COMIF = (5)
                           000004   654  TIM1_SR1_CC4IF = (4)
                           000003   655  TIM1_SR1_CC3IF = (3)
                           000002   656  TIM1_SR1_CC2IF = (2)
                           000001   657  TIM1_SR1_CC1IF = (1)
                           000000   658  TIM1_SR1_UIF = (0)
                                    659 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000004   660  TIM1_SR2_CC4OF = (4)
                           000003   661  TIM1_SR2_CC3OF = (3)
                           000002   662  TIM1_SR2_CC2OF = (2)
                           000001   663  TIM1_SR2_CC1OF = (1)
                                    664 
                                    665 ; Timer Event Generation Register bits
                           000007   666  TIM1_EGR_BG = (7)
                           000006   667  TIM1_EGR_TG = (6)
                           000005   668  TIM1_EGR_COMG = (5)
                           000004   669  TIM1_EGR_CC4G = (4)
                           000003   670  TIM1_EGR_CC3G = (3)
                           000002   671  TIM1_EGR_CC2G = (2)
                           000001   672  TIM1_EGR_CC1G = (1)
                           000000   673  TIM1_EGR_UG = (0)
                                    674 
                                    675 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   676  TIM1_CCMR1_OC1CE = (7)
                           000006   677  TIM1_CCMR1_OC1M2 = (6)
                           000005   678  TIM1_CCMR1_OC1M1 = (5)
                           000004   679  TIM1_CCMR1_OC1M0 = (4)
                           000003   680  TIM1_CCMR1_OC1PE = (3)
                           000002   681  TIM1_CCMR1_OC1FE = (2)
                           000001   682  TIM1_CCMR1_CC1S1 = (1)
                           000000   683  TIM1_CCMR1_CC1S0 = (0)
                                    684 
                                    685 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   686  TIM1_CCMR1_IC1F3 = (7)
                           000006   687  TIM1_CCMR1_IC1F2 = (6)
                           000005   688  TIM1_CCMR1_IC1F1 = (5)
                           000004   689  TIM1_CCMR1_IC1F0 = (4)
                           000003   690  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   691  TIM1_CCMR1_IC1PSC0 = (2)
                                    692 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   693  TIM1_CCMR1_CC1S0 = (0)
                                    694 
                                    695 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   696  TIM1_CCMR2_OC2CE = (7)
                           000006   697  TIM1_CCMR2_OC2M2 = (6)
                           000005   698  TIM1_CCMR2_OC2M1 = (5)
                           000004   699  TIM1_CCMR2_OC2M0 = (4)
                           000003   700  TIM1_CCMR2_OC2PE = (3)
                           000002   701  TIM1_CCMR2_OC2FE = (2)
                           000001   702  TIM1_CCMR2_CC2S1 = (1)
                           000000   703  TIM1_CCMR2_CC2S0 = (0)
                                    704 
                                    705 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   706  TIM1_CCMR2_IC2F3 = (7)
                           000006   707  TIM1_CCMR2_IC2F2 = (6)
                           000005   708  TIM1_CCMR2_IC2F1 = (5)
                           000004   709  TIM1_CCMR2_IC2F0 = (4)
                           000003   710  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   711  TIM1_CCMR2_IC2PSC0 = (2)
                                    712 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   713  TIM1_CCMR2_CC2S0 = (0)
                                    714 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    715 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   716  TIM1_CCMR3_OC3CE = (7)
                           000006   717  TIM1_CCMR3_OC3M2 = (6)
                           000005   718  TIM1_CCMR3_OC3M1 = (5)
                           000004   719  TIM1_CCMR3_OC3M0 = (4)
                           000003   720  TIM1_CCMR3_OC3PE = (3)
                           000002   721  TIM1_CCMR3_OC3FE = (2)
                           000001   722  TIM1_CCMR3_CC3S1 = (1)
                           000000   723  TIM1_CCMR3_CC3S0 = (0)
                                    724 
                                    725 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   726  TIM1_CCMR3_IC3F3 = (7)
                           000006   727  TIM1_CCMR3_IC3F2 = (6)
                           000005   728  TIM1_CCMR3_IC3F1 = (5)
                           000004   729  TIM1_CCMR3_IC3F0 = (4)
                           000003   730  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   731  TIM1_CCMR3_IC3PSC0 = (2)
                                    732 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   733  TIM1_CCMR3_CC3S0 = (0)
                                    734 
                                    735 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   736  TIM1_CCMR4_OC4CE = (7)
                           000006   737  TIM1_CCMR4_OC4M2 = (6)
                           000005   738  TIM1_CCMR4_OC4M1 = (5)
                           000004   739  TIM1_CCMR4_OC4M0 = (4)
                           000003   740  TIM1_CCMR4_OC4PE = (3)
                           000002   741  TIM1_CCMR4_OC4FE = (2)
                           000001   742  TIM1_CCMR4_CC4S1 = (1)
                           000000   743  TIM1_CCMR4_CC4S0 = (0)
                                    744 
                                    745 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   746  TIM1_CCMR4_IC4F3 = (7)
                           000006   747  TIM1_CCMR4_IC4F2 = (6)
                           000005   748  TIM1_CCMR4_IC4F1 = (5)
                           000004   749  TIM1_CCMR4_IC4F0 = (4)
                           000003   750  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   751  TIM1_CCMR4_IC4PSC0 = (2)
                                    752 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   753  TIM1_CCMR4_CC4S0 = (0)
                                    754 
                                    755 ; Timer 2 - 16-bit timer
                           005300   756  TIM2_CR1  = (0x5300)
                           005301   757  TIM2_IER  = (0x5301)
                           005302   758  TIM2_SR1  = (0x5302)
                           005303   759  TIM2_SR2  = (0x5303)
                           005304   760  TIM2_EGR  = (0x5304)
                           005305   761  TIM2_CCMR1  = (0x5305)
                           005306   762  TIM2_CCMR2  = (0x5306)
                           005307   763  TIM2_CCMR3  = (0x5307)
                           005308   764  TIM2_CCER1  = (0x5308)
                           005309   765  TIM2_CCER2  = (0x5309)
                           00530A   766  TIM2_CNTRH  = (0x530A)
                           00530B   767  TIM2_CNTRL  = (0x530B)
                           00530C   768  TIM2_PSCR  = (0x530C)
                           00530D   769  TIM2_ARRH  = (0x530D)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           00530E   770  TIM2_ARRL  = (0x530E)
                           00530F   771  TIM2_CCR1H  = (0x530F)
                           005310   772  TIM2_CCR1L  = (0x5310)
                           005311   773  TIM2_CCR2H  = (0x5311)
                           005312   774  TIM2_CCR2L  = (0x5312)
                           005313   775  TIM2_CCR3H  = (0x5313)
                           005314   776  TIM2_CCR3L  = (0x5314)
                                    777 
                                    778 ; Timer 3
                           005320   779  TIM3_CR1  = (0x5320)
                           005321   780  TIM3_IER  = (0x5321)
                           005322   781  TIM3_SR1  = (0x5322)
                           005323   782  TIM3_SR2  = (0x5323)
                           005324   783  TIM3_EGR  = (0x5324)
                           005325   784  TIM3_CCMR1  = (0x5325)
                           005326   785  TIM3_CCMR2  = (0x5326)
                           005327   786  TIM3_CCER1  = (0x5327)
                           005328   787  TIM3_CNTRH  = (0x5328)
                           005329   788  TIM3_CNTRL  = (0x5329)
                           00532A   789  TIM3_PSCR  = (0x532A)
                           00532B   790  TIM3_ARRH  = (0x532B)
                           00532C   791  TIM3_ARRL  = (0x532C)
                           00532D   792  TIM3_CCR1H  = (0x532D)
                           00532E   793  TIM3_CCR1L  = (0x532E)
                           00532F   794  TIM3_CCR2H  = (0x532F)
                           005330   795  TIM3_CCR2L  = (0x5330)
                                    796 
                                    797 ; TIM3_CR1  fields
                           000000   798  TIM3_CR1_CEN = (0)
                           000001   799  TIM3_CR1_UDIS = (1)
                           000002   800  TIM3_CR1_URS = (2)
                           000003   801  TIM3_CR1_OPM = (3)
                           000007   802  TIM3_CR1_ARPE = (7)
                                    803 ; TIM3_CCR2  fields
                           000000   804  TIM3_CCMR2_CC2S_POS = (0)
                           000003   805  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   806  TIM3_CCMR2_OC2M_POS = (4)  
                                    807 ; TIM3_CCER1 fields
                           000000   808  TIM3_CCER1_CC1E = (0)
                           000001   809  TIM3_CCER1_CC1P = (1)
                           000004   810  TIM3_CCER1_CC2E = (4)
                           000005   811  TIM3_CCER1_CC2P = (5)
                                    812 ; TIM3_CCER2 fields
                           000000   813  TIM3_CCER2_CC3E = (0)
                           000001   814  TIM3_CCER2_CC3P = (1)
                                    815 
                                    816 ; Timer 4
                           005340   817  TIM4_CR1  = (0x5340)
                           005341   818  TIM4_IER  = (0x5341)
                           005342   819  TIM4_SR  = (0x5342)
                           005343   820  TIM4_EGR  = (0x5343)
                           005344   821  TIM4_CNTR  = (0x5344)
                           005345   822  TIM4_PSCR  = (0x5345)
                           005346   823  TIM4_ARR  = (0x5346)
                                    824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    825 ; Timer 4 bitmasks
                                    826 
                           000007   827  TIM4_CR1_ARPE = (7)
                           000003   828  TIM4_CR1_OPM = (3)
                           000002   829  TIM4_CR1_URS = (2)
                           000001   830  TIM4_CR1_UDIS = (1)
                           000000   831  TIM4_CR1_CEN = (0)
                                    832 
                           000000   833  TIM4_IER_UIE = (0)
                                    834 
                           000000   835  TIM4_SR_UIF = (0)
                                    836 
                           000000   837  TIM4_EGR_UG = (0)
                                    838 
                           000002   839  TIM4_PSCR_PSC2 = (2)
                           000001   840  TIM4_PSCR_PSC1 = (1)
                           000000   841  TIM4_PSCR_PSC0 = (0)
                                    842 
                           000000   843  TIM4_PSCR_1 = 0
                           000001   844  TIM4_PSCR_2 = 1
                           000002   845  TIM4_PSCR_4 = 2
                           000003   846  TIM4_PSCR_8 = 3
                           000004   847  TIM4_PSCR_16 = 4
                           000005   848  TIM4_PSCR_32 = 5
                           000006   849  TIM4_PSCR_64 = 6
                           000007   850  TIM4_PSCR_128 = 7
                                    851 
                                    852 ; ADC2
                           005400   853  ADC_CSR  = (0x5400)
                           005401   854  ADC_CR1  = (0x5401)
                           005402   855  ADC_CR2  = (0x5402)
                           005403   856  ADC_CR3  = (0x5403)
                           005404   857  ADC_DRH  = (0x5404)
                           005405   858  ADC_DRL  = (0x5405)
                           005406   859  ADC_TDRH  = (0x5406)
                           005407   860  ADC_TDRL  = (0x5407)
                                    861  
                                    862 ; ADC bitmasks
                                    863 
                           000007   864  ADC_CSR_EOC = (7)
                           000006   865  ADC_CSR_AWD = (6)
                           000005   866  ADC_CSR_EOCIE = (5)
                           000004   867  ADC_CSR_AWDIE = (4)
                           000003   868  ADC_CSR_CH3 = (3)
                           000002   869  ADC_CSR_CH2 = (2)
                           000001   870  ADC_CSR_CH1 = (1)
                           000000   871  ADC_CSR_CH0 = (0)
                                    872 
                           000006   873  ADC_CR1_SPSEL2 = (6)
                           000005   874  ADC_CR1_SPSEL1 = (5)
                           000004   875  ADC_CR1_SPSEL0 = (4)
                           000001   876  ADC_CR1_CONT = (1)
                           000000   877  ADC_CR1_ADON = (0)
                                    878 
                           000006   879  ADC_CR2_EXTTRIG = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   880  ADC_CR2_EXTSEL1 = (5)
                           000004   881  ADC_CR2_EXTSEL0 = (4)
                           000003   882  ADC_CR2_ALIGN = (3)
                           000001   883  ADC_CR2_SCAN = (1)
                                    884 
                           000007   885  ADC_CR3_DBUF = (7)
                           000006   886  ADC_CR3_DRH = (6)
                                    887 
                                    888 ; beCAN
                           005420   889  CAN_MCR = (0x5420)
                           005421   890  CAN_MSR = (0x5421)
                           005422   891  CAN_TSR = (0x5422)
                           005423   892  CAN_TPR = (0x5423)
                           005424   893  CAN_RFR = (0x5424)
                           005425   894  CAN_IER = (0x5425)
                           005426   895  CAN_DGR = (0x5426)
                           005427   896  CAN_FPSR = (0x5427)
                           005428   897  CAN_P0 = (0x5428)
                           005429   898  CAN_P1 = (0x5429)
                           00542A   899  CAN_P2 = (0x542A)
                           00542B   900  CAN_P3 = (0x542B)
                           00542C   901  CAN_P4 = (0x542C)
                           00542D   902  CAN_P5 = (0x542D)
                           00542E   903  CAN_P6 = (0x542E)
                           00542F   904  CAN_P7 = (0x542F)
                           005430   905  CAN_P8 = (0x5430)
                           005431   906  CAN_P9 = (0x5431)
                           005432   907  CAN_PA = (0x5432)
                           005433   908  CAN_PB = (0x5433)
                           005434   909  CAN_PC = (0x5434)
                           005435   910  CAN_PD = (0x5435)
                           005436   911  CAN_PE = (0x5436)
                           005437   912  CAN_PF = (0x5437)
                                    913 
                                    914 
                                    915 ; CPU
                           007F00   916  CPU_A  = (0x7F00)
                           007F01   917  CPU_PCE  = (0x7F01)
                           007F02   918  CPU_PCH  = (0x7F02)
                           007F03   919  CPU_PCL  = (0x7F03)
                           007F04   920  CPU_XH  = (0x7F04)
                           007F05   921  CPU_XL  = (0x7F05)
                           007F06   922  CPU_YH  = (0x7F06)
                           007F07   923  CPU_YL  = (0x7F07)
                           007F08   924  CPU_SPH  = (0x7F08)
                           007F09   925  CPU_SPL   = (0x7F09)
                           007F0A   926  CPU_CCR   = (0x7F0A)
                                    927 
                                    928 ; global configuration register
                           007F60   929  CFG_GCR   = (0x7F60)
                                    930 
                                    931 ; interrupt control registers
                           007F70   932  ITC_SPR1   = (0x7F70)
                           007F71   933  ITC_SPR2   = (0x7F71)
                           007F72   934  ITC_SPR3   = (0x7F72)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           007F73   935  ITC_SPR4   = (0x7F73)
                           007F74   936  ITC_SPR5   = (0x7F74)
                           007F75   937  ITC_SPR6   = (0x7F75)
                           007F76   938  ITC_SPR7   = (0x7F76)
                           007F77   939  ITC_SPR8   = (0x7F77)
                                    940 
                                    941 ; SWIM, control and status register
                           007F80   942  SWIM_CSR   = (0x7F80)
                                    943 ; debug registers
                           007F90   944  DM_BK1RE   = (0x7F90)
                           007F91   945  DM_BK1RH   = (0x7F91)
                           007F92   946  DM_BK1RL   = (0x7F92)
                           007F93   947  DM_BK2RE   = (0x7F93)
                           007F94   948  DM_BK2RH   = (0x7F94)
                           007F95   949  DM_BK2RL   = (0x7F95)
                           007F96   950  DM_CR1   = (0x7F96)
                           007F97   951  DM_CR2   = (0x7F97)
                           007F98   952  DM_CSR1   = (0x7F98)
                           007F99   953  DM_CSR2   = (0x7F99)
                           007F9A   954  DM_ENFCTR   = (0x7F9A)
                                    955 
                                    956 ; Interrupt Numbers
                           000000   957  INT_TLI = 0
                           000001   958  INT_AWU = 1
                           000002   959  INT_CLK = 2
                           000003   960  INT_EXTI0 = 3
                           000004   961  INT_EXTI1 = 4
                           000005   962  INT_EXTI2 = 5
                           000006   963  INT_EXTI3 = 6
                           000007   964  INT_EXTI4 = 7
                           000008   965  INT_CAN_RX = 8
                           000009   966  INT_CAN_TX = 9
                           00000A   967  INT_SPI = 10
                           00000B   968  INT_TIM1_OVF = 11
                           00000C   969  INT_TIM1_CCM = 12
                           00000D   970  INT_TIM2_OVF = 13
                           00000E   971  INT_TIM2_CCM = 14
                           00000F   972  INT_TIM3_OVF = 15
                           000010   973  INT_TIM3_CCM = 16
                           000011   974  INT_UART1_TX_COMPLETED = 17
                           000012   975  INT_AUART1_RX_FULL = 18
                           000013   976  INT_I2C = 19
                           000014   977  INT_UART3_TX_COMPLETED = 20
                           000015   978  INT_UART3_RX_FULL = 21
                           000016   979  INT_ADC2 = 22
                           000017   980  INT_TIM4_OVF = 23
                           000018   981  INT_FLASH = 24
                                    982 
                                    983 ; Interrupt Vectors
                           008000   984  INT_VECTOR_RESET = 0x8000
                           008004   985  INT_VECTOR_TRAP = 0x8004
                           008008   986  INT_VECTOR_TLI = 0x8008
                           00800C   987  INT_VECTOR_AWU = 0x800C
                           008010   988  INT_VECTOR_CLK = 0x8010
                           008014   989  INT_VECTOR_EXTI0 = 0x8014
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           008018   990  INT_VECTOR_EXTI1 = 0x8018
                           00801C   991  INT_VECTOR_EXTI2 = 0x801C
                           008020   992  INT_VECTOR_EXTI3 = 0x8020
                           008024   993  INT_VECTOR_EXTI4 = 0x8024
                           008028   994  INT_VECTOR_CAN_RX = 0x8028
                           00802C   995  INT_VECTOR_CAN_TX = 0x802c
                           008030   996  INT_VECTOR_SPI = 0x8030
                           008034   997  INT_VECTOR_TIM1_OVF = 0x8034
                           008038   998  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C   999  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1000  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1001  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1002  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1003  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1004  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1005  INT_VECTOR_I2C = 0x8054
                           008058  1006  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1007  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1008  INT_VECTOR_ADC2 = 0x8060
                           008064  1009  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1010  INT_VECTOR_FLASH = 0x8068
                                   1011 
                                   1012  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                     13 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13jul10cht
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       EF12, Version 2.1, 18apr00cht
                                     48 ;               move to 8000H replacing WHYP.
                                     49 ;               copy interrupt vectors from WHYPFLSH.S19
                                     50 ;               to EF12.S19 before flashing
                                     51 ;               add TICKS1 and DELAY1 for motor stepping
                                     52 ;
                                     53 ;       EF12, 02/18/00, C. H. Ting
                                     54 ;       Adapt 86eForth v2.02 to 68HC12.
                                     55 ;               Use WHYP to seed EF12.ASM
                                     56 ;               Use AS12 native 68HC12 assembler:
                                     57 ;               as12 ef12.asm >ef12.lst
                                     58 ;       EF12A, add ADC code, 02mar00cht
                                     59 ;       EF12B, 01mar00cht
                                     60 ;               stack to 0x78, return stack to 0xf8.
                                     61 ;               add all port definitions
                                     62 ;               add PWM registers
                                     63 ;               add SPI registers and code
                                     64 ;       EF12C, 12mar00cht
                                     65 ;               add MAX5250 D/A converter
                                     66 ;       EF12D, 15mar00cht
                                     67 ;               add all the Lexel interface words
                                     68 ;       EF12E, 18apr00cht, save for reference
                                     69 ;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     70 ;       Copyright (c) 2000
                                     71 ;       Dr. C. H. Ting
                                     72 ;       156 14th Avenue
                                     73 ;       San Mateo, CA 94402
                                     74 ;       (650) 571-7639
                                     75 ;
                                     76 ;=========================================================
                                     77         .area SSEG (ABS) ; STACK
      001700                         78         .org 0x1700
      001700                         79         .ds 256 
                                     80 ;*********************************************************
                                     81 	.area DATA (ABS) ; eForth variables
      000000                         82         .org RAM_BASE
      000000                         83         .ds 0x80
                                     84 
                                     85         .area HOME ; vectors table
      000000 82 00 00 00             86 	int main	        ; reset
      000004 82 00 00 11             87 	int NonHandledInterrupt	; trap
      000008 82 00 00 11             88 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 11             89 	int NonHandledInterrupt	; irq1
      000010 82 00 00 11             90 	int NonHandledInterrupt	; irq2
      000014 82 00 00 11             91 	int NonHandledInterrupt	; irq3
      000018 82 00 00 11             92 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 11             93 	int NonHandledInterrupt	; irq5
      000020 82 00 00 11             94 	int NonHandledInterrupt	; irq6
      000024 82 00 00 11             95 	int NonHandledInterrupt	; irq7
      000028 82 00 00 11             96 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 11             97 	int NonHandledInterrupt	; irq9
      000030 82 00 00 11             98 	int NonHandledInterrupt	; irq10
      000034 82 00 00 11             99 	int NonHandledInterrupt	; irq11
      000038 82 00 00 11            100 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 11            101 	int NonHandledInterrupt	; irq13
      000040 82 00 00 11            102 	int NonHandledInterrupt	; irq14
      000044 82 00 00 11            103 	int NonHandledInterrupt	; irq15
      000048 82 00 00 11            104 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 11            105 	int NonHandledInterrupt	; irq17
      000050 82 00 00 11            106 	int NonHandledInterrupt	; irq18
      000054 82 00 00 11            107 	int NonHandledInterrupt	; irq19
      000058 82 00 00 11            108 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 11            109 	int NonHandledInterrupt	; irq21
      000060 82 00 00 11            110 	int NonHandledInterrupt	; irq22
      000064 82 00 00 11            111 	int NonHandledInterrupt	; irq23
      000068 82 00 00 11            112 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 11            113 	int NonHandledInterrupt	; irq25
      000070 82 00 00 11            114 	int NonHandledInterrupt	; irq26
      000074 82 00 00 11            115 	int NonHandledInterrupt	; irq27
      000078 82 00 00 11            116 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 11            117 	int NonHandledInterrupt	; irq29
                                    118 
                                    119 ;--------------------------------------------------------- 
                                    120 
                                    121 ;*********************************************************
                                    122 ;	Assembler constants
                                    123 ;*********************************************************
                           000000   124 RAMBASE =	0x0000	   ;ram base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           0017FF   125 STACK   =	0x17FF	;system (return) stack empty 
                           0016F0   126 DATSTK  =	0x16F0	;data stack  empty
                           001700   127 TIBBASE =       0X1700  ; tib addr.
                                    128 ;******  System Variables  ******
                           00001A   129 XTEMP	=	26	;address called by CREATE
                           00001C   130 YTEMP	=	28	;address called by CREATE
                           00001A   131 PROD1 = 26	;space for UM*
                           00001C   132 PROD2 = 28
                           00001E   133 PROD3 = 30
                           000020   134 CARRY = 32
                           000022   135 SP0	=	34	 ;initial data stack pointer
                           000024   136 RP0	=	36	;initial return stack pointer
                                    137 
                                    138 ;***********************************************
                                    139 ;; Version control
                                    140 
                           000002   141 VER     =     2         ;major release version
                           000001   142 EXT     =     1         ;minor extension
                                    143 
                                    144 ;; Constants
                                    145 
                           00FFFF   146 TRUEE   =     0xFFFF      ;true flag
                                    147 
                           000040   148 COMPO   =     0x40     ;lexicon compile only bit
                           000080   149 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   150 MASKK   =     0x1F7F  ;lexicon bit mask
                                    151 
                           000002   152 CELLL   =     2       ;size of a cell
                           00000A   153 BASEE   =     10      ;default radix
                           000008   154 BKSPP   =     8       ;back space
                           00000A   155 LF      =     10      ;line feed
                           00000D   156 CRR     =     13      ;carriage return
                           00001B   157 ERR     =     27      ;error escape
                           000027   158 TIC     =     39      ;tick
                           0000CD   159 CALLL   =     0xCD     ;CALL opcodes
                                    160 
                                    161 ;; Memory allocation
                                    162 
                           000006   163 UPP     =     RAMBASE+6
                           0017FF   164 SPP     =     RAMBASE+STACK
                           0016F0   165 RPP     =     RAMBASE+DATSTK
                           001700   166 TIBB    =     RAMBASE+TIBBASE
                           000080   167 CTOP    =     RAMBASE+0x80
                                    168 
                                    169         .macro _ledon
                                    170         bset PC_ODR,#LED2_BIT
                                    171         .endm
                                    172 
                                    173         .macro _ledoff
                                    174         bres PC_ODR,#LED2_BIT
                                    175         .endm
                                    176 
                                    177         .area CODE
                                    178 ;; Main entry points and COLD start data
      000000                        179 main:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                    180 ; clear all RAM
      000000 AE 00 00         [ 2]  181 	ldw X,#RAMBASE
      000003                        182 clear_ram0:
      000003 7F               [ 1]  183 	clr (X)
      000004 5C               [ 1]  184 	incw X
      000005 A3 17 FF         [ 2]  185 	cpw X,#RAM_END
      000008 23 F9            [ 2]  186 	jrule clear_ram0
                                    187 
                                    188 ; initialize SP
      00000A AE 17 FF         [ 2]  189 	ldw X,#STACK
      00000D 94               [ 1]  190 	ldw SP,X
      00000E CC 00 16         [ 2]  191 	jp ORIG
                                    192 
                                    193 ; non handled interrupt reset MCU
      000011                        194 NonHandledInterrupt:
      000011 A6 80            [ 1]  195         ld a, #0x80
      000013 C7 50 D1         [ 1]  196         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    197 	;iret
                                    198 
      000016                        199 ORIG:   
      000016 AE 17 FF         [ 2]  200         LDW     X,#STACK  ;initialize return stack
      000019 94               [ 1]  201         LDW     SP,X
      00001A BF 24            [ 2]  202         LDW     RP0,X
      00001C AE 16 F0         [ 2]  203         LDW     X,#DATSTK ;initialize data stack
      00001F BF 22            [ 2]  204         LDW     SP0,X
                                    205 ; initialize PC_5 as output to control LED2
      000021 72 1A 50 0D      [ 1]  206         bset PC_CR1,#LED2_BIT
      000025 72 1A 50 0E      [ 1]  207         bset PC_CR2,#LED2_BIT
      000029 72 1A 50 0C      [ 1]  208         bset PC_DDR,#LED2_BIT
      00002D                        209         _ledoff
      00002D 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    210 ; initialize clock to HSE
                                    211 ; switch to external 8 Mhz crystal 
      000031                        212 clock_init:	
      000031 72 12 50 C5      [ 1]  213 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000035 A6 B4            [ 1]  214 	ld a,#CLK_SWR_HSE
      000037 C7 50 C4         [ 1]  215 	ld CLK_SWR,a
      00003A C1 50 C3         [ 1]  216 1$:	cp a,CLK_CMSR
      00003D 26 FB            [ 1]  217 	jrne 1$
                                    218 ; initialize UART3, 115200 8N1
      00003F                        219 uart3_init:
      00003F 72 16 50 C7      [ 1]  220 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
                                    221 	; configure tx pin
      000043 72 1A 50 11      [ 1]  222 	bset PD_DDR,#BIT5 ; tx pin
      000047 72 1A 50 12      [ 1]  223 	bset PD_CR1,#BIT5 ; push-pull output
      00004B 72 1A 50 13      [ 1]  224 	bset PD_CR2,#BIT5 ; fast output
                                    225 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00004F 35 05 52 43      [ 1]  226 	mov UART3_BRR2,#0x05 ; must be loaded first
      000053 35 04 52 42      [ 1]  227 	mov UART3_BRR1,#0x4
      000057 35 2C 52 45      [ 1]  228 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN))
      00005B CC 14 F1         [ 2]  229         JP      COLD   ;default=MN1
                                    230 
                                    231 ; COLD start initiates these variables.
      00005E                        232 UZERO:
      00005E 00 0A                  233         .word      BASEE   ;BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000060 00 00                  234         .word      0       ;tmp
      000062 00 00                  235         .word      0       ;>IN
      000064 00 00                  236         .word      0       ;#TIB
      000066 17 00                  237         .word      TIBB    ;TIB
      000068 0F 1B                  238         .word      INTER   ;'EVAL
      00006A 00 00                  239         .word      0       ;HLD
      00006C 14 EC                  240         .word       LASTN   ;CONTEXT pointer
      00006E 00 80                  241         .word       CTOP   ;CP in RAM
      000070 14 EC                  242         .word      LASTN   ;LAST
      000072 00 00                  243 ULAST:  .word      0
                                    244 
                                    245         .area CODE
                                    246 ;; Device dependent I/O
                                    247 ;       All channeled to DOS 21H services
                                    248 
                                    249 ;       ?RX     ( -- c T | F )
                                    250 ;         Return input byte and true, or false.
      000074 00 00                  251         .word      0
                           000076   252 LINK	= .
      000076 04                     253         .byte      4
      000077 3F 4B 45 59            254         .ascii     "?KEY"
      00007B                        255 QKEY:
      00007B 72 0B 52 40 12   [ 2]  256         BTJF UART3_SR,#5,INCH   ;check status
      000080 C6 52 41         [ 1]  257         LD    A,UART3_DR   ;get char in A
      000083 1D 00 02         [ 2]  258 	SUBW	X,#2
      000086 E7 01            [ 1]  259         LD     (1,X),A
      000088 7F               [ 1]  260 	CLR	(X)
      000089 1D 00 02         [ 2]  261 	SUBW	X,#2
      00008C 90 AE FF FF      [ 2]  262         LDW     Y,#0xFFFF
      000090 FF               [ 2]  263         LDW     (X),Y
      000091 81               [ 4]  264         RET
      000092 90 5F            [ 1]  265 INCH:   CLRW	Y
      000094 1D 00 02         [ 2]  266 	SUBW	X,#2
      000097 FF               [ 2]  267         LDW     (X),Y
      000098 81               [ 4]  268         RET
                                    269 
                                    270 ;       TX!     ( c -- )
                                    271 ;       Send character c to  output device.
      000099 00 76                  272         .word      LINK
                           00009B   273 LINK	= .
      00009B 04                     274         .byte      4
      00009C 45 4D 49 54            275         .ascii     "EMIT"
      0000A0                        276 EMIT:
      0000A0 E6 01            [ 1]  277         LD     A,(1,X)
      0000A2 1C 00 02         [ 2]  278 	ADDW	X,#2
      0000A5 72 0F 52 40 FB   [ 2]  279 OUTPUT: BTJF UART3_SR,#7,OUTPUT  ;loop until tdre
      0000AA C7 52 41         [ 1]  280         LD    UART3_DR,A   ;send A
      0000AD 81               [ 4]  281         RET
                                    282 
                                    283 ;; The kernel
                                    284 
                                    285 ;       doLIT   ( -- w )
                                    286 ;       Push an inline literal.
      0000AE 00 9B                  287         .word      LINK
                           0000B0   288 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0000B0 45                     289 	.byte      COMPO+5
      0000B1 64 6F 4C 69 74         290         .ascii     "doLit"
      0000B6                        291 DOLIT:
      0000B6 1D 00 02         [ 2]  292 	SUBW X,#2
      0000B9 90 85            [ 2]  293         POPW Y
      0000BB 90 BF 1C         [ 2]  294 	LDW YTEMP,Y
      0000BE 90 FE            [ 2]  295 	LDW Y,(Y)
      0000C0 FF               [ 2]  296         LDW (X),Y
      0000C1 90 BE 1C         [ 2]  297         LDW Y,YTEMP
      0000C4 90 EC 02         [ 2]  298 	JP (2,Y)
                                    299 
                                    300 ;       next    ( -- )
                                    301 ;       Code for  single index loop.
      0000C7 00 B0                  302         .word      LINK
                           0000C9   303 LINK	= 	.
      0000C9 44                     304 	.byte      COMPO+4
      0000CA 6E 65 78 74            305         .ascii     "next"
      0000CE                        306 DONXT:
      0000CE 16 03            [ 2]  307         LDW Y,(3,SP)
      0000D0 90 5A            [ 2]  308         DECW Y
      0000D2 2A 07            [ 1]  309         JRPL NEX1
      0000D4 90 85            [ 2]  310 	POPW Y
      0000D6 84               [ 1]  311 	POP A
      0000D7 84               [ 1]  312 	POP A
      0000D8 90 EC 02         [ 2]  313         JP (2,Y)
      0000DB 17 03            [ 2]  314 NEX1:   LDW (3,SP),Y
      0000DD 90 85            [ 2]  315         POPW Y
      0000DF 90 FE            [ 2]  316 	LDW Y,(Y)
      0000E1 90 FC            [ 2]  317 	JP (Y)
                                    318 
                                    319 ;       ?branch ( f -- )
                                    320 ;       Branch if flag is zero.
      0000E3 00 C9                  321         .word      LINK
                           0000E5   322 LINK	= 	.
      0000E5 47                     323 	.byte      COMPO+7
      0000E6 3F 62 72 61 6E 63 68   324         .ascii     "?branch"
      0000ED                        325 QBRAN:	
      0000ED 90 93            [ 1]  326         LDW Y,X
      0000EF 1C 00 02         [ 2]  327 	ADDW X,#2
      0000F2 90 FE            [ 2]  328 	LDW Y,(Y)
      0000F4 27 0E            [ 1]  329         JREQ     BRAN
      0000F6 90 85            [ 2]  330 	POPW Y
      0000F8 90 EC 02         [ 2]  331 	JP (2,Y)
                                    332         
                                    333 ;       branch  ( -- )
                                    334 ;       Branch to an inline address.
      0000FB 00 E5                  335         .word      LINK
                           0000FD   336 LINK	= 	.
      0000FD 46                     337 	.byte      COMPO+6
      0000FE 62 72 61 6E 63 68      338         .ascii     "branch"
      000104                        339 BRAN:
      000104 90 85            [ 2]  340         POPW Y
      000106 90 FE            [ 2]  341 	LDW Y,(Y)
      000108 90 FC            [ 2]  342         JP     (Y)
                                    343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    344 ;       EXECUTE ( ca -- )
                                    345 ;       Execute  word at ca.
      00010A 00 FD                  346         .word      LINK
                           00010C   347 LINK	= 	.
      00010C 07                     348         .byte       7
      00010D 45 58 45 43 55 54 45   349         .ascii     "EXECUTE"
      000114                        350 EXECU:
      000114 90 93            [ 1]  351         LDW Y,X
      000116 1C 00 02         [ 2]  352 	ADDW X,#2
      000119 90 FE            [ 2]  353 	LDW     Y,(Y)
      00011B 90 FC            [ 2]  354         JP     (Y)
                                    355 
                                    356 ;       EXIT    ( -- )
                                    357 ;       Terminate a colon definition.
      00011D 01 0C                  358         .word      LINK
                           00011F   359 LINK = .
      00011F 04                     360         .byte      4
      000120 45 58 49 54            361         .ascii     "EXIT"
      000124                        362 EXIT:
      000124 90 85            [ 2]  363         POPW Y
      000126 81               [ 4]  364         RET
                                    365 
                                    366 ;       !       ( w a -- )
                                    367 ;       Pop  data stack to memory.
      000127 01 1F                  368         .word      LINK
                           000129   369 LINK = .
      000129 01                     370         .byte      1
      00012A 21                     371         .ascii     "!"
      00012B                        372 STORE:
      00012B 90 93            [ 1]  373         LDW Y,X
      00012D 90 FE            [ 2]  374         LDW Y,(Y)    ;Y=a
      00012F 90 BF 1C         [ 2]  375         LDW YTEMP,Y
      000132 90 93            [ 1]  376         LDW Y,X
      000134 90 EE 02         [ 2]  377         LDW Y,(2,Y)
      000137 91 CF 1C         [ 5]  378         LDW [YTEMP],Y
      00013A 1C 00 04         [ 2]  379         ADDW X,#4 ;store w at a
      00013D 81               [ 4]  380         RET     
                                    381 
                                    382 ;       @       ( a -- w )
                                    383 ;       Push memory location to stack.
      00013E 01 29                  384         .word      LINK
                           000140   385 LINK	= 	.
      000140 01                     386         .byte    1
      000141 40                     387         .ascii	"@"
      000142                        388 AT:
      000142 90 93            [ 1]  389         LDW Y,X     ;Y = a
      000144 90 FE            [ 2]  390         LDW Y,(Y)
      000146 90 FE            [ 2]  391         LDW Y,(Y)
      000148 FF               [ 2]  392         LDW (X),Y ;w = @Y
      000149 81               [ 4]  393         RET     
                                    394 
                                    395 ;       C!      ( c b -- )
                                    396 ;       Pop  data stack to byte memory.
      00014A 01 40                  397         .word      LINK
                           00014C   398 LINK	= .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00014C 02                     399         .byte      2
      00014D 43 21                  400         .ascii     "C!"
      00014F                        401 CSTOR:
      00014F 90 93            [ 1]  402         LDW Y,X
      000151 90 FE            [ 2]  403 	LDW Y,(Y)    ;Y=b
      000153 E6 03            [ 1]  404         LD A,(3,X)    ;D = c
      000155 90 F7            [ 1]  405         LD  (Y),A     ;store c at b
      000157 1C 00 04         [ 2]  406 	ADDW X,#4
      00015A 81               [ 4]  407         RET     
                                    408 
                                    409 ;       C@      ( b -- c )
                                    410 ;       Push byte in memory to  stack.
      00015B 01 4C                  411         .word      LINK
                           00015D   412 LINK	= 	.
      00015D 02                     413         .byte      2
      00015E 43 40                  414         .ascii     "C@"
      000160                        415 CAT:
      000160 90 93            [ 1]  416         LDW Y,X     ;Y=b
      000162 90 FE            [ 2]  417         LDW Y,(Y)
      000164 90 F6            [ 1]  418         LD A,(Y)
      000166 E7 01            [ 1]  419         LD (1,X),A
      000168 7F               [ 1]  420         CLR (X)
      000169 81               [ 4]  421         RET     
                                    422 
                                    423 ;       RP@     ( -- a )
                                    424 ;       Push current RP to data stack.
      00016A 01 5D                  425         .word      LINK
                           00016C   426 LINK	= .
      00016C 03                     427         .byte      3
      00016D 72 70 40               428         .ascii     "rp@"
      000170                        429 RPAT:
      000170 90 96            [ 1]  430         LDW Y,SP    ;save return addr
      000172 1D 00 02         [ 2]  431         SUBW X,#2
      000175 FF               [ 2]  432         LDW (X),Y
      000176 81               [ 4]  433         RET     
                                    434 
                                    435 ;       RP!     ( a -- )
                                    436 ;       Set  return stack pointer.
      000177 01 6C                  437         .word      LINK
                           000179   438 LINK	= 	. 
      000179 43                     439 	.byte      COMPO+3
      00017A 72 70 21               440         .ascii     "rp!"
      00017D                        441 RPSTO:
      00017D 90 85            [ 2]  442         POPW Y
      00017F 90 BF 1C         [ 2]  443         LDW YTEMP,Y
      000182 90 93            [ 1]  444         LDW Y,X
      000184 90 FE            [ 2]  445         LDW Y,(Y)
      000186 90 94            [ 1]  446         LDW SP,Y
      000188 92 CC 1C         [ 5]  447         JP [YTEMP]
                                    448 
                                    449 ;       R>      ( -- w )
                                    450 ;       Pop return stack to data stack.
      00018B 01 79                  451         .word      LINK
                           00018D   452 LINK	= 	. 
      00018D 42                     453 	.byte      COMPO+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00018E 52 3E                  454         .ascii     "R>"
      000190                        455 RFROM:
      000190 90 85            [ 2]  456         POPW Y    ;save return addr
      000192 90 BF 1C         [ 2]  457         LDW YTEMP,Y
      000195 90 85            [ 2]  458         POPW Y
      000197 1D 00 02         [ 2]  459         SUBW X,#2
      00019A FF               [ 2]  460         LDW (X),Y
      00019B 92 CC 1C         [ 5]  461         JP [YTEMP]
                                    462 
                                    463 ;       R@      ( -- w )
                                    464 ;       Copy top of return stack to stack.
      00019E 01 8D                  465         .word      LINK
                           0001A0   466 LINK	= 	. 
      0001A0 02                     467         .byte      2
      0001A1 52 40                  468         .ascii     "R@"
      0001A3                        469 RAT:
      0001A3 90 85            [ 2]  470         POPW Y
      0001A5 90 BF 1C         [ 2]  471         LDW YTEMP,Y
      0001A8 90 85            [ 2]  472         POPW Y
      0001AA 90 89            [ 2]  473         PUSHW Y
      0001AC 1D 00 02         [ 2]  474         SUBW X,#2
      0001AF FF               [ 2]  475         LDW (X),Y
      0001B0 92 CC 1C         [ 5]  476         JP [YTEMP]
                                    477 
                                    478 ;       >R      ( w -- )
                                    479 ;       Push data stack to return stack.
      0001B3 01 A0                  480         .word      LINK
                           0001B5   481 LINK	= 	. 
      0001B5 42                     482 	.byte      COMPO+2
      0001B6 3E 52                  483         .ascii     ">R"
      0001B8                        484 TOR:
      0001B8 90 85            [ 2]  485         POPW Y    ;save return addr
      0001BA 90 BF 1C         [ 2]  486         LDW YTEMP,Y
      0001BD 90 93            [ 1]  487         LDW Y,X
      0001BF 90 FE            [ 2]  488         LDW Y,(Y)
      0001C1 90 89            [ 2]  489         PUSHW Y    ;restore return addr
      0001C3 1C 00 02         [ 2]  490         ADDW X,#2
      0001C6 92 CC 1C         [ 5]  491         JP [YTEMP]
                                    492 
                                    493 ;       SP@     ( -- a )
                                    494 ;       Push current stack pointer.
      0001C9 01 B5                  495         .word      LINK
                           0001CB   496 LINK	= 	. 
      0001CB 03                     497         .byte      3
      0001CC 73 70 40               498         .ascii     "sp@"
      0001CF                        499 SPAT:
      0001CF 90 93            [ 1]  500 	LDW Y,X
      0001D1 1D 00 02         [ 2]  501         SUBW X,#2
      0001D4 FF               [ 2]  502 	LDW (X),Y
      0001D5 81               [ 4]  503         RET     
                                    504 
                                    505 ;       SP!     ( a -- )
                                    506 ;       Set  data stack pointer.
      0001D6 01 CB                  507         .word      LINK
                           0001D8   508 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0001D8 03                     509         .byte      3
      0001D9 73 70 21               510         .ascii     "sp!"
      0001DC                        511 SPSTO:
      0001DC FE               [ 2]  512         LDW     X,(X)     ;X = a
      0001DD 81               [ 4]  513         RET     
                                    514 
                                    515 ;       DROP    ( w -- )
                                    516 ;       Discard top stack item.
      0001DE 01 D8                  517         .word      LINK
                           0001E0   518 LINK	= 	. 
      0001E0 04                     519         .byte      4
      0001E1 44 52 4F 50            520         .ascii     "DROP"
      0001E5                        521 DROP:
      0001E5 1C 00 02         [ 2]  522         ADDW X,#2     
      0001E8 81               [ 4]  523         RET     
                                    524 
                                    525 ;       DUP     ( w -- w w )
                                    526 ;       Duplicate  top stack item.
      0001E9 01 E0                  527         .word      LINK
                           0001EB   528 LINK	= 	. 
      0001EB 03                     529         .byte      3
      0001EC 44 55 50               530         .ascii     "DUP"
      0001EF                        531 DUPP:
      0001EF 90 93            [ 1]  532 				LDW Y,X
      0001F1 1D 00 02         [ 2]  533         SUBW X,#2
      0001F4 90 FE            [ 2]  534 				LDW Y,(Y)
      0001F6 FF               [ 2]  535 				LDW (X),Y
      0001F7 81               [ 4]  536         RET     
                                    537 
                                    538 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    539 ;       Exchange top two stack items.
      0001F8 01 EB                  540         .word      LINK
                           0001FA   541 LINK	= 	. 
      0001FA 04                     542         .byte      4
      0001FB 53 57 41 50            543         .ascii     "SWAP"
      0001FF                        544 SWAPP:
      0001FF 90 93            [ 1]  545         LDW Y,X
      000201 90 FE            [ 2]  546         LDW Y,(Y)
      000203 90 BF 1C         [ 2]  547         LDW YTEMP,Y
      000206 90 93            [ 1]  548         LDW Y,X
      000208 90 EE 02         [ 2]  549         LDW Y,(2,Y)
      00020B FF               [ 2]  550         LDW (X),Y
      00020C 90 BE 1C         [ 2]  551         LDW Y,YTEMP
      00020F EF 02            [ 2]  552         LDW (2,X),Y
      000211 81               [ 4]  553         RET     
                                    554 
                                    555 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    556 ;       Copy second stack item to top.
      000212 01 FA                  557         .word      LINK
                           000214   558 LINK	= . 
      000214 04                     559         .byte      4
      000215 4F 56 45 52            560         .ascii     "OVER"
      000219                        561 OVER:
      000219 1D 00 02         [ 2]  562         SUBW X,#2
      00021C 90 93            [ 1]  563         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00021E 90 EE 04         [ 2]  564         LDW Y,(4,Y)
      000221 FF               [ 2]  565         LDW (X),Y
      000222 81               [ 4]  566         RET     
                                    567 
                                    568 ;       0<      ( n -- t )
                                    569 ;       Return true if n is negative.
      000223 02 14                  570         .word      LINK
                           000225   571 LINK	= . 
      000225 02                     572         .byte      2
      000226 30 3C                  573         .ascii     "0<"
      000228                        574 ZLESS:
      000228 A6 FF            [ 1]  575         LD A,#0xFF
      00022A 90 93            [ 1]  576         LDW Y,X
      00022C 90 FE            [ 2]  577         LDW Y,(Y)
      00022E 2B 01            [ 1]  578         JRMI     ZL1
      000230 4F               [ 1]  579         CLR A   ;false
      000231 F7               [ 1]  580 ZL1:    LD     (X),A
      000232 E7 01            [ 1]  581         LD (1,X),A
      000234 81               [ 4]  582 	RET     
                                    583 
                                    584 ;       AND     ( w w -- w )
                                    585 ;       Bitwise AND.
      000235 02 25                  586         .word      LINK
                           000237   587 LINK	= . 
      000237 03                     588         .byte      3
      000238 41 4E 44               589         .ascii     "AND"
      00023B                        590 ANDD:
      00023B F6               [ 1]  591         LD  A,(X)    ;D=w
      00023C E4 02            [ 1]  592         AND A,(2,X)
      00023E E7 02            [ 1]  593         LD (2,X),A
      000240 E6 01            [ 1]  594         LD A,(1,X)
      000242 E4 03            [ 1]  595         AND A,(3,X)
      000244 E7 03            [ 1]  596         LD (3,X),A
      000246 1C 00 02         [ 2]  597         ADDW X,#2
      000249 81               [ 4]  598         RET
                                    599 
                                    600 ;       OR      ( w w -- w )
                                    601 ;       Bitwise inclusive OR.
      00024A 02 37                  602         .word      LINK
                           00024C   603 LINK = . 
      00024C 02                     604         .byte      2
      00024D 4F 52                  605         .ascii     "OR"
      00024F                        606 ORR:
      00024F F6               [ 1]  607         LD A,(X)    ;D=w
      000250 EA 02            [ 1]  608         OR A,(2,X)
      000252 E7 02            [ 1]  609         LD (2,X),A
      000254 E6 01            [ 1]  610         LD A,(1,X)
      000256 EA 03            [ 1]  611         OR A,(3,X)
      000258 E7 03            [ 1]  612         LD (3,X),A
      00025A 1C 00 02         [ 2]  613         ADDW X,#2
      00025D 81               [ 4]  614         RET
                                    615 
                                    616 ;       XOR     ( w w -- w )
                                    617 ;       Bitwise exclusive OR.
      00025E 02 4C                  618         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000260   619 LINK	= . 
      000260 03                     620         .byte      3
      000261 58 4F 52               621         .ascii     "XOR"
      000264                        622 XORR:
      000264 F6               [ 1]  623         LD A,(X)    ;D=w
      000265 E8 02            [ 1]  624         XOR A,(2,X)
      000267 E7 02            [ 1]  625         LD (2,X),A
      000269 E6 01            [ 1]  626         LD A,(1,X)
      00026B E8 03            [ 1]  627         XOR A,(3,X)
      00026D E7 03            [ 1]  628         LD (3,X),A
      00026F 1C 00 02         [ 2]  629         ADDW X,#2
      000272 81               [ 4]  630         RET
                                    631 
                                    632 ;       UM+     ( u u -- udsum )
                                    633 ;       Add two unsigned single
                                    634 ;       and return a double sum.
      000273 02 60                  635         .word      LINK
                           000275   636 LINK	= . 
      000275 03                     637         .byte      3
      000276 55 4D 2B               638         .ascii     "UM+"
      000279                        639 UPLUS:
      000279 A6 01            [ 1]  640         LD A,#1
      00027B 90 93            [ 1]  641         LDW Y,X
      00027D 90 EE 02         [ 2]  642         LDW Y,(2,Y)
      000280 90 BF 1C         [ 2]  643         LDW YTEMP,Y
      000283 90 93            [ 1]  644         LDW Y,X
      000285 90 FE            [ 2]  645         LDW Y,(Y)
      000287 72 B9 00 1C      [ 2]  646         ADDW Y,YTEMP
      00028B EF 02            [ 2]  647         LDW (2,X),Y
      00028D 25 01            [ 1]  648         JRC     UPL1
      00028F 4F               [ 1]  649         CLR A
      000290 E7 01            [ 1]  650 UPL1:   LD     (1,X),A
      000292 7F               [ 1]  651         CLR (X)
      000293 81               [ 4]  652         RET
                                    653 
                                    654 ;; System and user variables
                                    655 
                                    656 ;       doVAR   ( -- a )
                                    657 ;       Code for VARIABLE and CREATE.
      000294 02 75                  658         .word      LINK
                           000296   659 LINK	= . 
      000296 45                     660 	.byte      COMPO+5
      000297 64 6F 56 61 72         661         .ascii     "doVar"
      00029C                        662 DOVAR:
      00029C 1D 00 02         [ 2]  663 	SUBW X,#2
      00029F 90 85            [ 2]  664         POPW Y    ;get return addr (pfa)
      0002A1 FF               [ 2]  665         LDW (X),Y    ;push on stack
      0002A2 81               [ 4]  666         RET     ;go to RET of EXEC
                                    667 
                                    668 ;       BASE    ( -- a )
                                    669 ;       Radix base for numeric I/O.
      0002A3 02 96                  670         .word      LINK        
                           0002A5   671 LINK = . 
      0002A5 04                     672         .byte      4
      0002A6 42 41 53 45            673         .ascii     "BASE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0002AA                        674 BASE:
      0002AA 90 AE 00 06      [ 2]  675 	LDW Y,#RAMBASE+6
      0002AE 1D 00 02         [ 2]  676 	SUBW X,#2
      0002B1 FF               [ 2]  677         LDW (X),Y
      0002B2 81               [ 4]  678         RET
                                    679 
                                    680 ;       tmp     ( -- a )
                                    681 ;       A temporary storage.
      0002B3 02 A5                  682         .word      LINK
                                    683         
                           0002B5   684 LINK = . 
      0002B5 03                     685 	.byte      3
      0002B6 74 6D 70               686         .ascii     "tmp"
      0002B9                        687 TEMP:
      0002B9 90 AE 00 08      [ 2]  688 	LDW Y,#RAMBASE+8
      0002BD 1D 00 02         [ 2]  689 	SUBW X,#2
      0002C0 FF               [ 2]  690         LDW (X),Y
      0002C1 81               [ 4]  691         RET
                                    692 
                                    693 ;       >IN     ( -- a )
                                    694 ;        Hold parsing pointer.
      0002C2 02 B5                  695         .word      LINK
                           0002C4   696 LINK = . 
      0002C4 03                     697         .byte      3
      0002C5 3E 49 4E               698         .ascii    ">IN"
      0002C8                        699 INN:
      0002C8 90 AE 00 0A      [ 2]  700 	LDW Y,#RAMBASE+10
      0002CC 1D 00 02         [ 2]  701 	SUBW X,#2
      0002CF FF               [ 2]  702         LDW (X),Y
      0002D0 81               [ 4]  703         RET
                                    704 
                                    705 ;       #TIB    ( -- a )
                                    706 ;       Count in terminal input buffer.
      0002D1 02 C4                  707         .word      LINK
                           0002D3   708 LINK = . 
      0002D3 04                     709         .byte      4
      0002D4 23 54 49 42            710         .ascii     "#TIB"
      0002D8                        711 NTIB:
      0002D8 90 AE 00 0C      [ 2]  712 	LDW Y,#RAMBASE+12
      0002DC 1D 00 02         [ 2]  713 	SUBW X,#2
      0002DF FF               [ 2]  714         LDW (X),Y
      0002E0 81               [ 4]  715         RET
                                    716 
                                    717 ;       "EVAL   ( -- a )
                                    718 ;       Execution vector of EVAL.
      0002E1 02 D3                  719         .word      LINK
                           0002E3   720 LINK = . 
      0002E3 05                     721         .byte      5
      0002E4 27 65 76 61 6C         722         .ascii     "'eval"
      0002E9                        723 TEVAL:
      0002E9 90 AE 00 10      [ 2]  724 	LDW Y,#RAMBASE+16
      0002ED 1D 00 02         [ 2]  725 	SUBW X,#2
      0002F0 FF               [ 2]  726         LDW (X),Y
      0002F1 81               [ 4]  727         RET
                                    728 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    729 ;       HLD     ( -- a )
                                    730 ;       Hold a pointer of output string.
      0002F2 02 E3                  731         .word      LINK
                           0002F4   732 LINK = . 
      0002F4 03                     733         .byte      3
      0002F5 68 6C 64               734         .ascii     "hld"
      0002F8                        735 HLD:
      0002F8 90 AE 00 12      [ 2]  736 	LDW Y,#RAMBASE+18
      0002FC 1D 00 02         [ 2]  737 	SUBW X,#2
      0002FF FF               [ 2]  738         LDW (X),Y
      000300 81               [ 4]  739         RET
                                    740 
                                    741 ;       CONTEXT ( -- a )
                                    742 ;       Start vocabulary search.
      000301 02 F4                  743         .word      LINK
                           000303   744 LINK = . 
      000303 07                     745         .byte      7
      000304 43 4F 4E 54 45 58 54   746         .ascii     "CONTEXT"
      00030B                        747 CNTXT:
      00030B 90 AE 00 14      [ 2]  748 	LDW Y,#RAMBASE+20
      00030F 1D 00 02         [ 2]  749 	SUBW X,#2
      000312 FF               [ 2]  750         LDW (X),Y
      000313 81               [ 4]  751         RET
                                    752 
                                    753 ;       CP      ( -- a )
                                    754 ;       Point to top of dictionary.
      000314 03 03                  755         .word      LINK
                           000316   756 LINK = . 
      000316 02                     757         .byte      2
      000317 63 70                  758         .ascii     "cp"
      000319                        759 CPP:
      000319 90 AE 00 16      [ 2]  760 	LDW Y,#RAMBASE+22
      00031D 1D 00 02         [ 2]  761 	SUBW X,#2
      000320 FF               [ 2]  762         LDW (X),Y
      000321 81               [ 4]  763         RET
                                    764 
                                    765 ;       LAST    ( -- a )
                                    766 ;       Point to last name in dictionary.
      000322 03 16                  767         .word      LINK
                           000324   768 LINK = . 
      000324 04                     769         .byte      4
      000325 6C 61 73 74            770         .ascii     "last"
      000329                        771 LAST:
      000329 90 AE 00 18      [ 2]  772 	LDW Y,#RAMBASE+24
      00032D 1D 00 02         [ 2]  773 	SUBW X,#2
      000330 FF               [ 2]  774         LDW (X),Y
      000331 81               [ 4]  775         RET
                                    776 
                                    777 ;; Common functions
                                    778 
                                    779 ;       ?DUP    ( w -- w w | 0 )
                                    780 ;       Dup tos if its is not zero.
      000332 03 24                  781         .word      LINK
                           000334   782 LINK = . 
      000334 04                     783         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000335 3F 44 55 50            784         .ascii     "?DUP"
      000339                        785 QDUP:
      000339 90 93            [ 1]  786         LDW Y,X
      00033B 90 FE            [ 2]  787 	LDW Y,(Y)
      00033D 27 04            [ 1]  788         JREQ     QDUP1
      00033F 1D 00 02         [ 2]  789 	SUBW X,#2
      000342 FF               [ 2]  790         LDW (X),Y
      000343 81               [ 4]  791 QDUP1:  RET
                                    792 
                                    793 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    794 ;       Rot 3rd item to top.
      000344 03 34                  795         .word      LINK
                           000346   796 LINK = . 
      000346 03                     797         .byte      3
      000347 52 4F 54               798         .ascii     "ROT"
      00034A                        799 ROT:
      00034A 90 93            [ 1]  800         LDW Y,X
      00034C 90 EE 04         [ 2]  801 	LDW Y,(4,Y)
      00034F 90 BF 1C         [ 2]  802 	LDW YTEMP,Y
      000352 90 93            [ 1]  803         LDW Y,X
      000354 90 EE 02         [ 2]  804         LDW Y,(2,Y)
      000357 90 BF 1A         [ 2]  805         LDW XTEMP,Y
      00035A 90 93            [ 1]  806         LDW Y,X
      00035C 90 FE            [ 2]  807         LDW Y,(Y)
      00035E EF 02            [ 2]  808         LDW (2,X),Y
      000360 90 BE 1A         [ 2]  809         LDW Y,XTEMP
      000363 EF 04            [ 2]  810         LDW (4,X),Y
      000365 90 BE 1C         [ 2]  811         LDW Y,YTEMP
      000368 FF               [ 2]  812         LDW (X),Y
      000369 81               [ 4]  813         RET
                                    814 
                                    815 ;       2DROP   ( w w -- )
                                    816 ;       Discard two items on stack.
      00036A 03 46                  817         .word      LINK
                           00036C   818 LINK = . 
      00036C 05                     819         .byte      5
      00036D 32 44 52 4F 50         820         .ascii     "2DROP"
      000372                        821 DDROP:
      000372 1C 00 04         [ 2]  822         ADDW X,#4
      000375 81               [ 4]  823         RET
                                    824 
                                    825 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    826 ;       Duplicate top two items.
      000376 03 6C                  827         .word      LINK
                           000378   828 LINK = . 
      000378 04                     829         .byte      4
      000379 32 44 55 50            830         .ascii     "2DUP"
      00037D                        831 DDUP:
      00037D 1D 00 04         [ 2]  832         SUBW X,#4
      000380 90 93            [ 1]  833         LDW Y,X
      000382 90 EE 06         [ 2]  834         LDW Y,(6,Y)
      000385 EF 02            [ 2]  835         LDW (2,X),Y
      000387 90 93            [ 1]  836         LDW Y,X
      000389 90 EE 04         [ 2]  837         LDW Y,(4,Y)
      00038C FF               [ 2]  838         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00038D 81               [ 4]  839         RET
                                    840 
                                    841 ;       +       ( w w -- sum )
                                    842 ;       Add top two items.
      00038E 03 78                  843         .word      LINK
                           000390   844 LINK = . 
      000390 01                     845         .byte      1
      000391 2B                     846         .ascii     "+"
      000392                        847 PLUS:
      000392 90 93            [ 1]  848         LDW Y,X
      000394 90 FE            [ 2]  849         LDW Y,(Y)
      000396 90 BF 1C         [ 2]  850         LDW YTEMP,Y
      000399 1C 00 02         [ 2]  851         ADDW X,#2
      00039C 90 93            [ 1]  852         LDW Y,X
      00039E 90 FE            [ 2]  853         LDW Y,(Y)
      0003A0 72 B9 00 1C      [ 2]  854         ADDW Y,YTEMP
      0003A4 FF               [ 2]  855         LDW (X),Y
      0003A5 81               [ 4]  856         RET
                                    857 
                                    858 ;       NOT     ( w -- w )
                                    859 ;       One's complement of tos.
      0003A6 03 90                  860         .word      LINK
                           0003A8   861 LINK = . 
      0003A8 03                     862         .byte      3
      0003A9 4E 4F 54               863         .ascii     "NOT"
      0003AC                        864 INVER:
      0003AC 90 93            [ 1]  865         LDW Y,X
      0003AE 90 FE            [ 2]  866         LDW Y,(Y)
      0003B0 90 53            [ 2]  867         CPLW Y
      0003B2 FF               [ 2]  868         LDW (X),Y
      0003B3 81               [ 4]  869         RET
                                    870 
                                    871 ;       NEGATE  ( n -- -n )
                                    872 ;       Two's complement of tos.
      0003B4 03 A8                  873         .word      LINK
                           0003B6   874 LINK = . 
      0003B6 06                     875         .byte      6
      0003B7 4E 45 47 41 54 45      876         .ascii     "NEGATE"
      0003BD                        877 NEGAT:
      0003BD 90 93            [ 1]  878         LDW Y,X
      0003BF 90 FE            [ 2]  879         LDW Y,(Y)
      0003C1 90 50            [ 2]  880         NEGW Y
      0003C3 FF               [ 2]  881         LDW (X),Y
      0003C4 81               [ 4]  882         RET
                                    883 
                                    884 ;       DNEGATE ( d -- -d )
                                    885 ;       Two's complement of top double.
      0003C5 03 B6                  886         .word      LINK
                           0003C7   887 LINK = . 
      0003C7 07                     888         .byte      7
      0003C8 44 4E 45 47 41 54 45   889         .ascii     "DNEGATE"
      0003CF                        890 DNEGA:
      0003CF 90 93            [ 1]  891         LDW Y,X
      0003D1 90 FE            [ 2]  892 	LDW Y,(Y)
      0003D3 90 53            [ 2]  893         CPLW Y     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0003D5 90 BF 1C         [ 2]  894 	LDW YTEMP,Y
      0003D8 90 93            [ 1]  895         LDW Y,X
      0003DA 90 EE 02         [ 2]  896         LDW Y,(2,Y)
      0003DD 90 53            [ 2]  897         CPLW Y
      0003DF 90 5C            [ 1]  898         INCW Y
      0003E1 EF 02            [ 2]  899         LDW (2,X),Y
      0003E3 90 BE 1C         [ 2]  900         LDW Y,YTEMP
      0003E6 24 02            [ 1]  901         JRNC DN1 
      0003E8 90 5C            [ 1]  902         INCW Y
      0003EA FF               [ 2]  903 DN1:    LDW (X),Y
      0003EB 81               [ 4]  904         RET
                                    905 
                                    906 ;       -       ( n1 n2 -- n1-n2 )
                                    907 ;       Subtraction.
      0003EC 03 C7                  908         .word      LINK
                           0003EE   909 LINK = . 
      0003EE 01                     910         .byte      1
      0003EF 2D                     911         .ascii     "-"
      0003F0                        912 SUBB:
      0003F0 90 93            [ 1]  913         LDW Y,X
      0003F2 90 FE            [ 2]  914         LDW Y,(Y)
      0003F4 90 BF 1C         [ 2]  915         LDW YTEMP,Y
      0003F7 1C 00 02         [ 2]  916         ADDW X,#2
      0003FA 90 93            [ 1]  917         LDW Y,X
      0003FC 90 FE            [ 2]  918         LDW Y,(Y)
      0003FE 72 B2 00 1C      [ 2]  919         SUBW Y,YTEMP
      000402 FF               [ 2]  920         LDW (X),Y
      000403 81               [ 4]  921         RET
                                    922 
                                    923 ;       ABS     ( n -- n )
                                    924 ;       Return  absolute value of n.
      000404 03 EE                  925         .word      LINK
                           000406   926 LINK = . 
      000406 03                     927         .byte      3
      000407 41 42 53               928         .ascii     "ABS"
      00040A                        929 ABSS:
      00040A 90 93            [ 1]  930         LDW Y,X
      00040C 90 FE            [ 2]  931 	LDW Y,(Y)
      00040E 2A 03            [ 1]  932         JRPL     AB1     ;negate:
      000410 90 50            [ 2]  933         NEGW     Y     ;else negate hi byte
      000412 FF               [ 2]  934         LDW (X),Y
      000413 81               [ 4]  935 AB1:    RET
                                    936 
                                    937 ;       =       ( w w -- t )
                                    938 ;       Return true if top two are =al.
      000414 04 06                  939         .word      LINK
                           000416   940 LINK = . 
      000416 01                     941         .byte      1
      000417 3D                     942         .ascii     "="
      000418                        943 EQUAL:
      000418 A6 FF            [ 1]  944         LD A,#0xFF  ;true
      00041A 90 93            [ 1]  945         LDW Y,X    ;D = n2
      00041C 90 FE            [ 2]  946         LDW Y,(Y)
      00041E 90 BF 1C         [ 2]  947         LDW YTEMP,Y
      000421 1C 00 02         [ 2]  948         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000424 90 93            [ 1]  949         LDW Y,X
      000426 90 FE            [ 2]  950         LDW Y,(Y)
      000428 90 B3 1C         [ 2]  951         CPW Y,YTEMP     ;if n2 <> n1
      00042B 27 01            [ 1]  952         JREQ     EQ1
      00042D 4F               [ 1]  953         CLR A
      00042E F7               [ 1]  954 EQ1:    LD (X),A
      00042F E7 01            [ 1]  955         LD (1,X),A
      000431 81               [ 4]  956 	RET     
                                    957 
                                    958 ;       U<      ( u u -- t )
                                    959 ;       Unsigned compare of top two items.
      000432 04 16                  960         .word      LINK
                           000434   961 LINK = . 
      000434 02                     962         .byte      2
      000435 55 3C                  963         .ascii     "U<"
      000437                        964 ULESS:
      000437 A6 FF            [ 1]  965         LD A,#0xFF  ;true
      000439 90 93            [ 1]  966         LDW Y,X    ;D = n2
      00043B 90 FE            [ 2]  967         LDW Y,(Y)
      00043D 90 BF 1C         [ 2]  968         LDW YTEMP,Y
      000440 1C 00 02         [ 2]  969         ADDW X,#2
      000443 90 93            [ 1]  970         LDW Y,X
      000445 90 FE            [ 2]  971         LDW Y,(Y)
      000447 90 B3 1C         [ 2]  972         CPW Y,YTEMP     ;if n2 <> n1
      00044A 25 01            [ 1]  973         JRULT     ULES1
      00044C 4F               [ 1]  974         CLR A
      00044D F7               [ 1]  975 ULES1:  LD (X),A
      00044E E7 01            [ 1]  976         LD (1,X),A
      000450 81               [ 4]  977 	RET     
                                    978 
                                    979 ;       <       ( n1 n2 -- t )
                                    980 ;       Signed compare of top two items.
      000451 04 34                  981         .word      LINK
                           000453   982 LINK = . 
      000453 01                     983         .byte      1
      000454 3C                     984         .ascii     "<"
      000455                        985 LESS:
      000455 A6 FF            [ 1]  986         LD A,#0xFF  ;true
      000457 90 93            [ 1]  987         LDW Y,X    ;D = n2
      000459 90 FE            [ 2]  988         LDW Y,(Y)
      00045B 90 BF 1C         [ 2]  989         LDW YTEMP,Y
      00045E 1C 00 02         [ 2]  990         ADDW X,#2
      000461 90 93            [ 1]  991         LDW Y,X
      000463 90 FE            [ 2]  992         LDW Y,(Y)
      000465 90 B3 1C         [ 2]  993         CPW Y,YTEMP     ;if n2 <> n1
      000468 2F 01            [ 1]  994         JRSLT     LT1
      00046A 4F               [ 1]  995         CLR A
      00046B F7               [ 1]  996 LT1:    LD (X),A
      00046C E7 01            [ 1]  997         LD (1,X),A
      00046E 81               [ 4]  998 	RET     
                                    999 
                                   1000 ;       MAX     ( n n -- n )
                                   1001 ;       Return greater of two top items.
      00046F 04 53                 1002         .word      LINK
                           000471  1003 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000471 03                    1004         .byte      3
      000472 4D 41 58              1005         .ascii     "MAX"
      000475                       1006 MAX:
      000475 90 93            [ 1] 1007         LDW Y,X    ;D = n2
      000477 90 EE 02         [ 2] 1008         LDW Y,(2,Y)
      00047A 90 BF 1C         [ 2] 1009         LDW YTEMP,Y
      00047D 90 93            [ 1] 1010         LDW Y,X
      00047F 90 FE            [ 2] 1011         LDW Y,(Y)
      000481 90 B3 1C         [ 2] 1012         CPW Y,YTEMP     ;if n2 <> n1
      000484 2F 02            [ 1] 1013         JRSLT     MAX1
      000486 EF 02            [ 2] 1014         LDW (2,X),Y
      000488 1C 00 02         [ 2] 1015 MAX1:   ADDW X,#2
      00048B 81               [ 4] 1016 	RET     
                                   1017 
                                   1018 ;       MIN     ( n n -- n )
                                   1019 ;       Return smaller of top two items.
      00048C 04 71                 1020         .word      LINK
                           00048E  1021 LINK = . 
      00048E 03                    1022         .byte      3
      00048F 4D 49 4E              1023         .ascii     "MIN"
      000492                       1024 MIN:
      000492 90 93            [ 1] 1025         LDW Y,X    ;D = n2
      000494 90 EE 02         [ 2] 1026         LDW Y,(2,Y)
      000497 90 BF 1C         [ 2] 1027         LDW YTEMP,Y
      00049A 90 93            [ 1] 1028         LDW Y,X
      00049C 90 FE            [ 2] 1029         LDW Y,(Y)
      00049E 90 B3 1C         [ 2] 1030         CPW Y,YTEMP     ;if n2 <> n1
      0004A1 2C 02            [ 1] 1031         JRSGT     MIN1
      0004A3 EF 02            [ 2] 1032         LDW (2,X),Y
      0004A5 1C 00 02         [ 2] 1033 MIN1:	ADDW X,#2
      0004A8 81               [ 4] 1034 	RET     
                                   1035 
                                   1036 ;       WITHIN  ( u ul uh -- t )
                                   1037 ;       Return true if u is within
                                   1038 ;       range of ul and uh. ( ul <= u < uh )
      0004A9 04 8E                 1039         .word      LINK
                           0004AB  1040 LINK = . 
      0004AB 06                    1041         .byte      6
      0004AC 57 49 54 48 49 4E     1042         .ascii     "WITHIN"
      0004B2                       1043 WITHI:
      0004B2 CD 02 19         [ 4] 1044         CALL     OVER
      0004B5 CD 03 F0         [ 4] 1045         CALL     SUBB
      0004B8 CD 01 B8         [ 4] 1046         CALL     TOR
      0004BB CD 03 F0         [ 4] 1047         CALL     SUBB
      0004BE CD 01 90         [ 4] 1048         CALL     RFROM
      0004C1 CC 04 37         [ 2] 1049         JP     ULESS
                                   1050 
                                   1051 ;; Divide
                                   1052 
                                   1053 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1054 ;       Unsigned divide of a double by a
                                   1055 ;       single. Return mod and quotient.
      0004C4 04 AB                 1056         .word      LINK
                           0004C6  1057 LINK = . 
      0004C6 06                    1058         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      0004C7 55 4D 2F 4D 4F 44     1059         .ascii     "UM/MOD"
      0004CD                       1060 UMMOD:
      0004CD BF 1A            [ 2] 1061 	LDW XTEMP,X	; save stack pointer
      0004CF FE               [ 2] 1062 	LDW X,(X)		; un
      0004D0 BF 1C            [ 2] 1063 	LDW YTEMP,X ; save un
      0004D2 90 BE 1A         [ 2] 1064 	LDW Y,XTEMP	; stack pointer
      0004D5 90 EE 04         [ 2] 1065 	LDW Y,(4,Y) ; Y=udl
      0004D8 BE 1A            [ 2] 1066 	LDW X,XTEMP
      0004DA EE 02            [ 2] 1067 	LDW X,(2,X)	; X=udh
      0004DC B3 1C            [ 2] 1068 	CPW X,YTEMP
      0004DE 23 0F            [ 2] 1069 	JRULE MMSM1
      0004E0 BE 1A            [ 2] 1070 	LDW X,XTEMP
      0004E2 1C 00 02         [ 2] 1071 	ADDW X,#2	; pop off 1 level
      0004E5 90 AE FF FF      [ 2] 1072 	LDW Y,#0xFFFF
      0004E9 FF               [ 2] 1073 	LDW (X),Y
      0004EA 90 5F            [ 1] 1074 	CLRW Y
      0004EC EF 02            [ 2] 1075 	LDW (2,X),Y
      0004EE 81               [ 4] 1076 	RET
      0004EF                       1077 MMSM1:
      0004EF A6 11            [ 1] 1078 	LD A,#17	; loop count
      0004F1                       1079 MMSM3:
      0004F1 B3 1C            [ 2] 1080 	CPW X,YTEMP	; compare udh to un
      0004F3 25 04            [ 1] 1081 	JRULT MMSM4	; can't subtract
      0004F5 72 B0 00 1C      [ 2] 1082 	SUBW X,YTEMP	; can subtract
      0004F9                       1083 MMSM4:
      0004F9 8C               [ 1] 1084 	CCF	; quotient bit
      0004FA 90 59            [ 2] 1085 	RLCW Y	; rotate into quotient
      0004FC 59               [ 2] 1086 	RLCW X	; rotate into remainder
      0004FD 4A               [ 1] 1087 	DEC A	; repeat
      0004FE 22 F1            [ 1] 1088 	JRUGT MMSM3
      000500 57               [ 2] 1089 	SRAW X
      000501 BF 1C            [ 2] 1090 	LDW YTEMP,X	; done, save remainder
      000503 BE 1A            [ 2] 1091 	LDW X,XTEMP
      000505 1C 00 02         [ 2] 1092 	ADDW X,#2	; drop
      000508 FF               [ 2] 1093 	LDW (X),Y
      000509 90 BE 1C         [ 2] 1094 	LDW Y,YTEMP	; save quotient
      00050C EF 02            [ 2] 1095 	LDW (2,X),Y
      00050E 81               [ 4] 1096 	RET
                                   1097 	
                                   1098 ;       M/MOD   ( d n -- r q )
                                   1099 ;       Signed floored divide of double by
                                   1100 ;       single. Return mod and quotient.
      00050F 04 C6                 1101         .word      LINK
                           000511  1102 LINK = . 
      000511 05                    1103         .byte      5
      000512 4D 2F 4D 4F 44        1104         .ascii     "M/MOD"
q     000517                       1105         .triple  0x4488aa
      000517                       1106 MSMOD:  
      000517 CD 01 EF         [ 4] 1107         CALL	DUPP
      00051A CD 02 28         [ 4] 1108         CALL	ZLESS
      00051D CD 01 EF         [ 4] 1109         CALL	DUPP
      000520 CD 01 B8         [ 4] 1110         CALL	TOR
      000523 CD 00 ED         [ 4] 1111         CALL	QBRAN
      000526 05 34                 1112         .word	MMOD1
      000528 CD 03 BD         [ 4] 1113         CALL	NEGAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00052B CD 01 B8         [ 4] 1114         CALL	TOR
      00052E CD 03 CF         [ 4] 1115         CALL	DNEGA
      000531 CD 01 90         [ 4] 1116         CALL	RFROM
      000534 CD 01 B8         [ 4] 1117 MMOD1:	CALL	TOR
      000537 CD 01 EF         [ 4] 1118         CALL	DUPP
      00053A CD 02 28         [ 4] 1119         CALL	ZLESS
      00053D CD 00 ED         [ 4] 1120         CALL	QBRAN
      000540 05 48                 1121         .word	MMOD2
      000542 CD 01 A3         [ 4] 1122         CALL	RAT
      000545 CD 03 92         [ 4] 1123         CALL	PLUS
      000548 CD 01 90         [ 4] 1124 MMOD2:	CALL	RFROM
      00054B CD 04 CD         [ 4] 1125         CALL	UMMOD
      00054E CD 01 90         [ 4] 1126         CALL	RFROM
      000551 CD 00 ED         [ 4] 1127         CALL	QBRAN
      000554 05 5F                 1128         .word	MMOD3
      000556 CD 01 FF         [ 4] 1129         CALL	SWAPP
      000559 CD 03 BD         [ 4] 1130         CALL	NEGAT
      00055C CD 01 FF         [ 4] 1131         CALL	SWAPP
      00055F 81               [ 4] 1132 MMOD3:	RET
                                   1133 
                                   1134 ;       /MOD    ( n n -- r q )
                                   1135 ;       Signed divide. Return mod and quotient.
      000560 05 11                 1136         .word      LINK
                           000562  1137 LINK = . 
      000562 04                    1138         .byte      4
      000563 2F 4D 4F 44           1139         .ascii     "/MOD"
      000567                       1140 SLMOD:
      000567 CD 02 19         [ 4] 1141         CALL	OVER
      00056A CD 02 28         [ 4] 1142         CALL	ZLESS
      00056D CD 01 FF         [ 4] 1143         CALL	SWAPP
      000570 CC 05 17         [ 2] 1144         JP	MSMOD
                                   1145 
                                   1146 ;       MOD     ( n n -- r )
                                   1147 ;       Signed divide. Return mod only.
      000573 05 62                 1148         .word      LINK
                           000575  1149 LINK = . 
      000575 03                    1150         .byte      3
      000576 4D 4F 44              1151         .ascii     "MOD"
      000579                       1152 MODD:
      000579 CD 05 67         [ 4] 1153 	CALL	SLMOD
      00057C CC 01 E5         [ 2] 1154 	JP	DROP
                                   1155 
                                   1156 ;       /       ( n n -- q )
                                   1157 ;       Signed divide. Return quotient only.
      00057F 05 75                 1158         .word      LINK
                           000581  1159 LINK = . 
      000581 01                    1160         .byte      1
      000582 2F                    1161         .ascii     "/"
      000583                       1162 SLASH:
      000583 CD 05 67         [ 4] 1163         CALL	SLMOD
      000586 CD 01 FF         [ 4] 1164         CALL	SWAPP
      000589 CC 01 E5         [ 2] 1165         JP	DROP
                                   1166 
                                   1167 ;; Multiply
                                   1168 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   1169 ;       UM*     ( u u -- ud )
                                   1170 ;       Unsigned multiply. Return double product.
      00058C 05 81                 1171         .word      LINK
                           00058E  1172 LINK = . 
      00058E 03                    1173         .byte      3
      00058F 55 4D 2A              1174         .ascii     "UM*"
      000592                       1175 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
      000592 E6 02            [ 1] 1176 	LD A,(2,X)	; b
      000594 90 97            [ 1] 1177 	LD YL,A
      000596 F6               [ 1] 1178 	LD A,(X)	; d
      000597 90 42            [ 4] 1179 	MUL Y,A
      000599 90 BF 1A         [ 2] 1180 	LDW PROD1,Y
      00059C E6 03            [ 1] 1181 	LD A,(3,X)	; a
      00059E 90 97            [ 1] 1182 	LD YL,A
      0005A0 F6               [ 1] 1183 	LD A,(X)	; d
      0005A1 90 42            [ 4] 1184 	MUL Y,A
      0005A3 90 BF 1C         [ 2] 1185 	LDW PROD2,Y
      0005A6 E6 02            [ 1] 1186 	LD A,(2,X)	; b
      0005A8 90 97            [ 1] 1187 	LD YL,A
      0005AA E6 01            [ 1] 1188 	LD A,(1,X)	; c
      0005AC 90 42            [ 4] 1189 	MUL Y,A
      0005AE 90 BF 1E         [ 2] 1190 	LDW PROD3,Y
      0005B1 E6 03            [ 1] 1191 	LD A,(3,X)	; a
      0005B3 90 97            [ 1] 1192 	LD YL,A
      0005B5 E6 01            [ 1] 1193 	LD A,(1,X)	; c
      0005B7 90 42            [ 4] 1194 	MUL Y,A	; least signifiant product
      0005B9 4F               [ 1] 1195 	CLR A
      0005BA 90 01            [ 1] 1196 	RRWA Y
      0005BC E7 03            [ 1] 1197 	LD (3,X),A	; store least significant byte
      0005BE 72 B9 00 1E      [ 2] 1198 	ADDW Y,PROD3
      0005C2 4F               [ 1] 1199 	CLR A
      0005C3 A9 00            [ 1] 1200 	ADC A,#0	; save carry
      0005C5 B7 20            [ 1] 1201 	LD CARRY,A
      0005C7 72 B9 00 1C      [ 2] 1202 	ADDW Y,PROD2
      0005CB B6 20            [ 1] 1203 	LD A,CARRY
      0005CD A9 00            [ 1] 1204 	ADC A,#0	; add 2nd carry
      0005CF B7 20            [ 1] 1205 	LD CARRY,A
      0005D1 4F               [ 1] 1206 	CLR A
      0005D2 90 01            [ 1] 1207 	RRWA Y
      0005D4 E7 02            [ 1] 1208 	LD (2,X),A	; 2nd product byte
      0005D6 72 B9 00 1A      [ 2] 1209 	ADDW Y,PROD1
      0005DA 90 01            [ 1] 1210 	RRWA Y
      0005DC E7 01            [ 1] 1211 	LD (1,X),A	; 3rd product byte
      0005DE 90 01            [ 1] 1212 	RRWA Y  	; 4th product byte now in A
      0005E0 B9 20            [ 1] 1213 	ADC A,CARRY	; fill in carry bits
      0005E2 F7               [ 1] 1214 	LD (X),A
      0005E3 81               [ 4] 1215 	RET
                                   1216 
                                   1217 ;       *       ( n n -- n )
                                   1218 ;       Signed multiply. Return single product.
      0005E4 05 8E                 1219         .word      LINK
                           0005E6  1220 LINK = . 
      0005E6 01                    1221         .byte      1
      0005E7 2A                    1222         .ascii     "*"
      0005E8                       1223 STAR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      0005E8 CD 05 92         [ 4] 1224 	CALL	UMSTA
      0005EB CC 01 E5         [ 2] 1225 	JP	DROP
                                   1226 
                                   1227 ;       M*      ( n n -- d )
                                   1228 ;       Signed multiply. Return double product.
      0005EE 05 E6                 1229         .word      LINK
                           0005F0  1230 LINK = . 
      0005F0 02                    1231         .byte      2
      0005F1 4D 2A                 1232         .ascii     "M*"
      0005F3                       1233 MSTAR:      
      0005F3 CD 03 7D         [ 4] 1234         CALL	DDUP
      0005F6 CD 02 64         [ 4] 1235         CALL	XORR
      0005F9 CD 02 28         [ 4] 1236         CALL	ZLESS
      0005FC CD 01 B8         [ 4] 1237         CALL	TOR
      0005FF CD 04 0A         [ 4] 1238         CALL	ABSS
      000602 CD 01 FF         [ 4] 1239         CALL	SWAPP
      000605 CD 04 0A         [ 4] 1240         CALL	ABSS
      000608 CD 05 92         [ 4] 1241         CALL	UMSTA
      00060B CD 01 90         [ 4] 1242         CALL	RFROM
      00060E CD 00 ED         [ 4] 1243         CALL	QBRAN
      000611 06 16                 1244         .word	MSTA1
      000613 CD 03 CF         [ 4] 1245         CALL	DNEGA
      000616 81               [ 4] 1246 MSTA1:	RET
                                   1247 
                                   1248 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1249 ;       Multiply n1 and n2, then divide
                                   1250 ;       by n3. Return mod and quotient.
      000617 05 F0                 1251         .word      LINK
                           000619  1252 LINK = . 
      000619 05                    1253         .byte      5
      00061A 2A 2F 4D 4F 44        1254         .ascii     "*/MOD"
      00061F                       1255 SSMOD:
      00061F CD 01 B8         [ 4] 1256         CALL     TOR
      000622 CD 05 F3         [ 4] 1257         CALL     MSTAR
      000625 CD 01 90         [ 4] 1258         CALL     RFROM
      000628 CC 05 17         [ 2] 1259         JP     MSMOD
                                   1260 
                                   1261 ;       */      ( n1 n2 n3 -- q )
                                   1262 ;       Multiply n1 by n2, then divide
                                   1263 ;       by n3. Return quotient only.
      00062B 06 19                 1264         .word      LINK
                           00062D  1265 LINK = . 
      00062D 02                    1266         .byte      2
      00062E 2E 20 2F              1267         .ascii     ". /"
      000631                       1268 STASL:
      000631 CD 06 1F         [ 4] 1269         CALL	SSMOD
      000634 CD 01 FF         [ 4] 1270         CALL	SWAPP
      000637 CC 01 E5         [ 2] 1271         JP	DROP
                                   1272 
                                   1273 ;; Miscellaneous
                                   1274 
                                   1275 ;       CELL+   ( a -- a )
                                   1276 ;       Add cell size in byte to address.
      00063A 06 2D                 1277         .word      LINK
                           00063C  1278 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00063C 02                    1279         .byte       2
      00063D 32 2B                 1280         .ascii     "2+"
      00063F                       1281 CELLP:
      00063F 90 93            [ 1] 1282         LDW Y,X
      000641 90 FE            [ 2] 1283 	LDW Y,(Y)
      000643 72 A9 00 02      [ 2] 1284         ADDW Y,#2
      000647 FF               [ 2] 1285         LDW (X),Y
      000648 81               [ 4] 1286         RET
                                   1287 
                                   1288 ;       CELL-   ( a -- a )
                                   1289 ;       Subtract 2 from address.
      000649 06 3C                 1290         .word      LINK
                           00064B  1291 LINK = . 
      00064B 02                    1292         .byte       2
      00064C 32 2D                 1293         .ascii     "2-"
      00064E                       1294 CELLM:
      00064E 90 93            [ 1] 1295         LDW Y,X
      000650 90 FE            [ 2] 1296 	LDW Y,(Y)
      000652 72 A2 00 02      [ 2] 1297         SUBW Y,#2
      000656 FF               [ 2] 1298         LDW (X),Y
      000657 81               [ 4] 1299         RET
                                   1300 
                                   1301 ;       CELLS   ( n -- n )
                                   1302 ;       Multiply tos by 2.
      000658 06 4B                 1303         .word      LINK
                           00065A  1304 LINK = . 
      00065A 02                    1305         .byte       2
      00065B 32 2A                 1306         .ascii     "2*"
      00065D                       1307 CELLS:
      00065D 90 93            [ 1] 1308         LDW Y,X
      00065F 90 FE            [ 2] 1309 	LDW Y,(Y)
      000661 90 58            [ 2] 1310         SLAW Y
      000663 FF               [ 2] 1311         LDW (X),Y
      000664 81               [ 4] 1312         RET
                                   1313 
                                   1314 ;       1+      ( a -- a )
                                   1315 ;       Add cell size in byte to address.
      000665 06 5A                 1316         .word      LINK
                           000667  1317 LINK = . 
      000667 02                    1318         .byte      2
      000668 31 2B                 1319         .ascii     "1+"
      00066A                       1320 ONEP:
      00066A 90 93            [ 1] 1321         LDW Y,X
      00066C 90 FE            [ 2] 1322 	LDW Y,(Y)
      00066E 90 5C            [ 1] 1323         INCW Y
      000670 FF               [ 2] 1324         LDW (X),Y
      000671 81               [ 4] 1325         RET
                                   1326 
                                   1327 ;       1-      ( a -- a )
                                   1328 ;       Subtract 2 from address.
      000672 06 67                 1329         .word      LINK
                           000674  1330 LINK = . 
      000674 02                    1331         .byte      2
      000675 31 2D                 1332         .ascii     "1-"
      000677                       1333 ONEM:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000677 90 93            [ 1] 1334         LDW Y,X
      000679 90 FE            [ 2] 1335 	LDW Y,(Y)
      00067B 90 5A            [ 2] 1336         DECW Y
      00067D FF               [ 2] 1337         LDW (X),Y
      00067E 81               [ 4] 1338         RET
                                   1339 
                                   1340 ;       2/      ( n -- n )
                                   1341 ;       Multiply tos by 2.
      00067F 06 74                 1342         .word      LINK
                           000681  1343 LINK = . 
      000681 02                    1344         .byte      2
      000682 32 2F                 1345         .ascii     "2/"
      000684                       1346 TWOSL:
      000684 90 93            [ 1] 1347         LDW Y,X
      000686 90 FE            [ 2] 1348 	LDW Y,(Y)
      000688 90 57            [ 2] 1349         SRAW Y
      00068A FF               [ 2] 1350         LDW (X),Y
      00068B 81               [ 4] 1351         RET
                                   1352 
                                   1353 ;       BL      ( -- 32 )
                                   1354 ;       Return 32,  blank character.
      00068C 06 81                 1355         .word      LINK
                           00068E  1356 LINK = . 
      00068E 02                    1357         .byte      2
      00068F 42 4C                 1358         .ascii     "BL"
      000691                       1359 BLANK:
      000691 1D 00 02         [ 2] 1360         SUBW X,#2
      000694 90 AE 00 20      [ 2] 1361 	LDW Y,#32
      000698 FF               [ 2] 1362         LDW (X),Y
      000699 81               [ 4] 1363         RET
                                   1364 
                                   1365 ;         0     ( -- 0)
                                   1366 ;         Return 0.
      00069A 06 8E                 1367         .word      LINK
                           00069C  1368 LINK = . 
      00069C 01                    1369         .byte       1
      00069D 30                    1370         .ascii     "0"
      00069E                       1371 ZERO:
      00069E 1D 00 02         [ 2] 1372         SUBW X,#2
      0006A1 90 5F            [ 1] 1373 	CLRW Y
      0006A3 FF               [ 2] 1374         LDW (X),Y
      0006A4 81               [ 4] 1375         RET
                                   1376 
                                   1377 ;         1     ( -- 1)
                                   1378 ;         Return 1.
      0006A5 06 9C                 1379         .word      LINK
                           0006A7  1380 LINK = . 
      0006A7 01                    1381         .byte       1
      0006A8 31                    1382         .ascii     "1"
      0006A9                       1383 ONE:
      0006A9 1D 00 02         [ 2] 1384         SUBW X,#2
      0006AC 90 AE 00 01      [ 2] 1385 	LDW Y,#1
      0006B0 FF               [ 2] 1386         LDW (X),Y
      0006B1 81               [ 4] 1387         RET
                                   1388 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   1389 ;         -1    ( -- -1)
                                   1390 ;         Return 32,  blank character.
      0006B2 06 A7                 1391         .word      LINK
                           0006B4  1392 LINK = . 
      0006B4 02                    1393         .byte       2
      0006B5 2D 31                 1394         .ascii     "-1"
      0006B7                       1395 MONE:
      0006B7 1D 00 02         [ 2] 1396         SUBW X,#2
      0006BA 90 AE FF FF      [ 2] 1397 	LDW Y,#0xFFFF
      0006BE FF               [ 2] 1398         LDW (X),Y
      0006BF 81               [ 4] 1399         RET
                                   1400 
                                   1401 ;       >CHAR   ( c -- c )
                                   1402 ;       Filter non-printing characters.
      0006C0 06 B4                 1403         .word      LINK
                           0006C2  1404 LINK = . 
      0006C2 05                    1405         .byte      5
      0006C3 3E 43 48 41 52        1406         .ascii     ">CHAR"
      0006C8                       1407 TCHAR:
      0006C8 CD 00 B6         [ 4] 1408         CALL     DOLIT
      0006CB 00 7F                 1409         .word       0x7F
      0006CD CD 02 3B         [ 4] 1410         CALL     ANDD
      0006D0 CD 01 EF         [ 4] 1411         CALL     DUPP    ;mask msb
      0006D3 CD 00 B6         [ 4] 1412         CALL     DOLIT
      0006D6 00 7F                 1413         .word      127
      0006D8 CD 06 91         [ 4] 1414         CALL     BLANK
      0006DB CD 04 B2         [ 4] 1415         CALL     WITHI   ;check for printable
      0006DE CD 00 ED         [ 4] 1416         CALL     QBRAN
      0006E1 06 EB                 1417         .word      TCHA1
      0006E3 CD 01 E5         [ 4] 1418         CALL     DROP
      0006E6 CD 00 B6         [ 4] 1419         CALL     DOLIT
      0006E9 00 5F                 1420         .word     0x5F		; "_"     ;replace non-printables
      0006EB 81               [ 4] 1421 TCHA1:  RET
                                   1422 
                                   1423 ;       DEPTH   ( -- n )
                                   1424 ;       Return  depth of  data stack.
      0006EC 06 C2                 1425         .word      LINK
                           0006EE  1426 LINK = . 
      0006EE 05                    1427         .byte      5
      0006EF 44 45 50 54 48        1428         .ascii     "DEPTH"
      0006F4                       1429 DEPTH:
      0006F4 90 BE 22         [ 2] 1430         LDW Y,SP0    ;save data stack ptr
      0006F7 BF 1A            [ 2] 1431 	LDW XTEMP,X
      0006F9 72 B2 00 1A      [ 2] 1432         SUBW Y,XTEMP     ;#bytes = SP0 - X
      0006FD 90 57            [ 2] 1433         SRAW Y    ;D = #stack items
      0006FF 90 5A            [ 2] 1434 	DECW Y
      000701 1D 00 02         [ 2] 1435 	SUBW X,#2
      000704 FF               [ 2] 1436         LDW (X),Y     ; if neg, underflow
      000705 81               [ 4] 1437         RET
                                   1438 
                                   1439 ;       PICK    ( ... +n -- ... w )
                                   1440 ;       Copy  nth stack item to tos.
      000706 06 EE                 1441         .word      LINK
                           000708  1442 LINK = . 
      000708 04                    1443         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000709 50 49 43 4B           1444         .ascii     "PICK"
      00070D                       1445 PICK:
      00070D 90 93            [ 1] 1446         LDW Y,X   ;D = n1
      00070F 90 FE            [ 2] 1447         LDW Y,(Y)
      000711 90 58            [ 2] 1448         SLAW Y
      000713 BF 1A            [ 2] 1449         LDW XTEMP,X
      000715 72 B9 00 1A      [ 2] 1450         ADDW Y,XTEMP
      000719 90 FE            [ 2] 1451         LDW Y,(Y)
      00071B FF               [ 2] 1452         LDW (X),Y
      00071C 81               [ 4] 1453         RET
                                   1454 
                                   1455 ;; Memory access
                                   1456 
                                   1457 ;       +!      ( n a -- )
                                   1458 ;       Add n to  contents at address a.
      00071D 07 08                 1459         .word      LINK
                           00071F  1460 LINK = . 
      00071F 02                    1461         .byte      2
      000720 2B 21                 1462         .ascii     "+!"
      000722                       1463 PSTOR:
      000722 CD 01 FF         [ 4] 1464         CALL	SWAPP
      000725 CD 02 19         [ 4] 1465         CALL	OVER
      000728 CD 01 42         [ 4] 1466         CALL	AT
      00072B CD 03 92         [ 4] 1467         CALL	PLUS
      00072E CD 01 FF         [ 4] 1468         CALL	SWAPP
      000731 CC 01 2B         [ 2] 1469         JP	STORE
                                   1470 
                                   1471 ;       2!      ( d a -- )
                                   1472 ;       Store  double integer to address a.
      000734 07 1F                 1473         .word      LINK
                           000736  1474 LINK = . 
      000736 02                    1475         .byte      2
      000737 32 21                 1476         .ascii     "2!"
      000739                       1477 DSTOR:
      000739 CD 01 FF         [ 4] 1478         CALL	SWAPP
      00073C CD 02 19         [ 4] 1479         CALL	OVER
      00073F CD 01 2B         [ 4] 1480         CALL	STORE
      000742 CD 06 3F         [ 4] 1481         CALL	CELLP
      000745 CC 01 2B         [ 2] 1482         JP	STORE
                                   1483 
                                   1484 ;       2@      ( a -- d )
                                   1485 ;       Fetch double integer from address a.
      000748 07 36                 1486         .word      LINK
                           00074A  1487 LINK = . 
      00074A 02                    1488         .byte      2
      00074B 32 40                 1489         .ascii     "2@"
      00074D                       1490 DAT:
      00074D CD 01 EF         [ 4] 1491         CALL	DUPP
      000750 CD 06 3F         [ 4] 1492         CALL	CELLP
      000753 CD 01 42         [ 4] 1493         CALL	AT
      000756 CD 01 FF         [ 4] 1494         CALL	SWAPP
      000759 CC 01 42         [ 2] 1495         JP	AT
                                   1496 
                                   1497 ;       COUNT   ( b -- b +n )
                                   1498 ;       Return count byte of a string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   1499 ;       and add 1 to byte address.
      00075C 07 4A                 1500         .word      LINK
                           00075E  1501 LINK = . 
      00075E 05                    1502         .byte      5
      00075F 43 4F 55 4E 54        1503         .ascii     "COUNT"
      000764                       1504 COUNT:
      000764 CD 01 EF         [ 4] 1505         CALL     DUPP
      000767 CD 06 6A         [ 4] 1506         CALL     ONEP
      00076A CD 01 FF         [ 4] 1507         CALL     SWAPP
      00076D CC 01 60         [ 2] 1508         JP     CAT
                                   1509 
                                   1510 ;       HERE    ( -- a )
                                   1511 ;       Return  top of  code dictionary.
      000770 07 5E                 1512         .word      LINK
                           000772  1513 LINK = . 
      000772 04                    1514         .byte      4
      000773 48 45 52 45           1515         .ascii     "HERE"
      000777                       1516 HERE:
      000777 CD 03 19         [ 4] 1517         CALL     CPP
      00077A CC 01 42         [ 2] 1518         JP     AT
                                   1519 
                                   1520 ;       PAD     ( -- a )
                                   1521 ;       Return address of text buffer
                                   1522 ;       above  code dictionary.
      00077D 07 72                 1523         .word      LINK
                           00077F  1524 LINK = . 
      00077F 03                    1525         .byte      3
      000780 50 41 44              1526         .ascii     "PAD"
      000783                       1527 PAD:
      000783 CD 07 77         [ 4] 1528         CALL     HERE
      000786 CD 00 B6         [ 4] 1529         CALL     DOLIT
      000789 00 50                 1530         .word      80
      00078B CC 03 92         [ 2] 1531         JP     PLUS
                                   1532 
                                   1533 ;       TIB     ( -- a )
                                   1534 ;       Return address of terminal input buffer.
      00078E 07 7F                 1535         .word      LINK
                           000790  1536 LINK = . 
      000790 03                    1537         .byte      3
      000791 54 49 42              1538         .ascii     "TIB"
      000794                       1539 TIB:
      000794 CD 02 D8         [ 4] 1540         CALL     NTIB
      000797 CD 06 3F         [ 4] 1541         CALL     CELLP
      00079A CC 01 42         [ 2] 1542         JP     AT
                                   1543 
                                   1544 ;       @EXECUTE        ( a -- )
                                   1545 ;       Execute vector stored in address a.
      00079D 07 90                 1546         .word      LINK
                           00079F  1547 LINK = . 
      00079F 08                    1548         .byte      8
      0007A0 40 45 58 45 43 55 54  1549         .ascii     "@EXECUTE"
             45
      0007A8                       1550 ATEXE:
      0007A8 CD 01 42         [ 4] 1551         CALL     AT
      0007AB CD 03 39         [ 4] 1552         CALL     QDUP    ;?address or zero
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0007AE CD 00 ED         [ 4] 1553         CALL     QBRAN
      0007B1 07 B6                 1554         .word      EXE1
      0007B3 CD 01 14         [ 4] 1555         CALL     EXECU   ;execute if non-zero
      0007B6 81               [ 4] 1556 EXE1:   RET     ;do nothing if zero
                                   1557 
                                   1558 ;       CMOVE   ( b1 b2 u -- )
                                   1559 ;       Copy u bytes from b1 to b2.
      0007B7 07 9F                 1560         .word      LINK
                           0007B9  1561 LINK = . 
      0007B9 05                    1562         .byte      5
      0007BA 43 4D 4F 56 45        1563         .ascii     "CMOVE"
      0007BF                       1564 CMOVE:
      0007BF CD 01 B8         [ 4] 1565         CALL	TOR
      0007C2 CD 01 04         [ 4] 1566         CALL	BRAN
      0007C5 07 DF                 1567         .word	CMOV2
      0007C7 CD 01 B8         [ 4] 1568 CMOV1:	CALL	TOR
      0007CA CD 01 EF         [ 4] 1569         CALL	DUPP
      0007CD CD 01 60         [ 4] 1570         CALL	CAT
      0007D0 CD 01 A3         [ 4] 1571         CALL	RAT
      0007D3 CD 01 4F         [ 4] 1572         CALL	CSTOR
      0007D6 CD 06 6A         [ 4] 1573         CALL	ONEP
      0007D9 CD 01 90         [ 4] 1574         CALL	RFROM
      0007DC CD 06 6A         [ 4] 1575         CALL	ONEP
      0007DF CD 00 CE         [ 4] 1576 CMOV2:	CALL	DONXT
      0007E2 07 C7                 1577         .word	CMOV1
      0007E4 CC 03 72         [ 2] 1578         JP	DDROP
                                   1579 
                                   1580 ;       FILL    ( b u c -- )
                                   1581 ;       Fill u bytes of character c
                                   1582 ;       to area beginning at b.
      0007E7 07 B9                 1583         .word       LINK
                           0007E9  1584 LINK = . 
      0007E9 04                    1585         .byte       4
      0007EA 46 49 4C 4C           1586         .ascii     "FILL"
      0007EE                       1587 FILL:
      0007EE CD 01 FF         [ 4] 1588         CALL	SWAPP
      0007F1 CD 01 B8         [ 4] 1589         CALL	TOR
      0007F4 CD 01 FF         [ 4] 1590         CALL	SWAPP
      0007F7 CD 01 04         [ 4] 1591         CALL	BRAN
      0007FA 08 05                 1592         .word	FILL2
      0007FC CD 03 7D         [ 4] 1593 FILL1:	CALL	DDUP
      0007FF CD 01 4F         [ 4] 1594         CALL	CSTOR
      000802 CD 06 6A         [ 4] 1595         CALL	ONEP
      000805 CD 00 CE         [ 4] 1596 FILL2:	CALL	DONXT
      000808 07 FC                 1597         .word	FILL1
      00080A CC 03 72         [ 2] 1598         JP	DDROP
                                   1599 
                                   1600 ;       ERASE   ( b u -- )
                                   1601 ;       Erase u bytes beginning at b.
      00080D 07 E9                 1602         .word      LINK
                           00080F  1603 LINK = . 
      00080F 05                    1604         .byte      5
      000810 45 52 41 53 45        1605         .ascii     "ERASE"
      000815                       1606 ERASE:
      000815 CD 06 9E         [ 4] 1607         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000818 CC 07 EE         [ 2] 1608         JP     FILL
                                   1609 
                                   1610 ;       PACK0x   ( b u a -- a )
                                   1611 ;       Build a counted string with
                                   1612 ;       u characters from b. Null fill.
      00081B 08 0F                 1613         .word      LINK
                           00081D  1614 LINK = . 
      00081D 05                    1615         .byte      5
      00081E 50 41 43 4B 30 78     1616         .ascii     "PACK0x"
      000824                       1617 PACKS:
      000824 CD 01 EF         [ 4] 1618         CALL     DUPP
      000827 CD 01 B8         [ 4] 1619         CALL     TOR     ;strings only on cell boundary
      00082A CD 03 7D         [ 4] 1620         CALL     DDUP
      00082D CD 01 4F         [ 4] 1621         CALL     CSTOR
      000830 CD 06 6A         [ 4] 1622         CALL     ONEP ;save count
      000833 CD 01 FF         [ 4] 1623         CALL     SWAPP
      000836 CD 07 BF         [ 4] 1624         CALL     CMOVE
      000839 CD 01 90         [ 4] 1625         CALL     RFROM
      00083C 81               [ 4] 1626         RET
                                   1627 
                                   1628 ;; Numeric output, single precision
                                   1629 
                                   1630 ;       DIGIT   ( u -- c )
                                   1631 ;       Convert digit u to a character.
      00083D 08 1D                 1632         .word      LINK
                           00083F  1633 LINK = . 
      00083F 05                    1634         .byte      5
      000840 44 49 47 49 54        1635         .ascii     "DIGIT"
      000845                       1636 DIGIT:
      000845 CD 00 B6         [ 4] 1637         CALL	DOLIT
      000848 00 09                 1638         .word	9
      00084A CD 02 19         [ 4] 1639         CALL	OVER
      00084D CD 04 55         [ 4] 1640         CALL	LESS
      000850 CD 00 B6         [ 4] 1641         CALL	DOLIT
      000853 00 07                 1642         .word	7
      000855 CD 02 3B         [ 4] 1643         CALL	ANDD
      000858 CD 03 92         [ 4] 1644         CALL	PLUS
      00085B CD 00 B6         [ 4] 1645         CALL	DOLIT
      00085E 00 30                 1646         .word	48	;'0'
      000860 CC 03 92         [ 2] 1647         JP	PLUS
                                   1648 
                                   1649 ;       EXTRACT ( n base -- n c )
                                   1650 ;       Extract least significant digit from n.
      000863 08 3F                 1651         .word      LINK
                           000865  1652 LINK = . 
      000865 07                    1653         .byte      7
      000866 45 58 54 52 41 43 54  1654         .ascii     "EXTRACT"
      00086D                       1655 EXTRC:
      00086D CD 06 9E         [ 4] 1656         CALL     ZERO
      000870 CD 01 FF         [ 4] 1657         CALL     SWAPP
      000873 CD 04 CD         [ 4] 1658         CALL     UMMOD
      000876 CD 01 FF         [ 4] 1659         CALL     SWAPP
      000879 CC 08 45         [ 2] 1660         JP     DIGIT
                                   1661 
                                   1662 ;       <#      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   1663 ;       Initiate  numeric output process.
      00087C 08 65                 1664         .word      LINK
                           00087E  1665 LINK = . 
      00087E 02                    1666         .byte      2
      00087F 3C 23                 1667         .ascii     "<#"
      000881                       1668 BDIGS:
      000881 CD 07 83         [ 4] 1669         CALL     PAD
      000884 CD 02 F8         [ 4] 1670         CALL     HLD
      000887 CC 01 2B         [ 2] 1671         JP     STORE
                                   1672 
                                   1673 ;       HOLD    ( c -- )
                                   1674 ;       Insert a character into output string.
      00088A 08 7E                 1675         .word      LINK
                           00088C  1676 LINK = . 
      00088C 04                    1677         .byte      4
      00088D 48 4F 4C 44           1678         .ascii     "HOLD"
      000891                       1679 HOLD:
      000891 CD 02 F8         [ 4] 1680         CALL     HLD
      000894 CD 01 42         [ 4] 1681         CALL     AT
      000897 CD 06 77         [ 4] 1682         CALL     ONEM
      00089A CD 01 EF         [ 4] 1683         CALL     DUPP
      00089D CD 02 F8         [ 4] 1684         CALL     HLD
      0008A0 CD 01 2B         [ 4] 1685         CALL     STORE
      0008A3 CC 01 4F         [ 2] 1686         JP     CSTOR
                                   1687 
                                   1688 ;       #       ( u -- u )
                                   1689 ;       Extract one digit from u and
                                   1690 ;       append digit to output string.
      0008A6 08 8C                 1691         .word      LINK
                           0008A8  1692 LINK = . 
      0008A8 01                    1693         .byte      1
      0008A9 23                    1694         .ascii     "#"
      0008AA                       1695 DIG:
      0008AA CD 02 AA         [ 4] 1696         CALL     BASE
      0008AD CD 01 42         [ 4] 1697         CALL     AT
      0008B0 CD 08 6D         [ 4] 1698         CALL     EXTRC
      0008B3 CC 08 91         [ 2] 1699         JP     HOLD
                                   1700 
                                   1701 ;       #S      ( u -- 0 )
                                   1702 ;       Convert u until all digits
                                   1703 ;       are added to output string.
      0008B6 08 A8                 1704         .word      LINK
                           0008B8  1705 LINK = . 
      0008B8 02                    1706         .byte      2
      0008B9 23 53                 1707         .ascii     "#S"
      0008BB                       1708 DIGS:
      0008BB CD 08 AA         [ 4] 1709 DIGS1:  CALL     DIG
      0008BE CD 01 EF         [ 4] 1710         CALL     DUPP
      0008C1 CD 00 ED         [ 4] 1711         CALL     QBRAN
      0008C4 08 C8                 1712         .word      DIGS2
      0008C6 20 F3            [ 2] 1713         JRA     DIGS1
      0008C8 81               [ 4] 1714 DIGS2:  RET
                                   1715 
                                   1716 ;       SIGN    ( n -- )
                                   1717 ;       Add a minus sign to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   1718 ;       numeric output string.
      0008C9 08 B8                 1719         .word      LINK
                           0008CB  1720 LINK = . 
      0008CB 04                    1721         .byte      4
      0008CC 53 49 47 4E           1722         .ascii     "SIGN"
      0008D0                       1723 SIGN:
      0008D0 CD 02 28         [ 4] 1724         CALL     ZLESS
      0008D3 CD 00 ED         [ 4] 1725         CALL     QBRAN
      0008D6 08 E0                 1726         .word      SIGN1
      0008D8 CD 00 B6         [ 4] 1727         CALL     DOLIT
      0008DB 00 2D                 1728         .word      45	;"-"
      0008DD CC 08 91         [ 2] 1729         JP     HOLD
      0008E0 81               [ 4] 1730 SIGN1:  RET
                                   1731 
                                   1732 ;       #>      ( w -- b u )
                                   1733 ;       Prepare output string.
      0008E1 08 CB                 1734         .word      LINK
                           0008E3  1735 LINK = . 
      0008E3 02                    1736         .byte      2
      0008E4 23 3E                 1737         .ascii     "#>"
      0008E6                       1738 EDIGS:
      0008E6 CD 01 E5         [ 4] 1739         CALL     DROP
      0008E9 CD 02 F8         [ 4] 1740         CALL     HLD
      0008EC CD 01 42         [ 4] 1741         CALL     AT
      0008EF CD 07 83         [ 4] 1742         CALL     PAD
      0008F2 CD 02 19         [ 4] 1743         CALL     OVER
      0008F5 CC 03 F0         [ 2] 1744         JP     SUBB
                                   1745 
                                   1746 ;       str     ( w -- b u )
                                   1747 ;       Convert a signed integer
                                   1748 ;       to a numeric string.
      0008F8 08 E3                 1749         .word      LINK
                           0008FA  1750 LINK = . 
      0008FA 03                    1751         .byte      3
      0008FB 73 74 72              1752         .ascii     "str"
      0008FE                       1753 STR:
      0008FE CD 01 EF         [ 4] 1754         CALL     DUPP
      000901 CD 01 B8         [ 4] 1755         CALL     TOR
      000904 CD 04 0A         [ 4] 1756         CALL     ABSS
      000907 CD 08 81         [ 4] 1757         CALL     BDIGS
      00090A CD 08 BB         [ 4] 1758         CALL     DIGS
      00090D CD 01 90         [ 4] 1759         CALL     RFROM
      000910 CD 08 D0         [ 4] 1760         CALL     SIGN
      000913 CC 08 E6         [ 2] 1761         JP     EDIGS
                                   1762 
                                   1763 ;       HEX     ( -- )
                                   1764 ;       Use radix 16 as base for
                                   1765 ;       numeric conversions.
      000916 08 FA                 1766         .word      LINK
                           000918  1767 LINK = . 
      000918 03                    1768         .byte      3
      000919 48 45 58              1769         .ascii     "HEX"
      00091C                       1770 HEX:
      00091C CD 00 B6         [ 4] 1771         CALL     DOLIT
      00091F 00 10                 1772         .word      16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000921 CD 02 AA         [ 4] 1773         CALL     BASE
      000924 CC 01 2B         [ 2] 1774         JP     STORE
                                   1775 
                                   1776 ;       DECIMAL ( -- )
                                   1777 ;       Use radix 10 as base
                                   1778 ;       for numeric conversions.
      000927 09 18                 1779         .word      LINK
                           000929  1780 LINK = . 
      000929 07                    1781         .byte      7
      00092A 44 45 43 49 4D 41 4C  1782         .ascii     "DECIMAL"
      000931                       1783 DECIM:
      000931 CD 00 B6         [ 4] 1784         CALL     DOLIT
      000934 00 0A                 1785         .word      10
      000936 CD 02 AA         [ 4] 1786         CALL     BASE
      000939 CC 01 2B         [ 2] 1787         JP     STORE
                                   1788 
                                   1789 ;; Numeric input, single precision
                                   1790 
                                   1791 ;       DIGIT?  ( c base -- u t )
                                   1792 ;       Convert a character to its numeric
                                   1793 ;       value. A flag indicates success.
      00093C 09 29                 1794         .word      LINK
                           00093E  1795 LINK = . 
      00093E 06                    1796         .byte       6
      00093F 44 49 47 49 54 3F     1797         .ascii     "DIGIT?"
      000945                       1798 DIGTQ:
      000945 CD 01 B8         [ 4] 1799         CALL     TOR
      000948 CD 00 B6         [ 4] 1800         CALL     DOLIT
      00094B 00 30                 1801         .word     48	; "0"
      00094D CD 03 F0         [ 4] 1802         CALL     SUBB
      000950 CD 00 B6         [ 4] 1803         CALL     DOLIT
      000953 00 09                 1804         .word      9
      000955 CD 02 19         [ 4] 1805         CALL     OVER
      000958 CD 04 55         [ 4] 1806         CALL     LESS
      00095B CD 00 ED         [ 4] 1807         CALL     QBRAN
      00095E 09 76                 1808         .word      DGTQ1
      000960 CD 00 B6         [ 4] 1809         CALL     DOLIT
      000963 00 07                 1810         .word      7
      000965 CD 03 F0         [ 4] 1811         CALL     SUBB
      000968 CD 01 EF         [ 4] 1812         CALL     DUPP
      00096B CD 00 B6         [ 4] 1813         CALL     DOLIT
      00096E 00 0A                 1814         .word      10
      000970 CD 04 55         [ 4] 1815         CALL     LESS
      000973 CD 02 4F         [ 4] 1816         CALL     ORR
      000976 CD 01 EF         [ 4] 1817 DGTQ1:  CALL     DUPP
      000979 CD 01 90         [ 4] 1818         CALL     RFROM
      00097C CC 04 37         [ 2] 1819         JP     ULESS
                                   1820 
                                   1821 ;       NUMBER? ( a -- n T | a F )
                                   1822 ;       Convert a number string to
                                   1823 ;       integer. Push a flag on tos.
      00097F 09 3E                 1824         .word      LINK
                           000981  1825 LINK = . 
      000981 07                    1826         .byte      7
      000982 4E 55 4D 42 45 52 3F  1827         .ascii     "NUMBER?"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000989                       1828 NUMBQ:
      000989 CD 02 AA         [ 4] 1829         CALL     BASE
      00098C CD 01 42         [ 4] 1830         CALL     AT
      00098F CD 01 B8         [ 4] 1831         CALL     TOR
      000992 CD 06 9E         [ 4] 1832         CALL     ZERO
      000995 CD 02 19         [ 4] 1833         CALL     OVER
      000998 CD 07 64         [ 4] 1834         CALL     COUNT
      00099B CD 02 19         [ 4] 1835         CALL     OVER
      00099E CD 01 60         [ 4] 1836         CALL     CAT
      0009A1 CD 00 B6         [ 4] 1837         CALL     DOLIT
      0009A4 00 24                 1838         .word     36	; "0x"
      0009A6 CD 04 18         [ 4] 1839         CALL     EQUAL
      0009A9 CD 00 ED         [ 4] 1840         CALL     QBRAN
      0009AC 09 BD                 1841         .word      NUMQ1
      0009AE CD 09 1C         [ 4] 1842         CALL     HEX
      0009B1 CD 01 FF         [ 4] 1843         CALL     SWAPP
      0009B4 CD 06 6A         [ 4] 1844         CALL     ONEP
      0009B7 CD 01 FF         [ 4] 1845         CALL     SWAPP
      0009BA CD 06 77         [ 4] 1846         CALL     ONEM
      0009BD CD 02 19         [ 4] 1847 NUMQ1:  CALL     OVER
      0009C0 CD 01 60         [ 4] 1848         CALL     CAT
      0009C3 CD 00 B6         [ 4] 1849         CALL     DOLIT
      0009C6 00 2D                 1850         .word     45	; "-"
      0009C8 CD 04 18         [ 4] 1851         CALL     EQUAL
      0009CB CD 01 B8         [ 4] 1852         CALL     TOR
      0009CE CD 01 FF         [ 4] 1853         CALL     SWAPP
      0009D1 CD 01 A3         [ 4] 1854         CALL     RAT
      0009D4 CD 03 F0         [ 4] 1855         CALL     SUBB
      0009D7 CD 01 FF         [ 4] 1856         CALL     SWAPP
      0009DA CD 01 A3         [ 4] 1857         CALL     RAT
      0009DD CD 03 92         [ 4] 1858         CALL     PLUS
      0009E0 CD 03 39         [ 4] 1859         CALL     QDUP
      0009E3 CD 00 ED         [ 4] 1860         CALL     QBRAN
      0009E6 0A 47                 1861         .word      NUMQ6
      0009E8 CD 06 77         [ 4] 1862         CALL     ONEM
      0009EB CD 01 B8         [ 4] 1863         CALL     TOR
      0009EE CD 01 EF         [ 4] 1864 NUMQ2:  CALL     DUPP
      0009F1 CD 01 B8         [ 4] 1865         CALL     TOR
      0009F4 CD 01 60         [ 4] 1866         CALL     CAT
      0009F7 CD 02 AA         [ 4] 1867         CALL     BASE
      0009FA CD 01 42         [ 4] 1868         CALL     AT
      0009FD CD 09 45         [ 4] 1869         CALL     DIGTQ
      000A00 CD 00 ED         [ 4] 1870         CALL     QBRAN
      000A03 0A 35                 1871         .word      NUMQ4
      000A05 CD 01 FF         [ 4] 1872         CALL     SWAPP
      000A08 CD 02 AA         [ 4] 1873         CALL     BASE
      000A0B CD 01 42         [ 4] 1874         CALL     AT
      000A0E CD 05 E8         [ 4] 1875         CALL     STAR
      000A11 CD 03 92         [ 4] 1876         CALL     PLUS
      000A14 CD 01 90         [ 4] 1877         CALL     RFROM
      000A17 CD 06 6A         [ 4] 1878         CALL     ONEP
      000A1A CD 00 CE         [ 4] 1879         CALL     DONXT
      000A1D 09 EE                 1880         .word      NUMQ2
      000A1F CD 01 A3         [ 4] 1881         CALL     RAT
      000A22 CD 01 FF         [ 4] 1882         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000A25 CD 01 E5         [ 4] 1883         CALL     DROP
      000A28 CD 00 ED         [ 4] 1884         CALL     QBRAN
      000A2B 0A 30                 1885         .word      NUMQ3
      000A2D CD 03 BD         [ 4] 1886         CALL     NEGAT
      000A30 CD 01 FF         [ 4] 1887 NUMQ3:  CALL     SWAPP
      000A33 20 0F            [ 2] 1888         JRA     NUMQ5
      000A35 CD 01 90         [ 4] 1889 NUMQ4:  CALL     RFROM
      000A38 CD 01 90         [ 4] 1890         CALL     RFROM
      000A3B CD 03 72         [ 4] 1891         CALL     DDROP
      000A3E CD 03 72         [ 4] 1892         CALL     DDROP
      000A41 CD 06 9E         [ 4] 1893         CALL     ZERO
      000A44 CD 01 EF         [ 4] 1894 NUMQ5:  CALL     DUPP
      000A47 CD 01 90         [ 4] 1895 NUMQ6:  CALL     RFROM
      000A4A CD 03 72         [ 4] 1896         CALL     DDROP
      000A4D CD 01 90         [ 4] 1897         CALL     RFROM
      000A50 CD 02 AA         [ 4] 1898         CALL     BASE
      000A53 CC 01 2B         [ 2] 1899         JP     STORE
                                   1900 
                                   1901 ;; Basic I/O
                                   1902 
                                   1903 ;       KEY     ( -- c )
                                   1904 ;       Wait for and return an
                                   1905 ;       input character.
      000A56 09 81                 1906         .word      LINK
                           000A58  1907 LINK = . 
      000A58 03                    1908         .byte      3
      000A59 4B 45 59              1909         .ascii     "KEY"
      000A5C                       1910 KEY:
      000A5C CD 00 7B         [ 4] 1911 KEY1:   CALL     QKEY
      000A5F CD 00 ED         [ 4] 1912         CALL     QBRAN
      000A62 0A 5C                 1913         .word      KEY1
      000A64 81               [ 4] 1914         RET
                                   1915 
                                   1916 ;       NUF?    ( -- t )
                                   1917 ;       Return false if no input,
                                   1918 ;       else pause and if CR return true.
      000A65 0A 58                 1919         .word      LINK
                           000A67  1920 LINK = . 
      000A67 04                    1921         .byte      4
      000A68 4E 55 46 3F           1922         .ascii     "NUF?"
      000A6C                       1923 NUFQ:
      000A6C CD 00 7B         [ 4] 1924         CALL     QKEY
      000A6F CD 01 EF         [ 4] 1925         CALL     DUPP
      000A72 CD 00 ED         [ 4] 1926         CALL     QBRAN
      000A75 0A 85                 1927         .word      NUFQ1
      000A77 CD 03 72         [ 4] 1928         CALL     DDROP
      000A7A CD 0A 5C         [ 4] 1929         CALL     KEY
      000A7D CD 00 B6         [ 4] 1930         CALL     DOLIT
      000A80 00 0D                 1931         .word      CRR
      000A82 CC 04 18         [ 2] 1932         JP     EQUAL
      000A85 81               [ 4] 1933 NUFQ1:  RET
                                   1934 
                                   1935 ;       SPACE   ( -- )
                                   1936 ;       Send  blank character to
                                   1937 ;       output device.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000A86 0A 67                 1938         .word      LINK
                           000A88  1939 LINK = . 
      000A88 05                    1940         .byte      5
      000A89 53 50 41 43 45        1941         .ascii     "SPACE"
      000A8E                       1942 SPACE:
      000A8E CD 06 91         [ 4] 1943         CALL     BLANK
      000A91 CC 00 A0         [ 2] 1944         JP     EMIT
                                   1945 
                                   1946 ;       SPACES  ( +n -- )
                                   1947 ;       Send n spaces to output device.
      000A94 0A 88                 1948         .word      LINK
                           000A96  1949 LINK = . 
      000A96 06                    1950         .byte      6
      000A97 53 50 41 43 45 53     1951         .ascii     "SPACES"
      000A9D                       1952 SPACS:
      000A9D CD 06 9E         [ 4] 1953         CALL     ZERO
      000AA0 CD 04 75         [ 4] 1954         CALL     MAX
      000AA3 CD 01 B8         [ 4] 1955         CALL     TOR
      000AA6 20 03            [ 2] 1956         JRA     CHAR2
      000AA8 CD 0A 8E         [ 4] 1957 CHAR1:  CALL     SPACE
      000AAB CD 00 CE         [ 4] 1958 CHAR2:  CALL     DONXT
      000AAE 0A A8                 1959         .word      CHAR1
      000AB0 81               [ 4] 1960         RET
                                   1961 
                                   1962 ;       TYPE    ( b u -- )
                                   1963 ;       Output u characters from b.
      000AB1 0A 96                 1964         .word      LINK
                           000AB3  1965 LINK = . 
      000AB3 04                    1966         .byte      4
      000AB4 54 59 50 45           1967         .ascii     "TYPE"
      000AB8                       1968 TYPES:
      000AB8 CD 01 B8         [ 4] 1969         CALL     TOR
      000ABB 20 0C            [ 2] 1970         JRA     TYPE2
      000ABD CD 01 EF         [ 4] 1971 TYPE1:  CALL     DUPP
      000AC0 CD 01 60         [ 4] 1972         CALL     CAT
      000AC3 CD 00 A0         [ 4] 1973         CALL     EMIT
      000AC6 CD 06 6A         [ 4] 1974         CALL     ONEP
      000AC9 CD 00 CE         [ 4] 1975 TYPE2:  CALL     DONXT
      000ACC 0A BD                 1976         .word      TYPE1
      000ACE CC 01 E5         [ 2] 1977         JP     DROP
                                   1978 
                                   1979 ;       CR      ( -- )
                                   1980 ;       Output a carriage return
                                   1981 ;       and a line feed.
      000AD1 0A B3                 1982         .word      LINK
                           000AD3  1983 LINK = . 
      000AD3 02                    1984         .byte      2
      000AD4 43 52                 1985         .ascii     "CR"
      000AD6                       1986 CR:
      000AD6 CD 00 B6         [ 4] 1987         CALL     DOLIT
      000AD9 00 0D                 1988         .word      CRR
      000ADB CD 00 A0         [ 4] 1989         CALL     EMIT
      000ADE CD 00 B6         [ 4] 1990         CALL     DOLIT
      000AE1 00 0A                 1991         .word      LF
      000AE3 CC 00 A0         [ 2] 1992         JP     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   1993 
                                   1994 ;       do$     ( -- a )
                                   1995 ;       Return  address of a compiled
                                   1996 ;       string.
      000AE6 0A D3                 1997         .word      LINK
                           000AE8  1998 LINK = . 
      000AE8 43                    1999 	.byte      COMPO+3
      000AE9 64 6F 24              2000         .ascii     "do$"
      000AEC                       2001 DOSTR:
      000AEC CD 01 90         [ 4] 2002         CALL     RFROM
      000AEF CD 01 A3         [ 4] 2003         CALL     RAT
      000AF2 CD 01 90         [ 4] 2004         CALL     RFROM
      000AF5 CD 07 64         [ 4] 2005         CALL     COUNT
      000AF8 CD 03 92         [ 4] 2006         CALL     PLUS
      000AFB CD 01 B8         [ 4] 2007         CALL     TOR
      000AFE CD 01 FF         [ 4] 2008         CALL     SWAPP
      000B01 CD 01 B8         [ 4] 2009         CALL     TOR
      000B04 81               [ 4] 2010         RET
                                   2011 
                                   2012 ;       $"|     ( -- a )
                                   2013 ;       Run time routine compiled by $".
                                   2014 ;       Return address of a compiled string.
      000B05 0A E8                 2015         .word      LINK
                           000B07  2016 LINK = . 
      000B07 43                    2017 	.byte      COMPO+3
      000B08 24 22 7C              2018         .byte     '$','"','|'
      000B0B                       2019 STRQP:
      000B0B CD 0A EC         [ 4] 2020         CALL     DOSTR
      000B0E 81               [ 4] 2021         RET
                                   2022 
                                   2023 ;       ."|     ( -- )
                                   2024 ;       Run time routine of ." .
                                   2025 ;       Output a compiled string.
      000B0F 0B 07                 2026         .word      LINK
                           000B11  2027 LINK = . 
      000B11 43                    2028 	.byte      COMPO+3
      000B12 2E 22 7C              2029         .byte     '.','"','|'
      000B15                       2030 DOTQP:
      000B15 CD 0A EC         [ 4] 2031         CALL     DOSTR
      000B18 CD 07 64         [ 4] 2032         CALL     COUNT
      000B1B CC 0A B8         [ 2] 2033         JP     TYPES
                                   2034 
                                   2035 ;       .R      ( n +n -- )
                                   2036 ;       Display an integer in a field
                                   2037 ;       of n columns, right justified.
      000B1E 0B 11                 2038         .word      LINK
                           000B20  2039 LINK = . 
      000B20 02                    2040         .byte      2
      000B21 2E 52                 2041         .ascii     ".R"
      000B23                       2042 DOTR:
      000B23 CD 01 B8         [ 4] 2043         CALL     TOR
      000B26 CD 08 FE         [ 4] 2044         CALL     STR
      000B29 CD 01 90         [ 4] 2045         CALL     RFROM
      000B2C CD 02 19         [ 4] 2046         CALL     OVER
      000B2F CD 03 F0         [ 4] 2047         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000B32 CD 0A 9D         [ 4] 2048         CALL     SPACS
      000B35 CC 0A B8         [ 2] 2049         JP     TYPES
                                   2050 
                                   2051 ;       U.R     ( u +n -- )
                                   2052 ;       Display an unsigned integer
                                   2053 ;       in n column, right justified.
      000B38 0B 20                 2054         .word      LINK
                           000B3A  2055 LINK = . 
      000B3A 03                    2056         .byte      3
      000B3B 55 2E 52              2057         .ascii     "U.R"
      000B3E                       2058 UDOTR:
      000B3E CD 01 B8         [ 4] 2059         CALL     TOR
      000B41 CD 08 81         [ 4] 2060         CALL     BDIGS
      000B44 CD 08 BB         [ 4] 2061         CALL     DIGS
      000B47 CD 08 E6         [ 4] 2062         CALL     EDIGS
      000B4A CD 01 90         [ 4] 2063         CALL     RFROM
      000B4D CD 02 19         [ 4] 2064         CALL     OVER
      000B50 CD 03 F0         [ 4] 2065         CALL     SUBB
      000B53 CD 0A 9D         [ 4] 2066         CALL     SPACS
      000B56 CC 0A B8         [ 2] 2067         JP     TYPES
                                   2068 
                                   2069 ;       U.      ( u -- )
                                   2070 ;       Display an unsigned integer
                                   2071 ;       in free format.
      000B59 0B 3A                 2072         .word      LINK
                           000B5B  2073 LINK = . 
      000B5B 02                    2074         .byte      2
      000B5C 55 2E                 2075         .ascii     "U."
      000B5E                       2076 UDOT:
      000B5E CD 08 81         [ 4] 2077         CALL     BDIGS
      000B61 CD 08 BB         [ 4] 2078         CALL     DIGS
      000B64 CD 08 E6         [ 4] 2079         CALL     EDIGS
      000B67 CD 0A 8E         [ 4] 2080         CALL     SPACE
      000B6A CC 0A B8         [ 2] 2081         JP     TYPES
                                   2082 
                                   2083 ;       .       ( w -- )
                                   2084 ;       Display an integer in free
                                   2085 ;       format, preceeded by a space.
      000B6D 0B 5B                 2086         .word      LINK
                           000B6F  2087 LINK = . 
      000B6F 01                    2088         .byte      1
      000B70 2E                    2089         .ascii     "."
      000B71                       2090 DOT:
      000B71 CD 02 AA         [ 4] 2091         CALL     BASE
      000B74 CD 01 42         [ 4] 2092         CALL     AT
      000B77 CD 00 B6         [ 4] 2093         CALL     DOLIT
      000B7A 00 0A                 2094         .word      10
      000B7C CD 02 64         [ 4] 2095         CALL     XORR    ;?decimal
      000B7F CD 00 ED         [ 4] 2096         CALL     QBRAN
      000B82 0B 87                 2097         .word      DOT1
      000B84 CC 0B 5E         [ 2] 2098         JP     UDOT
      000B87 CD 08 FE         [ 4] 2099 DOT1:   CALL     STR
      000B8A CD 0A 8E         [ 4] 2100         CALL     SPACE
      000B8D CC 0A B8         [ 2] 2101         JP     TYPES
                                   2102 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2103 ;       ?       ( a -- )
                                   2104 ;       Display contents in memory cell.
      000B90 0B 6F                 2105         .word      LINK
                                   2106         
                           000B92  2107 LINK = . 
      000B92 01                    2108         .byte      1
      000B93 3F                    2109         .ascii     "?"
      000B94                       2110 QUEST:
      000B94 CD 01 42         [ 4] 2111         CALL     AT
      000B97 CC 0B 71         [ 2] 2112         JP     DOT
                                   2113 
                                   2114 ;; Parsing
                                   2115 
                                   2116 ;       parse   ( b u c -- b u delta ; <string> )
                                   2117 ;       Scan string delimited by c.
                                   2118 ;       Return found string and its offset.
      000B9A 0B 92                 2119         .word      LINK
                           000B9C  2120 LINK = . 
      000B9C 05                    2121         .byte      5
      000B9D 70 61 72 73 65        2122         .ascii     "parse"
      000BA2                       2123 PARS:
      000BA2 CD 02 B9         [ 4] 2124         CALL     TEMP
      000BA5 CD 01 2B         [ 4] 2125         CALL     STORE
      000BA8 CD 02 19         [ 4] 2126         CALL     OVER
      000BAB CD 01 B8         [ 4] 2127         CALL     TOR
      000BAE CD 01 EF         [ 4] 2128         CALL     DUPP
      000BB1 CD 00 ED         [ 4] 2129         CALL     QBRAN
      000BB4 0C 5A                 2130         .word      PARS8
      000BB6 CD 06 77         [ 4] 2131         CALL     ONEM
      000BB9 CD 02 B9         [ 4] 2132         CALL     TEMP
      000BBC CD 01 42         [ 4] 2133         CALL     AT
      000BBF CD 06 91         [ 4] 2134         CALL     BLANK
      000BC2 CD 04 18         [ 4] 2135         CALL     EQUAL
      000BC5 CD 00 ED         [ 4] 2136         CALL     QBRAN
      000BC8 0B FB                 2137         .word      PARS3
      000BCA CD 01 B8         [ 4] 2138         CALL     TOR
      000BCD CD 06 91         [ 4] 2139 PARS1:  CALL     BLANK
      000BD0 CD 02 19         [ 4] 2140         CALL     OVER
      000BD3 CD 01 60         [ 4] 2141         CALL     CAT     ;skip leading blanks ONLY
      000BD6 CD 03 F0         [ 4] 2142         CALL     SUBB
      000BD9 CD 02 28         [ 4] 2143         CALL     ZLESS
      000BDC CD 03 AC         [ 4] 2144         CALL     INVER
      000BDF CD 00 ED         [ 4] 2145         CALL     QBRAN
      000BE2 0B F8                 2146         .word      PARS2
      000BE4 CD 06 6A         [ 4] 2147         CALL     ONEP
      000BE7 CD 00 CE         [ 4] 2148         CALL     DONXT
      000BEA 0B CD                 2149         .word      PARS1
      000BEC CD 01 90         [ 4] 2150         CALL     RFROM
      000BEF CD 01 E5         [ 4] 2151         CALL     DROP
      000BF2 CD 06 9E         [ 4] 2152         CALL     ZERO
      000BF5 CC 01 EF         [ 2] 2153         JP     DUPP
      000BF8 CD 01 90         [ 4] 2154 PARS2:  CALL     RFROM
      000BFB CD 02 19         [ 4] 2155 PARS3:  CALL     OVER
      000BFE CD 01 FF         [ 4] 2156         CALL     SWAPP
      000C01 CD 01 B8         [ 4] 2157         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000C04 CD 02 B9         [ 4] 2158 PARS4:  CALL     TEMP
      000C07 CD 01 42         [ 4] 2159         CALL     AT
      000C0A CD 02 19         [ 4] 2160         CALL     OVER
      000C0D CD 01 60         [ 4] 2161         CALL     CAT
      000C10 CD 03 F0         [ 4] 2162         CALL     SUBB    ;scan for delimiter
      000C13 CD 02 B9         [ 4] 2163         CALL     TEMP
      000C16 CD 01 42         [ 4] 2164         CALL     AT
      000C19 CD 06 91         [ 4] 2165         CALL     BLANK
      000C1C CD 04 18         [ 4] 2166         CALL     EQUAL
      000C1F CD 00 ED         [ 4] 2167         CALL     QBRAN
      000C22 0C 27                 2168         .word      PARS5
      000C24 CD 02 28         [ 4] 2169         CALL     ZLESS
      000C27 CD 00 ED         [ 4] 2170 PARS5:  CALL     QBRAN
      000C2A 0C 3C                 2171         .word      PARS6
      000C2C CD 06 6A         [ 4] 2172         CALL     ONEP
      000C2F CD 00 CE         [ 4] 2173         CALL     DONXT
      000C32 0C 04                 2174         .word      PARS4
      000C34 CD 01 EF         [ 4] 2175         CALL     DUPP
      000C37 CD 01 B8         [ 4] 2176         CALL     TOR
      000C3A 20 0F            [ 2] 2177         JRA     PARS7
      000C3C CD 01 90         [ 4] 2178 PARS6:  CALL     RFROM
      000C3F CD 01 E5         [ 4] 2179         CALL     DROP
      000C42 CD 01 EF         [ 4] 2180         CALL     DUPP
      000C45 CD 06 6A         [ 4] 2181         CALL     ONEP
      000C48 CD 01 B8         [ 4] 2182         CALL     TOR
      000C4B CD 02 19         [ 4] 2183 PARS7:  CALL     OVER
      000C4E CD 03 F0         [ 4] 2184         CALL     SUBB
      000C51 CD 01 90         [ 4] 2185         CALL     RFROM
      000C54 CD 01 90         [ 4] 2186         CALL     RFROM
      000C57 CC 03 F0         [ 2] 2187         JP     SUBB
      000C5A CD 02 19         [ 4] 2188 PARS8:  CALL     OVER
      000C5D CD 01 90         [ 4] 2189         CALL     RFROM
      000C60 CC 03 F0         [ 2] 2190         JP     SUBB
                                   2191 
                                   2192 ;       PARSE   ( c -- b u ; <string> )
                                   2193 ;       Scan input stream and return
                                   2194 ;       counted string delimited by c.
      000C63 0B 9C                 2195         .word      LINK
                           000C65  2196 LINK = . 
      000C65 05                    2197         .byte      5
      000C66 50 41 52 53 45        2198         .ascii     "PARSE"
      000C6B                       2199 PARSE:
      000C6B CD 01 B8         [ 4] 2200         CALL     TOR
      000C6E CD 07 94         [ 4] 2201         CALL     TIB
      000C71 CD 02 C8         [ 4] 2202         CALL     INN
      000C74 CD 01 42         [ 4] 2203         CALL     AT
      000C77 CD 03 92         [ 4] 2204         CALL     PLUS    ;current input buffer pointer
      000C7A CD 02 D8         [ 4] 2205         CALL     NTIB
      000C7D CD 01 42         [ 4] 2206         CALL     AT
      000C80 CD 02 C8         [ 4] 2207         CALL     INN
      000C83 CD 01 42         [ 4] 2208         CALL     AT
      000C86 CD 03 F0         [ 4] 2209         CALL     SUBB    ;remaining count
      000C89 CD 01 90         [ 4] 2210         CALL     RFROM
      000C8C CD 0B A2         [ 4] 2211         CALL     PARS
      000C8F CD 02 C8         [ 4] 2212         CALL     INN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000C92 CC 07 22         [ 2] 2213         JP     PSTOR
                                   2214 
                                   2215 ;       .(      ( -- )
                                   2216 ;       Output following string up to next ) .
      000C95 0C 65                 2217         .word      LINK
                           000C97  2218 LINK = . 
      000C97 82                    2219 	.byte      IMEDD+2
      000C98 2E 28                 2220         .ascii     ".("
      000C9A                       2221 DOTPR:
      000C9A CD 00 B6         [ 4] 2222         CALL     DOLIT
      000C9D 00 29                 2223         .word     41	; ")"
      000C9F CD 0C 6B         [ 4] 2224         CALL     PARSE
      000CA2 CC 0A B8         [ 2] 2225         JP     TYPES
                                   2226 
                                   2227 ;       (       ( -- )
                                   2228 ;       Ignore following string up to next ).
                                   2229 ;       A comment.
      000CA5 0C 97                 2230         .word      LINK
                           000CA7  2231 LINK = . 
      000CA7 81                    2232 	.byte      IMEDD+1
      000CA8 28                    2233         .ascii     "("
      000CA9                       2234 PAREN:
      000CA9 CD 00 B6         [ 4] 2235         CALL     DOLIT
      000CAC 00 29                 2236         .word     41	; ")"
      000CAE CD 0C 6B         [ 4] 2237         CALL     PARSE
      000CB1 CC 03 72         [ 2] 2238         JP     DDROP
                                   2239 
                                   2240 ;       \       ( -- )
                                   2241 ;       Ignore following text till
                                   2242 ;       end of line.
      000CB4 0C A7                 2243         .word      LINK
                           000CB6  2244 LINK = . 
      000CB6 81                    2245 			.byte      IMEDD+1
      000CB7 5C 5C                 2246         .ascii     "\\"
      000CB9                       2247 BKSLA:
      000CB9 CD 02 D8         [ 4] 2248         CALL     NTIB
      000CBC CD 01 42         [ 4] 2249         CALL     AT
      000CBF CD 02 C8         [ 4] 2250         CALL     INN
      000CC2 CC 01 2B         [ 2] 2251         JP     STORE
                                   2252 
                                   2253 ;       WORD    ( c -- a ; <string> )
                                   2254 ;       Parse a word from input stream
                                   2255 ;       and copy it to code dictionary.
      000CC5 0C B6                 2256         .word      LINK
                           000CC7  2257 LINK = . 
      000CC7 04                    2258         .byte      4
      000CC8 57 4F 52 44           2259         .ascii     "WORD"
      000CCC                       2260 WORDD:
      000CCC CD 0C 6B         [ 4] 2261         CALL     PARSE
      000CCF CD 07 77         [ 4] 2262         CALL     HERE
      000CD2 CD 06 3F         [ 4] 2263         CALL     CELLP
      000CD5 CC 08 24         [ 2] 2264         JP     PACKS
                                   2265 
                                   2266 ;       TOKEN   ( -- a ; <string> )
                                   2267 ;       Parse a word from input stream
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2268 ;       and copy it to name dictionary.
      000CD8 0C C7                 2269         .word      LINK
                           000CDA  2270 LINK = . 
      000CDA 05                    2271         .byte      5
      000CDB 54 4F 4B 45 4E        2272         .ascii     "TOKEN"
      000CE0                       2273 TOKEN:
      000CE0 CD 06 91         [ 4] 2274         CALL     BLANK
      000CE3 CC 0C CC         [ 2] 2275         JP     WORDD
                                   2276 
                                   2277 ;; Dictionary search
                                   2278 
                                   2279 ;       NAME>   ( na -- ca )
                                   2280 ;       Return a code address given
                                   2281 ;       a name address.
      000CE6 0C DA                 2282         .word      LINK
                           000CE8  2283 LINK = . 
      000CE8 05                    2284         .byte      5
      000CE9 4E 41 4D 45 3E        2285         .ascii     "NAME>"
      000CEE                       2286 NAMET:
      000CEE CD 07 64         [ 4] 2287         CALL     COUNT
      000CF1 CD 00 B6         [ 4] 2288         CALL     DOLIT
      000CF4 00 1F                 2289         .word      31
      000CF6 CD 02 3B         [ 4] 2290         CALL     ANDD
      000CF9 CC 03 92         [ 2] 2291         JP     PLUS
                                   2292 
                                   2293 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2294 ;       Compare u cells in two
                                   2295 ;       strings. Return 0 if identical.
      000CFC 0C E8                 2296         .word      LINK
                           000CFE  2297 LINK = . 
      000CFE 05                    2298         .byte       5
      000CFF 53 41 4D 45 3F        2299         .ascii     "SAME?"
      000D04                       2300 SAMEQ:
      000D04 CD 06 77         [ 4] 2301         CALL     ONEM
      000D07 CD 01 B8         [ 4] 2302         CALL     TOR
      000D0A 20 29            [ 2] 2303         JRA     SAME2
      000D0C CD 02 19         [ 4] 2304 SAME1:  CALL     OVER
      000D0F CD 01 A3         [ 4] 2305         CALL     RAT
      000D12 CD 03 92         [ 4] 2306         CALL     PLUS
      000D15 CD 01 60         [ 4] 2307         CALL     CAT
      000D18 CD 02 19         [ 4] 2308         CALL     OVER
      000D1B CD 01 A3         [ 4] 2309         CALL     RAT
      000D1E CD 03 92         [ 4] 2310         CALL     PLUS
      000D21 CD 01 60         [ 4] 2311         CALL     CAT
      000D24 CD 03 F0         [ 4] 2312         CALL     SUBB
      000D27 CD 03 39         [ 4] 2313         CALL     QDUP
      000D2A CD 00 ED         [ 4] 2314         CALL     QBRAN
      000D2D 0D 35                 2315         .word      SAME2
      000D2F CD 01 90         [ 4] 2316         CALL     RFROM
      000D32 CC 01 E5         [ 2] 2317         JP     DROP
      000D35 CD 00 CE         [ 4] 2318 SAME2:  CALL     DONXT
      000D38 0D 0C                 2319         .word      SAME1
      000D3A CC 06 9E         [ 2] 2320         JP     ZERO
                                   2321 
                                   2322 ;       find    ( a va -- ca na | a F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   2323 ;       Search vocabulary for string.
                                   2324 ;       Return ca and na if succeeded.
      000D3D 0C FE                 2325         .word      LINK
                           000D3F  2326 LINK = . 
      000D3F 04                    2327         .byte      4
      000D40 66 69 6E 64           2328         .ascii     "find"
      000D44                       2329 FIND:
      000D44 CD 01 FF         [ 4] 2330         CALL     SWAPP
      000D47 CD 01 EF         [ 4] 2331         CALL     DUPP
      000D4A CD 01 60         [ 4] 2332         CALL     CAT
      000D4D CD 02 B9         [ 4] 2333         CALL     TEMP
      000D50 CD 01 2B         [ 4] 2334         CALL     STORE
      000D53 CD 01 EF         [ 4] 2335         CALL     DUPP
      000D56 CD 01 42         [ 4] 2336         CALL     AT
      000D59 CD 01 B8         [ 4] 2337         CALL     TOR
      000D5C CD 06 3F         [ 4] 2338         CALL     CELLP
      000D5F CD 01 FF         [ 4] 2339         CALL     SWAPP
      000D62 CD 01 42         [ 4] 2340 FIND1:  CALL     AT
      000D65 CD 01 EF         [ 4] 2341         CALL     DUPP
      000D68 CD 00 ED         [ 4] 2342         CALL     QBRAN
      000D6B 0D A1                 2343         .word      FIND6
      000D6D CD 01 EF         [ 4] 2344         CALL     DUPP
      000D70 CD 01 42         [ 4] 2345         CALL     AT
      000D73 CD 00 B6         [ 4] 2346         CALL     DOLIT
      000D76 1F 7F                 2347         .word      MASKK
      000D78 CD 02 3B         [ 4] 2348         CALL     ANDD
      000D7B CD 01 A3         [ 4] 2349         CALL     RAT
      000D7E CD 02 64         [ 4] 2350         CALL     XORR
      000D81 CD 00 ED         [ 4] 2351         CALL     QBRAN
      000D84 0D 90                 2352         .word      FIND2
      000D86 CD 06 3F         [ 4] 2353         CALL     CELLP
      000D89 CD 00 B6         [ 4] 2354         CALL     DOLIT
      000D8C FF FF                 2355         .word     0xFFFF
      000D8E 20 0C            [ 2] 2356         JRA     FIND3
      000D90 CD 06 3F         [ 4] 2357 FIND2:  CALL     CELLP
      000D93 CD 02 B9         [ 4] 2358         CALL     TEMP
      000D96 CD 01 42         [ 4] 2359         CALL     AT
      000D99 CD 0D 04         [ 4] 2360         CALL     SAMEQ
      000D9C CD 01 04         [ 4] 2361 FIND3:  CALL     BRAN
      000D9F 0D B0                 2362         .word      FIND4
      000DA1 CD 01 90         [ 4] 2363 FIND6:  CALL     RFROM
      000DA4 CD 01 E5         [ 4] 2364         CALL     DROP
      000DA7 CD 01 FF         [ 4] 2365         CALL     SWAPP
      000DAA CD 06 4E         [ 4] 2366         CALL     CELLM
      000DAD CC 01 FF         [ 2] 2367         JP     SWAPP
      000DB0 CD 00 ED         [ 4] 2368 FIND4:  CALL     QBRAN
      000DB3 0D BD                 2369         .word      FIND5
      000DB5 CD 06 4E         [ 4] 2370         CALL     CELLM
      000DB8 CD 06 4E         [ 4] 2371         CALL     CELLM
      000DBB 20 A5            [ 2] 2372         JRA     FIND1
      000DBD CD 01 90         [ 4] 2373 FIND5:  CALL     RFROM
      000DC0 CD 01 E5         [ 4] 2374         CALL     DROP
      000DC3 CD 01 FF         [ 4] 2375         CALL     SWAPP
      000DC6 CD 01 E5         [ 4] 2376         CALL     DROP
      000DC9 CD 06 4E         [ 4] 2377         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000DCC CD 01 EF         [ 4] 2378         CALL     DUPP
      000DCF CD 0C EE         [ 4] 2379         CALL     NAMET
      000DD2 CC 01 FF         [ 2] 2380         JP     SWAPP
                                   2381 
                                   2382 ;       NAME?   ( a -- ca na | a F )
                                   2383 ;       Search vocabularies for a string.
      000DD5 0D 3F                 2384         .word      LINK
                           000DD7  2385 LINK = . 
      000DD7 05                    2386         .byte      5
      000DD8 4E 41 4D 45 3F        2387         .ascii     "NAME?"
      000DDD                       2388 NAMEQ:
      000DDD CD 03 0B         [ 4] 2389         CALL     CNTXT
      000DE0 CC 0D 44         [ 2] 2390         JP     FIND
                                   2391 
                                   2392 ;; Terminal response
                                   2393 
                                   2394 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2395 ;       Backup cursor by one character.
      000DE3 0D D7                 2396         .word      LINK
                           000DE5  2397 LINK = . 
      000DE5 02                    2398         .byte      2
      000DE6 5E 68                 2399         .ascii     "^h"
      000DE8                       2400 BKSP:
      000DE8 CD 01 B8         [ 4] 2401         CALL     TOR
      000DEB CD 02 19         [ 4] 2402         CALL     OVER
      000DEE CD 01 90         [ 4] 2403         CALL     RFROM
      000DF1 CD 01 FF         [ 4] 2404         CALL     SWAPP
      000DF4 CD 02 19         [ 4] 2405         CALL     OVER
      000DF7 CD 02 64         [ 4] 2406         CALL     XORR
      000DFA CD 00 ED         [ 4] 2407         CALL     QBRAN
      000DFD 0E 18                 2408         .word      BACK1
      000DFF CD 00 B6         [ 4] 2409         CALL     DOLIT
      000E02 00 08                 2410         .word      BKSPP
      000E04 CD 00 A0         [ 4] 2411         CALL     EMIT
      000E07 CD 06 77         [ 4] 2412         CALL     ONEM
      000E0A CD 06 91         [ 4] 2413         CALL     BLANK
      000E0D CD 00 A0         [ 4] 2414         CALL     EMIT
      000E10 CD 00 B6         [ 4] 2415         CALL     DOLIT
      000E13 00 08                 2416         .word      BKSPP
      000E15 CC 00 A0         [ 2] 2417         JP     EMIT
      000E18 81               [ 4] 2418 BACK1:  RET
                                   2419 
                                   2420 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2421 ;       Accept and echo key stroke
                                   2422 ;       and bump cursor.
      000E19 0D E5                 2423         .word      LINK
                           000E1B  2424 LINK = . 
      000E1B 03                    2425         .byte      3
      000E1C 54 41 50              2426         .ascii     "TAP"
      000E1F                       2427 TAP:
      000E1F CD 01 EF         [ 4] 2428         CALL     DUPP
      000E22 CD 00 A0         [ 4] 2429         CALL     EMIT
      000E25 CD 02 19         [ 4] 2430         CALL     OVER
      000E28 CD 01 4F         [ 4] 2431         CALL     CSTOR
      000E2B CC 06 6A         [ 2] 2432         JP     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   2433 
                                   2434 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2435 ;       Process a key stroke,
                                   2436 ;       CR or backspace.
      000E2E 0E 1B                 2437         .word      LINK
                           000E30  2438 LINK = . 
      000E30 04                    2439         .byte      4
      000E31 6B 54 41 50           2440         .ascii     "kTAP"
      000E35                       2441 KTAP:
      000E35 CD 01 EF         [ 4] 2442         CALL     DUPP
      000E38 CD 00 B6         [ 4] 2443         CALL     DOLIT
      000E3B 00 0D                 2444         .word      CRR
      000E3D CD 02 64         [ 4] 2445         CALL     XORR
      000E40 CD 00 ED         [ 4] 2446         CALL     QBRAN
      000E43 0E 5B                 2447         .word      KTAP2
      000E45 CD 00 B6         [ 4] 2448         CALL     DOLIT
      000E48 00 08                 2449         .word      BKSPP
      000E4A CD 02 64         [ 4] 2450         CALL     XORR
      000E4D CD 00 ED         [ 4] 2451         CALL     QBRAN
      000E50 0E 58                 2452         .word      KTAP1
      000E52 CD 06 91         [ 4] 2453         CALL     BLANK
      000E55 CC 0E 1F         [ 2] 2454         JP     TAP
      000E58 CC 0D E8         [ 2] 2455 KTAP1:  JP     BKSP
      000E5B CD 01 E5         [ 4] 2456 KTAP2:  CALL     DROP
      000E5E CD 01 FF         [ 4] 2457         CALL     SWAPP
      000E61 CD 01 E5         [ 4] 2458         CALL     DROP
      000E64 CC 01 EF         [ 2] 2459         JP     DUPP
                                   2460 
                                   2461 ;       accept  ( b u -- b u )
                                   2462 ;       Accept characters to input
                                   2463 ;       buffer. Return with actual count.
      000E67 0E 30                 2464         .word      LINK
                           000E69  2465 LINK = . 
      000E69 06                    2466         .byte      6
      000E6A 41 43 43 45 50 54     2467         .ascii     "ACCEPT"
      000E70                       2468 ACCEP:
      000E70 CD 02 19         [ 4] 2469         CALL     OVER
      000E73 CD 03 92         [ 4] 2470         CALL     PLUS
      000E76 CD 02 19         [ 4] 2471         CALL     OVER
      000E79 CD 03 7D         [ 4] 2472 ACCP1:  CALL     DDUP
      000E7C CD 02 64         [ 4] 2473         CALL     XORR
      000E7F CD 00 ED         [ 4] 2474         CALL     QBRAN
      000E82 0E A4                 2475         .word      ACCP4
      000E84 CD 0A 5C         [ 4] 2476         CALL     KEY
      000E87 CD 01 EF         [ 4] 2477         CALL     DUPP
      000E8A CD 06 91         [ 4] 2478         CALL     BLANK
      000E8D CD 00 B6         [ 4] 2479         CALL     DOLIT
      000E90 00 7F                 2480         .word      127
      000E92 CD 04 B2         [ 4] 2481         CALL     WITHI
      000E95 CD 00 ED         [ 4] 2482         CALL     QBRAN
      000E98 0E 9F                 2483         .word      ACCP2
      000E9A CD 0E 1F         [ 4] 2484         CALL     TAP
      000E9D 20 03            [ 2] 2485         JRA     ACCP3
      000E9F CD 0E 35         [ 4] 2486 ACCP2:  CALL     KTAP
      000EA2 20 D5            [ 2] 2487 ACCP3:  JRA     ACCP1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000EA4 CD 01 E5         [ 4] 2488 ACCP4:  CALL     DROP
      000EA7 CD 02 19         [ 4] 2489         CALL     OVER
      000EAA CC 03 F0         [ 2] 2490         JP     SUBB
                                   2491 
                                   2492 ;       QUERY   ( -- )
                                   2493 ;       Accept input stream to
                                   2494 ;       terminal input buffer.
      000EAD 0E 69                 2495         .word      LINK
                                   2496         
                           000EAF  2497 LINK = . 
      000EAF 05                    2498         .byte      5
      000EB0 51 55 45 52 59        2499         .ascii     "QUERY"
      000EB5                       2500 QUERY:
      000EB5 CD 07 94         [ 4] 2501         CALL     TIB
      000EB8 CD 00 B6         [ 4] 2502         CALL     DOLIT
      000EBB 00 50                 2503         .word      80
      000EBD CD 0E 70         [ 4] 2504         CALL     ACCEP
      000EC0 CD 02 D8         [ 4] 2505         CALL     NTIB
      000EC3 CD 01 2B         [ 4] 2506         CALL     STORE
      000EC6 CD 01 E5         [ 4] 2507         CALL     DROP
      000EC9 CD 06 9E         [ 4] 2508         CALL     ZERO
      000ECC CD 02 C8         [ 4] 2509         CALL     INN
      000ECF CC 01 2B         [ 2] 2510         JP     STORE
                                   2511 
                                   2512 ;       ABORT   ( -- )
                                   2513 ;       Reset data stack and
                                   2514 ;       jump to QUIT.
      000ED2 0E AF                 2515         .word      LINK
                           000ED4  2516 LINK = . 
      000ED4 05                    2517         .byte      5
      000ED5 41 42 4F 52 54        2518         .ascii     "ABORT"
      000EDA                       2519 ABORT:
      000EDA CD 0F D1         [ 4] 2520         CALL     PRESE
      000EDD CC 0F EE         [ 2] 2521         JP     QUIT
                                   2522 
                                   2523 ;       abort"  ( f -- )
                                   2524 ;       Run time routine of ABORT".
                                   2525 ;       Abort with a message.
      000EE0 0E D4                 2526         .word      LINK
                           000EE2  2527 LINK = . 
      000EE2 46                    2528 	.byte      COMPO+6
      000EE3 61 62 6F 72 74        2529         .ascii     "abort"
      000EE8 22                    2530         .byte      '"'
      000EE9                       2531 ABORQ:
      000EE9 CD 00 ED         [ 4] 2532         CALL     QBRAN
      000EEC 0F 08                 2533         .word      ABOR2   ;text flag
      000EEE CD 0A EC         [ 4] 2534         CALL     DOSTR
      000EF1 CD 0A 8E         [ 4] 2535 ABOR1:  CALL     SPACE
      000EF4 CD 07 64         [ 4] 2536         CALL     COUNT
      000EF7 CD 0A B8         [ 4] 2537         CALL     TYPES
      000EFA CD 00 B6         [ 4] 2538         CALL     DOLIT
      000EFD 00 3F                 2539         .word     63 ; "?"
      000EFF CD 00 A0         [ 4] 2540         CALL     EMIT
      000F02 CD 0A D6         [ 4] 2541         CALL     CR
      000F05 CC 0E DA         [ 2] 2542         JP     ABORT   ;pass error string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000F08 CD 0A EC         [ 4] 2543 ABOR2:  CALL     DOSTR
      000F0B CC 01 E5         [ 2] 2544         JP     DROP
                                   2545 
                                   2546 ;; The text interpreter
                                   2547 
                                   2548 ;       $INTERPRET      ( a -- )
                                   2549 ;       Interpret a word. If failed,
                                   2550 ;       try to convert it to an integer.
      000F0E 0E E2                 2551         .word      LINK
                           000F10  2552 LINK = . 
      000F10 0A                    2553         .byte      10
      000F11 24 49 4E 54 45 52 50  2554         .ascii     "$INTERPRET"
             52 45 54
      000F1B                       2555 INTER:
      000F1B CD 0D DD         [ 4] 2556         CALL     NAMEQ
      000F1E CD 03 39         [ 4] 2557         CALL     QDUP    ;?defined
      000F21 CD 00 ED         [ 4] 2558         CALL     QBRAN
      000F24 0F 45                 2559         .word      INTE1
      000F26 CD 01 42         [ 4] 2560         CALL     AT
      000F29 CD 00 B6         [ 4] 2561         CALL     DOLIT
      000F2C 40 00                 2562 		.word       0x4000	; COMPO*256
      000F2E CD 02 3B         [ 4] 2563         CALL     ANDD    ;?compile only lexicon bits
      000F31 CD 0E E9         [ 4] 2564         CALL     ABORQ
      000F34 0D                    2565         .byte      13
      000F35 20 63 6F 6D 70 69 6C  2566         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000F42 CC 01 14         [ 2] 2567         JP     EXECU
      000F45 CD 09 89         [ 4] 2568 INTE1:  CALL     NUMBQ   ;convert a number
      000F48 CD 00 ED         [ 4] 2569         CALL     QBRAN
      000F4B 0E F1                 2570         .word      ABOR1
      000F4D 81               [ 4] 2571         RET
                                   2572 
                                   2573 ;       [       ( -- )
                                   2574 ;       Start  text interpreter.
      000F4E 0F 10                 2575         .word      LINK
                           000F50  2576 LINK = . 
      000F50 81                    2577 	.byte      IMEDD+1
      000F51 5B                    2578         .ascii     "["
      000F52                       2579 LBRAC:
      000F52 CD 00 B6         [ 4] 2580         CALL     DOLIT
      000F55 0F 1B                 2581         .word      INTER
      000F57 CD 02 E9         [ 4] 2582         CALL     TEVAL
      000F5A CC 01 2B         [ 2] 2583         JP     STORE
                                   2584 
                                   2585 ;       .OK     ( -- )
                                   2586 ;       Display 'ok' while interpreting.
      000F5D 0F 50                 2587         .word      LINK
                           000F5F  2588 LINK = . 
      000F5F 03                    2589         .byte      3
      000F60 2E 4F 4B              2590         .ascii     ".OK"
      000F63                       2591 DOTOK:
      000F63 CD 00 B6         [ 4] 2592         CALL     DOLIT
      000F66 0F 1B                 2593         .word      INTER
      000F68 CD 02 E9         [ 4] 2594         CALL     TEVAL
      000F6B CD 01 42         [ 4] 2595         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000F6E CD 04 18         [ 4] 2596         CALL     EQUAL
      000F71 CD 00 ED         [ 4] 2597         CALL     QBRAN
      000F74 0F 7D                 2598         .word      DOTO1
      000F76 CD 0B 15         [ 4] 2599         CALL     DOTQP
      000F79 03                    2600         .byte      3
      000F7A 20 6F 6B              2601         .ascii     " ok"
      000F7D CC 0A D6         [ 2] 2602 DOTO1:  JP     CR
                                   2603 
                                   2604 ;       ?STACK  ( -- )
                                   2605 ;       Abort if stack underflows.
      000F80 0F 5F                 2606         .word      LINK
                           000F82  2607 LINK = . 
      000F82 06                    2608         .byte      6
      000F83 3F 53 54 41 43 4B     2609         .ascii     "?STACK"
      000F89                       2610 QSTAC:
      000F89 CD 06 F4         [ 4] 2611         CALL     DEPTH
      000F8C CD 02 28         [ 4] 2612         CALL     ZLESS   ;check only for underflow
      000F8F CD 0E E9         [ 4] 2613         CALL     ABORQ
      000F92 0B                    2614         .byte      11
      000F93 20 75 6E 64 65 72 66  2615         .ascii     " underflow "
             6C 6F 77 20
      000F9E 81               [ 4] 2616         RET
                                   2617 
                                   2618 ;       EVAL    ( -- )
                                   2619 ;       Interpret  input stream.
      000F9F 0F 82                 2620         .word      LINK
                           000FA1  2621 LINK = . 
      000FA1 04                    2622         .byte      4
      000FA2 45 56 41 4C           2623         .ascii     "EVAL"
      000FA6                       2624 EVAL:
      000FA6 CD 0C E0         [ 4] 2625 EVAL1:  CALL     TOKEN
      000FA9 CD 01 EF         [ 4] 2626         CALL     DUPP
      000FAC CD 01 60         [ 4] 2627         CALL     CAT     ;?input stream empty
      000FAF CD 00 ED         [ 4] 2628         CALL     QBRAN
      000FB2 0F C2                 2629         .word      EVAL2
      000FB4 CD 02 E9         [ 4] 2630         CALL     TEVAL
      000FB7 CD 07 A8         [ 4] 2631         CALL     ATEXE
      000FBA CD 0F 89         [ 4] 2632         CALL     QSTAC   ;evaluate input, check stack
      000FBD CD 01 04         [ 4] 2633         CALL     BRAN
      000FC0 0F A6                 2634         .word      EVAL1
      000FC2 CD 01 E5         [ 4] 2635 EVAL2:  CALL     DROP
      000FC5 CC 0F 63         [ 2] 2636         JP     DOTOK
                                   2637 
                                   2638 ;       PRESET  ( -- )
                                   2639 ;       Reset data stack pointer and
                                   2640 ;       terminal input buffer.
      000FC8 0F A1                 2641         .word      LINK
                           000FCA  2642 LINK = . 
      000FCA 06                    2643         .byte      6
      000FCB 50 52 45 53 45 54     2644         .ascii     "PRESET"
      000FD1                       2645 PRESE:
      000FD1 CD 00 B6         [ 4] 2646         CALL     DOLIT
      000FD4 17 FF                 2647         .word      SPP
      000FD6 CD 01 DC         [ 4] 2648         CALL     SPSTO
      000FD9 CD 00 B6         [ 4] 2649         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000FDC 17 00                 2650         .word      TIBB
      000FDE CD 02 D8         [ 4] 2651         CALL     NTIB
      000FE1 CD 06 3F         [ 4] 2652         CALL     CELLP
      000FE4 CC 01 2B         [ 2] 2653         JP     STORE
                                   2654 
                                   2655 ;       QUIT    ( -- )
                                   2656 ;       Reset return stack pointer
                                   2657 ;       and start text interpreter.
      000FE7 0F CA                 2658         .word      LINK
                           000FE9  2659 LINK = . 
      000FE9 04                    2660         .byte      4
      000FEA 51 55 49 54           2661         .ascii     "QUIT"
      000FEE                       2662 QUIT:
      000FEE CD 00 B6         [ 4] 2663         CALL     DOLIT
      000FF1 16 F0                 2664         .word      RPP
      000FF3 CD 01 7D         [ 4] 2665         CALL     RPSTO   ;reset return stack pointer
      000FF6 CD 0F 52         [ 4] 2666 QUIT1:  CALL     LBRAC   ;start interpretation
      000FF9 CD 0E B5         [ 4] 2667 QUIT2:  CALL     QUERY   ;get input
      000FFC CD 0F A6         [ 4] 2668         CALL     EVAL
      000FFF 20 F8            [ 2] 2669         JRA     QUIT2   ;continue till error
                                   2670 
                                   2671 ;; The compiler
                                   2672 
                                   2673 ;       '       ( -- ca )
                                   2674 ;       Search vocabularies for
                                   2675 ;       next word in input stream.
      001001 0F E9                 2676         .word      LINK
                           001003  2677 LINK = . 
      001003 01                    2678         .byte      1
      001004 27                    2679         .ascii     "'"
      001005                       2680 TICK:
      001005 CD 0C E0         [ 4] 2681         CALL     TOKEN
      001008 CD 0D DD         [ 4] 2682         CALL     NAMEQ   ;?defined
      00100B CD 00 ED         [ 4] 2683         CALL     QBRAN
      00100E 0E F1                 2684         .word      ABOR1
      001010 81               [ 4] 2685         RET     ;yes, push code address
                                   2686 
                                   2687 ;       ALLOT   ( n -- )
                                   2688 ;       Allocate n bytes to  code dictionary.
      001011 10 03                 2689         .word      LINK
                           001013  2690 LINK = . 
      001013 05                    2691         .byte      5
      001014 41 4C 4C 4F 54        2692         .ascii     "ALLOT"
      001019                       2693 ALLOT:
      001019 CD 03 19         [ 4] 2694         CALL     CPP
      00101C CC 07 22         [ 2] 2695         JP     PSTOR
                                   2696 
                                   2697 ;       ,       ( w -- )
                                   2698 ;         Compile an integer into
                                   2699 ;         code dictionary.
      00101F 10 13                 2700         .word      LINK
                           001021  2701 LINK = . 
      001021 01                    2702         .byte      1
      001022 2C                    2703         .ascii     ","
      001023                       2704 COMMA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001023 CD 07 77         [ 4] 2705         CALL     HERE
      001026 CD 01 EF         [ 4] 2706         CALL     DUPP
      001029 CD 06 3F         [ 4] 2707         CALL     CELLP   ;cell boundary
      00102C CD 03 19         [ 4] 2708         CALL     CPP
      00102F CD 01 2B         [ 4] 2709         CALL     STORE
      001032 CC 01 2B         [ 2] 2710         JP     STORE
                                   2711 
                                   2712 ;       C,      ( c -- )
                                   2713 ;       Compile a byte into
                                   2714 ;       code dictionary.
      001035 10 21                 2715        .word      LINK
                           001037  2716 LINK = . 
      001037 02                    2717         .byte      2
      001038 43 2C                 2718         .ascii     "C,"
      00103A                       2719 CCOMMA:
      00103A CD 07 77         [ 4] 2720         CALL     HERE
      00103D CD 01 EF         [ 4] 2721         CALL     DUPP
      001040 CD 06 6A         [ 4] 2722         CALL     ONEP
      001043 CD 03 19         [ 4] 2723         CALL     CPP
      001046 CD 01 2B         [ 4] 2724         CALL     STORE
      001049 CC 01 4F         [ 2] 2725         JP     CSTOR
                                   2726 
                                   2727 ;       [COMPILE]       ( -- ; <string> )
                                   2728 ;       Compile next immediate
                                   2729 ;       word into code dictionary.
      00104C 10 37                 2730         .word      LINK
                           00104E  2731 LINK = . 
      00104E 89                    2732 	.byte      IMEDD+9
      00104F 5B 43 4F 4D 50 49 4C  2733         .ascii     "[COMPILE]"
             45 5D
      001058                       2734 BCOMP:
      001058 CD 10 05         [ 4] 2735         CALL     TICK
      00105B CC 12 B4         [ 2] 2736         JP     JSRC
                                   2737 
                                   2738 ;       COMPILE ( -- )
                                   2739 ;       Compile next jsr in
                                   2740 ;       colon list to code dictionary.
      00105E 10 4E                 2741         .word      LINK
                           001060  2742 LINK = . 
      001060 47                    2743 	.byte      COMPO+7
      001061 43 4F 4D 50 49 4C 45  2744         .ascii     "COMPILE"
      001068                       2745 COMPI:
      001068 CD 01 90         [ 4] 2746         CALL     RFROM
      00106B CD 06 6A         [ 4] 2747         CALL     ONEP
      00106E CD 01 EF         [ 4] 2748         CALL     DUPP
      001071 CD 01 42         [ 4] 2749         CALL     AT
      001074 CD 12 B4         [ 4] 2750         CALL     JSRC    ;compile subroutine
      001077 CD 06 3F         [ 4] 2751         CALL     CELLP
      00107A CC 01 B8         [ 2] 2752         JP     TOR
                                   2753 
                                   2754 ;       LITERAL ( w -- )
                                   2755 ;       Compile tos to dictionary
                                   2756 ;       as an integer literal.
      00107D 10 60                 2757         .word      LINK
                           00107F  2758 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00107F 87                    2759 	.byte      IMEDD+7
      001080 4C 49 54 45 52 41 4C  2760         .ascii     "LITERAL"
      001087                       2761 LITER:
      001087 CD 10 68         [ 4] 2762         CALL     COMPI
      00108A CD 00 B6         [ 4] 2763         CALL     DOLIT
      00108D CC 10 23         [ 2] 2764         JP     COMMA
                                   2765 
                                   2766 ;       $,"     ( -- )
                                   2767 ;       Compile a literal string
                                   2768 ;       up to next " .
      001090 10 7F                 2769         .word      LINK
                           001092  2770 LINK = . 
      001092 03                    2771         .byte      3
      001093 24 2C 22              2772         .byte     '$',',','"'
      001096                       2773 STRCQ:
      001096 CD 00 B6         [ 4] 2774         CALL     DOLIT
      001099 00 22                 2775         .word     34	; "
      00109B CD 0C 6B         [ 4] 2776         CALL     PARSE
      00109E CD 07 77         [ 4] 2777         CALL     HERE
      0010A1 CD 08 24         [ 4] 2778         CALL     PACKS   ;string to code dictionary
      0010A4 CD 07 64         [ 4] 2779         CALL     COUNT
      0010A7 CD 03 92         [ 4] 2780         CALL     PLUS    ;calculate aligned end of string
      0010AA CD 03 19         [ 4] 2781         CALL     CPP
      0010AD CC 01 2B         [ 2] 2782         JP     STORE
                                   2783 
                                   2784 ;; Structures
                                   2785 
                                   2786 ;       FOR     ( -- a )
                                   2787 ;       Start a FOR-NEXT loop
                                   2788 ;       structure in a colon definition.
      0010B0 10 92                 2789         .word      LINK
                           0010B2  2790 LINK = . 
      0010B2 83                    2791 	.byte      IMEDD+3
      0010B3 46 4F 52              2792         .ascii     "FOR"
      0010B6                       2793 FOR:
      0010B6 CD 10 68         [ 4] 2794         CALL     COMPI
      0010B9 CD 01 B8         [ 4] 2795         CALL     TOR
      0010BC CC 07 77         [ 2] 2796         JP     HERE
                                   2797 
                                   2798 ;       NEXT    ( a -- )
                                   2799 ;       Terminate a FOR-NEXT loop.
      0010BF 10 B2                 2800         .word      LINK
                           0010C1  2801 LINK = . 
      0010C1 84                    2802 	.byte      IMEDD+4
      0010C2 4E 45 58 54           2803         .ascii     "NEXT"
      0010C6                       2804 NEXT:
      0010C6 CD 10 68         [ 4] 2805         CALL     COMPI
      0010C9 CD 00 CE         [ 4] 2806         CALL     DONXT
      0010CC CC 10 23         [ 2] 2807         JP     COMMA
                                   2808 
                                   2809 ;       BEGIN   ( -- a )
                                   2810 ;       Start an infinite or
                                   2811 ;       indefinite loop structure.
      0010CF 10 C1                 2812         .word      LINK
                           0010D1  2813 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0010D1 85                    2814 	.byte      IMEDD+5
      0010D2 42 45 47 49 4E        2815         .ascii     "BEGIN"
      0010D7                       2816 BEGIN:
      0010D7 CC 07 77         [ 2] 2817         JP     HERE
                                   2818 
                                   2819 ;       UNTIL   ( a -- )
                                   2820 ;       Terminate a BEGIN-UNTIL
                                   2821 ;       indefinite loop structure.
      0010DA 10 D1                 2822         .word      LINK
                           0010DC  2823 LINK = . 
      0010DC 85                    2824 	.byte      IMEDD+5
      0010DD 55 4E 54 49 4C        2825         .ascii     "UNTIL"
      0010E2                       2826 UNTIL:
      0010E2 CD 10 68         [ 4] 2827         CALL     COMPI
      0010E5 CD 00 ED         [ 4] 2828         CALL     QBRAN
      0010E8 CC 10 23         [ 2] 2829         JP     COMMA
                                   2830 
                                   2831 ;       AGAIN   ( a -- )
                                   2832 ;       Terminate a BEGIN-AGAIN
                                   2833 ;       infinite loop structure.
      0010EB 10 DC                 2834         .word      LINK
                           0010ED  2835 LINK = . 
      0010ED 85                    2836 	.byte      IMEDD+5
      0010EE 41 47 41 49 4E        2837         .ascii     "AGAIN"
      0010F3                       2838 AGAIN:
      0010F3 CD 10 68         [ 4] 2839         CALL     COMPI
      0010F6 CD 01 04         [ 4] 2840         CALL     BRAN
      0010F9 CC 10 23         [ 2] 2841         JP     COMMA
                                   2842 
                                   2843 ;       IF      ( -- A )
                                   2844 ;       Begin a conditional branch.
      0010FC 10 ED                 2845         .word      LINK
                           0010FE  2846 LINK = . 
      0010FE 82                    2847 	.byte      IMEDD+2
      0010FF 49 46                 2848         .ascii     "IF"
      001101                       2849 IFF:
      001101 CD 10 68         [ 4] 2850         CALL     COMPI
      001104 CD 00 ED         [ 4] 2851         CALL     QBRAN
      001107 CD 07 77         [ 4] 2852         CALL     HERE
      00110A CD 06 9E         [ 4] 2853         CALL     ZERO
      00110D CC 10 23         [ 2] 2854         JP     COMMA
                                   2855 
                                   2856 ;       THEN        ( A -- )
                                   2857 ;       Terminate a conditional branch structure.
      001110 10 FE                 2858         .word      LINK
                           001112  2859 LINK = . 
      001112 84                    2860 	.byte      IMEDD+4
      001113 54 48 45 4E           2861         .ascii     "THEN"
      001117                       2862 THENN:
      001117 CD 07 77         [ 4] 2863         CALL     HERE
      00111A CD 01 FF         [ 4] 2864         CALL     SWAPP
      00111D CC 01 2B         [ 2] 2865         JP     STORE
                                   2866 
                                   2867 ;       ELSE        ( A -- A )
                                   2868 ;       Start the false clause in an IF-ELSE-THEN structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001120 11 12                 2869         .word      LINK
                           001122  2870 LINK = . 
      001122 84                    2871 	.byte      IMEDD+4
      001123 45 4C 53 45           2872         .ascii     "ELSE"
      001127                       2873 ELSEE:
      001127 CD 10 68         [ 4] 2874         CALL     COMPI
      00112A CD 01 04         [ 4] 2875         CALL     BRAN
      00112D CD 07 77         [ 4] 2876         CALL     HERE
      001130 CD 06 9E         [ 4] 2877         CALL     ZERO
      001133 CD 10 23         [ 4] 2878         CALL     COMMA
      001136 CD 01 FF         [ 4] 2879         CALL     SWAPP
      001139 CD 07 77         [ 4] 2880         CALL     HERE
      00113C CD 01 FF         [ 4] 2881         CALL     SWAPP
      00113F CC 01 2B         [ 2] 2882         JP     STORE
                                   2883 
                                   2884 ;       AHEAD       ( -- A )
                                   2885 ;       Compile a forward branch instruction.
      001142 11 22                 2886         .word      LINK
                           001144  2887 LINK = . 
      001144 85                    2888 	.byte      IMEDD+5
      001145 41 48 45 41 44        2889         .ascii     "AHEAD"
      00114A                       2890 AHEAD:
      00114A CD 10 68         [ 4] 2891         CALL     COMPI
      00114D CD 01 04         [ 4] 2892         CALL     BRAN
      001150 CD 07 77         [ 4] 2893         CALL     HERE
      001153 CD 06 9E         [ 4] 2894         CALL     ZERO
      001156 CC 10 23         [ 2] 2895         JP     COMMA
                                   2896 
                                   2897 ;       WHILE       ( a -- A a )
                                   2898 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001159 11 44                 2899         .word      LINK
                           00115B  2900 LINK = . 
      00115B 85                    2901 	.byte      IMEDD+5
      00115C 57 48 49 4C 45        2902         .ascii     "WHILE"
      001161                       2903 WHILE:
      001161 CD 10 68         [ 4] 2904         CALL     COMPI
      001164 CD 00 ED         [ 4] 2905         CALL     QBRAN
      001167 CD 07 77         [ 4] 2906         CALL     HERE
      00116A CD 06 9E         [ 4] 2907         CALL     ZERO
      00116D CD 10 23         [ 4] 2908         CALL     COMMA
      001170 CC 01 FF         [ 2] 2909         JP     SWAPP
                                   2910 
                                   2911 ;       REPEAT      ( A a -- )
                                   2912 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001173 11 5B                 2913         .word      LINK
                           001175  2914 LINK = . 
      001175 86                    2915         .byte      IMEDD+6
      001176 52 45 50 45 41 54     2916         .ascii     "REPEAT"
      00117C                       2917 REPEA:
      00117C CD 10 68         [ 4] 2918         CALL     COMPI
      00117F CD 01 04         [ 4] 2919         CALL     BRAN
      001182 CD 10 23         [ 4] 2920         CALL     COMMA
      001185 CD 07 77         [ 4] 2921         CALL     HERE
      001188 CD 01 FF         [ 4] 2922         CALL     SWAPP
      00118B CC 01 2B         [ 2] 2923         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   2924 
                                   2925 ;       AFT         ( a -- a A )
                                   2926 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00118E 11 75                 2927         .word      LINK
                           001190  2928 LINK = . 
      001190 83                    2929 	.byte      IMEDD+3
      001191 41 46 54              2930         .ascii     "AFT"
      001194                       2931 AFT:
      001194 CD 01 E5         [ 4] 2932         CALL     DROP
      001197 CD 11 4A         [ 4] 2933         CALL     AHEAD
      00119A CD 07 77         [ 4] 2934         CALL     HERE
      00119D CC 01 FF         [ 2] 2935         JP     SWAPP
                                   2936 
                                   2937 ;       ABORT"      ( -- ; <string> )
                                   2938 ;       Conditional abort with an error message.
      0011A0 11 90                 2939         .word      LINK
                           0011A2  2940 LINK = . 
      0011A2 86                    2941 	.byte      IMEDD+6
      0011A3 41 42 4F 52 54        2942         .ascii     "ABORT"
      0011A8 22                    2943         .byte      '"'
      0011A9                       2944 ABRTQ:
      0011A9 CD 10 68         [ 4] 2945         CALL     COMPI
      0011AC CD 0E E9         [ 4] 2946         CALL     ABORQ
      0011AF CC 10 96         [ 2] 2947         JP     STRCQ
                                   2948 
                                   2949 ;       $"     ( -- ; <string> )
                                   2950 ;       Compile an inline string literal.
      0011B2 11 A2                 2951         .word      LINK
                           0011B4  2952 LINK = . 
      0011B4 82                    2953 	.byte      IMEDD+2
      0011B5 24 22                 2954         .byte     '$','"'
      0011B7                       2955 STRQ:
      0011B7 CD 10 68         [ 4] 2956         CALL     COMPI
      0011BA CD 0B 0B         [ 4] 2957         CALL     STRQP
      0011BD CC 10 96         [ 2] 2958         JP     STRCQ
                                   2959 
                                   2960 ;       ."          ( -- ; <string> )
                                   2961 ;       Compile an inline string literal to be typed out at run time.
      0011C0 11 B4                 2962         .word      LINK
                           0011C2  2963 LINK = . 
      0011C2 82                    2964 	.byte      IMEDD+2
      0011C3 2E 22                 2965         .byte     '.','"'
      0011C5                       2966 DOTQ:
      0011C5 CD 10 68         [ 4] 2967         CALL     COMPI
      0011C8 CD 0B 15         [ 4] 2968         CALL     DOTQP
      0011CB CC 10 96         [ 2] 2969         JP     STRCQ
                                   2970 
                                   2971 ;; Name compiler
                                   2972 
                                   2973 ;       ?UNIQUE ( a -- a )
                                   2974 ;       Display a warning message
                                   2975 ;       if word already exists.
      0011CE 11 C2                 2976         .word      LINK
                           0011D0  2977 LINK = . 
      0011D0 07                    2978         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0011D1 3F 55 4E 49 51 55 45  2979         .ascii     "?UNIQUE"
      0011D8                       2980 UNIQU:
      0011D8 CD 01 EF         [ 4] 2981         CALL     DUPP
      0011DB CD 0D DD         [ 4] 2982         CALL     NAMEQ   ;?name exists
      0011DE CD 00 ED         [ 4] 2983         CALL     QBRAN
      0011E1 11 F7                 2984         .word      UNIQ1
      0011E3 CD 0B 15         [ 4] 2985         CALL     DOTQP   ;redef are OK
      0011E6 07                    2986         .byte       7
      0011E7 20 72 65 44 65 66 20  2987         .ascii     " reDef "       
      0011EE CD 02 19         [ 4] 2988         CALL     OVER
      0011F1 CD 07 64         [ 4] 2989         CALL     COUNT
      0011F4 CD 0A B8         [ 4] 2990         CALL     TYPES   ;just in case
      0011F7 CC 01 E5         [ 2] 2991 UNIQ1:  JP     DROP
                                   2992 
                                   2993 ;       $,n     ( na -- )
                                   2994 ;       Build a new dictionary name
                                   2995 ;       using string at na.
      0011FA 11 D0                 2996         .word      LINK
                           0011FC  2997 LINK = . 
      0011FC 03                    2998         .byte      3
      0011FD 24 2C 6E              2999         .ascii     "$,n"
      001200                       3000 SNAME:
      001200 CD 01 EF         [ 4] 3001         CALL     DUPP
      001203 CD 01 60         [ 4] 3002         CALL     CAT     ;?null input
      001206 CD 00 ED         [ 4] 3003         CALL     QBRAN
      001209 12 36                 3004         .word      PNAM1
      00120B CD 11 D8         [ 4] 3005         CALL     UNIQU   ;?redefinition
      00120E CD 01 EF         [ 4] 3006         CALL     DUPP
      001211 CD 07 64         [ 4] 3007         CALL     COUNT
      001214 CD 03 92         [ 4] 3008         CALL     PLUS
      001217 CD 03 19         [ 4] 3009         CALL     CPP
      00121A CD 01 2B         [ 4] 3010         CALL     STORE
      00121D CD 01 EF         [ 4] 3011         CALL     DUPP
      001220 CD 03 29         [ 4] 3012         CALL     LAST
      001223 CD 01 2B         [ 4] 3013         CALL     STORE   ;save na for vocabulary link
      001226 CD 06 4E         [ 4] 3014         CALL     CELLM   ;link address
      001229 CD 03 0B         [ 4] 3015         CALL     CNTXT
      00122C CD 01 42         [ 4] 3016         CALL     AT
      00122F CD 01 FF         [ 4] 3017         CALL     SWAPP
      001232 CD 01 2B         [ 4] 3018         CALL     STORE
      001235 81               [ 4] 3019         RET     ;save code pointer
      001236 CD 0B 0B         [ 4] 3020 PNAM1:  CALL     STRQP
      001239 05                    3021         .byte      5
      00123A 20 6E 61 6D 65        3022         .ascii     " name" ;null input
      00123F CC 0E F1         [ 2] 3023         JP     ABOR1
                                   3024 
                                   3025 ;; FORTH compiler
                                   3026 
                                   3027 ;       $COMPILE        ( a -- )
                                   3028 ;       Compile next word to
                                   3029 ;       dictionary as a token or literal.
      001242 11 FC                 3030         .word      LINK
                           001244  3031 LINK = . 
      001244 08                    3032         .byte      8
      001245 24 43 4F 4D 50 49 4C  3033         .ascii     "$COMPILE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



             45
      00124D                       3034 SCOMP:
      00124D CD 0D DD         [ 4] 3035         CALL     NAMEQ
      001250 CD 03 39         [ 4] 3036         CALL     QDUP    ;?defined
      001253 CD 00 ED         [ 4] 3037         CALL     QBRAN
      001256 12 6E                 3038         .word      SCOM2
      001258 CD 01 42         [ 4] 3039         CALL     AT
      00125B CD 00 B6         [ 4] 3040         CALL     DOLIT
      00125E 80 00                 3041         .word     0x8000	;  IMEDD*256
      001260 CD 02 3B         [ 4] 3042         CALL     ANDD    ;?immediate
      001263 CD 00 ED         [ 4] 3043         CALL     QBRAN
      001266 12 6B                 3044         .word      SCOM1
      001268 CC 01 14         [ 2] 3045         JP     EXECU
      00126B CC 12 B4         [ 2] 3046 SCOM1:  JP     JSRC
      00126E CD 09 89         [ 4] 3047 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001271 CD 00 ED         [ 4] 3048         CALL     QBRAN
      001274 0E F1                 3049         .word      ABOR1
      001276 CC 10 87         [ 2] 3050         JP     LITER
                                   3051 
                                   3052 ;       OVERT   ( -- )
                                   3053 ;       Link a new word into vocabulary.
      001279 12 44                 3054         .word      LINK
                           00127B  3055 LINK = . 
      00127B 05                    3056         .byte      5
      00127C 4F 56 45 52 54        3057         .ascii     "OVERT"
      001281                       3058 OVERT:
      001281 CD 03 29         [ 4] 3059         CALL     LAST
      001284 CD 01 42         [ 4] 3060         CALL     AT
      001287 CD 03 0B         [ 4] 3061         CALL     CNTXT
      00128A CC 01 2B         [ 2] 3062         JP     STORE
                                   3063 
                                   3064 ;       ;       ( -- )
                                   3065 ;       Terminate a colon definition.
      00128D 12 7B                 3066         .word      LINK
                           00128F  3067 LINK = . 
      00128F C1                    3068 	.byte      IMEDD+COMPO+1
      001290 3B                    3069         .ascii     ";"
      001291                       3070 SEMIS:
      001291 CD 10 68         [ 4] 3071         CALL     COMPI
      001294 CD 01 24         [ 4] 3072         CALL     EXIT
      001297 CD 0F 52         [ 4] 3073         CALL     LBRAC
      00129A CC 12 81         [ 2] 3074         JP     OVERT
                                   3075 
                                   3076 ;       ]       ( -- )
                                   3077 ;       Start compiling words in
                                   3078 ;       input stream.
      00129D 12 8F                 3079         .word      LINK
                           00129F  3080 LINK = . 
      00129F 01                    3081         .byte      1
      0012A0 5D                    3082         .ascii     "]"
      0012A1                       3083 RBRAC:
      0012A1 CD 00 B6         [ 4] 3084         CALL     DOLIT
      0012A4 12 4D                 3085         .word      SCOMP
      0012A6 CD 02 E9         [ 4] 3086         CALL     TEVAL
      0012A9 CC 01 2B         [ 2] 3087         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3088 
                                   3089 ;       CALL,    ( ca -- )
                                   3090 ;       Compile a subroutine call.
      0012AC 12 9F                 3091         .word      LINK
                           0012AE  3092 LINK = . 
      0012AE 04                    3093         .byte      4
      0012AF 43 41 4C 4C 2C        3094         .ascii     "CALL,"
      0012B4                       3095 JSRC:
      0012B4 CD 00 B6         [ 4] 3096         CALL     DOLIT
      0012B7 00 CD                 3097         .word     CALLL     ;CALL
      0012B9 CD 10 3A         [ 4] 3098         CALL     CCOMMA
      0012BC CC 10 23         [ 2] 3099         JP     COMMA
                                   3100 
                                   3101 ;       :       ( -- ; <string> )
                                   3102 ;       Start a new colon definition
                                   3103 ;       using next word as its name.
      0012BF 12 AE                 3104         .word      LINK
                           0012C1  3105 LINK = . 
      0012C1 01                    3106         .byte      1
      0012C2 3A                    3107         .ascii     ":"
      0012C3                       3108 COLON:
      0012C3 CD 0C E0         [ 4] 3109         CALL     TOKEN
      0012C6 CD 12 00         [ 4] 3110         CALL     SNAME
      0012C9 CC 12 A1         [ 2] 3111         JP     RBRAC
                                   3112 
                                   3113 ;       IMMEDIATE       ( -- )
                                   3114 ;       Make last compiled word
                                   3115 ;       an immediate word.
      0012CC 12 C1                 3116         .word      LINK
                           0012CE  3117 LINK = . 
      0012CE 09                    3118         .byte      9
      0012CF 49 4D 4D 45 44 49 41  3119         .ascii     "IMMEDIATE"
             54 45
      0012D8                       3120 IMMED:
      0012D8 CD 00 B6         [ 4] 3121         CALL     DOLIT
      0012DB 80 00                 3122         .word     0x8000	;  IMEDD*256
      0012DD CD 03 29         [ 4] 3123         CALL     LAST
      0012E0 CD 01 42         [ 4] 3124         CALL     AT
      0012E3 CD 01 42         [ 4] 3125         CALL     AT
      0012E6 CD 02 4F         [ 4] 3126         CALL     ORR
      0012E9 CD 03 29         [ 4] 3127         CALL     LAST
      0012EC CD 01 42         [ 4] 3128         CALL     AT
      0012EF CC 01 2B         [ 2] 3129         JP     STORE
                                   3130 
                                   3131 ;; Defining words
                                   3132 
                                   3133 ;       CREATE  ( -- ; <string> )
                                   3134 ;       Compile a new array
                                   3135 ;       without allocating space.
      0012F2 12 CE                 3136         .word      LINK
                           0012F4  3137 LINK = . 
      0012F4 06                    3138         .byte      6
      0012F5 43 52 45 41 54 45     3139         .ascii     "CREATE"
      0012FB                       3140 CREAT:
      0012FB CD 0C E0         [ 4] 3141         CALL     TOKEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0012FE CD 12 00         [ 4] 3142         CALL     SNAME
      001301 CD 12 81         [ 4] 3143         CALL     OVERT
      001304 CD 10 68         [ 4] 3144         CALL     COMPI
      001307 CD 02 9C         [ 4] 3145         CALL     DOVAR
      00130A 81               [ 4] 3146         RET
                                   3147 
                                   3148 ;       VARIABLE        ( -- ; <string> )
                                   3149 ;       Compile a new variable
                                   3150 ;       initialized to 0.
      00130B 12 F4                 3151         .word      LINK
                           00130D  3152 LINK = . 
      00130D 08                    3153         .byte      8
      00130E 56 41 52 49 41 42 4C  3154         .ascii     "VARIABLE"
             45
      001316                       3155 VARIA:
      001316 CD 12 FB         [ 4] 3156         CALL     CREAT
      001319 CD 06 9E         [ 4] 3157         CALL     ZERO
      00131C CC 10 23         [ 2] 3158         JP     COMMA
                                   3159 
                                   3160 ;; Tools
                                   3161 
                                   3162 ;       _TYPE   ( b u -- )
                                   3163 ;       Display a string. Filter
                                   3164 ;       non-printing characters.
      00131F 13 0D                 3165         .word      LINK
                           001321  3166 LINK = . 
      001321 05                    3167         .byte      5
      001322 5F 54 59 50 45        3168         .ascii     "_TYPE"
      001327                       3169 UTYPE:
      001327 CD 01 B8         [ 4] 3170         CALL     TOR     ;start count down loop
      00132A 20 0F            [ 2] 3171         JRA     UTYP2   ;skip first pass
      00132C CD 01 EF         [ 4] 3172 UTYP1:  CALL     DUPP
      00132F CD 01 60         [ 4] 3173         CALL     CAT
      001332 CD 06 C8         [ 4] 3174         CALL     TCHAR
      001335 CD 00 A0         [ 4] 3175         CALL     EMIT    ;display only printable
      001338 CD 06 6A         [ 4] 3176         CALL     ONEP    ;increment address
      00133B CD 00 CE         [ 4] 3177 UTYP2:  CALL     DONXT
      00133E 13 2C                 3178         .word      UTYP1   ;loop till done
      001340 CC 01 E5         [ 2] 3179         JP     DROP
                                   3180 
                                   3181 ;       dm+     ( a u -- a )
                                   3182 ;       Dump u bytes from ,
                                   3183 ;       leaving a+u on  stack.
      001343 13 21                 3184         .word      LINK
                           001345  3185 LINK = . 
      001345 03                    3186         .byte      3
      001346 64 6D 2B              3187         .ascii     "dm+"
      001349                       3188 DUMPP:
      001349 CD 02 19         [ 4] 3189         CALL     OVER
      00134C CD 00 B6         [ 4] 3190         CALL     DOLIT
      00134F 00 04                 3191         .word      4
      001351 CD 0B 3E         [ 4] 3192         CALL     UDOTR   ;display address
      001354 CD 0A 8E         [ 4] 3193         CALL     SPACE
      001357 CD 01 B8         [ 4] 3194         CALL     TOR     ;start count down loop
      00135A 20 11            [ 2] 3195         JRA     PDUM2   ;skip first pass
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00135C CD 01 EF         [ 4] 3196 PDUM1:  CALL     DUPP
      00135F CD 01 60         [ 4] 3197         CALL     CAT
      001362 CD 00 B6         [ 4] 3198         CALL     DOLIT
      001365 00 03                 3199         .word      3
      001367 CD 0B 3E         [ 4] 3200         CALL     UDOTR   ;display numeric data
      00136A CD 06 6A         [ 4] 3201         CALL     ONEP    ;increment address
      00136D CD 00 CE         [ 4] 3202 PDUM2:  CALL     DONXT
      001370 13 5C                 3203         .word      PDUM1   ;loop till done
      001372 81               [ 4] 3204         RET
                                   3205 
                                   3206 ;       DUMP    ( a u -- )
                                   3207 ;       Dump u bytes from a,
                                   3208 ;       in a formatted manner.
      001373 13 45                 3209         .word      LINK
                           001375  3210 LINK = . 
      001375 04                    3211         .byte      4
      001376 44 55 4D 50           3212         .ascii     "DUMP"
      00137A                       3213 DUMP:
      00137A CD 02 AA         [ 4] 3214         CALL     BASE
      00137D CD 01 42         [ 4] 3215         CALL     AT
      001380 CD 01 B8         [ 4] 3216         CALL     TOR
      001383 CD 09 1C         [ 4] 3217         CALL     HEX     ;save radix, set hex
      001386 CD 00 B6         [ 4] 3218         CALL     DOLIT
      001389 00 10                 3219         .word      16
      00138B CD 05 83         [ 4] 3220         CALL     SLASH   ;change count to lines
      00138E CD 01 B8         [ 4] 3221         CALL     TOR     ;start count down loop
      001391 CD 0A D6         [ 4] 3222 DUMP1:  CALL     CR
      001394 CD 00 B6         [ 4] 3223         CALL     DOLIT
      001397 00 10                 3224         .word      16
      001399 CD 03 7D         [ 4] 3225         CALL     DDUP
      00139C CD 13 49         [ 4] 3226         CALL     DUMPP   ;display numeric
      00139F CD 03 4A         [ 4] 3227         CALL     ROT
      0013A2 CD 03 4A         [ 4] 3228         CALL     ROT
      0013A5 CD 0A 8E         [ 4] 3229         CALL     SPACE
      0013A8 CD 0A 8E         [ 4] 3230         CALL     SPACE
      0013AB CD 13 27         [ 4] 3231         CALL     UTYPE   ;display printable characters
      0013AE CD 00 CE         [ 4] 3232         CALL     DONXT
      0013B1 13 91                 3233         .word      DUMP1   ;loop till done
      0013B3 CD 01 E5         [ 4] 3234 DUMP3:  CALL     DROP
      0013B6 CD 01 90         [ 4] 3235         CALL     RFROM
      0013B9 CD 02 AA         [ 4] 3236         CALL     BASE
      0013BC CC 01 2B         [ 2] 3237         JP     STORE   ;restore radix
                                   3238 
                                   3239 ;       .S      ( ... -- ... )
                                   3240 ;        Display  contents of stack.
      0013BF 13 75                 3241         .word      LINK
                           0013C1  3242 LINK = . 
      0013C1 02                    3243         .byte      2
      0013C2 2E 53                 3244         .ascii     ".S"
      0013C4                       3245 DOTS:
      0013C4 CD 0A D6         [ 4] 3246         CALL     CR
      0013C7 CD 06 F4         [ 4] 3247         CALL     DEPTH   ;stack depth
      0013CA CD 01 B8         [ 4] 3248         CALL     TOR     ;start count down loop
      0013CD 20 0C            [ 2] 3249         JRA     DOTS2   ;skip first pass
      0013CF CD 01 A3         [ 4] 3250 DOTS1:  CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0013D2 CD 06 6A         [ 4] 3251         CALL ONEP
      0013D5 CD 07 0D         [ 4] 3252 	CALL     PICK
      0013D8 CD 0B 71         [ 4] 3253         CALL     DOT     ;index stack, display contents
      0013DB CD 00 CE         [ 4] 3254 DOTS2:  CALL     DONXT
      0013DE 13 CF                 3255         .word      DOTS1   ;loop till done
      0013E0 CD 0B 15         [ 4] 3256         CALL     DOTQP
      0013E3 05                    3257         .byte      5
      0013E4 20 3C 73 70 20        3258         .ascii     " <sp "
      0013E9 81               [ 4] 3259         RET
                                   3260 
                                   3261 ;       >NAME   ( ca -- na | F )
                                   3262 ;       Convert code address
                                   3263 ;       to a name address.
      0013EA 13 C1                 3264         .word      LINK
                           0013EC  3265 LINK = . 
      0013EC 05                    3266         .byte      5
      0013ED 3E 4E 41 4D 45        3267         .ascii     ">NAME"
      0013F2                       3268 TNAME:
      0013F2 CD 03 0B         [ 4] 3269         CALL     CNTXT   ;vocabulary link
      0013F5 CD 01 42         [ 4] 3270 TNAM2:  CALL     AT
      0013F8 CD 01 EF         [ 4] 3271         CALL     DUPP    ;?last word in a vocabulary
      0013FB CD 00 ED         [ 4] 3272         CALL     QBRAN
      0013FE 14 19                 3273         .word      TNAM4
      001400 CD 03 7D         [ 4] 3274         CALL     DDUP
      001403 CD 0C EE         [ 4] 3275         CALL     NAMET
      001406 CD 02 64         [ 4] 3276         CALL     XORR    ;compare
      001409 CD 00 ED         [ 4] 3277         CALL     QBRAN
      00140C 14 13                 3278         .word      TNAM3
      00140E CD 06 4E         [ 4] 3279         CALL     CELLM   ;continue with next word
      001411 20 E2            [ 2] 3280         JRA     TNAM2
      001413 CD 01 FF         [ 4] 3281 TNAM3:  CALL     SWAPP
      001416 CC 01 E5         [ 2] 3282         JP     DROP
      001419 CD 03 72         [ 4] 3283 TNAM4:  CALL     DDROP
      00141C CC 06 9E         [ 2] 3284         JP     ZERO
                                   3285 
                                   3286 ;       .ID     ( na -- )
                                   3287 ;        Display  name at address.
      00141F 13 EC                 3288         .word      LINK
                           001421  3289 LINK = . 
      001421 03                    3290         .byte      3
      001422 2E 49 44              3291         .ascii     ".ID"
      001425                       3292 DOTID:
      001425 CD 03 39         [ 4] 3293         CALL     QDUP    ;if zero no name
      001428 CD 00 ED         [ 4] 3294         CALL     QBRAN
      00142B 14 3B                 3295         .word      DOTI1
      00142D CD 07 64         [ 4] 3296         CALL     COUNT
      001430 CD 00 B6         [ 4] 3297         CALL     DOLIT
      001433 00 1F                 3298         .word      0x1F
      001435 CD 02 3B         [ 4] 3299         CALL     ANDD    ;mask lexicon bits
      001438 CC 13 27         [ 2] 3300         JP     UTYPE
      00143B CD 0B 15         [ 4] 3301 DOTI1:  CALL     DOTQP
      00143E 09                    3302         .byte      9
      00143F 20 6E 6F 4E 61 6D 65  3303         .ascii     " noName"
      001446 81               [ 4] 3304         RET
                                   3305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   3306 ;       SEE     ( -- ; <string> )
                                   3307 ;       A simple decompiler.
                                   3308 ;       Updated for byte machines.
      001447 14 21                 3309         .word      LINK
                           001449  3310 LINK = . 
      001449 03                    3311         .byte      3
      00144A 53 45 45              3312         .ascii     "SEE"
      00144D                       3313 SEE:
      00144D CD 10 05         [ 4] 3314         CALL     TICK    ;starting address
      001450 CD 0A D6         [ 4] 3315         CALL     CR
      001453 CD 06 77         [ 4] 3316         CALL     ONEM
      001456 CD 06 6A         [ 4] 3317 SEE1:   CALL     ONEP
      001459 CD 01 EF         [ 4] 3318         CALL     DUPP
      00145C CD 01 42         [ 4] 3319         CALL     AT
      00145F CD 01 EF         [ 4] 3320         CALL     DUPP    ;?does it contain a zero
      001462 CD 00 ED         [ 4] 3321         CALL     QBRAN
      001465 14 6A                 3322         .word      SEE2
      001467 CD 13 F2         [ 4] 3323         CALL     TNAME   ;?is it a name
      00146A CD 03 39         [ 4] 3324 SEE2:   CALL     QDUP    ;name address or zero
      00146D CD 00 ED         [ 4] 3325         CALL     QBRAN
      001470 14 7D                 3326         .word      SEE3
      001472 CD 0A 8E         [ 4] 3327         CALL     SPACE
      001475 CD 14 25         [ 4] 3328         CALL     DOTID   ;display name
      001478 CD 06 6A         [ 4] 3329         CALL     ONEP
      00147B 20 09            [ 2] 3330         JRA     SEE4
      00147D CD 01 EF         [ 4] 3331 SEE3:   CALL     DUPP
      001480 CD 01 60         [ 4] 3332         CALL     CAT
      001483 CD 0B 5E         [ 4] 3333         CALL     UDOT    ;display number
      001486 CD 0A 6C         [ 4] 3334 SEE4:   CALL     NUFQ    ;user control
      001489 CD 00 ED         [ 4] 3335         CALL     QBRAN
      00148C 14 56                 3336         .word      SEE1
      00148E CC 01 E5         [ 2] 3337         JP     DROP
                                   3338 
                                   3339 ;       WORDS   ( -- )
                                   3340 ;       Display names in vocabulary.
      001491 14 49                 3341         .word      LINK
                           001493  3342 LINK = . 
      001493 05                    3343         .byte      5
      001494 57 4F 52 44 53        3344         .ascii     "WORDS"
      001499                       3345 WORDS:
      001499 CD 0A D6         [ 4] 3346         CALL     CR
      00149C CD 03 0B         [ 4] 3347         CALL     CNTXT   ;only in context
      00149F CD 01 42         [ 4] 3348 WORS1:  CALL     AT
      0014A2 CD 03 39         [ 4] 3349         CALL     QDUP    ;?at end of list
      0014A5 CD 00 ED         [ 4] 3350         CALL     QBRAN
      0014A8 14 BE                 3351         .word      WORS2
      0014AA CD 01 EF         [ 4] 3352         CALL     DUPP
      0014AD CD 0A 8E         [ 4] 3353         CALL     SPACE
      0014B0 CD 14 25         [ 4] 3354         CALL     DOTID   ;display a name
      0014B3 CD 06 4E         [ 4] 3355         CALL     CELLM
      0014B6 CD 01 04         [ 4] 3356         CALL     BRAN
      0014B9 14 9F                 3357         .word      WORS1
      0014BB CD 01 E5         [ 4] 3358         CALL     DROP
      0014BE 81               [ 4] 3359 WORS2:  RET
                                   3360 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   3361         
                                   3362 ;; Hardware reset
                                   3363 
                                   3364 ;       hi      ( -- )
                                   3365 ;       Display sign-on message.
      0014BF 14 93                 3366         .word      LINK
                           0014C1  3367 LINK = . 
      0014C1 02                    3368         .byte      2
      0014C2 68 69                 3369         .ascii     "hi"
      0014C4                       3370 HI:
      0014C4 CD 0A D6         [ 4] 3371         CALL     CR
      0014C7 CD 0B 15         [ 4] 3372         CALL     DOTQP   ;initialize I/O
      0014CA 0F                    3373         .byte      15
      0014CB 73 74 6D 38 65 46 6F  3374         .ascii     "stm8eForth v"
             72 74 68 20 76
      0014D7 32                    3375 	.byte      VER+'0'
      0014D8 22                    3376         .byte      "."
      0014D9 31                    3377 	.byte      EXT+'0' ;version
      0014DA CC 0A D6         [ 2] 3378         JP     CR
                                   3379 
                                   3380 ;       DEBUG      ( -- )
                                   3381 ;       Display sign-on message.
                                   3382 ;        .word      LINK
                                   3383 ;LINK = . 
                                   3384 ;        .byte      5
                                   3385 ;        .ascii     "DEBUG"
                                   3386 ;DEBUG:
                                   3387 ;	CALL DOLIT
                                   3388 ;	.word 0x65
                                   3389 ;	CALL EMIT
                                   3390 ;	CALL DOLIT
                                   3391 ;	.word 0
                                   3392 ; 	CALL ZLESS 
                                   3393 ;	CALL DOLIT
                                   3394 ;	.word 0xFFFE
                                   3395 ;	CALL ZLESS 
                                   3396 ;	CALL UPLUS 
                                   3397 ; 	CALL DROP 
                                   3398 ;	CALL DOLIT
                                   3399 ;	.word 3
                                   3400 ;	CALL UPLUS 
                                   3401 ;	CALL UPLUS 
                                   3402 ; 	CALL DROP
                                   3403 ;	CALL DOLIT
                                   3404 ;	.word 0x43
                                   3405 ;	CALL UPLUS 
                                   3406 ; 	CALL DROP
                                   3407 ;	CALL EMIT
                                   3408 ;	CALL DOLIT
                                   3409 ;	.word 0x4F
                                   3410 ;	CALL DOLIT
                                   3411 ;	.word 0x6F
                                   3412 ; 	CALL XORR
                                   3413 ;	CALL DOLIT
                                   3414 ;	.word 0xF0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   3415 ; 	CALL ANDD
                                   3416 ;	CALL DOLIT
                                   3417 ;	.word 0x4F
                                   3418 ; 	CALL ORR
                                   3419 ;	CALL EMIT
                                   3420 ;	CALL DOLIT
                                   3421 ;	.word 8
                                   3422 ;	CALL DOLIT
                                   3423 ;	.word 6
                                   3424 ; 	CALL SWAPP
                                   3425 ;	CALL OVER
                                   3426 ;	CALL XORR
                                   3427 ;	CALL DOLIT
                                   3428 ;	.word 3
                                   3429 ;	CALL ANDD 
                                   3430 ;	CALL ANDD
                                   3431 ;	CALL DOLIT
                                   3432 ;	.word 0x70
                                   3433 ;	CALL UPLUS 
                                   3434 ;	CALL DROP
                                   3435 ;	CALL EMIT
                                   3436 ;	CALL DOLIT
                                   3437 ;	.word 0
                                   3438 ;	CALL QBRAN
                                   3439 ;	.word DEBUG1
                                   3440 ;	CALL DOLIT
                                   3441 ;	.word 0x3F
                                   3442 ;DEBUG1:
                                   3443 ;	CALL DOLIT
                                   3444 ;	.word 0xFFFF
                                   3445 ;	CALL QBRAN
                                   3446 ;	.word DEBUG2
                                   3447 ;	CALL DOLIT
                                   3448 ;	.word 0x74
                                   3449 ;	CALL BRAN
                                   3450 ;	.word DEBUG3
                                   3451 ;DEBUG2:
                                   3452 ;	CALL DOLIT
                                   3453 ;	.word 0x21
                                   3454 ;DEBUG3:
                                   3455 ;	CALL EMIT
                                   3456 ;	CALL DOLIT
                                   3457 ;	.word 0x68
                                   3458 ;	CALL DOLIT
                                   3459 ;	.word 0x80
                                   3460 ;	CALL STORE
                                   3461 ;	CALL DOLIT
                                   3462 ;	.word 0x80
                                   3463 ;	CALL AT
                                   3464 ;	CALL EMIT
                                   3465 ;	CALL DOLIT
                                   3466 ;	.word 0x4D
                                   3467 ;	CALL TOR
                                   3468 ;	CALL RAT
                                   3469 ;	CALL RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3470 ;	CALL ANDD
                                   3471 ;	CALL EMIT
                                   3472 ;	CALL DOLIT
                                   3473 ;	.word 0x61
                                   3474 ;	CALL DOLIT
                                   3475 ;	.word 0xA
                                   3476 ;	CALL TOR
                                   3477 ;DEBUG4:
                                   3478 ;	CALL DOLIT
                                   3479 ;	.word 1
                                   3480 ;	CALL UPLUS 
                                   3481 ;	CALL DROP
                                   3482 ;	CALL DONXT
                                   3483 ;	.word DEBUG4
                                   3484 ;	CALL EMIT
                                   3485 ;	CALL DOLIT
                                   3486 ;	.word 0x656D
                                   3487 ;	CALL DOLIT
                                   3488 ;	.word 0x100
                                   3489 ;	CALL UMSTA
                                   3490 ;	CALL SWAPP
                                   3491 ;	CALL DOLIT
                                   3492 ;	.word 0x100
                                   3493 ;	CALL UMSTA
                                   3494 ;	CALL SWAPP 
                                   3495 ;	CALL DROP
                                   3496 ;	CALL EMIT
                                   3497 ;	CALL EMIT
                                   3498 ;	CALL DOLIT
                                   3499 ;	.word 0x2043
                                   3500 ;	CALL DOLIT
                                   3501 ;	.word 0
                                   3502 ;	CALL DOLIT
                                   3503 ;	.word 0x100
                                   3504 ;	CALL UMMOD
                                   3505 ;	CALL EMIT
                                   3506 ;	CALL EMIT
                                   3507 	;JP ORIG
                                   3508 ;	RET
                                   3509 
                                   3510 ;       'BOOT   ( -- a )
                                   3511 ;       The application startup vector.
      0014DD 14 C1                 3512         .word      LINK
                           0014DF  3513 LINK = . 
      0014DF 05                    3514         .byte      5
      0014E0 27 42 4F 4F 54        3515         .ascii     "'BOOT"
      0014E5                       3516 TBOOT:
      0014E5 CD 02 9C         [ 4] 3517         CALL     DOVAR
      0014E8 14 C4                 3518         .word      HI       ;application to boot
                                   3519 
                                   3520 ;       COLD    ( -- )
                                   3521 ;       The hilevel cold start s=ence.
      0014EA 14 DF                 3522         .word      LINK
                           0014EC  3523 LINK = . 
      0014EC 04                    3524         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0014ED 43 4F 4C 44           3525         .ascii     "COLD"
      0014F1                       3526 COLD:
                                   3527 ;        CALL DEBUG
      0014F1 CD 00 B6         [ 4] 3528 COLD1:  CALL     DOLIT
      0014F4 00 5E                 3529         .word      UZERO
      0014F6 CD 00 B6         [ 4] 3530 	CALL     DOLIT
      0014F9 00 06                 3531         .word      UPP
      0014FB CD 00 B6         [ 4] 3532         CALL     DOLIT
      0014FE 00 14                 3533 	.word      ULAST-UZERO
      001500 CD 07 BF         [ 4] 3534         CALL     CMOVE   ;initialize user area
      001503 CD 0F D1         [ 4] 3535         CALL     PRESE   ;initialize data stack and TIB
      001506 CD 14 E5         [ 4] 3536         CALL     TBOOT
      001509 CD 07 A8         [ 4] 3537         CALL     ATEXE   ;application boot
      00150C CD 12 81         [ 4] 3538         CALL     OVERT
      00150F CC 0F EE         [ 2] 3539         JP     QUIT    ;start interpretation
                                   3540 
                                   3541 
                                   3542 ;       
                                   3543 ;===============================================================
                                   3544 
                           0014EC  3545 LASTN   =	LINK   ;last name defined
                                   3546 
                                   3547 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000413 R   |   6 ABOR1      000EF1 R
  6 ABOR2      000F08 R   |   6 ABORQ      000EE9 R   |   6 ABORT      000EDA R
  6 ABRTQ      0011A9 R   |   6 ABSS       00040A R   |   6 ACCEP      000E70 R
  6 ACCP1      000E79 R   |   6 ACCP2      000E9F R   |   6 ACCP3      000EA2 R
  6 ACCP4      000EA4 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        001194 R
  6 AGAIN      0010F3 R   |   6 AHEAD      00114A R   |   6 ALLOT      001019 R
  6 ANDD       00023B R   |   6 AT         000142 R   |   6 ATEXE      0007A8 R
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000E18 R   |   6 BASE       0002AA R   |     BASEE   =  00000A 
  6 BCOMP      001058 R   |   6 BDIGS      000881 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0010D7 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000CB9 R   |   6 BKSP       000DE8 R   |     BKSPP   =  000008 
  6 BLANK      000691 R   |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       000104 R   |     BTN1_BIT=  000004     |     BTN1_MAS=  000010 
    BTN1_POR=  005014     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000020 
  6 CAT        000160 R   |   6 CCOMMA     00103A R   |     CELLL   =  000002 
  6 CELLM      00064E R   |   6 CELLP      00063F R   |   6 CELLS      00065D R
    CFG_GCR =  007F60     |   6 CHAR1      000AA8 R   |   6 CHAR2      000AAB R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      0007C7 R   |   6 CMOV2      0007DF R   |   6 CMOVE      0007BF R
  6 CNTXT      00030B R   |   6 COLD       0014F1 R   |   6 COLD1      0014F1 R
  6 COLON      0012C3 R   |   6 COMMA      001023 R   |   6 COMPI      001068 R
    COMPO   =  000040     |   6 COUNT      000764 R   |   6 CPP        000319 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000AD6 R
  6 CREAT      0012FB R   |     CRR     =  00000D     |   6 CSTOR      00014F R
    CTOP    =  000080     |   6 DAT        00074D R   |     DATSTK  =  0016F0 
  6 DDROP      000372 R   |   6 DDUP       00037D R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000931 R   |   6 DEPTH      0006F4 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000976 R
  6 DIG        0008AA R   |   6 DIGIT      000845 R   |   6 DIGS       0008BB R
  6 DIGS1      0008BB R   |   6 DIGS2      0008C8 R   |   6 DIGTQ      000945 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0003EA R
  6 DNEGA      0003CF R   |   6 DOLIT      0000B6 R   |   6 DONXT      0000CE R
  6 DOSTR      000AEC R   |   6 DOT        000B71 R   |   6 DOT1       000B87 R
  6 DOTI1      00143B R   |   6 DOTID      001425 R   |   6 DOTO1      000F7D R
  6 DOTOK      000F63 R   |   6 DOTPR      000C9A R   |   6 DOTQ       0011C5 R
  6 DOTQP      000B15 R   |   6 DOTR       000B23 R   |   6 DOTS       0013C4 R
  6 DOTS1      0013CF R   |   6 DOTS2      0013DB R   |   6 DOVAR      00029C R
  6 DROP       0001E5 R   |   6 DSTOR      000739 R   |   6 DUMP       00137A R
  6 DUMP1      001391 R   |   6 DUMP3      0013B3 R   |   6 DUMPP      001349 R
  6 DUPP       0001EF R   |   6 EDIGS      0008E6 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      001127 R
  6 EMIT       0000A0 R   |   6 EQ1        00042E R   |   6 EQUAL      000418 R
  6 ERASE      000815 R   |     ERR     =  00001B     |   6 EVAL       000FA6 R
  6 EVAL1      000FA6 R   |   6 EVAL2      000FC2 R   |   6 EXE1       0007B6 R
  6 EXECU      000114 R   |   6 EXIT       000124 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      00086D R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       0007EE R
  6 FILL1      0007FC R   |   6 FILL2      000805 R   |   6 FIND       000D44 R
  6 FIND1      000D62 R   |   6 FIND2      000D90 R   |   6 FIND3      000D9C R
  6 FIND4      000DB0 R   |   6 FIND5      000DBD R   |   6 FIND6      000DA1 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FOR        0010B6 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       000777 R   |   6 HEX        00091C R   |   6 HI         0014C4 R
  6 HLD        0002F8 R   |   6 HOLD       000891 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        001101 R   |     IMEDD   =  000080     |   6 IMMED      0012D8 R
  6 INCH       000092 R   |   6 INN        0002C8 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      000F45 R   |   6 INTER      000F1B R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0003AC R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0012B4 R   |   6 KEY        000A5C R   |   6 KEY1       000A5C R
  6 KTAP       000E35 R   |   6 KTAP1      000E58 R   |   6 KTAP2      000E5B R
  6 LAST       000329 R   |   6 LASTN   =  0014EC R   |   6 LBRAC      000F52 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       000455 R   |     LF      =  00000A     |   6 LINK    =  0014EC R
  6 LITER      001087 R   |   6 LT1        00046B R   |     MASKK   =  001F7F 
  6 MAX        000475 R   |   6 MAX1       000488 R   |   6 MIN        000492 R
  6 MIN1       0004A5 R   |   6 MMOD1      000534 R   |   6 MMOD2      000548 R
  6 MMOD3      00055F R   |   6 MMSM1      0004EF R   |   6 MMSM3      0004F1 R
  6 MMSM4      0004F9 R   |   6 MODD       000579 R   |   6 MONE       0006B7 R
  6 MSMOD      000517 R   |   6 MSTA1      000616 R   |   6 MSTAR      0005F3 R
    NAFR    =  004804     |   6 NAMEQ      000DDD R   |   6 NAMET      000CEE R
    NCLKOPT =  004808     |   6 NEGAT      0003BD R   |   6 NEX1       0000DB R
  6 NEXT       0010C6 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       0002D8 R
    NUBC    =  004802     |   6 NUFQ       000A6C R   |   6 NUFQ1      000A85 R
  6 NUMBQ      000989 R   |   6 NUMQ1      0009BD R   |   6 NUMQ2      0009EE R
  6 NUMQ3      000A30 R   |   6 NUMQ4      000A35 R   |   6 NUMQ5      000A44 R
  6 NUMQ6      000A47 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000011 R   |   6 ONE        0006A9 R   |   6 ONEM       000677 R
  6 ONEP       00066A R   |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
  6 ORIG       000016 R   |   6 ORR        00024F R   |   6 OUTPUT     0000A5 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000219 R   |   6 OVERT      001281 R
    PA      =  000000     |   6 PACKS      000824 R   |   6 PAD        000783 R
  6 PAREN      000CA9 R   |   6 PARS       000BA2 R   |   6 PARS1      000BCD R
  6 PARS2      000BF8 R   |   6 PARS3      000BFB R   |   6 PARS4      000C04 R
  6 PARS5      000C27 R   |   6 PARS6      000C3C R   |   6 PARS7      000C4B R
  6 PARS8      000C5A R   |   6 PARSE      000C6B R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      00135C R
  6 PDUM2      00136D R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]

Symbol Table

    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |   6 PICK       00070D R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       000392 R
  6 PNAM1      001236 R   |   6 PRESE      000FD1 R   |     PROD1   =  00001A 
    PROD2   =  00001C     |     PROD3   =  00001E     |   6 PSTOR      000722 R
  6 QBRAN      0000ED R   |   6 QDUP       000339 R   |   6 QDUP1      000343 R
  6 QKEY       00007B R   |   6 QSTAC      000F89 R   |   6 QUERY      000EB5 R
  6 QUEST      000B94 R   |   6 QUIT       000FEE R   |   6 QUIT1      000FF6 R
  6 QUIT2      000FF9 R   |     RAMBASE =  000000     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RAT        0001A3 R
  6 RBRAC      0012A1 R   |   6 REPEA      00117C R   |   6 RFROM      000190 R
    ROP     =  004800     |   6 ROT        00034A R   |     RP0     =  000024 
  6 RPAT       000170 R   |     RPP     =  0016F0     |   6 RPSTO      00017D R
    RST_SR  =  0050B3     |   6 SAME1      000D0C R   |   6 SAME2      000D35 R
  6 SAMEQ      000D04 R   |   6 SCOM1      00126B R   |   6 SCOM2      00126E R
  6 SCOMP      00124D R   |   6 SEE        00144D R   |   6 SEE1       001456 R
  6 SEE2       00146A R   |   6 SEE3       00147D R   |   6 SEE4       001486 R
  6 SEMIS      001291 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       0008D0 R   |   6 SIGN1      0008E0 R   |   6 SLASH      000583 R
  6 SLMOD      000567 R   |   6 SNAME      001200 R   |     SP0     =  000022 
  6 SPACE      000A8E R   |   6 SPACS      000A9D R   |   6 SPAT       0001CF R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  0017FF 
  6 SPSTO      0001DC R   |   6 SSMOD      00061F R   |     STACK   =  0017FF 
  6 STAR       0005E8 R   |   6 STASL      000631 R   |   6 STORE      00012B R
  6 STR        0008FE R   |   6 STRCQ      001096 R   |   6 STRQ       0011B7 R
  6 STRQP      000B0B R   |   6 SUBB       0003F0 R   |   6 SWAPP      0001FF R
    SWIM_CSR=  007F80     |   6 TAP        000E1F R   |   6 TBOOT      0014E5 R
  6 TCHA1      0006EB R   |   6 TCHAR      0006C8 R   |   6 TEMP       0002B9 R
  6 TEVAL      0002E9 R   |   6 THENN      001117 R   |   6 TIB        000794 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       001005 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |     TIM_CR1_=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      0013F5 R   |   6 TNAM3      001413 R
  6 TNAM4      001419 R   |   6 TNAME      0013F2 R   |   6 TOKEN      000CE0 R
  6 TOR        0001B8 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000684 R
  6 TYPE1      000ABD R   |   6 TYPE2      000AC9 R   |   6 TYPES      000AB8 R
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PS=  00523A     |     UART1_SR=  005230     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_SR=  005240     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   6 UDOT       000B5E R   |   6 UDOTR      000B3E R
  6 ULAST      000072 R   |   6 ULES1      00044D R   |   6 ULESS      000437 R
  6 UMMOD      0004CD R   |   6 UMSTA      000592 R   |   6 UNIQ1      0011F7 R
  6 UNIQU      0011D8 R   |   6 UNTIL      0010E2 R   |   6 UPL1       000290 R
  6 UPLUS      000279 R   |     UPP     =  000006     |   6 UTYP1      00132C R
  6 UTYP2      00133B R   |   6 UTYPE      001327 R   |   6 UZERO      00005E R
  6 VARIA      001316 R   |     VER     =  000002     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001161 R   |   6 WITHI      0004B2 R
  6 WORDD      000CCC R   |   6 WORDS      001499 R   |   6 WORS1      00149F R
  6 WORS2      0014BE R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000264 R   |     XTEMP   =  00001A     |     YTEMP   =  00001C 
  6 ZERO       00069E R   |   6 ZL1        000231 R   |   6 ZLESS      000228 R
  6 clear_ra   000003 R   |   6 clock_in   000031 R   |   6 main       000000 R
  6 uart3_in   00003F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    100   flags    8
   3 DATA       size      0   flags    8
   4 DATA1      size     80   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1512   flags    0


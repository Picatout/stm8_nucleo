ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                     10 ;	.nlist
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     11 	.include "../inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36 ; B1 on schematic is user button
                                     37 ; connected to PE4
                                     38 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    39 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    40 USR_BTN_BIT = 4
                           000010    41 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     42 
                                     43 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     12 	.include "../inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 
                           000000    62  RAM_BASE = (0)
                           0017FF    63  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    64  EEPROM_BASE = (0x4000)
                           0047FF    65  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    66  SFR_BASE = (0x5000)
                           0057FF    67  SFR_END = (0x57FF)
                           006000    68  BOOT_ROM_BASE = (0x6000)
                           007FFF    69  BOOT_ROM_END = (0x7fff)
                           008000    70  FLASH_BASE = (0x8000)
                           027FFF    71  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    72  OPTION_BASE = (0x4800)
                           00487F    73  OPTION_END = (0x487F)
                           0048CD    74  DEVID_BASE = (0x48CD)
                           0048D8    75  DEVID_END = (0x48D8)
                           007F00    76  DEBUG_BASE = (0X7F00)
                           007FFF    77  DEBUG_END = (0X7FFF)
                                     78 
                                     79 ; options bytes
                                     80 ; this one can be programmed only from SWIM  (ICP)
                           004800    81  OPT0  = (0x4800)
                                     82 ; these can be programmed at runtime (IAP)
                           004801    83  OPT1  = (0x4801)
                           004802    84  NOPT1  = (0x4802)
                           004803    85  OPT2  = (0x4803)
                           004804    86  NOPT2  = (0x4804)
                           004805    87  OPT3  = (0x4805)
                           004806    88  NOPT3  = (0x4806)
                           004807    89  OPT4  = (0x4807)
                           004808    90  NOPT4  = (0x4808)
                           004809    91  OPT5  = (0x4809)
                           00480A    92  NOPT5  = (0x480A)
                           00480B    93  OPT6  = (0x480B)
                           00480C    94  NOPT6 = (0x480C)
                           00480D    95  OPT7 = (0x480D)
                           00480E    96  NOPT7 = (0x480E)
                           00487E    97  OPTBL  = (0x487E)
                           00487F    98  NOPTBL  = (0x487F)
                                     99 ; option registers usage
                                    100 ; read out protection, value 0xAA enable ROP
                           004800   101  ROP = OPT0  
                                    102 ; user boot code, {0..0x3e} 512 bytes row
                           004801   103  UBC = OPT1
                           004802   104  NUBC = NOPT1
                                    105 ; alternate function register
                           004803   106  AFR = OPT2
                           004804   107  NAFR = NOPT2
                                    108 ; miscelinous options
                           004805   109  WDGOPT = OPT3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           004806   110  NWDGOPT = NOPT3
                                    111 ; clock options
                           004807   112  CLKOPT = OPT4
                           004808   113  NCLKOPT = NOPT4
                                    114 ; HSE clock startup delay
                           004809   115  HSECNT = OPT5
                           00480A   116  NHSECNT = NOPT5
                                    117 ; flash wait state
                           00480D   118 FLASH_WS = OPT7
                           00480E   119 NFLASH_WS = NOPT7
                                    120 
                                    121 ; watchdog options bits
                           000003   122   WDGOPT_LSIEN   =  BIT3
                           000002   123   WDGOPT_IWDG_HW =  BIT2
                           000001   124   WDGOPT_WWDG_HW =  BIT1
                           000000   125   WDGOPT_WWDG_HALT = BIT0
                                    126 ; NWDGOPT bits
                           FFFFFFFC   127   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   128   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   129   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   130   NWDGOPT_WWDG_HALT = ~BIT0
                                    131 
                                    132 ; CLKOPT bits
                           000003   133  CLKOPT_EXT_CLK  = BIT3
                           000002   134  CLKOPT_CKAWUSEL = BIT2
                           000001   135  CLKOPT_PRS_C1   = BIT1
                           000000   136  CLKOPT_PRS_C0   = BIT0
                                    137 
                                    138 ; AFR option, remapable functions
                           000007   139  AFR7_BEEP    = BIT7
                           000006   140  AFR6_I2C     = BIT6
                           000005   141  AFR5_TIM1    = BIT5
                           000004   142  AFR4_TIM1    = BIT4
                           000003   143  AFR3_TIM1    = BIT3
                           000002   144  AFR2_CCO     = BIT2
                           000001   145  AFR1_TIM2    = BIT1
                           000000   146  AFR0_ADC     = BIT0
                                    147 
                                    148 ; device ID = (read only)
                           0048CD   149  DEVID_XL  = (0x48CD)
                           0048CE   150  DEVID_XH  = (0x48CE)
                           0048CF   151  DEVID_YL  = (0x48CF)
                           0048D0   152  DEVID_YH  = (0x48D0)
                           0048D1   153  DEVID_WAF  = (0x48D1)
                           0048D2   154  DEVID_LOT0  = (0x48D2)
                           0048D3   155  DEVID_LOT1  = (0x48D3)
                           0048D4   156  DEVID_LOT2  = (0x48D4)
                           0048D5   157  DEVID_LOT3  = (0x48D5)
                           0048D6   158  DEVID_LOT4  = (0x48D6)
                           0048D7   159  DEVID_LOT5  = (0x48D7)
                           0048D8   160  DEVID_LOT6  = (0x48D8)
                                    161 
                                    162 
                           005000   163 GPIO_BASE = (0x5000)
                           000005   164 GPIO_SIZE = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    165 ; PORTS SFR OFFSET
                           000000   166 PA = 0
                           000005   167 PB = 5
                           00000A   168 PC = 10
                           00000F   169 PD = 15
                           000014   170 PE = 20
                           000019   171 PF = 25
                           00001E   172 PG = 30
                           000023   173 PH = 35 
                           000028   174 PI = 40 
                                    175 
                                    176 ; GPIO
                                    177 ; gpio register offset to base
                           000000   178  GPIO_ODR = 0
                           000001   179  GPIO_IDR = 1
                           000002   180  GPIO_DDR = 2
                           000003   181  GPIO_CR1 = 3
                           000004   182  GPIO_CR2 = 4
                                    183 
                                    184 ; port A
                           005000   185  PA_BASE = (0X5000)
                           005000   186  PA_ODR  = (0x5000)
                           005001   187  PA_IDR  = (0x5001)
                           005002   188  PA_DDR  = (0x5002)
                           005003   189  PA_CR1  = (0x5003)
                           005004   190  PA_CR2  = (0x5004)
                                    191 ; port B
                           005005   192  PB_BASE = (0X5005)
                           005005   193  PB_ODR  = (0x5005)
                           005006   194  PB_IDR  = (0x5006)
                           005007   195  PB_DDR  = (0x5007)
                           005008   196  PB_CR1  = (0x5008)
                           005009   197  PB_CR2  = (0x5009)
                                    198 ; port C
                           00500A   199  PC_BASE = (0X500A)
                           00500A   200  PC_ODR  = (0x500A)
                           00500B   201  PC_IDR  = (0x500B)
                           00500C   202  PC_DDR  = (0x500C)
                           00500D   203  PC_CR1  = (0x500D)
                           00500E   204  PC_CR2  = (0x500E)
                                    205 ; port D
                           00500F   206  PD_BASE = (0X500F)
                           00500F   207  PD_ODR  = (0x500F)
                           005010   208  PD_IDR  = (0x5010)
                           005011   209  PD_DDR  = (0x5011)
                           005012   210  PD_CR1  = (0x5012)
                           005013   211  PD_CR2  = (0x5013)
                                    212 ; port E
                           005014   213  PE_BASE = (0X5014)
                           005014   214  PE_ODR  = (0x5014)
                           005015   215  PE_IDR  = (0x5015)
                           005016   216  PE_DDR  = (0x5016)
                           005017   217  PE_CR1  = (0x5017)
                           005018   218  PE_CR2  = (0x5018)
                                    219 ; port F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                           005019   220  PF_BASE = (0X5019)
                           005019   221  PF_ODR  = (0x5019)
                           00501A   222  PF_IDR  = (0x501A)
                           00501B   223  PF_DDR  = (0x501B)
                           00501C   224  PF_CR1  = (0x501C)
                           00501D   225  PF_CR2  = (0x501D)
                                    226 ; port G
                           00501E   227  PG_BASE = (0X501E)
                           00501E   228  PG_ODR  = (0x501E)
                           00501F   229  PG_IDR  = (0x501F)
                           005020   230  PG_DDR  = (0x5020)
                           005021   231  PG_CR1  = (0x5021)
                           005022   232  PG_CR2  = (0x5022)
                                    233 ; port H not present on LQFP48/LQFP64 package
                           005023   234  PH_BASE = (0X5023)
                           005023   235  PH_ODR  = (0x5023)
                           005024   236  PH_IDR  = (0x5024)
                           005025   237  PH_DDR  = (0x5025)
                           005026   238  PH_CR1  = (0x5026)
                           005027   239  PH_CR2  = (0x5027)
                                    240 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   241  PI_BASE = (0X5028)
                           005028   242  PI_ODR  = (0x5028)
                           005029   243  PI_IDR  = (0x5029)
                           00502A   244  PI_DDR  = (0x502a)
                           00502B   245  PI_CR1  = (0x502b)
                           00502C   246  PI_CR2  = (0x502c)
                                    247 
                                    248 ; input modes CR1
                           000000   249  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   250  INPUT_PULLUP = (1)
                                    251 ; output mode CR1
                           000000   252  OUTPUT_OD = (0) ; open drain
                           000001   253  OUTPUT_PP = (1) ; push pull
                                    254 ; input modes CR2
                           000000   255  INPUT_DI = (0)
                           000001   256  INPUT_EI = (1)
                                    257 ; output speed CR2
                           000000   258  OUTPUT_SLOW = (0)
                           000001   259  OUTPUT_FAST = (1)
                                    260 
                                    261 
                                    262 ; Flash memory
                           00505A   263  FLASH_CR1  = (0x505A)
                           00505B   264  FLASH_CR2  = (0x505B)
                           00505C   265  FLASH_NCR2  = (0x505C)
                           00505D   266  FLASH_FPR  = (0x505D)
                           00505E   267  FLASH_NFPR  = (0x505E)
                           00505F   268  FLASH_IAPSR  = (0x505F)
                           005062   269  FLASH_PUKR  = (0x5062)
                           005064   270  FLASH_DUKR  = (0x5064)
                                    271 ; data memory unlock keys
                           0000AE   272  FLASH_DUKR_KEY1 = (0xae)
                           000056   273  FLASH_DUKR_KEY2 = (0x56)
                                    274 ; flash memory unlock keys
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000056   275  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   276  FLASH_PUKR_KEY2 = (0xae)
                                    277 ; FLASH_CR1 bits
                           000003   278  FLASH_CR1_HALT = BIT3
                           000002   279  FLASH_CR1_AHALT = BIT2
                           000001   280  FLASH_CR1_IE = BIT1
                           000000   281  FLASH_CR1_FIX = BIT0
                                    282 ; FLASH_CR2 bits
                           000007   283  FLASH_CR2_OPT = BIT7
                           000006   284  FLASH_CR2_WPRG = BIT6
                           000005   285  FLASH_CR2_ERASE = BIT5
                           000004   286  FLASH_CR2_FPRG = BIT4
                           000000   287  FLASH_CR2_PRG = BIT0
                                    288 ; FLASH_FPR bits
                           000005   289  FLASH_FPR_WPB5 = BIT5
                           000004   290  FLASH_FPR_WPB4 = BIT4
                           000003   291  FLASH_FPR_WPB3 = BIT3
                           000002   292  FLASH_FPR_WPB2 = BIT2
                           000001   293  FLASH_FPR_WPB1 = BIT1
                           000000   294  FLASH_FPR_WPB0 = BIT0
                                    295 ; FLASH_NFPR bits
                           000005   296  FLASH_NFPR_NWPB5 = BIT5
                           000004   297  FLASH_NFPR_NWPB4 = BIT4
                           000003   298  FLASH_NFPR_NWPB3 = BIT3
                           000002   299  FLASH_NFPR_NWPB2 = BIT2
                           000001   300  FLASH_NFPR_NWPB1 = BIT1
                           000000   301  FLASH_NFPR_NWPB0 = BIT0
                                    302 ; FLASH_IAPSR bits
                           000006   303  FLASH_IAPSR_HVOFF = BIT6
                           000003   304  FLASH_IAPSR_DUL = BIT3
                           000002   305  FLASH_IAPSR_EOP = BIT2
                           000001   306  FLASH_IAPSR_PUL = BIT1
                           000000   307  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    308 
                                    309 ; Interrupt control
                           0050A0   310  EXTI_CR1  = (0x50A0)
                           0050A1   311  EXTI_CR2  = (0x50A1)
                                    312 
                                    313 ; Reset Status
                           0050B3   314  RST_SR  = (0x50B3)
                                    315 
                                    316 ; Clock Registers
                           0050C0   317  CLK_ICKR  = (0x50c0)
                           0050C1   318  CLK_ECKR  = (0x50c1)
                           0050C3   319  CLK_CMSR  = (0x50C3)
                           0050C4   320  CLK_SWR  = (0x50C4)
                           0050C5   321  CLK_SWCR  = (0x50C5)
                           0050C6   322  CLK_CKDIVR  = (0x50C6)
                           0050C7   323  CLK_PCKENR1  = (0x50C7)
                           0050C8   324  CLK_CSSR  = (0x50C8)
                           0050C9   325  CLK_CCOR  = (0x50C9)
                           0050CA   326  CLK_PCKENR2  = (0x50CA)
                           0050CC   327  CLK_HSITRIMR  = (0x50CC)
                           0050CD   328  CLK_SWIMCCR  = (0x50CD)
                                    329 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    330 ; Peripherals clock gating
                                    331 ; CLK_PCKENR1 
                           000007   332  CLK_PCKENR1_TIM1 = (7)
                           000006   333  CLK_PCKENR1_TIM3 = (6)
                           000005   334  CLK_PCKENR1_TIM2 = (5)
                           000004   335  CLK_PCKENR1_TIM4 = (4)
                           000003   336  CLK_PCKENR1_UART3 = (3)
                           000002   337  CLK_PCKENR1_UART1 = (2)
                           000001   338  CLK_PCKENR1_SPI = (1)
                           000000   339  CLK_PCKENR1_I2C = (0)
                                    340 ; CLK_PCKENR2
                           000007   341  CLK_PCKENR2_CAN = (7)
                           000003   342  CLK_PCKENR2_ADC = (3)
                           000002   343  CLK_PCKENR2_AWU = (2)
                                    344 
                                    345 ; Clock bits
                           000005   346  CLK_ICKR_REGAH = (5)
                           000004   347  CLK_ICKR_LSIRDY = (4)
                           000003   348  CLK_ICKR_LSIEN = (3)
                           000002   349  CLK_ICKR_FHW = (2)
                           000001   350  CLK_ICKR_HSIRDY = (1)
                           000000   351  CLK_ICKR_HSIEN = (0)
                                    352 
                           000001   353  CLK_ECKR_HSERDY = (1)
                           000000   354  CLK_ECKR_HSEEN = (0)
                                    355 ; clock source
                           0000E1   356  CLK_SWR_HSI = 0xE1
                           0000D2   357  CLK_SWR_LSI = 0xD2
                           0000B4   358  CLK_SWR_HSE = 0xB4
                                    359 
                           000003   360  CLK_SWCR_SWIF = (3)
                           000002   361  CLK_SWCR_SWIEN = (2)
                           000001   362  CLK_SWCR_SWEN = (1)
                           000000   363  CLK_SWCR_SWBSY = (0)
                                    364 
                           000004   365  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   366  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   367  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   368  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   369  CLK_CKDIVR_CPUDIV0 = (0)
                                    370 
                                    371 ; Watchdog
                           0050D1   372  WWDG_CR  = (0x50D1)
                           0050D2   373  WWDG_WR  = (0x50D2)
                           0050E0   374  IWDG_KR  = (0x50E0)
                           0050E1   375  IWDG_PR  = (0x50E1)
                           0050E2   376  IWDG_RLR  = (0x50E2)
                           0050F0   377  AWU_CSR1  = (0x50F0)
                           0050F1   378  AWU_APR  = (0x50F1)
                           0050F2   379  AWU_TBR  = (0x50F2)
                                    380 
                                    381 ; Beeper
                                    382 ; beeper output is alternate function AFR7 on PD4
                                    383 ; connected to CN9-6
                           0050F3   384  BEEP_CSR  = (0x50F3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           00000F   385  BEEP_PORT = PD
                           000004   386  BEEP_BIT = 4
                           000010   387  BEEP_MASK = B4_MASK
                                    388 
                                    389 ; SPI
                           005200   390  SPI_CR1  = (0x5200)
                           005201   391  SPI_CR2  = (0x5201)
                           005202   392  SPI_ICR  = (0x5202)
                           005203   393  SPI_SR  = (0x5203)
                           005204   394  SPI_DR  = (0x5204)
                           005205   395  SPI_CRCPR  = (0x5205)
                           005206   396  SPI_RXCRCR  = (0x5206)
                           005207   397  SPI_TXCRCR  = (0x5207)
                                    398 
                                    399 ; I2C
                           005210   400  I2C_CR1  = (0x5210)
                           005211   401  I2C_CR2  = (0x5211)
                           005212   402  I2C_FREQR  = (0x5212)
                           005213   403  I2C_OARL  = (0x5213)
                           005214   404  I2C_OARH  = (0x5214)
                           005216   405  I2C_DR  = (0x5216)
                           005217   406  I2C_SR1  = (0x5217)
                           005218   407  I2C_SR2  = (0x5218)
                           005219   408  I2C_SR3  = (0x5219)
                           00521A   409  I2C_ITR  = (0x521A)
                           00521B   410  I2C_CCRL  = (0x521B)
                           00521C   411  I2C_CCRH  = (0x521C)
                           00521D   412  I2C_TRISER  = (0x521D)
                           00521E   413  I2C_PECR  = (0x521E)
                                    414 
                           000007   415  I2C_CR1_NOSTRETCH = (7)
                           000006   416  I2C_CR1_ENGC = (6)
                           000000   417  I2C_CR1_PE = (0)
                                    418 
                           000007   419  I2C_CR2_SWRST = (7)
                           000003   420  I2C_CR2_POS = (3)
                           000002   421  I2C_CR2_ACK = (2)
                           000001   422  I2C_CR2_STOP = (1)
                           000000   423  I2C_CR2_START = (0)
                                    424 
                           000000   425  I2C_OARL_ADD0 = (0)
                                    426 
                           000009   427  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   428  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    429 
                           000007   430  I2C_OARH_ADDMODE = (7)
                           000006   431  I2C_OARH_ADDCONF = (6)
                           000002   432  I2C_OARH_ADD9 = (2)
                           000001   433  I2C_OARH_ADD8 = (1)
                                    434 
                           000007   435  I2C_SR1_TXE = (7)
                           000006   436  I2C_SR1_RXNE = (6)
                           000004   437  I2C_SR1_STOPF = (4)
                           000003   438  I2C_SR1_ADD10 = (3)
                           000002   439  I2C_SR1_BTF = (2)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           000001   440  I2C_SR1_ADDR = (1)
                           000000   441  I2C_SR1_SB = (0)
                                    442 
                           000005   443  I2C_SR2_WUFH = (5)
                           000003   444  I2C_SR2_OVR = (3)
                           000002   445  I2C_SR2_AF = (2)
                           000001   446  I2C_SR2_ARLO = (1)
                           000000   447  I2C_SR2_BERR = (0)
                                    448 
                           000007   449  I2C_SR3_DUALF = (7)
                           000004   450  I2C_SR3_GENCALL = (4)
                           000002   451  I2C_SR3_TRA = (2)
                           000001   452  I2C_SR3_BUSY = (1)
                           000000   453  I2C_SR3_MSL = (0)
                                    454 
                           000002   455  I2C_ITR_ITBUFEN = (2)
                           000001   456  I2C_ITR_ITEVTEN = (1)
                           000000   457  I2C_ITR_ITERREN = (0)
                                    458 
                                    459 ; Precalculated values, all in KHz
                           000080   460  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   461  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    462 ;
                                    463 ; Fast I2C mode max rise time = 300ns
                                    464 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    465 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    466 
                           000005   467  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    468 
                           0000C0   469  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   470  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   471  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    472 
                           000080   473  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   474  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   475  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    476 
                           000000   477  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   478  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    479 ;
                                    480 ; Standard I2C mode max rise time = 1000ns
                                    481 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    482 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    483 
                           000011   484  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    485 
                           000000   486  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   487  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   488  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    489 
                           000001   490  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   491  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   492  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    493 
                           000001   494  I2C_READ = 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           000000   495  I2C_WRITE = 0
                                    496 
                                    497 ; baudrate constant for brr_value table access
                                    498 ; to be used by uart_init 
                           000000   499 B2400=0
                           000001   500 B4800=1
                           000002   501 B9600=2
                           000003   502 B19200=3
                           000004   503 B38400=4
                           000005   504 B57600=5
                           000006   505 B115200=6
                           000007   506 B230400=7
                           000008   507 B460800=8
                           000009   508 B921600=9
                                    509 
                                    510 ; UART registers offset from
                                    511 ; base address 
                           000000   512 UART_SR=0
                           000001   513 UART_DR=1
                           000002   514 UART_BRR1=2
                           000003   515 UART_BRR2=3
                           000004   516 UART_CR1=4
                           000005   517 UART_CR2=5
                           000006   518 UART_CR3=6
                           000007   519 UART_CR4=7
                           000008   520 UART_CR5=8
                           000009   521 UART_CR6=9
                           000009   522 UART_GTR=9
                           00000A   523 UART_PSCR=10
                                    524 
                                    525 ; uart identifier
                                    526 ; to be used by uart_init
                           000000   527  UART1 = 0
                           000001   528  UART3 = 1
                                    529 
                                    530 ; pins used by uart 
                           000005   531 UART1_TX_PIN=BIT5
                           000004   532 UART1_RX_PIN=BIT4
                           000005   533 UART3_TX_PIN=BIT5
                           000006   534 UART3_RX_PIN=BIT6
                                    535 ; uart port base address 
                           000000   536 UART1_PORT=PA 
                           00000F   537 UART3_PORT=PD
                                    538 
                                    539 ; UART1 
                           005230   540  UART1_BASE  = (0x5230)
                           005230   541  UART1_SR    = (0x5230)
                           005231   542  UART1_DR    = (0x5231)
                           005232   543  UART1_BRR1  = (0x5232)
                           005233   544  UART1_BRR2  = (0x5233)
                           005234   545  UART1_CR1   = (0x5234)
                           005235   546  UART1_CR2   = (0x5235)
                           005236   547  UART1_CR3   = (0x5236)
                           005237   548  UART1_CR4   = (0x5237)
                           005238   549  UART1_CR5   = (0x5238)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                           005239   550  UART1_GTR   = (0x5239)
                           00523A   551  UART1_PSCR  = (0x523A)
                                    552 
                                    553 ; UART3
                           005240   554  UART3_BASE  = (0x5240)
                           005240   555  UART3_SR    = (0x5240)
                           005241   556  UART3_DR    = (0x5241)
                           005242   557  UART3_BRR1  = (0x5242)
                           005243   558  UART3_BRR2  = (0x5243)
                           005244   559  UART3_CR1   = (0x5244)
                           005245   560  UART3_CR2   = (0x5245)
                           005246   561  UART3_CR3   = (0x5246)
                           005247   562  UART3_CR4   = (0x5247)
                           004249   563  UART3_CR6   = (0x4249)
                                    564 
                                    565 ; UART Status Register bits
                           000007   566  UART_SR_TXE = (7)
                           000006   567  UART_SR_TC = (6)
                           000005   568  UART_SR_RXNE = (5)
                           000004   569  UART_SR_IDLE = (4)
                           000003   570  UART_SR_OR = (3)
                           000002   571  UART_SR_NF = (2)
                           000001   572  UART_SR_FE = (1)
                           000000   573  UART_SR_PE = (0)
                                    574 
                                    575 ; Uart Control Register bits
                           000007   576  UART_CR1_R8 = (7)
                           000006   577  UART_CR1_T8 = (6)
                           000005   578  UART_CR1_UARTD = (5)
                           000004   579  UART_CR1_M = (4)
                           000003   580  UART_CR1_WAKE = (3)
                           000002   581  UART_CR1_PCEN = (2)
                           000001   582  UART_CR1_PS = (1)
                           000000   583  UART_CR1_PIEN = (0)
                                    584 
                           000007   585  UART_CR2_TIEN = (7)
                           000006   586  UART_CR2_TCIEN = (6)
                           000005   587  UART_CR2_RIEN = (5)
                           000004   588  UART_CR2_ILIEN = (4)
                           000003   589  UART_CR2_TEN = (3)
                           000002   590  UART_CR2_REN = (2)
                           000001   591  UART_CR2_RWU = (1)
                           000000   592  UART_CR2_SBK = (0)
                                    593 
                           000006   594  UART_CR3_LINEN = (6)
                           000005   595  UART_CR3_STOP1 = (5)
                           000004   596  UART_CR3_STOP0 = (4)
                           000003   597  UART_CR3_CLKEN = (3)
                           000002   598  UART_CR3_CPOL = (2)
                           000001   599  UART_CR3_CPHA = (1)
                           000000   600  UART_CR3_LBCL = (0)
                                    601 
                           000006   602  UART_CR4_LBDIEN = (6)
                           000005   603  UART_CR4_LBDL = (5)
                           000004   604  UART_CR4_LBDF = (4)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           000003   605  UART_CR4_ADD3 = (3)
                           000002   606  UART_CR4_ADD2 = (2)
                           000001   607  UART_CR4_ADD1 = (1)
                           000000   608  UART_CR4_ADD0 = (0)
                                    609 
                           000005   610  UART_CR5_SCEN = (5)
                           000004   611  UART_CR5_NACK = (4)
                           000003   612  UART_CR5_HDSEL = (3)
                           000002   613  UART_CR5_IRLP = (2)
                           000001   614  UART_CR5_IREN = (1)
                                    615 ; LIN mode config register
                           000007   616  UART_CR6_LDUM = (7)
                           000005   617  UART_CR6_LSLV = (5)
                           000004   618  UART_CR6_LASE = (4)
                           000002   619  UART_CR6_LHDIEN = (2) 
                           000001   620  UART_CR6_LHDF = (1)
                           000000   621  UART_CR6_LSF = (0)
                                    622 
                                    623 ; TIMERS
                                    624 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   625  TIM1_CR1  = (0x5250)
                           005251   626  TIM1_CR2  = (0x5251)
                           005252   627  TIM1_SMCR  = (0x5252)
                           005253   628  TIM1_ETR  = (0x5253)
                           005254   629  TIM1_IER  = (0x5254)
                           005255   630  TIM1_SR1  = (0x5255)
                           005256   631  TIM1_SR2  = (0x5256)
                           005257   632  TIM1_EGR  = (0x5257)
                           005258   633  TIM1_CCMR1  = (0x5258)
                           005259   634  TIM1_CCMR2  = (0x5259)
                           00525A   635  TIM1_CCMR3  = (0x525A)
                           00525B   636  TIM1_CCMR4  = (0x525B)
                           00525C   637  TIM1_CCER1  = (0x525C)
                           00525D   638  TIM1_CCER2  = (0x525D)
                           00525E   639  TIM1_CNTRH  = (0x525E)
                           00525F   640  TIM1_CNTRL  = (0x525F)
                           005260   641  TIM1_PSCRH  = (0x5260)
                           005261   642  TIM1_PSCRL  = (0x5261)
                           005262   643  TIM1_ARRH  = (0x5262)
                           005263   644  TIM1_ARRL  = (0x5263)
                           005264   645  TIM1_RCR  = (0x5264)
                           005265   646  TIM1_CCR1H  = (0x5265)
                           005266   647  TIM1_CCR1L  = (0x5266)
                           005267   648  TIM1_CCR2H  = (0x5267)
                           005268   649  TIM1_CCR2L  = (0x5268)
                           005269   650  TIM1_CCR3H  = (0x5269)
                           00526A   651  TIM1_CCR3L  = (0x526A)
                           00526B   652  TIM1_CCR4H  = (0x526B)
                           00526C   653  TIM1_CCR4L  = (0x526C)
                           00526D   654  TIM1_BKR  = (0x526D)
                           00526E   655  TIM1_DTR  = (0x526E)
                           00526F   656  TIM1_OISR  = (0x526F)
                                    657 
                                    658 ; Timer Control Register bits
                           000007   659  TIM_CR1_ARPE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000006   660  TIM_CR1_CMSH = (6)
                           000005   661  TIM_CR1_CMSL = (5)
                           000004   662  TIM_CR1_DIR = (4)
                           000003   663  TIM_CR1_OPM = (3)
                           000002   664  TIM_CR1_URS = (2)
                           000001   665  TIM_CR1_UDIS = (1)
                           000000   666  TIM_CR1_CEN = (0)
                                    667 
                           000006   668  TIM1_CR2_MMS2 = (6)
                           000005   669  TIM1_CR2_MMS1 = (5)
                           000004   670  TIM1_CR2_MMS0 = (4)
                           000002   671  TIM1_CR2_COMS = (2)
                           000000   672  TIM1_CR2_CCPC = (0)
                                    673 
                                    674 ; Timer Slave Mode Control bits
                           000007   675  TIM1_SMCR_MSM = (7)
                           000006   676  TIM1_SMCR_TS2 = (6)
                           000005   677  TIM1_SMCR_TS1 = (5)
                           000004   678  TIM1_SMCR_TS0 = (4)
                           000002   679  TIM1_SMCR_SMS2 = (2)
                           000001   680  TIM1_SMCR_SMS1 = (1)
                           000000   681  TIM1_SMCR_SMS0 = (0)
                                    682 
                                    683 ; Timer External Trigger Enable bits
                           000007   684  TIM1_ETR_ETP = (7)
                           000006   685  TIM1_ETR_ECE = (6)
                           000005   686  TIM1_ETR_ETPS1 = (5)
                           000004   687  TIM1_ETR_ETPS0 = (4)
                           000003   688  TIM1_ETR_ETF3 = (3)
                           000002   689  TIM1_ETR_ETF2 = (2)
                           000001   690  TIM1_ETR_ETF1 = (1)
                           000000   691  TIM1_ETR_ETF0 = (0)
                                    692 
                                    693 ; Timer Interrupt Enable bits
                           000007   694  TIM1_IER_BIE = (7)
                           000006   695  TIM1_IER_TIE = (6)
                           000005   696  TIM1_IER_COMIE = (5)
                           000004   697  TIM1_IER_CC4IE = (4)
                           000003   698  TIM1_IER_CC3IE = (3)
                           000002   699  TIM1_IER_CC2IE = (2)
                           000001   700  TIM1_IER_CC1IE = (1)
                           000000   701  TIM1_IER_UIE = (0)
                                    702 
                                    703 ; Timer Status Register bits
                           000007   704  TIM1_SR1_BIF = (7)
                           000006   705  TIM1_SR1_TIF = (6)
                           000005   706  TIM1_SR1_COMIF = (5)
                           000004   707  TIM1_SR1_CC4IF = (4)
                           000003   708  TIM1_SR1_CC3IF = (3)
                           000002   709  TIM1_SR1_CC2IF = (2)
                           000001   710  TIM1_SR1_CC1IF = (1)
                           000000   711  TIM1_SR1_UIF = (0)
                                    712 
                           000004   713  TIM1_SR2_CC4OF = (4)
                           000003   714  TIM1_SR2_CC3OF = (3)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000002   715  TIM1_SR2_CC2OF = (2)
                           000001   716  TIM1_SR2_CC1OF = (1)
                                    717 
                                    718 ; Timer Event Generation Register bits
                           000007   719  TIM1_EGR_BG = (7)
                           000006   720  TIM1_EGR_TG = (6)
                           000005   721  TIM1_EGR_COMG = (5)
                           000004   722  TIM1_EGR_CC4G = (4)
                           000003   723  TIM1_EGR_CC3G = (3)
                           000002   724  TIM1_EGR_CC2G = (2)
                           000001   725  TIM1_EGR_CC1G = (1)
                           000000   726  TIM1_EGR_UG = (0)
                                    727 
                                    728 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   729  TIM1_CCMR1_OC1CE = (7)
                           000006   730  TIM1_CCMR1_OC1M2 = (6)
                           000005   731  TIM1_CCMR1_OC1M1 = (5)
                           000004   732  TIM1_CCMR1_OC1M0 = (4)
                           000003   733  TIM1_CCMR1_OC1PE = (3)
                           000002   734  TIM1_CCMR1_OC1FE = (2)
                           000001   735  TIM1_CCMR1_CC1S1 = (1)
                           000000   736  TIM1_CCMR1_CC1S0 = (0)
                                    737 
                                    738 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   739  TIM1_CCMR1_IC1F3 = (7)
                           000006   740  TIM1_CCMR1_IC1F2 = (6)
                           000005   741  TIM1_CCMR1_IC1F1 = (5)
                           000004   742  TIM1_CCMR1_IC1F0 = (4)
                           000003   743  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   744  TIM1_CCMR1_IC1PSC0 = (2)
                                    745 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   746  TIM1_CCMR1_CC1S0 = (0)
                                    747 
                                    748 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   749  TIM1_CCMR2_OC2CE = (7)
                           000006   750  TIM1_CCMR2_OC2M2 = (6)
                           000005   751  TIM1_CCMR2_OC2M1 = (5)
                           000004   752  TIM1_CCMR2_OC2M0 = (4)
                           000003   753  TIM1_CCMR2_OC2PE = (3)
                           000002   754  TIM1_CCMR2_OC2FE = (2)
                           000001   755  TIM1_CCMR2_CC2S1 = (1)
                           000000   756  TIM1_CCMR2_CC2S0 = (0)
                                    757 
                                    758 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   759  TIM1_CCMR2_IC2F3 = (7)
                           000006   760  TIM1_CCMR2_IC2F2 = (6)
                           000005   761  TIM1_CCMR2_IC2F1 = (5)
                           000004   762  TIM1_CCMR2_IC2F0 = (4)
                           000003   763  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   764  TIM1_CCMR2_IC2PSC0 = (2)
                                    765 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   766  TIM1_CCMR2_CC2S0 = (0)
                                    767 
                                    768 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   769  TIM1_CCMR3_OC3CE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   770  TIM1_CCMR3_OC3M2 = (6)
                           000005   771  TIM1_CCMR3_OC3M1 = (5)
                           000004   772  TIM1_CCMR3_OC3M0 = (4)
                           000003   773  TIM1_CCMR3_OC3PE = (3)
                           000002   774  TIM1_CCMR3_OC3FE = (2)
                           000001   775  TIM1_CCMR3_CC3S1 = (1)
                           000000   776  TIM1_CCMR3_CC3S0 = (0)
                                    777 
                                    778 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   779  TIM1_CCMR3_IC3F3 = (7)
                           000006   780  TIM1_CCMR3_IC3F2 = (6)
                           000005   781  TIM1_CCMR3_IC3F1 = (5)
                           000004   782  TIM1_CCMR3_IC3F0 = (4)
                           000003   783  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   784  TIM1_CCMR3_IC3PSC0 = (2)
                                    785 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   786  TIM1_CCMR3_CC3S0 = (0)
                                    787 
                                    788 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   789  TIM1_CCMR4_OC4CE = (7)
                           000006   790  TIM1_CCMR4_OC4M2 = (6)
                           000005   791  TIM1_CCMR4_OC4M1 = (5)
                           000004   792  TIM1_CCMR4_OC4M0 = (4)
                           000003   793  TIM1_CCMR4_OC4PE = (3)
                           000002   794  TIM1_CCMR4_OC4FE = (2)
                           000001   795  TIM1_CCMR4_CC4S1 = (1)
                           000000   796  TIM1_CCMR4_CC4S0 = (0)
                                    797 
                                    798 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   799  TIM1_CCMR4_IC4F3 = (7)
                           000006   800  TIM1_CCMR4_IC4F2 = (6)
                           000005   801  TIM1_CCMR4_IC4F1 = (5)
                           000004   802  TIM1_CCMR4_IC4F0 = (4)
                           000003   803  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   804  TIM1_CCMR4_IC4PSC0 = (2)
                                    805 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   806  TIM1_CCMR4_CC4S0 = (0)
                                    807 
                                    808 ; Timer 2 - 16-bit timer
                           005300   809  TIM2_CR1  = (0x5300)
                           005301   810  TIM2_IER  = (0x5301)
                           005302   811  TIM2_SR1  = (0x5302)
                           005303   812  TIM2_SR2  = (0x5303)
                           005304   813  TIM2_EGR  = (0x5304)
                           005305   814  TIM2_CCMR1  = (0x5305)
                           005306   815  TIM2_CCMR2  = (0x5306)
                           005307   816  TIM2_CCMR3  = (0x5307)
                           005308   817  TIM2_CCER1  = (0x5308)
                           005309   818  TIM2_CCER2  = (0x5309)
                           00530A   819  TIM2_CNTRH  = (0x530A)
                           00530B   820  TIM2_CNTRL  = (0x530B)
                           00530C   821  TIM2_PSCR  = (0x530C)
                           00530D   822  TIM2_ARRH  = (0x530D)
                           00530E   823  TIM2_ARRL  = (0x530E)
                           00530F   824  TIM2_CCR1H  = (0x530F)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           005310   825  TIM2_CCR1L  = (0x5310)
                           005311   826  TIM2_CCR2H  = (0x5311)
                           005312   827  TIM2_CCR2L  = (0x5312)
                           005313   828  TIM2_CCR3H  = (0x5313)
                           005314   829  TIM2_CCR3L  = (0x5314)
                                    830 
                                    831 ; Timer 3
                           005320   832  TIM3_CR1  = (0x5320)
                           005321   833  TIM3_IER  = (0x5321)
                           005322   834  TIM3_SR1  = (0x5322)
                           005323   835  TIM3_SR2  = (0x5323)
                           005324   836  TIM3_EGR  = (0x5324)
                           005325   837  TIM3_CCMR1  = (0x5325)
                           005326   838  TIM3_CCMR2  = (0x5326)
                           005327   839  TIM3_CCER1  = (0x5327)
                           005328   840  TIM3_CNTRH  = (0x5328)
                           005329   841  TIM3_CNTRL  = (0x5329)
                           00532A   842  TIM3_PSCR  = (0x532A)
                           00532B   843  TIM3_ARRH  = (0x532B)
                           00532C   844  TIM3_ARRL  = (0x532C)
                           00532D   845  TIM3_CCR1H  = (0x532D)
                           00532E   846  TIM3_CCR1L  = (0x532E)
                           00532F   847  TIM3_CCR2H  = (0x532F)
                           005330   848  TIM3_CCR2L  = (0x5330)
                                    849 
                                    850 ; TIM3_CR1  fields
                           000000   851  TIM3_CR1_CEN = (0)
                           000001   852  TIM3_CR1_UDIS = (1)
                           000002   853  TIM3_CR1_URS = (2)
                           000003   854  TIM3_CR1_OPM = (3)
                           000007   855  TIM3_CR1_ARPE = (7)
                                    856 ; TIM3_CCR2  fields
                           000000   857  TIM3_CCMR2_CC2S_POS = (0)
                           000003   858  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   859  TIM3_CCMR2_OC2M_POS = (4)  
                                    860 ; TIM3_CCER1 fields
                           000000   861  TIM3_CCER1_CC1E = (0)
                           000001   862  TIM3_CCER1_CC1P = (1)
                           000004   863  TIM3_CCER1_CC2E = (4)
                           000005   864  TIM3_CCER1_CC2P = (5)
                                    865 ; TIM3_CCER2 fields
                           000000   866  TIM3_CCER2_CC3E = (0)
                           000001   867  TIM3_CCER2_CC3P = (1)
                                    868 
                                    869 ; Timer 4
                           005340   870  TIM4_CR1  = (0x5340)
                           005341   871  TIM4_IER  = (0x5341)
                           005342   872  TIM4_SR  = (0x5342)
                           005343   873  TIM4_EGR  = (0x5343)
                           005344   874  TIM4_CNTR  = (0x5344)
                           005345   875  TIM4_PSCR  = (0x5345)
                           005346   876  TIM4_ARR  = (0x5346)
                                    877 
                                    878 ; Timer 4 bitmasks
                                    879 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000007   880  TIM4_CR1_ARPE = (7)
                           000003   881  TIM4_CR1_OPM = (3)
                           000002   882  TIM4_CR1_URS = (2)
                           000001   883  TIM4_CR1_UDIS = (1)
                           000000   884  TIM4_CR1_CEN = (0)
                                    885 
                           000000   886  TIM4_IER_UIE = (0)
                                    887 
                           000000   888  TIM4_SR_UIF = (0)
                                    889 
                           000000   890  TIM4_EGR_UG = (0)
                                    891 
                           000002   892  TIM4_PSCR_PSC2 = (2)
                           000001   893  TIM4_PSCR_PSC1 = (1)
                           000000   894  TIM4_PSCR_PSC0 = (0)
                                    895 
                           000000   896  TIM4_PSCR_1 = 0
                           000001   897  TIM4_PSCR_2 = 1
                           000002   898  TIM4_PSCR_4 = 2
                           000003   899  TIM4_PSCR_8 = 3
                           000004   900  TIM4_PSCR_16 = 4
                           000005   901  TIM4_PSCR_32 = 5
                           000006   902  TIM4_PSCR_64 = 6
                           000007   903  TIM4_PSCR_128 = 7
                                    904 
                                    905 ; ADC2
                           005400   906  ADC_CSR  = (0x5400)
                           005401   907  ADC_CR1  = (0x5401)
                           005402   908  ADC_CR2  = (0x5402)
                           005403   909  ADC_CR3  = (0x5403)
                           005404   910  ADC_DRH  = (0x5404)
                           005405   911  ADC_DRL  = (0x5405)
                           005406   912  ADC_TDRH  = (0x5406)
                           005407   913  ADC_TDRL  = (0x5407)
                                    914  
                                    915 ; ADC bitmasks
                                    916 
                           000007   917  ADC_CSR_EOC = (7)
                           000006   918  ADC_CSR_AWD = (6)
                           000005   919  ADC_CSR_EOCIE = (5)
                           000004   920  ADC_CSR_AWDIE = (4)
                           000003   921  ADC_CSR_CH3 = (3)
                           000002   922  ADC_CSR_CH2 = (2)
                           000001   923  ADC_CSR_CH1 = (1)
                           000000   924  ADC_CSR_CH0 = (0)
                                    925 
                           000006   926  ADC_CR1_SPSEL2 = (6)
                           000005   927  ADC_CR1_SPSEL1 = (5)
                           000004   928  ADC_CR1_SPSEL0 = (4)
                           000001   929  ADC_CR1_CONT = (1)
                           000000   930  ADC_CR1_ADON = (0)
                                    931 
                           000006   932  ADC_CR2_EXTTRIG = (6)
                           000005   933  ADC_CR2_EXTSEL1 = (5)
                           000004   934  ADC_CR2_EXTSEL0 = (4)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000003   935  ADC_CR2_ALIGN = (3)
                           000001   936  ADC_CR2_SCAN = (1)
                                    937 
                           000007   938  ADC_CR3_DBUF = (7)
                           000006   939  ADC_CR3_DRH = (6)
                                    940 
                                    941 ; beCAN
                           005420   942  CAN_MCR = (0x5420)
                           005421   943  CAN_MSR = (0x5421)
                           005422   944  CAN_TSR = (0x5422)
                           005423   945  CAN_TPR = (0x5423)
                           005424   946  CAN_RFR = (0x5424)
                           005425   947  CAN_IER = (0x5425)
                           005426   948  CAN_DGR = (0x5426)
                           005427   949  CAN_FPSR = (0x5427)
                           005428   950  CAN_P0 = (0x5428)
                           005429   951  CAN_P1 = (0x5429)
                           00542A   952  CAN_P2 = (0x542A)
                           00542B   953  CAN_P3 = (0x542B)
                           00542C   954  CAN_P4 = (0x542C)
                           00542D   955  CAN_P5 = (0x542D)
                           00542E   956  CAN_P6 = (0x542E)
                           00542F   957  CAN_P7 = (0x542F)
                           005430   958  CAN_P8 = (0x5430)
                           005431   959  CAN_P9 = (0x5431)
                           005432   960  CAN_PA = (0x5432)
                           005433   961  CAN_PB = (0x5433)
                           005434   962  CAN_PC = (0x5434)
                           005435   963  CAN_PD = (0x5435)
                           005436   964  CAN_PE = (0x5436)
                           005437   965  CAN_PF = (0x5437)
                                    966 
                                    967 
                                    968 ; CPU
                           007F00   969  CPU_A  = (0x7F00)
                           007F01   970  CPU_PCE  = (0x7F01)
                           007F02   971  CPU_PCH  = (0x7F02)
                           007F03   972  CPU_PCL  = (0x7F03)
                           007F04   973  CPU_XH  = (0x7F04)
                           007F05   974  CPU_XL  = (0x7F05)
                           007F06   975  CPU_YH  = (0x7F06)
                           007F07   976  CPU_YL  = (0x7F07)
                           007F08   977  CPU_SPH  = (0x7F08)
                           007F09   978  CPU_SPL   = (0x7F09)
                           007F0A   979  CPU_CCR   = (0x7F0A)
                                    980 
                                    981 ; global configuration register
                           007F60   982  CFG_GCR   = (0x7F60)
                           000001   983  CFG_GCR_AL = 1
                           000000   984  CFG_GCR_SWIM = 0
                                    985 
                                    986 ; interrupt control registers
                           007F70   987  ITC_SPR1   = (0x7F70)
                           007F71   988  ITC_SPR2   = (0x7F71)
                           007F72   989  ITC_SPR3   = (0x7F72)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           007F73   990  ITC_SPR4   = (0x7F73)
                           007F74   991  ITC_SPR5   = (0x7F74)
                           007F75   992  ITC_SPR6   = (0x7F75)
                           007F76   993  ITC_SPR7   = (0x7F76)
                           007F77   994  ITC_SPR8   = (0x7F77)
                                    995 
                                    996 ; SWIM, control and status register
                           007F80   997  SWIM_CSR   = (0x7F80)
                                    998 ; debug registers
                           007F90   999  DM_BK1RE   = (0x7F90)
                           007F91  1000  DM_BK1RH   = (0x7F91)
                           007F92  1001  DM_BK1RL   = (0x7F92)
                           007F93  1002  DM_BK2RE   = (0x7F93)
                           007F94  1003  DM_BK2RH   = (0x7F94)
                           007F95  1004  DM_BK2RL   = (0x7F95)
                           007F96  1005  DM_CR1   = (0x7F96)
                           007F97  1006  DM_CR2   = (0x7F97)
                           007F98  1007  DM_CSR1   = (0x7F98)
                           007F99  1008  DM_CSR2   = (0x7F99)
                           007F9A  1009  DM_ENFCTR   = (0x7F9A)
                                   1010 
                                   1011 ; Interrupt Numbers
                           000000  1012  INT_TLI = 0
                           000001  1013  INT_AWU = 1
                           000002  1014  INT_CLK = 2
                           000003  1015  INT_EXTI0 = 3
                           000004  1016  INT_EXTI1 = 4
                           000005  1017  INT_EXTI2 = 5
                           000006  1018  INT_EXTI3 = 6
                           000007  1019  INT_EXTI4 = 7
                           000008  1020  INT_CAN_RX = 8
                           000009  1021  INT_CAN_TX = 9
                           00000A  1022  INT_SPI = 10
                           00000B  1023  INT_TIM1_OVF = 11
                           00000C  1024  INT_TIM1_CCM = 12
                           00000D  1025  INT_TIM2_OVF = 13
                           00000E  1026  INT_TIM2_CCM = 14
                           00000F  1027  INT_TIM3_OVF = 15
                           000010  1028  INT_TIM3_CCM = 16
                           000011  1029  INT_UART1_TX_COMPLETED = 17
                           000012  1030  INT_AUART1_RX_FULL = 18
                           000013  1031  INT_I2C = 19
                           000014  1032  INT_UART3_TX_COMPLETED = 20
                           000015  1033  INT_UART3_RX_FULL = 21
                           000016  1034  INT_ADC2 = 22
                           000017  1035  INT_TIM4_OVF = 23
                           000018  1036  INT_FLASH = 24
                                   1037 
                                   1038 ; Interrupt Vectors
                           008000  1039  INT_VECTOR_RESET = 0x8000
                           008004  1040  INT_VECTOR_TRAP = 0x8004
                           008008  1041  INT_VECTOR_TLI = 0x8008
                           00800C  1042  INT_VECTOR_AWU = 0x800C
                           008010  1043  INT_VECTOR_CLK = 0x8010
                           008014  1044  INT_VECTOR_EXTI0 = 0x8014
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           008018  1045  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1046  INT_VECTOR_EXTI2 = 0x801C
                           008020  1047  INT_VECTOR_EXTI3 = 0x8020
                           008024  1048  INT_VECTOR_EXTI4 = 0x8024
                           008028  1049  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1050  INT_VECTOR_CAN_TX = 0x802c
                           008030  1051  INT_VECTOR_SPI = 0x8030
                           008034  1052  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1053  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1054  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1055  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1056  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1057  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1058  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1059  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1060  INT_VECTOR_I2C = 0x8054
                           008058  1061  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1062  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1063  INT_VECTOR_ADC2 = 0x8060
                           008064  1064  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1065  INT_VECTOR_FLASH = 0x8068
                                   1066 
                                   1067 ; Condition code register bits
                           000007  1068 CC_V = 7  ; overflow flag 
                           000005  1069 CC_I1= 5  ; interrupt bit 1
                           000004  1070 CC_H = 4  ; half carry 
                           000003  1071 CC_I0 = 3 ; interrupt bit 0
                           000002  1072 CC_N = 2 ;  negative flag 
                           000001  1073 CC_Z = 1 ;  zero flag  
                           000000  1074 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                     13 ;	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13jul10cht
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       EF12, Version 2.1, 18apr00cht
                                     48 ;               move to 8000H replacing WHYP.
                                     49 ;               copy interrupt vectors from WHYPFLSH.S19
                                     50 ;               to EF12.S19 before flashing
                                     51 ;               add TICKS1 and DELAY1 for motor stepping
                                     52 ;
                                     53 ;       EF12, 02/18/00, C. H. Ting
                                     54 ;       Adapt 86eForth v2.02 to 68HC12.
                                     55 ;               Use WHYP to seed EF12.ASM
                                     56 ;               Use AS12 native 68HC12 assembler:
                                     57 ;               as12 ef12.asm >ef12.lst
                                     58 ;       EF12A, add ADC code, 02mar00cht
                                     59 ;       EF12B, 01mar00cht
                                     60 ;               stack to 0x78, return stack to 0xf8.
                                     61 ;               add all port definitions
                                     62 ;               add PWM registers
                                     63 ;               add SPI registers and code
                                     64 ;       EF12C, 12mar00cht
                                     65 ;               add MAX5250 D/A converter
                                     66 ;       EF12D, 15mar00cht
                                     67 ;               add all the Lexel interface words
                                     68 ;       EF12E, 18apr00cht, save for reference
                                     69 ;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                     70 ;       Copyright (c) 2000
                                     71 ;       Dr. C. H. Ting
                                     72 ;       156 14th Avenue
                                     73 ;       San Mateo, CA 94402
                                     74 ;       (650) 571-7639
                                     75 ;
                                     76 ;=========================================================
                                     77         .area SSEG (ABS) ; STACK
      001700                         78         .org 0x1700
      001700                         79         .ds 256 
                                     80 ;*********************************************************
                                     81 	.area DATA (ABS) ; eForth variables
      000000                         82         .org RAM_BASE
      000000                         83         .ds 0x80
                                     84 ;**********************************************************
                                     85         .area HOME ; vectors table
                                     86 
      000000 82 00 00 00             87 	int main	        ; reset
      000004 82 00 00 11             88 	int NonHandledInterrupt	; trap
      000008 82 00 00 11             89 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 11             90 	int NonHandledInterrupt	; irq1
      000010 82 00 00 11             91 	int NonHandledInterrupt	; irq2
      000014 82 00 00 11             92 	int NonHandledInterrupt	; irq3
      000018 82 00 00 11             93 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 11             94 	int NonHandledInterrupt	; irq5
      000020 82 00 00 11             95 	int NonHandledInterrupt	; irq6
      000024 82 00 00 11             96 	int NonHandledInterrupt	; irq7
      000028 82 00 00 11             97 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 11             98 	int NonHandledInterrupt	; irq9
      000030 82 00 00 11             99 	int NonHandledInterrupt	; irq10
      000034 82 00 00 11            100 	int NonHandledInterrupt	; irq11
      000038 82 00 00 11            101 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 11            102 	int NonHandledInterrupt	; irq13
      000040 82 00 00 11            103 	int NonHandledInterrupt	; irq14
      000044 82 00 00 11            104 	int NonHandledInterrupt	; irq15
      000048 82 00 00 11            105 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 11            106 	int NonHandledInterrupt	; irq17
      000050 82 00 00 11            107 	int NonHandledInterrupt	; irq18
      000054 82 00 00 11            108 	int NonHandledInterrupt	; irq19
      000058 82 00 00 11            109 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 11            110 	int NonHandledInterrupt	; irq21
      000060 82 00 00 11            111 	int NonHandledInterrupt	; irq22
      000064 82 00 00 11            112 	int NonHandledInterrupt	; irq23
      000068 82 00 00 11            113 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 11            114 	int NonHandledInterrupt	; irq25
      000070 82 00 00 11            115 	int NonHandledInterrupt	; irq26
      000074 82 00 00 11            116 	int NonHandledInterrupt	; irq27
      000078 82 00 00 11            117 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 11            118 	int NonHandledInterrupt	; irq29
                                    119 
                                    120 ;--------------------------------------------------------- 
                                    121 
                                    122 ;*********************************************************
                                    123 ;	Assembler constants
                                    124 ;*********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           000000   125 RAMBASE =	0x0000	   ;ram base
                           0017FF   126 STACK   =	0x17FF	;system (return) stack empty 
                           0016F0   127 DATSTK  =	0x16F0	;data stack  empty
                           001700   128 TIBBASE =       0X1700  ; tib addr.
                                    129 ;******  System Variables  ******
                           00001A   130 XTEMP	=	26	;address called by CREATE
                           00001C   131 YTEMP	=	28	;address called by CREATE
                           00001A   132 PROD1 = 26	;space for UM*
                           00001C   133 PROD2 = 28
                           00001E   134 PROD3 = 30
                           000020   135 CARRY = 32
                           000022   136 SP0	=	34	 ;initial data stack pointer
                           000024   137 RP0	=	36	;initial return stack pointer
                                    138 
                                    139 ;***********************************************
                                    140 ;; Version control
                                    141 
                           000002   142 VER     =     2         ;major release version
                           000001   143 EXT     =     1         ;minor extension
                                    144 
                                    145 ;; Constants
                                    146 
                           00FFFF   147 TRUEE   =     0xFFFF      ;true flag
                                    148 
                           000040   149 COMPO   =     0x40     ;lexicon compile only bit
                           000080   150 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   151 MASKK   =     0x1F7F  ;lexicon bit mask
                                    152 
                           000002   153 CELLL   =     2       ;size of a cell
                           00000A   154 BASEE   =     10      ;default radix
                           000008   155 BKSPP   =     8       ;back space
                           00000A   156 LF      =     10      ;line feed
                           00000D   157 CRR     =     13      ;carriage return
                           00001B   158 ERR     =     27      ;error escape
                           000027   159 TIC     =     39      ;tick
                           0000CD   160 CALLL   =     0xCD     ;CALL opcodes
                                    161 
                                    162 ;; Memory allocation
                                    163 
                           000006   164 UPP     =     RAMBASE+6
                           0017FF   165 SPP     =     RAMBASE+STACK
                           0016F0   166 RPP     =     RAMBASE+DATSTK
                           001700   167 TIBB    =     RAMBASE+TIBBASE
                           000080   168 CTOP    =     RAMBASE+0x80
                                    169 
                                    170         .macro _ledon
                                    171         bset PC_ODR,#LED2_BIT
                                    172         .endm
                                    173 
                                    174         .macro _ledoff
                                    175         bres PC_ODR,#LED2_BIT
                                    176         .endm
                                    177 
                                    178         .area CODE
                                    179 ;; Main entry points and COLD start data
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000000                        180 main:
                                    181 ; clear all RAM
      000000 AE 00 00         [ 2]  182 	ldw X,#RAMBASE
      000003                        183 clear_ram0:
      000003 7F               [ 1]  184 	clr (X)
      000004 5C               [ 1]  185 	incw X
      000005 A3 17 FF         [ 2]  186 	cpw X,#RAM_END
      000008 23 F9            [ 2]  187 	jrule clear_ram0
                                    188 
                                    189 ; initialize SP
      00000A AE 17 FF         [ 2]  190 	ldw X,#STACK
      00000D 94               [ 1]  191 	ldw SP,X
      00000E CC 00 16         [ 2]  192 	jp ORIG
                                    193 
                                    194 ; non handled interrupt reset MCU
      000011                        195 NonHandledInterrupt:
      000011 A6 80            [ 1]  196         ld a, #0x80
      000013 C7 50 D1         [ 1]  197         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    198 	;iret
                                    199 
      000016                        200 ORIG:   
      000016 AE 17 FF         [ 2]  201         LDW     X,#STACK  ;initialize return stack
      000019 94               [ 1]  202         LDW     SP,X
      00001A BF 24            [ 2]  203         LDW     RP0,X
      00001C AE 16 F0         [ 2]  204         LDW     X,#DATSTK ;initialize data stack
      00001F BF 22            [ 2]  205         LDW     SP0,X
                                    206 ; initialize PC_5 as output to control LED2
      000021 72 1A 50 0D      [ 1]  207         bset PC_CR1,#LED2_BIT
      000025 72 1A 50 0E      [ 1]  208         bset PC_CR2,#LED2_BIT
      000029 72 1A 50 0C      [ 1]  209         bset PC_DDR,#LED2_BIT
      00002D                        210         _ledoff
      00002D 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    211 ; initialize clock to HSE
                                    212 ; switch to external 8 Mhz crystal 
      000031                        213 clock_init:	
      000031 72 12 50 C5      [ 1]  214 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000035 A6 B4            [ 1]  215 	ld a,#CLK_SWR_HSE
      000037 C7 50 C4         [ 1]  216 	ld CLK_SWR,a
      00003A C1 50 C3         [ 1]  217 1$:	cp a,CLK_CMSR
      00003D 26 FB            [ 1]  218 	jrne 1$
                                    219 ; initialize UART3, 115200 8N1
      00003F                        220 uart3_init:
      00003F 72 16 50 C7      [ 1]  221 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3
                                    222 	; configure tx pin
      000043 72 1A 50 11      [ 1]  223 	bset PD_DDR,#BIT5 ; tx pin
      000047 72 1A 50 12      [ 1]  224 	bset PD_CR1,#BIT5 ; push-pull output
      00004B 72 1A 50 13      [ 1]  225 	bset PD_CR2,#BIT5 ; fast output
                                    226 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00004F 35 05 52 43      [ 1]  227 	mov UART3_BRR2,#0x05 ; must be loaded first
      000053 35 04 52 42      [ 1]  228 	mov UART3_BRR1,#0x4
      000057 35 0C 52 45      [ 1]  229 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
      00005B A6 4F            [ 1]  230         ld a,#'O 
      00005D C7 52 41         [ 1]  231         ld UART3_DR,a 
      000060                        232         _ledon 
      000060 72 1A 50 0A      [ 1]    1         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000064 CC 00 64         [ 2]  233         jp .
      000067 CC 14 FD         [ 2]  234         jp  COLD   ;default=MN1
                                    235 
                                    236 ; COLD start initiates these variables.
      00006A                        237 UZERO:
      00006A 00 0A                  238         .word      BASEE   ;BASE
      00006C 00 00                  239         .word      0       ;tmp
      00006E 00 00                  240         .word      0       ;>IN
      000070 00 00                  241         .word      0       ;#TIB
      000072 17 00                  242         .word      TIBB    ;TIB
      000074 0F 27                  243         .word      INTER   ;'EVAL
      000076 00 00                  244         .word      0       ;HLD
      000078 14 F8                  245         .word       LASTN   ;CONTEXT pointer
      00007A 00 80                  246         .word       CTOP   ;CP in RAM
      00007C 14 F8                  247         .word      LASTN   ;LAST
      00007E 00 00                  248 ULAST:  .word      0
                                    249 
                                    250         .area CODE
                                    251 ;; Device dependent I/O
                                    252 ;       All channeled to DOS 21H services
                                    253 
                                    254 ;       ?RX     ( -- c T | F )
                                    255 ;         Return input byte and true, or false.
      000080 00 00                  256         .word      0
                           000082   257 LINK	= .
      000082 04                     258         .byte      4
      000083 3F 4B 45 59            259         .ascii     "?KEY"
      000087                        260 QKEY:
      000087 72 0B 52 40 12   [ 2]  261         BTJF UART3_SR,#5,INCH   ;check status
      00008C C6 52 41         [ 1]  262         LD    A,UART3_DR   ;get char in A
      00008F 1D 00 02         [ 2]  263 	SUBW	X,#2
      000092 E7 01            [ 1]  264         LD     (1,X),A
      000094 7F               [ 1]  265 	CLR	(X)
      000095 1D 00 02         [ 2]  266 	SUBW	X,#2
      000098 90 AE FF FF      [ 2]  267         LDW     Y,#0xFFFF
      00009C FF               [ 2]  268         LDW     (X),Y
      00009D 81               [ 4]  269         RET
      00009E 90 5F            [ 1]  270 INCH:   CLRW	Y
      0000A0 1D 00 02         [ 2]  271 	SUBW	X,#2
      0000A3 FF               [ 2]  272         LDW     (X),Y
      0000A4 81               [ 4]  273         RET
                                    274 
                                    275 ;       TX!     ( c -- )
                                    276 ;       Send character c to  output device.
      0000A5 00 82                  277         .word      LINK
                           0000A7   278 LINK	= .
      0000A7 04                     279         .byte      4
      0000A8 45 4D 49 54            280         .ascii     "EMIT"
      0000AC                        281 EMIT:
      0000AC E6 01            [ 1]  282         LD     A,(1,X)
      0000AE 1C 00 02         [ 2]  283 	ADDW	X,#2
      0000B1 72 0F 52 40 FB   [ 2]  284 OUTPUT: BTJF UART3_SR,#7,OUTPUT  ;loop until tdre
      0000B6 C7 52 41         [ 1]  285         LD    UART3_DR,A   ;send A
      0000B9 81               [ 4]  286         RET
                                    287 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                    288 ;; The kernel
                                    289 
                                    290 ;       doLIT   ( -- w )
                                    291 ;       Push an inline literal.
      0000BA 00 A7                  292         .word      LINK
                           0000BC   293 LINK	= 	.
      0000BC 45                     294 	.byte      COMPO+5
      0000BD 64 6F 4C 69 74         295         .ascii     "doLit"
      0000C2                        296 DOLIT:
      0000C2 1D 00 02         [ 2]  297 	SUBW X,#2
      0000C5 90 85            [ 2]  298         POPW Y
      0000C7 90 BF 1C         [ 2]  299 	LDW YTEMP,Y
      0000CA 90 FE            [ 2]  300 	LDW Y,(Y)
      0000CC FF               [ 2]  301         LDW (X),Y
      0000CD 90 BE 1C         [ 2]  302         LDW Y,YTEMP
      0000D0 90 EC 02         [ 2]  303 	JP (2,Y)
                                    304 
                                    305 ;       next    ( -- )
                                    306 ;       Code for  single index loop.
      0000D3 00 BC                  307         .word      LINK
                           0000D5   308 LINK	= 	.
      0000D5 44                     309 	.byte      COMPO+4
      0000D6 6E 65 78 74            310         .ascii     "next"
      0000DA                        311 DONXT:
      0000DA 16 03            [ 2]  312 	LDW Y,(3,SP)
      0000DC 90 5A            [ 2]  313 	DECW Y
      0000DE 2A 07            [ 1]  314 	JRPL NEX1
      0000E0 90 85            [ 2]  315 	POPW Y
      0000E2 84               [ 1]  316 	POP A
      0000E3 84               [ 1]  317 	POP A
      0000E4 90 EC 02         [ 2]  318     JP (2,Y)
      0000E7                        319 NEX1:
      0000E7 17 03            [ 2]  320     LDW (3,SP),Y
      0000E9 90 85            [ 2]  321     POPW Y
      0000EB 90 FE            [ 2]  322 	LDW Y,(Y)
      0000ED 90 FC            [ 2]  323 	JP (Y)
                                    324 
                                    325 ;       ?branch ( f -- )
                                    326 ;       Branch if flag is zero.
      0000EF 00 D5                  327         .word      LINK
                           0000F1   328 LINK	= 	.
      0000F1 47                     329 	.byte      COMPO+7
      0000F2 3F 62 72 61 6E 63 68   330         .ascii     "?branch"
      0000F9                        331 QBRAN:	
      0000F9 90 93            [ 1]  332         LDW Y,X
      0000FB 1C 00 02         [ 2]  333 	ADDW X,#2
      0000FE 90 FE            [ 2]  334 	LDW Y,(Y)
      000100 27 0E            [ 1]  335         JREQ     BRAN
      000102 90 85            [ 2]  336 	POPW Y
      000104 90 EC 02         [ 2]  337 	JP (2,Y)
                                    338         
                                    339 ;       branch  ( -- )
                                    340 ;       Branch to an inline address.
      000107 00 F1                  341         .word      LINK
                           000109   342 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000109 46                     343 	.byte      COMPO+6
      00010A 62 72 61 6E 63 68      344         .ascii     "branch"
      000110                        345 BRAN:
      000110 90 85            [ 2]  346         POPW Y
      000112 90 FE            [ 2]  347 	LDW Y,(Y)
      000114 90 FC            [ 2]  348         JP     (Y)
                                    349 
                                    350 ;       EXECUTE ( ca -- )
                                    351 ;       Execute  word at ca.
      000116 01 09                  352         .word      LINK
                           000118   353 LINK	= 	.
      000118 07                     354         .byte       7
      000119 45 58 45 43 55 54 45   355         .ascii     "EXECUTE"
      000120                        356 EXECU:
      000120 90 93            [ 1]  357         LDW Y,X
      000122 1C 00 02         [ 2]  358 	ADDW X,#2
      000125 90 FE            [ 2]  359 	LDW     Y,(Y)
      000127 90 FC            [ 2]  360         JP     (Y)
                                    361 
                                    362 ;       EXIT    ( -- )
                                    363 ;       Terminate a colon definition.
      000129 01 18                  364         .word      LINK
                           00012B   365 LINK = .
      00012B 04                     366         .byte      4
      00012C 45 58 49 54            367         .ascii     "EXIT"
      000130                        368 EXIT:
      000130 90 85            [ 2]  369         POPW Y
      000132 81               [ 4]  370         RET
                                    371 
                                    372 ;       !       ( w a -- )
                                    373 ;       Pop  data stack to memory.
      000133 01 2B                  374         .word      LINK
                           000135   375 LINK = .
      000135 01                     376         .byte      1
      000136 21                     377         .ascii     "!"
      000137                        378 STORE:
      000137 90 93            [ 1]  379         LDW Y,X
      000139 90 FE            [ 2]  380         LDW Y,(Y)    ;Y=a
      00013B 90 BF 1C         [ 2]  381         LDW YTEMP,Y
      00013E 90 93            [ 1]  382         LDW Y,X
      000140 90 EE 02         [ 2]  383         LDW Y,(2,Y)
      000143 91 CF 1C         [ 5]  384         LDW [YTEMP],Y
      000146 1C 00 04         [ 2]  385         ADDW X,#4 ;store w at a
      000149 81               [ 4]  386         RET     
                                    387 
                                    388 ;       @       ( a -- w )
                                    389 ;       Push memory location to stack.
      00014A 01 35                  390         .word      LINK
                           00014C   391 LINK	= 	.
      00014C 01                     392         .byte    1
      00014D 40                     393         .ascii	"@"
      00014E                        394 AT:
      00014E 90 93            [ 1]  395         LDW Y,X     ;Y = a
      000150 90 FE            [ 2]  396         LDW Y,(Y)
      000152 90 FE            [ 2]  397         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000154 FF               [ 2]  398         LDW (X),Y ;w = @Y
      000155 81               [ 4]  399         RET     
                                    400 
                                    401 ;       C!      ( c b -- )
                                    402 ;       Pop  data stack to byte memory.
      000156 01 4C                  403         .word      LINK
                           000158   404 LINK	= .
      000158 02                     405         .byte      2
      000159 43 21                  406         .ascii     "C!"
      00015B                        407 CSTOR:
      00015B 90 93            [ 1]  408         LDW Y,X
      00015D 90 FE            [ 2]  409 	LDW Y,(Y)    ;Y=b
      00015F E6 03            [ 1]  410         LD A,(3,X)    ;D = c
      000161 90 F7            [ 1]  411         LD  (Y),A     ;store c at b
      000163 1C 00 04         [ 2]  412 	ADDW X,#4
      000166 81               [ 4]  413         RET     
                                    414 
                                    415 ;       C@      ( b -- c )
                                    416 ;       Push byte in memory to  stack.
      000167 01 58                  417         .word      LINK
                           000169   418 LINK	= 	.
      000169 02                     419         .byte      2
      00016A 43 40                  420         .ascii     "C@"
      00016C                        421 CAT:
      00016C 90 93            [ 1]  422         LDW Y,X     ;Y=b
      00016E 90 FE            [ 2]  423         LDW Y,(Y)
      000170 90 F6            [ 1]  424         LD A,(Y)
      000172 E7 01            [ 1]  425         LD (1,X),A
      000174 7F               [ 1]  426         CLR (X)
      000175 81               [ 4]  427         RET     
                                    428 
                                    429 ;       RP@     ( -- a )
                                    430 ;       Push current RP to data stack.
      000176 01 69                  431         .word      LINK
                           000178   432 LINK	= .
      000178 03                     433         .byte      3
      000179 72 70 40               434         .ascii     "rp@"
      00017C                        435 RPAT:
      00017C 90 96            [ 1]  436         LDW Y,SP    ;save return addr
      00017E 1D 00 02         [ 2]  437         SUBW X,#2
      000181 FF               [ 2]  438         LDW (X),Y
      000182 81               [ 4]  439         RET     
                                    440 
                                    441 ;       RP!     ( a -- )
                                    442 ;       Set  return stack pointer.
      000183 01 78                  443         .word      LINK
                           000185   444 LINK	= 	. 
      000185 43                     445 	.byte      COMPO+3
      000186 72 70 21               446         .ascii     "rp!"
      000189                        447 RPSTO:
      000189 90 85            [ 2]  448         POPW Y
      00018B 90 BF 1C         [ 2]  449         LDW YTEMP,Y
      00018E 90 93            [ 1]  450         LDW Y,X
      000190 90 FE            [ 2]  451         LDW Y,(Y)
      000192 90 94            [ 1]  452         LDW SP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000194 92 CC 1C         [ 5]  453         JP [YTEMP]
                                    454 
                                    455 ;       R>      ( -- w )
                                    456 ;       Pop return stack to data stack.
      000197 01 85                  457         .word      LINK
                           000199   458 LINK	= 	. 
      000199 42                     459 	.byte      COMPO+2
      00019A 52 3E                  460         .ascii     "R>"
      00019C                        461 RFROM:
      00019C 90 85            [ 2]  462         POPW Y    ;save return addr
      00019E 90 BF 1C         [ 2]  463         LDW YTEMP,Y
      0001A1 90 85            [ 2]  464         POPW Y
      0001A3 1D 00 02         [ 2]  465         SUBW X,#2
      0001A6 FF               [ 2]  466         LDW (X),Y
      0001A7 92 CC 1C         [ 5]  467         JP [YTEMP]
                                    468 
                                    469 ;       R@      ( -- w )
                                    470 ;       Copy top of return stack to stack.
      0001AA 01 99                  471         .word      LINK
                           0001AC   472 LINK	= 	. 
      0001AC 02                     473         .byte      2
      0001AD 52 40                  474         .ascii     "R@"
      0001AF                        475 RAT:
      0001AF 90 85            [ 2]  476         POPW Y
      0001B1 90 BF 1C         [ 2]  477         LDW YTEMP,Y
      0001B4 90 85            [ 2]  478         POPW Y
      0001B6 90 89            [ 2]  479         PUSHW Y
      0001B8 1D 00 02         [ 2]  480         SUBW X,#2
      0001BB FF               [ 2]  481         LDW (X),Y
      0001BC 92 CC 1C         [ 5]  482         JP [YTEMP]
                                    483 
                                    484 ;       >R      ( w -- )
                                    485 ;       Push data stack to return stack.
      0001BF 01 AC                  486         .word      LINK
                           0001C1   487 LINK	= 	. 
      0001C1 42                     488 	.byte      COMPO+2
      0001C2 3E 52                  489         .ascii     ">R"
      0001C4                        490 TOR:
      0001C4 90 85            [ 2]  491         POPW Y    ;save return addr
      0001C6 90 BF 1C         [ 2]  492         LDW YTEMP,Y
      0001C9 90 93            [ 1]  493         LDW Y,X
      0001CB 90 FE            [ 2]  494         LDW Y,(Y)
      0001CD 90 89            [ 2]  495         PUSHW Y    ;restore return addr
      0001CF 1C 00 02         [ 2]  496         ADDW X,#2
      0001D2 92 CC 1C         [ 5]  497         JP [YTEMP]
                                    498 
                                    499 ;       SP@     ( -- a )
                                    500 ;       Push current stack pointer.
      0001D5 01 C1                  501         .word      LINK
                           0001D7   502 LINK	= 	. 
      0001D7 03                     503         .byte      3
      0001D8 73 70 40               504         .ascii     "sp@"
      0001DB                        505 SPAT:
      0001DB 90 93            [ 1]  506 	LDW Y,X
      0001DD 1D 00 02         [ 2]  507         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0001E0 FF               [ 2]  508 	LDW (X),Y
      0001E1 81               [ 4]  509         RET     
                                    510 
                                    511 ;       SP!     ( a -- )
                                    512 ;       Set  data stack pointer.
      0001E2 01 D7                  513         .word      LINK
                           0001E4   514 LINK	= 	. 
      0001E4 03                     515         .byte      3
      0001E5 73 70 21               516         .ascii     "sp!"
      0001E8                        517 SPSTO:
      0001E8 FE               [ 2]  518         LDW     X,(X)     ;X = a
      0001E9 81               [ 4]  519         RET     
                                    520 
                                    521 ;       DROP    ( w -- )
                                    522 ;       Discard top stack item.
      0001EA 01 E4                  523         .word      LINK
                           0001EC   524 LINK	= 	. 
      0001EC 04                     525         .byte      4
      0001ED 44 52 4F 50            526         .ascii     "DROP"
      0001F1                        527 DROP:
      0001F1 1C 00 02         [ 2]  528         ADDW X,#2     
      0001F4 81               [ 4]  529         RET     
                                    530 
                                    531 ;       DUP     ( w -- w w )
                                    532 ;       Duplicate  top stack item.
      0001F5 01 EC                  533         .word      LINK
                           0001F7   534 LINK	= 	. 
      0001F7 03                     535         .byte      3
      0001F8 44 55 50               536         .ascii     "DUP"
      0001FB                        537 DUPP:
      0001FB 90 93            [ 1]  538 				LDW Y,X
      0001FD 1D 00 02         [ 2]  539         SUBW X,#2
      000200 90 FE            [ 2]  540 				LDW Y,(Y)
      000202 FF               [ 2]  541 				LDW (X),Y
      000203 81               [ 4]  542         RET     
                                    543 
                                    544 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    545 ;       Exchange top two stack items.
      000204 01 F7                  546         .word      LINK
                           000206   547 LINK	= 	. 
      000206 04                     548         .byte      4
      000207 53 57 41 50            549         .ascii     "SWAP"
      00020B                        550 SWAPP:
      00020B 90 93            [ 1]  551         LDW Y,X
      00020D 90 FE            [ 2]  552         LDW Y,(Y)
      00020F 90 BF 1C         [ 2]  553         LDW YTEMP,Y
      000212 90 93            [ 1]  554         LDW Y,X
      000214 90 EE 02         [ 2]  555         LDW Y,(2,Y)
      000217 FF               [ 2]  556         LDW (X),Y
      000218 90 BE 1C         [ 2]  557         LDW Y,YTEMP
      00021B EF 02            [ 2]  558         LDW (2,X),Y
      00021D 81               [ 4]  559         RET     
                                    560 
                                    561 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    562 ;       Copy second stack item to top.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00021E 02 06                  563         .word      LINK
                           000220   564 LINK	= . 
      000220 04                     565         .byte      4
      000221 4F 56 45 52            566         .ascii     "OVER"
      000225                        567 OVER:
      000225 1D 00 02         [ 2]  568         SUBW X,#2
      000228 90 93            [ 1]  569         LDW Y,X
      00022A 90 EE 04         [ 2]  570         LDW Y,(4,Y)
      00022D FF               [ 2]  571         LDW (X),Y
      00022E 81               [ 4]  572         RET     
                                    573 
                                    574 ;       0<      ( n -- t )
                                    575 ;       Return true if n is negative.
      00022F 02 20                  576         .word      LINK
                           000231   577 LINK	= . 
      000231 02                     578         .byte      2
      000232 30 3C                  579         .ascii     "0<"
      000234                        580 ZLESS:
      000234 A6 FF            [ 1]  581         LD A,#0xFF
      000236 90 93            [ 1]  582         LDW Y,X
      000238 90 FE            [ 2]  583         LDW Y,(Y)
      00023A 2B 01            [ 1]  584         JRMI     ZL1
      00023C 4F               [ 1]  585         CLR A   ;false
      00023D F7               [ 1]  586 ZL1:    LD     (X),A
      00023E E7 01            [ 1]  587         LD (1,X),A
      000240 81               [ 4]  588 	RET     
                                    589 
                                    590 ;       AND     ( w w -- w )
                                    591 ;       Bitwise AND.
      000241 02 31                  592         .word      LINK
                           000243   593 LINK	= . 
      000243 03                     594         .byte      3
      000244 41 4E 44               595         .ascii     "AND"
      000247                        596 ANDD:
      000247 F6               [ 1]  597         LD  A,(X)    ;D=w
      000248 E4 02            [ 1]  598         AND A,(2,X)
      00024A E7 02            [ 1]  599         LD (2,X),A
      00024C E6 01            [ 1]  600         LD A,(1,X)
      00024E E4 03            [ 1]  601         AND A,(3,X)
      000250 E7 03            [ 1]  602         LD (3,X),A
      000252 1C 00 02         [ 2]  603         ADDW X,#2
      000255 81               [ 4]  604         RET
                                    605 
                                    606 ;       OR      ( w w -- w )
                                    607 ;       Bitwise inclusive OR.
      000256 02 43                  608         .word      LINK
                           000258   609 LINK = . 
      000258 02                     610         .byte      2
      000259 4F 52                  611         .ascii     "OR"
      00025B                        612 ORR:
      00025B F6               [ 1]  613         LD A,(X)    ;D=w
      00025C EA 02            [ 1]  614         OR A,(2,X)
      00025E E7 02            [ 1]  615         LD (2,X),A
      000260 E6 01            [ 1]  616         LD A,(1,X)
      000262 EA 03            [ 1]  617         OR A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000264 E7 03            [ 1]  618         LD (3,X),A
      000266 1C 00 02         [ 2]  619         ADDW X,#2
      000269 81               [ 4]  620         RET
                                    621 
                                    622 ;       XOR     ( w w -- w )
                                    623 ;       Bitwise exclusive OR.
      00026A 02 58                  624         .word      LINK
                           00026C   625 LINK	= . 
      00026C 03                     626         .byte      3
      00026D 58 4F 52               627         .ascii     "XOR"
      000270                        628 XORR:
      000270 F6               [ 1]  629         LD A,(X)    ;D=w
      000271 E8 02            [ 1]  630         XOR A,(2,X)
      000273 E7 02            [ 1]  631         LD (2,X),A
      000275 E6 01            [ 1]  632         LD A,(1,X)
      000277 E8 03            [ 1]  633         XOR A,(3,X)
      000279 E7 03            [ 1]  634         LD (3,X),A
      00027B 1C 00 02         [ 2]  635         ADDW X,#2
      00027E 81               [ 4]  636         RET
                                    637 
                                    638 ;       UM+     ( u u -- udsum )
                                    639 ;       Add two unsigned single
                                    640 ;       and return a double sum.
      00027F 02 6C                  641         .word      LINK
                           000281   642 LINK	= . 
      000281 03                     643         .byte      3
      000282 55 4D 2B               644         .ascii     "UM+"
      000285                        645 UPLUS:
      000285 A6 01            [ 1]  646         LD A,#1
      000287 90 93            [ 1]  647         LDW Y,X
      000289 90 EE 02         [ 2]  648         LDW Y,(2,Y)
      00028C 90 BF 1C         [ 2]  649         LDW YTEMP,Y
      00028F 90 93            [ 1]  650         LDW Y,X
      000291 90 FE            [ 2]  651         LDW Y,(Y)
      000293 72 B9 00 1C      [ 2]  652         ADDW Y,YTEMP
      000297 EF 02            [ 2]  653         LDW (2,X),Y
      000299 25 01            [ 1]  654         JRC     UPL1
      00029B 4F               [ 1]  655         CLR A
      00029C E7 01            [ 1]  656 UPL1:   LD     (1,X),A
      00029E 7F               [ 1]  657         CLR (X)
      00029F 81               [ 4]  658         RET
                                    659 
                                    660 ;; System and user variables
                                    661 
                                    662 ;       doVAR   ( -- a )
                                    663 ;       Code for VARIABLE and CREATE.
      0002A0 02 81                  664         .word      LINK
                           0002A2   665 LINK	= . 
      0002A2 45                     666 	.byte      COMPO+5
      0002A3 64 6F 56 61 72         667         .ascii     "doVar"
      0002A8                        668 DOVAR:
      0002A8 1D 00 02         [ 2]  669 	SUBW X,#2
      0002AB 90 85            [ 2]  670         POPW Y    ;get return addr (pfa)
      0002AD FF               [ 2]  671         LDW (X),Y    ;push on stack
      0002AE 81               [ 4]  672         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    673 
                                    674 ;       BASE    ( -- a )
                                    675 ;       Radix base for numeric I/O.
      0002AF 02 A2                  676         .word      LINK        
                           0002B1   677 LINK = . 
      0002B1 04                     678         .byte      4
      0002B2 42 41 53 45            679         .ascii     "BASE"
      0002B6                        680 BASE:
      0002B6 90 AE 00 06      [ 2]  681 	LDW Y,#RAMBASE+6
      0002BA 1D 00 02         [ 2]  682 	SUBW X,#2
      0002BD FF               [ 2]  683         LDW (X),Y
      0002BE 81               [ 4]  684         RET
                                    685 
                                    686 ;       tmp     ( -- a )
                                    687 ;       A temporary storage.
      0002BF 02 B1                  688         .word      LINK
                                    689         
                           0002C1   690 LINK = . 
      0002C1 03                     691 	.byte      3
      0002C2 74 6D 70               692         .ascii     "tmp"
      0002C5                        693 TEMP:
      0002C5 90 AE 00 08      [ 2]  694 	LDW Y,#RAMBASE+8
      0002C9 1D 00 02         [ 2]  695 	SUBW X,#2
      0002CC FF               [ 2]  696         LDW (X),Y
      0002CD 81               [ 4]  697         RET
                                    698 
                                    699 ;       >IN     ( -- a )
                                    700 ;        Hold parsing pointer.
      0002CE 02 C1                  701         .word      LINK
                           0002D0   702 LINK = . 
      0002D0 03                     703         .byte      3
      0002D1 3E 49 4E               704         .ascii    ">IN"
      0002D4                        705 INN:
      0002D4 90 AE 00 0A      [ 2]  706 	LDW Y,#RAMBASE+10
      0002D8 1D 00 02         [ 2]  707 	SUBW X,#2
      0002DB FF               [ 2]  708         LDW (X),Y
      0002DC 81               [ 4]  709         RET
                                    710 
                                    711 ;       #TIB    ( -- a )
                                    712 ;       Count in terminal input buffer.
      0002DD 02 D0                  713         .word      LINK
                           0002DF   714 LINK = . 
      0002DF 04                     715         .byte      4
      0002E0 23 54 49 42            716         .ascii     "#TIB"
      0002E4                        717 NTIB:
      0002E4 90 AE 00 0C      [ 2]  718 	LDW Y,#RAMBASE+12
      0002E8 1D 00 02         [ 2]  719 	SUBW X,#2
      0002EB FF               [ 2]  720         LDW (X),Y
      0002EC 81               [ 4]  721         RET
                                    722 
                                    723 ;       "EVAL   ( -- a )
                                    724 ;       Execution vector of EVAL.
      0002ED 02 DF                  725         .word      LINK
                           0002EF   726 LINK = . 
      0002EF 05                     727         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0002F0 27 65 76 61 6C         728         .ascii     "'eval"
      0002F5                        729 TEVAL:
      0002F5 90 AE 00 10      [ 2]  730 	LDW Y,#RAMBASE+16
      0002F9 1D 00 02         [ 2]  731 	SUBW X,#2
      0002FC FF               [ 2]  732         LDW (X),Y
      0002FD 81               [ 4]  733         RET
                                    734 
                                    735 ;       HLD     ( -- a )
                                    736 ;       Hold a pointer of output string.
      0002FE 02 EF                  737         .word      LINK
                           000300   738 LINK = . 
      000300 03                     739         .byte      3
      000301 68 6C 64               740         .ascii     "hld"
      000304                        741 HLD:
      000304 90 AE 00 12      [ 2]  742 	LDW Y,#RAMBASE+18
      000308 1D 00 02         [ 2]  743 	SUBW X,#2
      00030B FF               [ 2]  744         LDW (X),Y
      00030C 81               [ 4]  745         RET
                                    746 
                                    747 ;       CONTEXT ( -- a )
                                    748 ;       Start vocabulary search.
      00030D 03 00                  749         .word      LINK
                           00030F   750 LINK = . 
      00030F 07                     751         .byte      7
      000310 43 4F 4E 54 45 58 54   752         .ascii     "CONTEXT"
      000317                        753 CNTXT:
      000317 90 AE 00 14      [ 2]  754 	LDW Y,#RAMBASE+20
      00031B 1D 00 02         [ 2]  755 	SUBW X,#2
      00031E FF               [ 2]  756         LDW (X),Y
      00031F 81               [ 4]  757         RET
                                    758 
                                    759 ;       CP      ( -- a )
                                    760 ;       Point to top of dictionary.
      000320 03 0F                  761         .word      LINK
                           000322   762 LINK = . 
      000322 02                     763         .byte      2
      000323 63 70                  764         .ascii     "cp"
      000325                        765 CPP:
      000325 90 AE 00 16      [ 2]  766 	LDW Y,#RAMBASE+22
      000329 1D 00 02         [ 2]  767 	SUBW X,#2
      00032C FF               [ 2]  768         LDW (X),Y
      00032D 81               [ 4]  769         RET
                                    770 
                                    771 ;       LAST    ( -- a )
                                    772 ;       Point to last name in dictionary.
      00032E 03 22                  773         .word      LINK
                           000330   774 LINK = . 
      000330 04                     775         .byte      4
      000331 6C 61 73 74            776         .ascii     "last"
      000335                        777 LAST:
      000335 90 AE 00 18      [ 2]  778 	LDW Y,#RAMBASE+24
      000339 1D 00 02         [ 2]  779 	SUBW X,#2
      00033C FF               [ 2]  780         LDW (X),Y
      00033D 81               [ 4]  781         RET
                                    782 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                    783 ;; Common functions
                                    784 
                                    785 ;       ?DUP    ( w -- w w | 0 )
                                    786 ;       Dup tos if its is not zero.
      00033E 03 30                  787         .word      LINK
                           000340   788 LINK = . 
      000340 04                     789         .byte      4
      000341 3F 44 55 50            790         .ascii     "?DUP"
      000345                        791 QDUP:
      000345 90 93            [ 1]  792         LDW Y,X
      000347 90 FE            [ 2]  793 	LDW Y,(Y)
      000349 27 04            [ 1]  794         JREQ     QDUP1
      00034B 1D 00 02         [ 2]  795 	SUBW X,#2
      00034E FF               [ 2]  796         LDW (X),Y
      00034F 81               [ 4]  797 QDUP1:  RET
                                    798 
                                    799 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    800 ;       Rot 3rd item to top.
      000350 03 40                  801         .word      LINK
                           000352   802 LINK = . 
      000352 03                     803         .byte      3
      000353 52 4F 54               804         .ascii     "ROT"
      000356                        805 ROT:
      000356 90 93            [ 1]  806         LDW Y,X
      000358 90 EE 04         [ 2]  807 	LDW Y,(4,Y)
      00035B 90 BF 1C         [ 2]  808 	LDW YTEMP,Y
      00035E 90 93            [ 1]  809         LDW Y,X
      000360 90 EE 02         [ 2]  810         LDW Y,(2,Y)
      000363 90 BF 1A         [ 2]  811         LDW XTEMP,Y
      000366 90 93            [ 1]  812         LDW Y,X
      000368 90 FE            [ 2]  813         LDW Y,(Y)
      00036A EF 02            [ 2]  814         LDW (2,X),Y
      00036C 90 BE 1A         [ 2]  815         LDW Y,XTEMP
      00036F EF 04            [ 2]  816         LDW (4,X),Y
      000371 90 BE 1C         [ 2]  817         LDW Y,YTEMP
      000374 FF               [ 2]  818         LDW (X),Y
      000375 81               [ 4]  819         RET
                                    820 
                                    821 ;       2DROP   ( w w -- )
                                    822 ;       Discard two items on stack.
      000376 03 52                  823         .word      LINK
                           000378   824 LINK = . 
      000378 05                     825         .byte      5
      000379 32 44 52 4F 50         826         .ascii     "2DROP"
      00037E                        827 DDROP:
      00037E 1C 00 04         [ 2]  828         ADDW X,#4
      000381 81               [ 4]  829         RET
                                    830 
                                    831 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    832 ;       Duplicate top two items.
      000382 03 78                  833         .word      LINK
                           000384   834 LINK = . 
      000384 04                     835         .byte      4
      000385 32 44 55 50            836         .ascii     "2DUP"
      000389                        837 DDUP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000389 1D 00 04         [ 2]  838         SUBW X,#4
      00038C 90 93            [ 1]  839         LDW Y,X
      00038E 90 EE 06         [ 2]  840         LDW Y,(6,Y)
      000391 EF 02            [ 2]  841         LDW (2,X),Y
      000393 90 93            [ 1]  842         LDW Y,X
      000395 90 EE 04         [ 2]  843         LDW Y,(4,Y)
      000398 FF               [ 2]  844         LDW (X),Y
      000399 81               [ 4]  845         RET
                                    846 
                                    847 ;       +       ( w w -- sum )
                                    848 ;       Add top two items.
      00039A 03 84                  849         .word      LINK
                           00039C   850 LINK = . 
      00039C 01                     851         .byte      1
      00039D 2B                     852         .ascii     "+"
      00039E                        853 PLUS:
      00039E 90 93            [ 1]  854         LDW Y,X
      0003A0 90 FE            [ 2]  855         LDW Y,(Y)
      0003A2 90 BF 1C         [ 2]  856         LDW YTEMP,Y
      0003A5 1C 00 02         [ 2]  857         ADDW X,#2
      0003A8 90 93            [ 1]  858         LDW Y,X
      0003AA 90 FE            [ 2]  859         LDW Y,(Y)
      0003AC 72 B9 00 1C      [ 2]  860         ADDW Y,YTEMP
      0003B0 FF               [ 2]  861         LDW (X),Y
      0003B1 81               [ 4]  862         RET
                                    863 
                                    864 ;       NOT     ( w -- w )
                                    865 ;       One's complement of tos.
      0003B2 03 9C                  866         .word      LINK
                           0003B4   867 LINK = . 
      0003B4 03                     868         .byte      3
      0003B5 4E 4F 54               869         .ascii     "NOT"
      0003B8                        870 INVER:
      0003B8 90 93            [ 1]  871         LDW Y,X
      0003BA 90 FE            [ 2]  872         LDW Y,(Y)
      0003BC 90 53            [ 2]  873         CPLW Y
      0003BE FF               [ 2]  874         LDW (X),Y
      0003BF 81               [ 4]  875         RET
                                    876 
                                    877 ;       NEGATE  ( n -- -n )
                                    878 ;       Two's complement of tos.
      0003C0 03 B4                  879         .word      LINK
                           0003C2   880 LINK = . 
      0003C2 06                     881         .byte      6
      0003C3 4E 45 47 41 54 45      882         .ascii     "NEGATE"
      0003C9                        883 NEGAT:
      0003C9 90 93            [ 1]  884         LDW Y,X
      0003CB 90 FE            [ 2]  885         LDW Y,(Y)
      0003CD 90 50            [ 2]  886         NEGW Y
      0003CF FF               [ 2]  887         LDW (X),Y
      0003D0 81               [ 4]  888         RET
                                    889 
                                    890 ;       DNEGATE ( d -- -d )
                                    891 ;       Two's complement of top double.
      0003D1 03 C2                  892         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           0003D3   893 LINK = . 
      0003D3 07                     894         .byte      7
      0003D4 44 4E 45 47 41 54 45   895         .ascii     "DNEGATE"
      0003DB                        896 DNEGA:
      0003DB 90 93            [ 1]  897         LDW Y,X
      0003DD 90 FE            [ 2]  898 	LDW Y,(Y)
      0003DF 90 53            [ 2]  899         CPLW Y     
      0003E1 90 BF 1C         [ 2]  900 	LDW YTEMP,Y
      0003E4 90 93            [ 1]  901         LDW Y,X
      0003E6 90 EE 02         [ 2]  902         LDW Y,(2,Y)
      0003E9 90 53            [ 2]  903         CPLW Y
      0003EB 90 5C            [ 1]  904         INCW Y
      0003ED EF 02            [ 2]  905         LDW (2,X),Y
      0003EF 90 BE 1C         [ 2]  906         LDW Y,YTEMP
      0003F2 24 02            [ 1]  907         JRNC DN1 
      0003F4 90 5C            [ 1]  908         INCW Y
      0003F6 FF               [ 2]  909 DN1:    LDW (X),Y
      0003F7 81               [ 4]  910         RET
                                    911 
                                    912 ;       -       ( n1 n2 -- n1-n2 )
                                    913 ;       Subtraction.
      0003F8 03 D3                  914         .word      LINK
                           0003FA   915 LINK = . 
      0003FA 01                     916         .byte      1
      0003FB 2D                     917         .ascii     "-"
      0003FC                        918 SUBB:
      0003FC 90 93            [ 1]  919         LDW Y,X
      0003FE 90 FE            [ 2]  920         LDW Y,(Y)
      000400 90 BF 1C         [ 2]  921         LDW YTEMP,Y
      000403 1C 00 02         [ 2]  922         ADDW X,#2
      000406 90 93            [ 1]  923         LDW Y,X
      000408 90 FE            [ 2]  924         LDW Y,(Y)
      00040A 72 B2 00 1C      [ 2]  925         SUBW Y,YTEMP
      00040E FF               [ 2]  926         LDW (X),Y
      00040F 81               [ 4]  927         RET
                                    928 
                                    929 ;       ABS     ( n -- n )
                                    930 ;       Return  absolute value of n.
      000410 03 FA                  931         .word      LINK
                           000412   932 LINK = . 
      000412 03                     933         .byte      3
      000413 41 42 53               934         .ascii     "ABS"
      000416                        935 ABSS:
      000416 90 93            [ 1]  936         LDW Y,X
      000418 90 FE            [ 2]  937 	LDW Y,(Y)
      00041A 2A 03            [ 1]  938         JRPL     AB1     ;negate:
      00041C 90 50            [ 2]  939         NEGW     Y     ;else negate hi byte
      00041E FF               [ 2]  940         LDW (X),Y
      00041F 81               [ 4]  941 AB1:    RET
                                    942 
                                    943 ;       =       ( w w -- t )
                                    944 ;       Return true if top two are =al.
      000420 04 12                  945         .word      LINK
                           000422   946 LINK = . 
      000422 01                     947         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000423 3D                     948         .ascii     "="
      000424                        949 EQUAL:
      000424 A6 FF            [ 1]  950         LD A,#0xFF  ;true
      000426 90 93            [ 1]  951         LDW Y,X    ;D = n2
      000428 90 FE            [ 2]  952         LDW Y,(Y)
      00042A 90 BF 1C         [ 2]  953         LDW YTEMP,Y
      00042D 1C 00 02         [ 2]  954         ADDW X,#2
      000430 90 93            [ 1]  955         LDW Y,X
      000432 90 FE            [ 2]  956         LDW Y,(Y)
      000434 90 B3 1C         [ 2]  957         CPW Y,YTEMP     ;if n2 <> n1
      000437 27 01            [ 1]  958         JREQ     EQ1
      000439 4F               [ 1]  959         CLR A
      00043A F7               [ 1]  960 EQ1:    LD (X),A
      00043B E7 01            [ 1]  961         LD (1,X),A
      00043D 81               [ 4]  962 	RET     
                                    963 
                                    964 ;       U<      ( u u -- t )
                                    965 ;       Unsigned compare of top two items.
      00043E 04 22                  966         .word      LINK
                           000440   967 LINK = . 
      000440 02                     968         .byte      2
      000441 55 3C                  969         .ascii     "U<"
      000443                        970 ULESS:
      000443 A6 FF            [ 1]  971         LD A,#0xFF  ;true
      000445 90 93            [ 1]  972         LDW Y,X    ;D = n2
      000447 90 FE            [ 2]  973         LDW Y,(Y)
      000449 90 BF 1C         [ 2]  974         LDW YTEMP,Y
      00044C 1C 00 02         [ 2]  975         ADDW X,#2
      00044F 90 93            [ 1]  976         LDW Y,X
      000451 90 FE            [ 2]  977         LDW Y,(Y)
      000453 90 B3 1C         [ 2]  978         CPW Y,YTEMP     ;if n2 <> n1
      000456 25 01            [ 1]  979         JRULT     ULES1
      000458 4F               [ 1]  980         CLR A
      000459 F7               [ 1]  981 ULES1:  LD (X),A
      00045A E7 01            [ 1]  982         LD (1,X),A
      00045C 81               [ 4]  983 	RET     
                                    984 
                                    985 ;       <       ( n1 n2 -- t )
                                    986 ;       Signed compare of top two items.
      00045D 04 40                  987         .word      LINK
                           00045F   988 LINK = . 
      00045F 01                     989         .byte      1
      000460 3C                     990         .ascii     "<"
      000461                        991 LESS:
      000461 A6 FF            [ 1]  992         LD A,#0xFF  ;true
      000463 90 93            [ 1]  993         LDW Y,X    ;D = n2
      000465 90 FE            [ 2]  994         LDW Y,(Y)
      000467 90 BF 1C         [ 2]  995         LDW YTEMP,Y
      00046A 1C 00 02         [ 2]  996         ADDW X,#2
      00046D 90 93            [ 1]  997         LDW Y,X
      00046F 90 FE            [ 2]  998         LDW Y,(Y)
      000471 90 B3 1C         [ 2]  999         CPW Y,YTEMP     ;if n2 <> n1
      000474 2F 01            [ 1] 1000         JRSLT     LT1
      000476 4F               [ 1] 1001         CLR A
      000477 F7               [ 1] 1002 LT1:    LD (X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000478 E7 01            [ 1] 1003         LD (1,X),A
      00047A 81               [ 4] 1004 	RET     
                                   1005 
                                   1006 ;       MAX     ( n n -- n )
                                   1007 ;       Return greater of two top items.
      00047B 04 5F                 1008         .word      LINK
                           00047D  1009 LINK = . 
      00047D 03                    1010         .byte      3
      00047E 4D 41 58              1011         .ascii     "MAX"
      000481                       1012 MAX:
      000481 90 93            [ 1] 1013         LDW Y,X    ;D = n2
      000483 90 EE 02         [ 2] 1014         LDW Y,(2,Y)
      000486 90 BF 1C         [ 2] 1015         LDW YTEMP,Y
      000489 90 93            [ 1] 1016         LDW Y,X
      00048B 90 FE            [ 2] 1017         LDW Y,(Y)
      00048D 90 B3 1C         [ 2] 1018         CPW Y,YTEMP     ;if n2 <> n1
      000490 2F 02            [ 1] 1019         JRSLT     MAX1
      000492 EF 02            [ 2] 1020         LDW (2,X),Y
      000494 1C 00 02         [ 2] 1021 MAX1:   ADDW X,#2
      000497 81               [ 4] 1022 	RET     
                                   1023 
                                   1024 ;       MIN     ( n n -- n )
                                   1025 ;       Return smaller of top two items.
      000498 04 7D                 1026         .word      LINK
                           00049A  1027 LINK = . 
      00049A 03                    1028         .byte      3
      00049B 4D 49 4E              1029         .ascii     "MIN"
      00049E                       1030 MIN:
      00049E 90 93            [ 1] 1031         LDW Y,X    ;D = n2
      0004A0 90 EE 02         [ 2] 1032         LDW Y,(2,Y)
      0004A3 90 BF 1C         [ 2] 1033         LDW YTEMP,Y
      0004A6 90 93            [ 1] 1034         LDW Y,X
      0004A8 90 FE            [ 2] 1035         LDW Y,(Y)
      0004AA 90 B3 1C         [ 2] 1036         CPW Y,YTEMP     ;if n2 <> n1
      0004AD 2C 02            [ 1] 1037         JRSGT     MIN1
      0004AF EF 02            [ 2] 1038         LDW (2,X),Y
      0004B1 1C 00 02         [ 2] 1039 MIN1:	ADDW X,#2
      0004B4 81               [ 4] 1040 	RET     
                                   1041 
                                   1042 ;       WITHIN  ( u ul uh -- t )
                                   1043 ;       Return true if u is within
                                   1044 ;       range of ul and uh. ( ul <= u < uh )
      0004B5 04 9A                 1045         .word      LINK
                           0004B7  1046 LINK = . 
      0004B7 06                    1047         .byte      6
      0004B8 57 49 54 48 49 4E     1048         .ascii     "WITHIN"
      0004BE                       1049 WITHI:
      0004BE CD 02 25         [ 4] 1050         CALL     OVER
      0004C1 CD 03 FC         [ 4] 1051         CALL     SUBB
      0004C4 CD 01 C4         [ 4] 1052         CALL     TOR
      0004C7 CD 03 FC         [ 4] 1053         CALL     SUBB
      0004CA CD 01 9C         [ 4] 1054         CALL     RFROM
      0004CD CC 04 43         [ 2] 1055         JP     ULESS
                                   1056 
                                   1057 ;; Divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1058 
                                   1059 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1060 ;       Unsigned divide of a double by a
                                   1061 ;       single. Return mod and quotient.
      0004D0 04 B7                 1062         .word      LINK
                           0004D2  1063 LINK = . 
      0004D2 06                    1064         .byte      6
      0004D3 55 4D 2F 4D 4F 44     1065         .ascii     "UM/MOD"
      0004D9                       1066 UMMOD:
      0004D9 BF 1A            [ 2] 1067 	LDW XTEMP,X	; save stack pointer
      0004DB FE               [ 2] 1068 	LDW X,(X)		; un
      0004DC BF 1C            [ 2] 1069 	LDW YTEMP,X ; save un
      0004DE 90 BE 1A         [ 2] 1070 	LDW Y,XTEMP	; stack pointer
      0004E1 90 EE 04         [ 2] 1071 	LDW Y,(4,Y) ; Y=udl
      0004E4 BE 1A            [ 2] 1072 	LDW X,XTEMP
      0004E6 EE 02            [ 2] 1073 	LDW X,(2,X)	; X=udh
      0004E8 B3 1C            [ 2] 1074 	CPW X,YTEMP
      0004EA 23 0F            [ 2] 1075 	JRULE MMSM1
      0004EC BE 1A            [ 2] 1076 	LDW X,XTEMP
      0004EE 1C 00 02         [ 2] 1077 	ADDW X,#2	; pop off 1 level
      0004F1 90 AE FF FF      [ 2] 1078 	LDW Y,#0xFFFF
      0004F5 FF               [ 2] 1079 	LDW (X),Y
      0004F6 90 5F            [ 1] 1080 	CLRW Y
      0004F8 EF 02            [ 2] 1081 	LDW (2,X),Y
      0004FA 81               [ 4] 1082 	RET
      0004FB                       1083 MMSM1:
      0004FB A6 11            [ 1] 1084 	LD A,#17	; loop count
      0004FD                       1085 MMSM3:
      0004FD B3 1C            [ 2] 1086 	CPW X,YTEMP	; compare udh to un
      0004FF 25 04            [ 1] 1087 	JRULT MMSM4	; can't subtract
      000501 72 B0 00 1C      [ 2] 1088 	SUBW X,YTEMP	; can subtract
      000505                       1089 MMSM4:
      000505 8C               [ 1] 1090 	CCF	; quotient bit
      000506 90 59            [ 2] 1091 	RLCW Y	; rotate into quotient
      000508 59               [ 2] 1092 	RLCW X	; rotate into remainder
      000509 4A               [ 1] 1093 	DEC A	; repeat
      00050A 22 F1            [ 1] 1094 	JRUGT MMSM3
      00050C 57               [ 2] 1095 	SRAW X
      00050D BF 1C            [ 2] 1096 	LDW YTEMP,X	; done, save remainder
      00050F BE 1A            [ 2] 1097 	LDW X,XTEMP
      000511 1C 00 02         [ 2] 1098 	ADDW X,#2	; drop
      000514 FF               [ 2] 1099 	LDW (X),Y
      000515 90 BE 1C         [ 2] 1100 	LDW Y,YTEMP	; save quotient
      000518 EF 02            [ 2] 1101 	LDW (2,X),Y
      00051A 81               [ 4] 1102 	RET
                                   1103 	
                                   1104 ;       M/MOD   ( d n -- r q )
                                   1105 ;       Signed floored divide of double by
                                   1106 ;       single. Return mod and quotient.
      00051B 04 D2                 1107         .word      LINK
                           00051D  1108 LINK = . 
      00051D 05                    1109         .byte      5
      00051E 4D 2F 4D 4F 44        1110         .ascii     "M/MOD"
      000523                       1111 MSMOD:  
      000523 CD 01 FB         [ 4] 1112         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000526 CD 02 34         [ 4] 1113         CALL	ZLESS
      000529 CD 01 FB         [ 4] 1114         CALL	DUPP
      00052C CD 01 C4         [ 4] 1115         CALL	TOR
      00052F CD 00 F9         [ 4] 1116         CALL	QBRAN
      000532 05 40                 1117         .word	MMOD1
      000534 CD 03 C9         [ 4] 1118         CALL	NEGAT
      000537 CD 01 C4         [ 4] 1119         CALL	TOR
      00053A CD 03 DB         [ 4] 1120         CALL	DNEGA
      00053D CD 01 9C         [ 4] 1121         CALL	RFROM
      000540 CD 01 C4         [ 4] 1122 MMOD1:	CALL	TOR
      000543 CD 01 FB         [ 4] 1123         CALL	DUPP
      000546 CD 02 34         [ 4] 1124         CALL	ZLESS
      000549 CD 00 F9         [ 4] 1125         CALL	QBRAN
      00054C 05 54                 1126         .word	MMOD2
      00054E CD 01 AF         [ 4] 1127         CALL	RAT
      000551 CD 03 9E         [ 4] 1128         CALL	PLUS
      000554 CD 01 9C         [ 4] 1129 MMOD2:	CALL	RFROM
      000557 CD 04 D9         [ 4] 1130         CALL	UMMOD
      00055A CD 01 9C         [ 4] 1131         CALL	RFROM
      00055D CD 00 F9         [ 4] 1132         CALL	QBRAN
      000560 05 6B                 1133         .word	MMOD3
      000562 CD 02 0B         [ 4] 1134         CALL	SWAPP
      000565 CD 03 C9         [ 4] 1135         CALL	NEGAT
      000568 CD 02 0B         [ 4] 1136         CALL	SWAPP
      00056B 81               [ 4] 1137 MMOD3:	RET
                                   1138 
                                   1139 ;       /MOD    ( n n -- r q )
                                   1140 ;       Signed divide. Return mod and quotient.
      00056C 05 1D                 1141         .word      LINK
                           00056E  1142 LINK = . 
      00056E 04                    1143         .byte      4
      00056F 2F 4D 4F 44           1144         .ascii     "/MOD"
      000573                       1145 SLMOD:
      000573 CD 02 25         [ 4] 1146         CALL	OVER
      000576 CD 02 34         [ 4] 1147         CALL	ZLESS
      000579 CD 02 0B         [ 4] 1148         CALL	SWAPP
      00057C CC 05 23         [ 2] 1149         JP	MSMOD
                                   1150 
                                   1151 ;       MOD     ( n n -- r )
                                   1152 ;       Signed divide. Return mod only.
      00057F 05 6E                 1153         .word      LINK
                           000581  1154 LINK = . 
      000581 03                    1155         .byte      3
      000582 4D 4F 44              1156         .ascii     "MOD"
      000585                       1157 MODD:
      000585 CD 05 73         [ 4] 1158 	CALL	SLMOD
      000588 CC 01 F1         [ 2] 1159 	JP	DROP
                                   1160 
                                   1161 ;       /       ( n n -- q )
                                   1162 ;       Signed divide. Return quotient only.
      00058B 05 81                 1163         .word      LINK
                           00058D  1164 LINK = . 
      00058D 01                    1165         .byte      1
      00058E 2F                    1166         .ascii     "/"
      00058F                       1167 SLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00058F CD 05 73         [ 4] 1168         CALL	SLMOD
      000592 CD 02 0B         [ 4] 1169         CALL	SWAPP
      000595 CC 01 F1         [ 2] 1170         JP	DROP
                                   1171 
                                   1172 ;; Multiply
                                   1173 
                                   1174 ;       UM*     ( u u -- ud )
                                   1175 ;       Unsigned multiply. Return double product.
      000598 05 8D                 1176         .word      LINK
                           00059A  1177 LINK = . 
      00059A 03                    1178         .byte      3
      00059B 55 4D 2A              1179         .ascii     "UM*"
      00059E                       1180 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
      00059E E6 02            [ 1] 1181 	LD A,(2,X)	; b
      0005A0 90 97            [ 1] 1182 	LD YL,A
      0005A2 F6               [ 1] 1183 	LD A,(X)	; d
      0005A3 90 42            [ 4] 1184 	MUL Y,A
      0005A5 90 BF 1A         [ 2] 1185 	LDW PROD1,Y
      0005A8 E6 03            [ 1] 1186 	LD A,(3,X)	; a
      0005AA 90 97            [ 1] 1187 	LD YL,A
      0005AC F6               [ 1] 1188 	LD A,(X)	; d
      0005AD 90 42            [ 4] 1189 	MUL Y,A
      0005AF 90 BF 1C         [ 2] 1190 	LDW PROD2,Y
      0005B2 E6 02            [ 1] 1191 	LD A,(2,X)	; b
      0005B4 90 97            [ 1] 1192 	LD YL,A
      0005B6 E6 01            [ 1] 1193 	LD A,(1,X)	; c
      0005B8 90 42            [ 4] 1194 	MUL Y,A
      0005BA 90 BF 1E         [ 2] 1195 	LDW PROD3,Y
      0005BD E6 03            [ 1] 1196 	LD A,(3,X)	; a
      0005BF 90 97            [ 1] 1197 	LD YL,A
      0005C1 E6 01            [ 1] 1198 	LD A,(1,X)	; c
      0005C3 90 42            [ 4] 1199 	MUL Y,A	; least signifiant product
      0005C5 4F               [ 1] 1200 	CLR A
      0005C6 90 01            [ 1] 1201 	RRWA Y
      0005C8 E7 03            [ 1] 1202 	LD (3,X),A	; store least significant byte
      0005CA 72 B9 00 1E      [ 2] 1203 	ADDW Y,PROD3
      0005CE 4F               [ 1] 1204 	CLR A
      0005CF A9 00            [ 1] 1205 	ADC A,#0	; save carry
      0005D1 B7 20            [ 1] 1206 	LD CARRY,A
      0005D3 72 B9 00 1C      [ 2] 1207 	ADDW Y,PROD2
      0005D7 B6 20            [ 1] 1208 	LD A,CARRY
      0005D9 A9 00            [ 1] 1209 	ADC A,#0	; add 2nd carry
      0005DB B7 20            [ 1] 1210 	LD CARRY,A
      0005DD 4F               [ 1] 1211 	CLR A
      0005DE 90 01            [ 1] 1212 	RRWA Y
      0005E0 E7 02            [ 1] 1213 	LD (2,X),A	; 2nd product byte
      0005E2 72 B9 00 1A      [ 2] 1214 	ADDW Y,PROD1
      0005E6 90 01            [ 1] 1215 	RRWA Y
      0005E8 E7 01            [ 1] 1216 	LD (1,X),A	; 3rd product byte
      0005EA 90 01            [ 1] 1217 	RRWA Y  	; 4th product byte now in A
      0005EC B9 20            [ 1] 1218 	ADC A,CARRY	; fill in carry bits
      0005EE F7               [ 1] 1219 	LD (X),A
      0005EF 81               [ 4] 1220 	RET
                                   1221 
                                   1222 ;       *       ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   1223 ;       Signed multiply. Return single product.
      0005F0 05 9A                 1224         .word      LINK
                           0005F2  1225 LINK = . 
      0005F2 01                    1226         .byte      1
      0005F3 2A                    1227         .ascii     "*"
      0005F4                       1228 STAR:
      0005F4 CD 05 9E         [ 4] 1229 	CALL	UMSTA
      0005F7 CC 01 F1         [ 2] 1230 	JP	DROP
                                   1231 
                                   1232 ;       M*      ( n n -- d )
                                   1233 ;       Signed multiply. Return double product.
      0005FA 05 F2                 1234         .word      LINK
                           0005FC  1235 LINK = . 
      0005FC 02                    1236         .byte      2
      0005FD 4D 2A                 1237         .ascii     "M*"
      0005FF                       1238 MSTAR:      
      0005FF CD 03 89         [ 4] 1239         CALL	DDUP
      000602 CD 02 70         [ 4] 1240         CALL	XORR
      000605 CD 02 34         [ 4] 1241         CALL	ZLESS
      000608 CD 01 C4         [ 4] 1242         CALL	TOR
      00060B CD 04 16         [ 4] 1243         CALL	ABSS
      00060E CD 02 0B         [ 4] 1244         CALL	SWAPP
      000611 CD 04 16         [ 4] 1245         CALL	ABSS
      000614 CD 05 9E         [ 4] 1246         CALL	UMSTA
      000617 CD 01 9C         [ 4] 1247         CALL	RFROM
      00061A CD 00 F9         [ 4] 1248         CALL	QBRAN
      00061D 06 22                 1249         .word	MSTA1
      00061F CD 03 DB         [ 4] 1250         CALL	DNEGA
      000622 81               [ 4] 1251 MSTA1:	RET
                                   1252 
                                   1253 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1254 ;       Multiply n1 and n2, then divide
                                   1255 ;       by n3. Return mod and quotient.
      000623 05 FC                 1256         .word      LINK
                           000625  1257 LINK = . 
      000625 05                    1258         .byte      5
      000626 2A 2F 4D 4F 44        1259         .ascii     "*/MOD"
      00062B                       1260 SSMOD:
      00062B CD 01 C4         [ 4] 1261         CALL     TOR
      00062E CD 05 FF         [ 4] 1262         CALL     MSTAR
      000631 CD 01 9C         [ 4] 1263         CALL     RFROM
      000634 CC 05 23         [ 2] 1264         JP     MSMOD
                                   1265 
                                   1266 ;       */      ( n1 n2 n3 -- q )
                                   1267 ;       Multiply n1 by n2, then divide
                                   1268 ;       by n3. Return quotient only.
      000637 06 25                 1269         .word      LINK
                           000639  1270 LINK = . 
      000639 02                    1271         .byte      2
      00063A 2E 20 2F              1272         .ascii     ". /"
      00063D                       1273 STASL:
      00063D CD 06 2B         [ 4] 1274         CALL	SSMOD
      000640 CD 02 0B         [ 4] 1275         CALL	SWAPP
      000643 CC 01 F1         [ 2] 1276         JP	DROP
                                   1277 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   1278 ;; Miscellaneous
                                   1279 
                                   1280 ;       CELL+   ( a -- a )
                                   1281 ;       Add cell size in byte to address.
      000646 06 39                 1282         .word      LINK
                           000648  1283 LINK = . 
      000648 02                    1284         .byte       2
      000649 32 2B                 1285         .ascii     "2+"
      00064B                       1286 CELLP:
      00064B 90 93            [ 1] 1287         LDW Y,X
      00064D 90 FE            [ 2] 1288 	LDW Y,(Y)
      00064F 72 A9 00 02      [ 2] 1289         ADDW Y,#2
      000653 FF               [ 2] 1290         LDW (X),Y
      000654 81               [ 4] 1291         RET
                                   1292 
                                   1293 ;       CELL-   ( a -- a )
                                   1294 ;       Subtract 2 from address.
      000655 06 48                 1295         .word      LINK
                           000657  1296 LINK = . 
      000657 02                    1297         .byte       2
      000658 32 2D                 1298         .ascii     "2-"
      00065A                       1299 CELLM:
      00065A 90 93            [ 1] 1300         LDW Y,X
      00065C 90 FE            [ 2] 1301 	LDW Y,(Y)
      00065E 72 A2 00 02      [ 2] 1302         SUBW Y,#2
      000662 FF               [ 2] 1303         LDW (X),Y
      000663 81               [ 4] 1304         RET
                                   1305 
                                   1306 ;       CELLS   ( n -- n )
                                   1307 ;       Multiply tos by 2.
      000664 06 57                 1308         .word      LINK
                           000666  1309 LINK = . 
      000666 02                    1310         .byte       2
      000667 32 2A                 1311         .ascii     "2*"
      000669                       1312 CELLS:
      000669 90 93            [ 1] 1313         LDW Y,X
      00066B 90 FE            [ 2] 1314 	LDW Y,(Y)
      00066D 90 58            [ 2] 1315         SLAW Y
      00066F FF               [ 2] 1316         LDW (X),Y
      000670 81               [ 4] 1317         RET
                                   1318 
                                   1319 ;       1+      ( a -- a )
                                   1320 ;       Add cell size in byte to address.
      000671 06 66                 1321         .word      LINK
                           000673  1322 LINK = . 
      000673 02                    1323         .byte      2
      000674 31 2B                 1324         .ascii     "1+"
      000676                       1325 ONEP:
      000676 90 93            [ 1] 1326         LDW Y,X
      000678 90 FE            [ 2] 1327 	LDW Y,(Y)
      00067A 90 5C            [ 1] 1328         INCW Y
      00067C FF               [ 2] 1329         LDW (X),Y
      00067D 81               [ 4] 1330         RET
                                   1331 
                                   1332 ;       1-      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   1333 ;       Subtract 2 from address.
      00067E 06 73                 1334         .word      LINK
                           000680  1335 LINK = . 
      000680 02                    1336         .byte      2
      000681 31 2D                 1337         .ascii     "1-"
      000683                       1338 ONEM:
      000683 90 93            [ 1] 1339         LDW Y,X
      000685 90 FE            [ 2] 1340 	LDW Y,(Y)
      000687 90 5A            [ 2] 1341         DECW Y
      000689 FF               [ 2] 1342         LDW (X),Y
      00068A 81               [ 4] 1343         RET
                                   1344 
                                   1345 ;       2/      ( n -- n )
                                   1346 ;       Multiply tos by 2.
      00068B 06 80                 1347         .word      LINK
                           00068D  1348 LINK = . 
      00068D 02                    1349         .byte      2
      00068E 32 2F                 1350         .ascii     "2/"
      000690                       1351 TWOSL:
      000690 90 93            [ 1] 1352         LDW Y,X
      000692 90 FE            [ 2] 1353 	LDW Y,(Y)
      000694 90 57            [ 2] 1354         SRAW Y
      000696 FF               [ 2] 1355         LDW (X),Y
      000697 81               [ 4] 1356         RET
                                   1357 
                                   1358 ;       BL      ( -- 32 )
                                   1359 ;       Return 32,  blank character.
      000698 06 8D                 1360         .word      LINK
                           00069A  1361 LINK = . 
      00069A 02                    1362         .byte      2
      00069B 42 4C                 1363         .ascii     "BL"
      00069D                       1364 BLANK:
      00069D 1D 00 02         [ 2] 1365         SUBW X,#2
      0006A0 90 AE 00 20      [ 2] 1366 	LDW Y,#32
      0006A4 FF               [ 2] 1367         LDW (X),Y
      0006A5 81               [ 4] 1368         RET
                                   1369 
                                   1370 ;         0     ( -- 0)
                                   1371 ;         Return 0.
      0006A6 06 9A                 1372         .word      LINK
                           0006A8  1373 LINK = . 
      0006A8 01                    1374         .byte       1
      0006A9 30                    1375         .ascii     "0"
      0006AA                       1376 ZERO:
      0006AA 1D 00 02         [ 2] 1377         SUBW X,#2
      0006AD 90 5F            [ 1] 1378 	CLRW Y
      0006AF FF               [ 2] 1379         LDW (X),Y
      0006B0 81               [ 4] 1380         RET
                                   1381 
                                   1382 ;         1     ( -- 1)
                                   1383 ;         Return 1.
      0006B1 06 A8                 1384         .word      LINK
                           0006B3  1385 LINK = . 
      0006B3 01                    1386         .byte       1
      0006B4 31                    1387         .ascii     "1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      0006B5                       1388 ONE:
      0006B5 1D 00 02         [ 2] 1389         SUBW X,#2
      0006B8 90 AE 00 01      [ 2] 1390 	LDW Y,#1
      0006BC FF               [ 2] 1391         LDW (X),Y
      0006BD 81               [ 4] 1392         RET
                                   1393 
                                   1394 ;         -1    ( -- -1)
                                   1395 ;         Return 32,  blank character.
      0006BE 06 B3                 1396         .word      LINK
                           0006C0  1397 LINK = . 
      0006C0 02                    1398         .byte       2
      0006C1 2D 31                 1399         .ascii     "-1"
      0006C3                       1400 MONE:
      0006C3 1D 00 02         [ 2] 1401         SUBW X,#2
      0006C6 90 AE FF FF      [ 2] 1402 	LDW Y,#0xFFFF
      0006CA FF               [ 2] 1403         LDW (X),Y
      0006CB 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;       >CHAR   ( c -- c )
                                   1407 ;       Filter non-printing characters.
      0006CC 06 C0                 1408         .word      LINK
                           0006CE  1409 LINK = . 
      0006CE 05                    1410         .byte      5
      0006CF 3E 43 48 41 52        1411         .ascii     ">CHAR"
      0006D4                       1412 TCHAR:
      0006D4 CD 00 C2         [ 4] 1413         CALL     DOLIT
      0006D7 00 7F                 1414         .word       0x7F
      0006D9 CD 02 47         [ 4] 1415         CALL     ANDD
      0006DC CD 01 FB         [ 4] 1416         CALL     DUPP    ;mask msb
      0006DF CD 00 C2         [ 4] 1417         CALL     DOLIT
      0006E2 00 7F                 1418         .word      127
      0006E4 CD 06 9D         [ 4] 1419         CALL     BLANK
      0006E7 CD 04 BE         [ 4] 1420         CALL     WITHI   ;check for printable
      0006EA CD 00 F9         [ 4] 1421         CALL     QBRAN
      0006ED 06 F7                 1422         .word      TCHA1
      0006EF CD 01 F1         [ 4] 1423         CALL     DROP
      0006F2 CD 00 C2         [ 4] 1424         CALL     DOLIT
      0006F5 00 5F                 1425         .word     0x5F		; "_"     ;replace non-printables
      0006F7 81               [ 4] 1426 TCHA1:  RET
                                   1427 
                                   1428 ;       DEPTH   ( -- n )
                                   1429 ;       Return  depth of  data stack.
      0006F8 06 CE                 1430         .word      LINK
                           0006FA  1431 LINK = . 
      0006FA 05                    1432         .byte      5
      0006FB 44 45 50 54 48        1433         .ascii     "DEPTH"
      000700                       1434 DEPTH:
      000700 90 BE 22         [ 2] 1435         LDW Y,SP0    ;save data stack ptr
      000703 BF 1A            [ 2] 1436 	LDW XTEMP,X
      000705 72 B2 00 1A      [ 2] 1437         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000709 90 57            [ 2] 1438         SRAW Y    ;D = #stack items
      00070B 90 5A            [ 2] 1439 	DECW Y
      00070D 1D 00 02         [ 2] 1440 	SUBW X,#2
      000710 FF               [ 2] 1441         LDW (X),Y     ; if neg, underflow
      000711 81               [ 4] 1442         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   1443 
                                   1444 ;       PICK    ( ... +n -- ... w )
                                   1445 ;       Copy  nth stack item to tos.
      000712 06 FA                 1446         .word      LINK
                           000714  1447 LINK = . 
      000714 04                    1448         .byte      4
      000715 50 49 43 4B           1449         .ascii     "PICK"
      000719                       1450 PICK:
      000719 90 93            [ 1] 1451         LDW Y,X   ;D = n1
      00071B 90 FE            [ 2] 1452         LDW Y,(Y)
      00071D 90 58            [ 2] 1453         SLAW Y
      00071F BF 1A            [ 2] 1454         LDW XTEMP,X
      000721 72 B9 00 1A      [ 2] 1455         ADDW Y,XTEMP
      000725 90 FE            [ 2] 1456         LDW Y,(Y)
      000727 FF               [ 2] 1457         LDW (X),Y
      000728 81               [ 4] 1458         RET
                                   1459 
                                   1460 ;; Memory access
                                   1461 
                                   1462 ;       +!      ( n a -- )
                                   1463 ;       Add n to  contents at address a.
      000729 07 14                 1464         .word      LINK
                           00072B  1465 LINK = . 
      00072B 02                    1466         .byte      2
      00072C 2B 21                 1467         .ascii     "+!"
      00072E                       1468 PSTOR:
      00072E CD 02 0B         [ 4] 1469         CALL	SWAPP
      000731 CD 02 25         [ 4] 1470         CALL	OVER
      000734 CD 01 4E         [ 4] 1471         CALL	AT
      000737 CD 03 9E         [ 4] 1472         CALL	PLUS
      00073A CD 02 0B         [ 4] 1473         CALL	SWAPP
      00073D CC 01 37         [ 2] 1474         JP	STORE
                                   1475 
                                   1476 ;       2!      ( d a -- )
                                   1477 ;       Store  double integer to address a.
      000740 07 2B                 1478         .word      LINK
                           000742  1479 LINK = . 
      000742 02                    1480         .byte      2
      000743 32 21                 1481         .ascii     "2!"
      000745                       1482 DSTOR:
      000745 CD 02 0B         [ 4] 1483         CALL	SWAPP
      000748 CD 02 25         [ 4] 1484         CALL	OVER
      00074B CD 01 37         [ 4] 1485         CALL	STORE
      00074E CD 06 4B         [ 4] 1486         CALL	CELLP
      000751 CC 01 37         [ 2] 1487         JP	STORE
                                   1488 
                                   1489 ;       2@      ( a -- d )
                                   1490 ;       Fetch double integer from address a.
      000754 07 42                 1491         .word      LINK
                           000756  1492 LINK = . 
      000756 02                    1493         .byte      2
      000757 32 40                 1494         .ascii     "2@"
      000759                       1495 DAT:
      000759 CD 01 FB         [ 4] 1496         CALL	DUPP
      00075C CD 06 4B         [ 4] 1497         CALL	CELLP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      00075F CD 01 4E         [ 4] 1498         CALL	AT
      000762 CD 02 0B         [ 4] 1499         CALL	SWAPP
      000765 CC 01 4E         [ 2] 1500         JP	AT
                                   1501 
                                   1502 ;       COUNT   ( b -- b +n )
                                   1503 ;       Return count byte of a string
                                   1504 ;       and add 1 to byte address.
      000768 07 56                 1505         .word      LINK
                           00076A  1506 LINK = . 
      00076A 05                    1507         .byte      5
      00076B 43 4F 55 4E 54        1508         .ascii     "COUNT"
      000770                       1509 COUNT:
      000770 CD 01 FB         [ 4] 1510         CALL     DUPP
      000773 CD 06 76         [ 4] 1511         CALL     ONEP
      000776 CD 02 0B         [ 4] 1512         CALL     SWAPP
      000779 CC 01 6C         [ 2] 1513         JP     CAT
                                   1514 
                                   1515 ;       HERE    ( -- a )
                                   1516 ;       Return  top of  code dictionary.
      00077C 07 6A                 1517         .word      LINK
                           00077E  1518 LINK = . 
      00077E 04                    1519         .byte      4
      00077F 48 45 52 45           1520         .ascii     "HERE"
      000783                       1521 HERE:
      000783 CD 03 25         [ 4] 1522         CALL     CPP
      000786 CC 01 4E         [ 2] 1523         JP     AT
                                   1524 
                                   1525 ;       PAD     ( -- a )
                                   1526 ;       Return address of text buffer
                                   1527 ;       above  code dictionary.
      000789 07 7E                 1528         .word      LINK
                           00078B  1529 LINK = . 
      00078B 03                    1530         .byte      3
      00078C 50 41 44              1531         .ascii     "PAD"
      00078F                       1532 PAD:
      00078F CD 07 83         [ 4] 1533         CALL     HERE
      000792 CD 00 C2         [ 4] 1534         CALL     DOLIT
      000795 00 50                 1535         .word      80
      000797 CC 03 9E         [ 2] 1536         JP     PLUS
                                   1537 
                                   1538 ;       TIB     ( -- a )
                                   1539 ;       Return address of terminal input buffer.
      00079A 07 8B                 1540         .word      LINK
                           00079C  1541 LINK = . 
      00079C 03                    1542         .byte      3
      00079D 54 49 42              1543         .ascii     "TIB"
      0007A0                       1544 TIB:
      0007A0 CD 02 E4         [ 4] 1545         CALL     NTIB
      0007A3 CD 06 4B         [ 4] 1546         CALL     CELLP
      0007A6 CC 01 4E         [ 2] 1547         JP     AT
                                   1548 
                                   1549 ;       @EXECUTE        ( a -- )
                                   1550 ;       Execute vector stored in address a.
      0007A9 07 9C                 1551         .word      LINK
                           0007AB  1552 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0007AB 08                    1553         .byte      8
      0007AC 40 45 58 45 43 55 54  1554         .ascii     "@EXECUTE"
             45
      0007B4                       1555 ATEXE:
      0007B4 CD 01 4E         [ 4] 1556         CALL     AT
      0007B7 CD 03 45         [ 4] 1557         CALL     QDUP    ;?address or zero
      0007BA CD 00 F9         [ 4] 1558         CALL     QBRAN
      0007BD 07 C2                 1559         .word      EXE1
      0007BF CD 01 20         [ 4] 1560         CALL     EXECU   ;execute if non-zero
      0007C2 81               [ 4] 1561 EXE1:   RET     ;do nothing if zero
                                   1562 
                                   1563 ;       CMOVE   ( b1 b2 u -- )
                                   1564 ;       Copy u bytes from b1 to b2.
      0007C3 07 AB                 1565         .word      LINK
                           0007C5  1566 LINK = . 
      0007C5 05                    1567         .byte      5
      0007C6 43 4D 4F 56 45        1568         .ascii     "CMOVE"
      0007CB                       1569 CMOVE:
      0007CB CD 01 C4         [ 4] 1570         CALL	TOR
      0007CE CD 01 10         [ 4] 1571         CALL	BRAN
      0007D1 07 EB                 1572         .word	CMOV2
      0007D3 CD 01 C4         [ 4] 1573 CMOV1:	CALL	TOR
      0007D6 CD 01 FB         [ 4] 1574         CALL	DUPP
      0007D9 CD 01 6C         [ 4] 1575         CALL	CAT
      0007DC CD 01 AF         [ 4] 1576         CALL	RAT
      0007DF CD 01 5B         [ 4] 1577         CALL	CSTOR
      0007E2 CD 06 76         [ 4] 1578         CALL	ONEP
      0007E5 CD 01 9C         [ 4] 1579         CALL	RFROM
      0007E8 CD 06 76         [ 4] 1580         CALL	ONEP
      0007EB CD 00 DA         [ 4] 1581 CMOV2:	CALL	DONXT
      0007EE 07 D3                 1582         .word	CMOV1
      0007F0 CC 03 7E         [ 2] 1583         JP	DDROP
                                   1584 
                                   1585 ;       FILL    ( b u c -- )
                                   1586 ;       Fill u bytes of character c
                                   1587 ;       to area beginning at b.
      0007F3 07 C5                 1588         .word       LINK
                           0007F5  1589 LINK = . 
      0007F5 04                    1590         .byte       4
      0007F6 46 49 4C 4C           1591         .ascii     "FILL"
      0007FA                       1592 FILL:
      0007FA CD 02 0B         [ 4] 1593         CALL	SWAPP
      0007FD CD 01 C4         [ 4] 1594         CALL	TOR
      000800 CD 02 0B         [ 4] 1595         CALL	SWAPP
      000803 CD 01 10         [ 4] 1596         CALL	BRAN
      000806 08 11                 1597         .word	FILL2
      000808 CD 03 89         [ 4] 1598 FILL1:	CALL	DDUP
      00080B CD 01 5B         [ 4] 1599         CALL	CSTOR
      00080E CD 06 76         [ 4] 1600         CALL	ONEP
      000811 CD 00 DA         [ 4] 1601 FILL2:	CALL	DONXT
      000814 08 08                 1602         .word	FILL1
      000816 CC 03 7E         [ 2] 1603         JP	DDROP
                                   1604 
                                   1605 ;       ERASE   ( b u -- )
                                   1606 ;       Erase u bytes beginning at b.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000819 07 F5                 1607         .word      LINK
                           00081B  1608 LINK = . 
      00081B 05                    1609         .byte      5
      00081C 45 52 41 53 45        1610         .ascii     "ERASE"
      000821                       1611 ERASE:
      000821 CD 06 AA         [ 4] 1612         CALL     ZERO
      000824 CC 07 FA         [ 2] 1613         JP     FILL
                                   1614 
                                   1615 ;       PACK0x   ( b u a -- a )
                                   1616 ;       Build a counted string with
                                   1617 ;       u characters from b. Null fill.
      000827 08 1B                 1618         .word      LINK
                           000829  1619 LINK = . 
      000829 05                    1620         .byte      5
      00082A 50 41 43 4B 30 78     1621         .ascii     "PACK0x"
      000830                       1622 PACKS:
      000830 CD 01 FB         [ 4] 1623         CALL     DUPP
      000833 CD 01 C4         [ 4] 1624         CALL     TOR     ;strings only on cell boundary
      000836 CD 03 89         [ 4] 1625         CALL     DDUP
      000839 CD 01 5B         [ 4] 1626         CALL     CSTOR
      00083C CD 06 76         [ 4] 1627         CALL     ONEP ;save count
      00083F CD 02 0B         [ 4] 1628         CALL     SWAPP
      000842 CD 07 CB         [ 4] 1629         CALL     CMOVE
      000845 CD 01 9C         [ 4] 1630         CALL     RFROM
      000848 81               [ 4] 1631         RET
                                   1632 
                                   1633 ;; Numeric output, single precision
                                   1634 
                                   1635 ;       DIGIT   ( u -- c )
                                   1636 ;       Convert digit u to a character.
      000849 08 29                 1637         .word      LINK
                           00084B  1638 LINK = . 
      00084B 05                    1639         .byte      5
      00084C 44 49 47 49 54        1640         .ascii     "DIGIT"
      000851                       1641 DIGIT:
      000851 CD 00 C2         [ 4] 1642         CALL	DOLIT
      000854 00 09                 1643         .word	9
      000856 CD 02 25         [ 4] 1644         CALL	OVER
      000859 CD 04 61         [ 4] 1645         CALL	LESS
      00085C CD 00 C2         [ 4] 1646         CALL	DOLIT
      00085F 00 07                 1647         .word	7
      000861 CD 02 47         [ 4] 1648         CALL	ANDD
      000864 CD 03 9E         [ 4] 1649         CALL	PLUS
      000867 CD 00 C2         [ 4] 1650         CALL	DOLIT
      00086A 00 30                 1651         .word	48	;'0'
      00086C CC 03 9E         [ 2] 1652         JP	PLUS
                                   1653 
                                   1654 ;       EXTRACT ( n base -- n c )
                                   1655 ;       Extract least significant digit from n.
      00086F 08 4B                 1656         .word      LINK
                           000871  1657 LINK = . 
      000871 07                    1658         .byte      7
      000872 45 58 54 52 41 43 54  1659         .ascii     "EXTRACT"
      000879                       1660 EXTRC:
      000879 CD 06 AA         [ 4] 1661         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00087C CD 02 0B         [ 4] 1662         CALL     SWAPP
      00087F CD 04 D9         [ 4] 1663         CALL     UMMOD
      000882 CD 02 0B         [ 4] 1664         CALL     SWAPP
      000885 CC 08 51         [ 2] 1665         JP     DIGIT
                                   1666 
                                   1667 ;       <#      ( -- )
                                   1668 ;       Initiate  numeric output process.
      000888 08 71                 1669         .word      LINK
                           00088A  1670 LINK = . 
      00088A 02                    1671         .byte      2
      00088B 3C 23                 1672         .ascii     "<#"
      00088D                       1673 BDIGS:
      00088D CD 07 8F         [ 4] 1674         CALL     PAD
      000890 CD 03 04         [ 4] 1675         CALL     HLD
      000893 CC 01 37         [ 2] 1676         JP     STORE
                                   1677 
                                   1678 ;       HOLD    ( c -- )
                                   1679 ;       Insert a character into output string.
      000896 08 8A                 1680         .word      LINK
                           000898  1681 LINK = . 
      000898 04                    1682         .byte      4
      000899 48 4F 4C 44           1683         .ascii     "HOLD"
      00089D                       1684 HOLD:
      00089D CD 03 04         [ 4] 1685         CALL     HLD
      0008A0 CD 01 4E         [ 4] 1686         CALL     AT
      0008A3 CD 06 83         [ 4] 1687         CALL     ONEM
      0008A6 CD 01 FB         [ 4] 1688         CALL     DUPP
      0008A9 CD 03 04         [ 4] 1689         CALL     HLD
      0008AC CD 01 37         [ 4] 1690         CALL     STORE
      0008AF CC 01 5B         [ 2] 1691         JP     CSTOR
                                   1692 
                                   1693 ;       #       ( u -- u )
                                   1694 ;       Extract one digit from u and
                                   1695 ;       append digit to output string.
      0008B2 08 98                 1696         .word      LINK
                           0008B4  1697 LINK = . 
      0008B4 01                    1698         .byte      1
      0008B5 23                    1699         .ascii     "#"
      0008B6                       1700 DIG:
      0008B6 CD 02 B6         [ 4] 1701         CALL     BASE
      0008B9 CD 01 4E         [ 4] 1702         CALL     AT
      0008BC CD 08 79         [ 4] 1703         CALL     EXTRC
      0008BF CC 08 9D         [ 2] 1704         JP     HOLD
                                   1705 
                                   1706 ;       #S      ( u -- 0 )
                                   1707 ;       Convert u until all digits
                                   1708 ;       are added to output string.
      0008C2 08 B4                 1709         .word      LINK
                           0008C4  1710 LINK = . 
      0008C4 02                    1711         .byte      2
      0008C5 23 53                 1712         .ascii     "#S"
      0008C7                       1713 DIGS:
      0008C7 CD 08 B6         [ 4] 1714 DIGS1:  CALL     DIG
      0008CA CD 01 FB         [ 4] 1715         CALL     DUPP
      0008CD CD 00 F9         [ 4] 1716         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0008D0 08 D4                 1717         .word      DIGS2
      0008D2 20 F3            [ 2] 1718         JRA     DIGS1
      0008D4 81               [ 4] 1719 DIGS2:  RET
                                   1720 
                                   1721 ;       SIGN    ( n -- )
                                   1722 ;       Add a minus sign to
                                   1723 ;       numeric output string.
      0008D5 08 C4                 1724         .word      LINK
                           0008D7  1725 LINK = . 
      0008D7 04                    1726         .byte      4
      0008D8 53 49 47 4E           1727         .ascii     "SIGN"
      0008DC                       1728 SIGN:
      0008DC CD 02 34         [ 4] 1729         CALL     ZLESS
      0008DF CD 00 F9         [ 4] 1730         CALL     QBRAN
      0008E2 08 EC                 1731         .word      SIGN1
      0008E4 CD 00 C2         [ 4] 1732         CALL     DOLIT
      0008E7 00 2D                 1733         .word      45	;"-"
      0008E9 CC 08 9D         [ 2] 1734         JP     HOLD
      0008EC 81               [ 4] 1735 SIGN1:  RET
                                   1736 
                                   1737 ;       #>      ( w -- b u )
                                   1738 ;       Prepare output string.
      0008ED 08 D7                 1739         .word      LINK
                           0008EF  1740 LINK = . 
      0008EF 02                    1741         .byte      2
      0008F0 23 3E                 1742         .ascii     "#>"
      0008F2                       1743 EDIGS:
      0008F2 CD 01 F1         [ 4] 1744         CALL     DROP
      0008F5 CD 03 04         [ 4] 1745         CALL     HLD
      0008F8 CD 01 4E         [ 4] 1746         CALL     AT
      0008FB CD 07 8F         [ 4] 1747         CALL     PAD
      0008FE CD 02 25         [ 4] 1748         CALL     OVER
      000901 CC 03 FC         [ 2] 1749         JP     SUBB
                                   1750 
                                   1751 ;       str     ( w -- b u )
                                   1752 ;       Convert a signed integer
                                   1753 ;       to a numeric string.
      000904 08 EF                 1754         .word      LINK
                           000906  1755 LINK = . 
      000906 03                    1756         .byte      3
      000907 73 74 72              1757         .ascii     "str"
      00090A                       1758 STR:
      00090A CD 01 FB         [ 4] 1759         CALL     DUPP
      00090D CD 01 C4         [ 4] 1760         CALL     TOR
      000910 CD 04 16         [ 4] 1761         CALL     ABSS
      000913 CD 08 8D         [ 4] 1762         CALL     BDIGS
      000916 CD 08 C7         [ 4] 1763         CALL     DIGS
      000919 CD 01 9C         [ 4] 1764         CALL     RFROM
      00091C CD 08 DC         [ 4] 1765         CALL     SIGN
      00091F CC 08 F2         [ 2] 1766         JP     EDIGS
                                   1767 
                                   1768 ;       HEX     ( -- )
                                   1769 ;       Use radix 16 as base for
                                   1770 ;       numeric conversions.
      000922 09 06                 1771         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000924  1772 LINK = . 
      000924 03                    1773         .byte      3
      000925 48 45 58              1774         .ascii     "HEX"
      000928                       1775 HEX:
      000928 CD 00 C2         [ 4] 1776         CALL     DOLIT
      00092B 00 10                 1777         .word      16
      00092D CD 02 B6         [ 4] 1778         CALL     BASE
      000930 CC 01 37         [ 2] 1779         JP     STORE
                                   1780 
                                   1781 ;       DECIMAL ( -- )
                                   1782 ;       Use radix 10 as base
                                   1783 ;       for numeric conversions.
      000933 09 24                 1784         .word      LINK
                           000935  1785 LINK = . 
      000935 07                    1786         .byte      7
      000936 44 45 43 49 4D 41 4C  1787         .ascii     "DECIMAL"
      00093D                       1788 DECIM:
      00093D CD 00 C2         [ 4] 1789         CALL     DOLIT
      000940 00 0A                 1790         .word      10
      000942 CD 02 B6         [ 4] 1791         CALL     BASE
      000945 CC 01 37         [ 2] 1792         JP     STORE
                                   1793 
                                   1794 ;; Numeric input, single precision
                                   1795 
                                   1796 ;       DIGIT?  ( c base -- u t )
                                   1797 ;       Convert a character to its numeric
                                   1798 ;       value. A flag indicates success.
      000948 09 35                 1799         .word      LINK
                           00094A  1800 LINK = . 
      00094A 06                    1801         .byte       6
      00094B 44 49 47 49 54 3F     1802         .ascii     "DIGIT?"
      000951                       1803 DIGTQ:
      000951 CD 01 C4         [ 4] 1804         CALL     TOR
      000954 CD 00 C2         [ 4] 1805         CALL     DOLIT
      000957 00 30                 1806         .word     48	; "0"
      000959 CD 03 FC         [ 4] 1807         CALL     SUBB
      00095C CD 00 C2         [ 4] 1808         CALL     DOLIT
      00095F 00 09                 1809         .word      9
      000961 CD 02 25         [ 4] 1810         CALL     OVER
      000964 CD 04 61         [ 4] 1811         CALL     LESS
      000967 CD 00 F9         [ 4] 1812         CALL     QBRAN
      00096A 09 82                 1813         .word      DGTQ1
      00096C CD 00 C2         [ 4] 1814         CALL     DOLIT
      00096F 00 07                 1815         .word      7
      000971 CD 03 FC         [ 4] 1816         CALL     SUBB
      000974 CD 01 FB         [ 4] 1817         CALL     DUPP
      000977 CD 00 C2         [ 4] 1818         CALL     DOLIT
      00097A 00 0A                 1819         .word      10
      00097C CD 04 61         [ 4] 1820         CALL     LESS
      00097F CD 02 5B         [ 4] 1821         CALL     ORR
      000982 CD 01 FB         [ 4] 1822 DGTQ1:  CALL     DUPP
      000985 CD 01 9C         [ 4] 1823         CALL     RFROM
      000988 CC 04 43         [ 2] 1824         JP     ULESS
                                   1825 
                                   1826 ;       NUMBER? ( a -- n T | a F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   1827 ;       Convert a number string to
                                   1828 ;       integer. Push a flag on tos.
      00098B 09 4A                 1829         .word      LINK
                           00098D  1830 LINK = . 
      00098D 07                    1831         .byte      7
      00098E 4E 55 4D 42 45 52 3F  1832         .ascii     "NUMBER?"
      000995                       1833 NUMBQ:
      000995 CD 02 B6         [ 4] 1834         CALL     BASE
      000998 CD 01 4E         [ 4] 1835         CALL     AT
      00099B CD 01 C4         [ 4] 1836         CALL     TOR
      00099E CD 06 AA         [ 4] 1837         CALL     ZERO
      0009A1 CD 02 25         [ 4] 1838         CALL     OVER
      0009A4 CD 07 70         [ 4] 1839         CALL     COUNT
      0009A7 CD 02 25         [ 4] 1840         CALL     OVER
      0009AA CD 01 6C         [ 4] 1841         CALL     CAT
      0009AD CD 00 C2         [ 4] 1842         CALL     DOLIT
      0009B0 00 24                 1843         .word     36	; "0x"
      0009B2 CD 04 24         [ 4] 1844         CALL     EQUAL
      0009B5 CD 00 F9         [ 4] 1845         CALL     QBRAN
      0009B8 09 C9                 1846         .word      NUMQ1
      0009BA CD 09 28         [ 4] 1847         CALL     HEX
      0009BD CD 02 0B         [ 4] 1848         CALL     SWAPP
      0009C0 CD 06 76         [ 4] 1849         CALL     ONEP
      0009C3 CD 02 0B         [ 4] 1850         CALL     SWAPP
      0009C6 CD 06 83         [ 4] 1851         CALL     ONEM
      0009C9 CD 02 25         [ 4] 1852 NUMQ1:  CALL     OVER
      0009CC CD 01 6C         [ 4] 1853         CALL     CAT
      0009CF CD 00 C2         [ 4] 1854         CALL     DOLIT
      0009D2 00 2D                 1855         .word     45	; "-"
      0009D4 CD 04 24         [ 4] 1856         CALL     EQUAL
      0009D7 CD 01 C4         [ 4] 1857         CALL     TOR
      0009DA CD 02 0B         [ 4] 1858         CALL     SWAPP
      0009DD CD 01 AF         [ 4] 1859         CALL     RAT
      0009E0 CD 03 FC         [ 4] 1860         CALL     SUBB
      0009E3 CD 02 0B         [ 4] 1861         CALL     SWAPP
      0009E6 CD 01 AF         [ 4] 1862         CALL     RAT
      0009E9 CD 03 9E         [ 4] 1863         CALL     PLUS
      0009EC CD 03 45         [ 4] 1864         CALL     QDUP
      0009EF CD 00 F9         [ 4] 1865         CALL     QBRAN
      0009F2 0A 53                 1866         .word      NUMQ6
      0009F4 CD 06 83         [ 4] 1867         CALL     ONEM
      0009F7 CD 01 C4         [ 4] 1868         CALL     TOR
      0009FA CD 01 FB         [ 4] 1869 NUMQ2:  CALL     DUPP
      0009FD CD 01 C4         [ 4] 1870         CALL     TOR
      000A00 CD 01 6C         [ 4] 1871         CALL     CAT
      000A03 CD 02 B6         [ 4] 1872         CALL     BASE
      000A06 CD 01 4E         [ 4] 1873         CALL     AT
      000A09 CD 09 51         [ 4] 1874         CALL     DIGTQ
      000A0C CD 00 F9         [ 4] 1875         CALL     QBRAN
      000A0F 0A 41                 1876         .word      NUMQ4
      000A11 CD 02 0B         [ 4] 1877         CALL     SWAPP
      000A14 CD 02 B6         [ 4] 1878         CALL     BASE
      000A17 CD 01 4E         [ 4] 1879         CALL     AT
      000A1A CD 05 F4         [ 4] 1880         CALL     STAR
      000A1D CD 03 9E         [ 4] 1881         CALL     PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000A20 CD 01 9C         [ 4] 1882         CALL     RFROM
      000A23 CD 06 76         [ 4] 1883         CALL     ONEP
      000A26 CD 00 DA         [ 4] 1884         CALL     DONXT
      000A29 09 FA                 1885         .word      NUMQ2
      000A2B CD 01 AF         [ 4] 1886         CALL     RAT
      000A2E CD 02 0B         [ 4] 1887         CALL     SWAPP
      000A31 CD 01 F1         [ 4] 1888         CALL     DROP
      000A34 CD 00 F9         [ 4] 1889         CALL     QBRAN
      000A37 0A 3C                 1890         .word      NUMQ3
      000A39 CD 03 C9         [ 4] 1891         CALL     NEGAT
      000A3C CD 02 0B         [ 4] 1892 NUMQ3:  CALL     SWAPP
      000A3F 20 0F            [ 2] 1893         JRA     NUMQ5
      000A41 CD 01 9C         [ 4] 1894 NUMQ4:  CALL     RFROM
      000A44 CD 01 9C         [ 4] 1895         CALL     RFROM
      000A47 CD 03 7E         [ 4] 1896         CALL     DDROP
      000A4A CD 03 7E         [ 4] 1897         CALL     DDROP
      000A4D CD 06 AA         [ 4] 1898         CALL     ZERO
      000A50 CD 01 FB         [ 4] 1899 NUMQ5:  CALL     DUPP
      000A53 CD 01 9C         [ 4] 1900 NUMQ6:  CALL     RFROM
      000A56 CD 03 7E         [ 4] 1901         CALL     DDROP
      000A59 CD 01 9C         [ 4] 1902         CALL     RFROM
      000A5C CD 02 B6         [ 4] 1903         CALL     BASE
      000A5F CC 01 37         [ 2] 1904         JP     STORE
                                   1905 
                                   1906 ;; Basic I/O
                                   1907 
                                   1908 ;       KEY     ( -- c )
                                   1909 ;       Wait for and return an
                                   1910 ;       input character.
      000A62 09 8D                 1911         .word      LINK
                           000A64  1912 LINK = . 
      000A64 03                    1913         .byte      3
      000A65 4B 45 59              1914         .ascii     "KEY"
      000A68                       1915 KEY:
      000A68 CD 00 87         [ 4] 1916 KEY1:   CALL     QKEY
      000A6B CD 00 F9         [ 4] 1917         CALL     QBRAN
      000A6E 0A 68                 1918         .word      KEY1
      000A70 81               [ 4] 1919         RET
                                   1920 
                                   1921 ;       NUF?    ( -- t )
                                   1922 ;       Return false if no input,
                                   1923 ;       else pause and if CR return true.
      000A71 0A 64                 1924         .word      LINK
                           000A73  1925 LINK = . 
      000A73 04                    1926         .byte      4
      000A74 4E 55 46 3F           1927         .ascii     "NUF?"
      000A78                       1928 NUFQ:
      000A78 CD 00 87         [ 4] 1929         CALL     QKEY
      000A7B CD 01 FB         [ 4] 1930         CALL     DUPP
      000A7E CD 00 F9         [ 4] 1931         CALL     QBRAN
      000A81 0A 91                 1932         .word      NUFQ1
      000A83 CD 03 7E         [ 4] 1933         CALL     DDROP
      000A86 CD 0A 68         [ 4] 1934         CALL     KEY
      000A89 CD 00 C2         [ 4] 1935         CALL     DOLIT
      000A8C 00 0D                 1936         .word      CRR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000A8E CC 04 24         [ 2] 1937         JP     EQUAL
      000A91 81               [ 4] 1938 NUFQ1:  RET
                                   1939 
                                   1940 ;       SPACE   ( -- )
                                   1941 ;       Send  blank character to
                                   1942 ;       output device.
      000A92 0A 73                 1943         .word      LINK
                           000A94  1944 LINK = . 
      000A94 05                    1945         .byte      5
      000A95 53 50 41 43 45        1946         .ascii     "SPACE"
      000A9A                       1947 SPACE:
      000A9A CD 06 9D         [ 4] 1948         CALL     BLANK
      000A9D CC 00 AC         [ 2] 1949         JP     EMIT
                                   1950 
                                   1951 ;       SPACES  ( +n -- )
                                   1952 ;       Send n spaces to output device.
      000AA0 0A 94                 1953         .word      LINK
                           000AA2  1954 LINK = . 
      000AA2 06                    1955         .byte      6
      000AA3 53 50 41 43 45 53     1956         .ascii     "SPACES"
      000AA9                       1957 SPACS:
      000AA9 CD 06 AA         [ 4] 1958         CALL     ZERO
      000AAC CD 04 81         [ 4] 1959         CALL     MAX
      000AAF CD 01 C4         [ 4] 1960         CALL     TOR
      000AB2 20 03            [ 2] 1961         JRA     CHAR2
      000AB4 CD 0A 9A         [ 4] 1962 CHAR1:  CALL     SPACE
      000AB7 CD 00 DA         [ 4] 1963 CHAR2:  CALL     DONXT
      000ABA 0A B4                 1964         .word      CHAR1
      000ABC 81               [ 4] 1965         RET
                                   1966 
                                   1967 ;       TYPE    ( b u -- )
                                   1968 ;       Output u characters from b.
      000ABD 0A A2                 1969         .word      LINK
                           000ABF  1970 LINK = . 
      000ABF 04                    1971         .byte      4
      000AC0 54 59 50 45           1972         .ascii     "TYPE"
      000AC4                       1973 TYPES:
      000AC4 CD 01 C4         [ 4] 1974         CALL     TOR
      000AC7 20 0C            [ 2] 1975         JRA     TYPE2
      000AC9 CD 01 FB         [ 4] 1976 TYPE1:  CALL     DUPP
      000ACC CD 01 6C         [ 4] 1977         CALL     CAT
      000ACF CD 00 AC         [ 4] 1978         CALL     EMIT
      000AD2 CD 06 76         [ 4] 1979         CALL     ONEP
      000AD5 CD 00 DA         [ 4] 1980 TYPE2:  CALL     DONXT
      000AD8 0A C9                 1981         .word      TYPE1
      000ADA CC 01 F1         [ 2] 1982         JP     DROP
                                   1983 
                                   1984 ;       CR      ( -- )
                                   1985 ;       Output a carriage return
                                   1986 ;       and a line feed.
      000ADD 0A BF                 1987         .word      LINK
                           000ADF  1988 LINK = . 
      000ADF 02                    1989         .byte      2
      000AE0 43 52                 1990         .ascii     "CR"
      000AE2                       1991 CR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000AE2 CD 00 C2         [ 4] 1992         CALL     DOLIT
      000AE5 00 0D                 1993         .word      CRR
      000AE7 CD 00 AC         [ 4] 1994         CALL     EMIT
      000AEA CD 00 C2         [ 4] 1995         CALL     DOLIT
      000AED 00 0A                 1996         .word      LF
      000AEF CC 00 AC         [ 2] 1997         JP     EMIT
                                   1998 
                                   1999 ;       do$     ( -- a )
                                   2000 ;       Return  address of a compiled
                                   2001 ;       string.
      000AF2 0A DF                 2002         .word      LINK
                           000AF4  2003 LINK = . 
      000AF4 43                    2004 	.byte      COMPO+3
      000AF5 64 6F 24              2005         .ascii     "do$"
      000AF8                       2006 DOSTR:
      000AF8 CD 01 9C         [ 4] 2007         CALL     RFROM
      000AFB CD 01 AF         [ 4] 2008         CALL     RAT
      000AFE CD 01 9C         [ 4] 2009         CALL     RFROM
      000B01 CD 07 70         [ 4] 2010         CALL     COUNT
      000B04 CD 03 9E         [ 4] 2011         CALL     PLUS
      000B07 CD 01 C4         [ 4] 2012         CALL     TOR
      000B0A CD 02 0B         [ 4] 2013         CALL     SWAPP
      000B0D CD 01 C4         [ 4] 2014         CALL     TOR
      000B10 81               [ 4] 2015         RET
                                   2016 
                                   2017 ;       $"|     ( -- a )
                                   2018 ;       Run time routine compiled by $".
                                   2019 ;       Return address of a compiled string.
      000B11 0A F4                 2020         .word      LINK
                           000B13  2021 LINK = . 
      000B13 43                    2022 	.byte      COMPO+3
      000B14 24 22 7C              2023         .byte     '$','"','|'
      000B17                       2024 STRQP:
      000B17 CD 0A F8         [ 4] 2025         CALL     DOSTR
      000B1A 81               [ 4] 2026         RET
                                   2027 
                                   2028 ;       ."|     ( -- )
                                   2029 ;       Run time routine of ." .
                                   2030 ;       Output a compiled string.
      000B1B 0B 13                 2031         .word      LINK
                           000B1D  2032 LINK = . 
      000B1D 43                    2033 	.byte      COMPO+3
      000B1E 2E 22 7C              2034         .byte     '.','"','|'
      000B21                       2035 DOTQP:
      000B21 CD 0A F8         [ 4] 2036         CALL     DOSTR
      000B24 CD 07 70         [ 4] 2037         CALL     COUNT
      000B27 CC 0A C4         [ 2] 2038         JP     TYPES
                                   2039 
                                   2040 ;       .R      ( n +n -- )
                                   2041 ;       Display an integer in a field
                                   2042 ;       of n columns, right justified.
      000B2A 0B 1D                 2043         .word      LINK
                           000B2C  2044 LINK = . 
      000B2C 02                    2045         .byte      2
      000B2D 2E 52                 2046         .ascii     ".R"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      000B2F                       2047 DOTR:
      000B2F CD 01 C4         [ 4] 2048         CALL     TOR
      000B32 CD 09 0A         [ 4] 2049         CALL     STR
      000B35 CD 01 9C         [ 4] 2050         CALL     RFROM
      000B38 CD 02 25         [ 4] 2051         CALL     OVER
      000B3B CD 03 FC         [ 4] 2052         CALL     SUBB
      000B3E CD 0A A9         [ 4] 2053         CALL     SPACS
      000B41 CC 0A C4         [ 2] 2054         JP     TYPES
                                   2055 
                                   2056 ;       U.R     ( u +n -- )
                                   2057 ;       Display an unsigned integer
                                   2058 ;       in n column, right justified.
      000B44 0B 2C                 2059         .word      LINK
                           000B46  2060 LINK = . 
      000B46 03                    2061         .byte      3
      000B47 55 2E 52              2062         .ascii     "U.R"
      000B4A                       2063 UDOTR:
      000B4A CD 01 C4         [ 4] 2064         CALL     TOR
      000B4D CD 08 8D         [ 4] 2065         CALL     BDIGS
      000B50 CD 08 C7         [ 4] 2066         CALL     DIGS
      000B53 CD 08 F2         [ 4] 2067         CALL     EDIGS
      000B56 CD 01 9C         [ 4] 2068         CALL     RFROM
      000B59 CD 02 25         [ 4] 2069         CALL     OVER
      000B5C CD 03 FC         [ 4] 2070         CALL     SUBB
      000B5F CD 0A A9         [ 4] 2071         CALL     SPACS
      000B62 CC 0A C4         [ 2] 2072         JP     TYPES
                                   2073 
                                   2074 ;       U.      ( u -- )
                                   2075 ;       Display an unsigned integer
                                   2076 ;       in free format.
      000B65 0B 46                 2077         .word      LINK
                           000B67  2078 LINK = . 
      000B67 02                    2079         .byte      2
      000B68 55 2E                 2080         .ascii     "U."
      000B6A                       2081 UDOT:
      000B6A CD 08 8D         [ 4] 2082         CALL     BDIGS
      000B6D CD 08 C7         [ 4] 2083         CALL     DIGS
      000B70 CD 08 F2         [ 4] 2084         CALL     EDIGS
      000B73 CD 0A 9A         [ 4] 2085         CALL     SPACE
      000B76 CC 0A C4         [ 2] 2086         JP     TYPES
                                   2087 
                                   2088 ;       .       ( w -- )
                                   2089 ;       Display an integer in free
                                   2090 ;       format, preceeded by a space.
      000B79 0B 67                 2091         .word      LINK
                           000B7B  2092 LINK = . 
      000B7B 01                    2093         .byte      1
      000B7C 2E                    2094         .ascii     "."
      000B7D                       2095 DOT:
      000B7D CD 02 B6         [ 4] 2096         CALL     BASE
      000B80 CD 01 4E         [ 4] 2097         CALL     AT
      000B83 CD 00 C2         [ 4] 2098         CALL     DOLIT
      000B86 00 0A                 2099         .word      10
      000B88 CD 02 70         [ 4] 2100         CALL     XORR    ;?decimal
      000B8B CD 00 F9         [ 4] 2101         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000B8E 0B 93                 2102         .word      DOT1
      000B90 CC 0B 6A         [ 2] 2103         JP     UDOT
      000B93 CD 09 0A         [ 4] 2104 DOT1:   CALL     STR
      000B96 CD 0A 9A         [ 4] 2105         CALL     SPACE
      000B99 CC 0A C4         [ 2] 2106         JP     TYPES
                                   2107 
                                   2108 ;       ?       ( a -- )
                                   2109 ;       Display contents in memory cell.
      000B9C 0B 7B                 2110         .word      LINK
                                   2111         
                           000B9E  2112 LINK = . 
      000B9E 01                    2113         .byte      1
      000B9F 3F                    2114         .ascii     "?"
      000BA0                       2115 QUEST:
      000BA0 CD 01 4E         [ 4] 2116         CALL     AT
      000BA3 CC 0B 7D         [ 2] 2117         JP     DOT
                                   2118 
                                   2119 ;; Parsing
                                   2120 
                                   2121 ;       parse   ( b u c -- b u delta ; <string> )
                                   2122 ;       Scan string delimited by c.
                                   2123 ;       Return found string and its offset.
      000BA6 0B 9E                 2124         .word      LINK
                           000BA8  2125 LINK = . 
      000BA8 05                    2126         .byte      5
      000BA9 70 61 72 73 65        2127         .ascii     "parse"
      000BAE                       2128 PARS:
      000BAE CD 02 C5         [ 4] 2129         CALL     TEMP
      000BB1 CD 01 37         [ 4] 2130         CALL     STORE
      000BB4 CD 02 25         [ 4] 2131         CALL     OVER
      000BB7 CD 01 C4         [ 4] 2132         CALL     TOR
      000BBA CD 01 FB         [ 4] 2133         CALL     DUPP
      000BBD CD 00 F9         [ 4] 2134         CALL     QBRAN
      000BC0 0C 66                 2135         .word      PARS8
      000BC2 CD 06 83         [ 4] 2136         CALL     ONEM
      000BC5 CD 02 C5         [ 4] 2137         CALL     TEMP
      000BC8 CD 01 4E         [ 4] 2138         CALL     AT
      000BCB CD 06 9D         [ 4] 2139         CALL     BLANK
      000BCE CD 04 24         [ 4] 2140         CALL     EQUAL
      000BD1 CD 00 F9         [ 4] 2141         CALL     QBRAN
      000BD4 0C 07                 2142         .word      PARS3
      000BD6 CD 01 C4         [ 4] 2143         CALL     TOR
      000BD9 CD 06 9D         [ 4] 2144 PARS1:  CALL     BLANK
      000BDC CD 02 25         [ 4] 2145         CALL     OVER
      000BDF CD 01 6C         [ 4] 2146         CALL     CAT     ;skip leading blanks ONLY
      000BE2 CD 03 FC         [ 4] 2147         CALL     SUBB
      000BE5 CD 02 34         [ 4] 2148         CALL     ZLESS
      000BE8 CD 03 B8         [ 4] 2149         CALL     INVER
      000BEB CD 00 F9         [ 4] 2150         CALL     QBRAN
      000BEE 0C 04                 2151         .word      PARS2
      000BF0 CD 06 76         [ 4] 2152         CALL     ONEP
      000BF3 CD 00 DA         [ 4] 2153         CALL     DONXT
      000BF6 0B D9                 2154         .word      PARS1
      000BF8 CD 01 9C         [ 4] 2155         CALL     RFROM
      000BFB CD 01 F1         [ 4] 2156         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000BFE CD 06 AA         [ 4] 2157         CALL     ZERO
      000C01 CC 01 FB         [ 2] 2158         JP     DUPP
      000C04 CD 01 9C         [ 4] 2159 PARS2:  CALL     RFROM
      000C07 CD 02 25         [ 4] 2160 PARS3:  CALL     OVER
      000C0A CD 02 0B         [ 4] 2161         CALL     SWAPP
      000C0D CD 01 C4         [ 4] 2162         CALL     TOR
      000C10 CD 02 C5         [ 4] 2163 PARS4:  CALL     TEMP
      000C13 CD 01 4E         [ 4] 2164         CALL     AT
      000C16 CD 02 25         [ 4] 2165         CALL     OVER
      000C19 CD 01 6C         [ 4] 2166         CALL     CAT
      000C1C CD 03 FC         [ 4] 2167         CALL     SUBB    ;scan for delimiter
      000C1F CD 02 C5         [ 4] 2168         CALL     TEMP
      000C22 CD 01 4E         [ 4] 2169         CALL     AT
      000C25 CD 06 9D         [ 4] 2170         CALL     BLANK
      000C28 CD 04 24         [ 4] 2171         CALL     EQUAL
      000C2B CD 00 F9         [ 4] 2172         CALL     QBRAN
      000C2E 0C 33                 2173         .word      PARS5
      000C30 CD 02 34         [ 4] 2174         CALL     ZLESS
      000C33 CD 00 F9         [ 4] 2175 PARS5:  CALL     QBRAN
      000C36 0C 48                 2176         .word      PARS6
      000C38 CD 06 76         [ 4] 2177         CALL     ONEP
      000C3B CD 00 DA         [ 4] 2178         CALL     DONXT
      000C3E 0C 10                 2179         .word      PARS4
      000C40 CD 01 FB         [ 4] 2180         CALL     DUPP
      000C43 CD 01 C4         [ 4] 2181         CALL     TOR
      000C46 20 0F            [ 2] 2182         JRA     PARS7
      000C48 CD 01 9C         [ 4] 2183 PARS6:  CALL     RFROM
      000C4B CD 01 F1         [ 4] 2184         CALL     DROP
      000C4E CD 01 FB         [ 4] 2185         CALL     DUPP
      000C51 CD 06 76         [ 4] 2186         CALL     ONEP
      000C54 CD 01 C4         [ 4] 2187         CALL     TOR
      000C57 CD 02 25         [ 4] 2188 PARS7:  CALL     OVER
      000C5A CD 03 FC         [ 4] 2189         CALL     SUBB
      000C5D CD 01 9C         [ 4] 2190         CALL     RFROM
      000C60 CD 01 9C         [ 4] 2191         CALL     RFROM
      000C63 CC 03 FC         [ 2] 2192         JP     SUBB
      000C66 CD 02 25         [ 4] 2193 PARS8:  CALL     OVER
      000C69 CD 01 9C         [ 4] 2194         CALL     RFROM
      000C6C CC 03 FC         [ 2] 2195         JP     SUBB
                                   2196 
                                   2197 ;       PARSE   ( c -- b u ; <string> )
                                   2198 ;       Scan input stream and return
                                   2199 ;       counted string delimited by c.
      000C6F 0B A8                 2200         .word      LINK
                           000C71  2201 LINK = . 
      000C71 05                    2202         .byte      5
      000C72 50 41 52 53 45        2203         .ascii     "PARSE"
      000C77                       2204 PARSE:
      000C77 CD 01 C4         [ 4] 2205         CALL     TOR
      000C7A CD 07 A0         [ 4] 2206         CALL     TIB
      000C7D CD 02 D4         [ 4] 2207         CALL     INN
      000C80 CD 01 4E         [ 4] 2208         CALL     AT
      000C83 CD 03 9E         [ 4] 2209         CALL     PLUS    ;current input buffer pointer
      000C86 CD 02 E4         [ 4] 2210         CALL     NTIB
      000C89 CD 01 4E         [ 4] 2211         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000C8C CD 02 D4         [ 4] 2212         CALL     INN
      000C8F CD 01 4E         [ 4] 2213         CALL     AT
      000C92 CD 03 FC         [ 4] 2214         CALL     SUBB    ;remaining count
      000C95 CD 01 9C         [ 4] 2215         CALL     RFROM
      000C98 CD 0B AE         [ 4] 2216         CALL     PARS
      000C9B CD 02 D4         [ 4] 2217         CALL     INN
      000C9E CC 07 2E         [ 2] 2218         JP     PSTOR
                                   2219 
                                   2220 ;       .(      ( -- )
                                   2221 ;       Output following string up to next ) .
      000CA1 0C 71                 2222         .word      LINK
                           000CA3  2223 LINK = . 
      000CA3 82                    2224 	.byte      IMEDD+2
      000CA4 2E 28                 2225         .ascii     ".("
      000CA6                       2226 DOTPR:
      000CA6 CD 00 C2         [ 4] 2227         CALL     DOLIT
      000CA9 00 29                 2228         .word     41	; ")"
      000CAB CD 0C 77         [ 4] 2229         CALL     PARSE
      000CAE CC 0A C4         [ 2] 2230         JP     TYPES
                                   2231 
                                   2232 ;       (       ( -- )
                                   2233 ;       Ignore following string up to next ).
                                   2234 ;       A comment.
      000CB1 0C A3                 2235         .word      LINK
                           000CB3  2236 LINK = . 
      000CB3 81                    2237 	.byte      IMEDD+1
      000CB4 28                    2238         .ascii     "("
      000CB5                       2239 PAREN:
      000CB5 CD 00 C2         [ 4] 2240         CALL     DOLIT
      000CB8 00 29                 2241         .word     41	; ")"
      000CBA CD 0C 77         [ 4] 2242         CALL     PARSE
      000CBD CC 03 7E         [ 2] 2243         JP     DDROP
                                   2244 
                                   2245 ;       \       ( -- )
                                   2246 ;       Ignore following text till
                                   2247 ;       end of line.
      000CC0 0C B3                 2248         .word      LINK
                           000CC2  2249 LINK = . 
      000CC2 81                    2250 			.byte      IMEDD+1
      000CC3 5C 5C                 2251         .ascii     "\\"
      000CC5                       2252 BKSLA:
      000CC5 CD 02 E4         [ 4] 2253         CALL     NTIB
      000CC8 CD 01 4E         [ 4] 2254         CALL     AT
      000CCB CD 02 D4         [ 4] 2255         CALL     INN
      000CCE CC 01 37         [ 2] 2256         JP     STORE
                                   2257 
                                   2258 ;       WORD    ( c -- a ; <string> )
                                   2259 ;       Parse a word from input stream
                                   2260 ;       and copy it to code dictionary.
      000CD1 0C C2                 2261         .word      LINK
                           000CD3  2262 LINK = . 
      000CD3 04                    2263         .byte      4
      000CD4 57 4F 52 44           2264         .ascii     "WORD"
      000CD8                       2265 WORDD:
      000CD8 CD 0C 77         [ 4] 2266         CALL     PARSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000CDB CD 07 83         [ 4] 2267         CALL     HERE
      000CDE CD 06 4B         [ 4] 2268         CALL     CELLP
      000CE1 CC 08 30         [ 2] 2269         JP     PACKS
                                   2270 
                                   2271 ;       TOKEN   ( -- a ; <string> )
                                   2272 ;       Parse a word from input stream
                                   2273 ;       and copy it to name dictionary.
      000CE4 0C D3                 2274         .word      LINK
                           000CE6  2275 LINK = . 
      000CE6 05                    2276         .byte      5
      000CE7 54 4F 4B 45 4E        2277         .ascii     "TOKEN"
      000CEC                       2278 TOKEN:
      000CEC CD 06 9D         [ 4] 2279         CALL     BLANK
      000CEF CC 0C D8         [ 2] 2280         JP     WORDD
                                   2281 
                                   2282 ;; Dictionary search
                                   2283 
                                   2284 ;       NAME>   ( na -- ca )
                                   2285 ;       Return a code address given
                                   2286 ;       a name address.
      000CF2 0C E6                 2287         .word      LINK
                           000CF4  2288 LINK = . 
      000CF4 05                    2289         .byte      5
      000CF5 4E 41 4D 45 3E        2290         .ascii     "NAME>"
      000CFA                       2291 NAMET:
      000CFA CD 07 70         [ 4] 2292         CALL     COUNT
      000CFD CD 00 C2         [ 4] 2293         CALL     DOLIT
      000D00 00 1F                 2294         .word      31
      000D02 CD 02 47         [ 4] 2295         CALL     ANDD
      000D05 CC 03 9E         [ 2] 2296         JP     PLUS
                                   2297 
                                   2298 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2299 ;       Compare u cells in two
                                   2300 ;       strings. Return 0 if identical.
      000D08 0C F4                 2301         .word      LINK
                           000D0A  2302 LINK = . 
      000D0A 05                    2303         .byte       5
      000D0B 53 41 4D 45 3F        2304         .ascii     "SAME?"
      000D10                       2305 SAMEQ:
      000D10 CD 06 83         [ 4] 2306         CALL     ONEM
      000D13 CD 01 C4         [ 4] 2307         CALL     TOR
      000D16 20 29            [ 2] 2308         JRA     SAME2
      000D18 CD 02 25         [ 4] 2309 SAME1:  CALL     OVER
      000D1B CD 01 AF         [ 4] 2310         CALL     RAT
      000D1E CD 03 9E         [ 4] 2311         CALL     PLUS
      000D21 CD 01 6C         [ 4] 2312         CALL     CAT
      000D24 CD 02 25         [ 4] 2313         CALL     OVER
      000D27 CD 01 AF         [ 4] 2314         CALL     RAT
      000D2A CD 03 9E         [ 4] 2315         CALL     PLUS
      000D2D CD 01 6C         [ 4] 2316         CALL     CAT
      000D30 CD 03 FC         [ 4] 2317         CALL     SUBB
      000D33 CD 03 45         [ 4] 2318         CALL     QDUP
      000D36 CD 00 F9         [ 4] 2319         CALL     QBRAN
      000D39 0D 41                 2320         .word      SAME2
      000D3B CD 01 9C         [ 4] 2321         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      000D3E CC 01 F1         [ 2] 2322         JP     DROP
      000D41 CD 00 DA         [ 4] 2323 SAME2:  CALL     DONXT
      000D44 0D 18                 2324         .word      SAME1
      000D46 CC 06 AA         [ 2] 2325         JP     ZERO
                                   2326 
                                   2327 ;       find    ( a va -- ca na | a F )
                                   2328 ;       Search vocabulary for string.
                                   2329 ;       Return ca and na if succeeded.
      000D49 0D 0A                 2330         .word      LINK
                           000D4B  2331 LINK = . 
      000D4B 04                    2332         .byte      4
      000D4C 66 69 6E 64           2333         .ascii     "find"
      000D50                       2334 FIND:
      000D50 CD 02 0B         [ 4] 2335         CALL     SWAPP
      000D53 CD 01 FB         [ 4] 2336         CALL     DUPP
      000D56 CD 01 6C         [ 4] 2337         CALL     CAT
      000D59 CD 02 C5         [ 4] 2338         CALL     TEMP
      000D5C CD 01 37         [ 4] 2339         CALL     STORE
      000D5F CD 01 FB         [ 4] 2340         CALL     DUPP
      000D62 CD 01 4E         [ 4] 2341         CALL     AT
      000D65 CD 01 C4         [ 4] 2342         CALL     TOR
      000D68 CD 06 4B         [ 4] 2343         CALL     CELLP
      000D6B CD 02 0B         [ 4] 2344         CALL     SWAPP
      000D6E CD 01 4E         [ 4] 2345 FIND1:  CALL     AT
      000D71 CD 01 FB         [ 4] 2346         CALL     DUPP
      000D74 CD 00 F9         [ 4] 2347         CALL     QBRAN
      000D77 0D AD                 2348         .word      FIND6
      000D79 CD 01 FB         [ 4] 2349         CALL     DUPP
      000D7C CD 01 4E         [ 4] 2350         CALL     AT
      000D7F CD 00 C2         [ 4] 2351         CALL     DOLIT
      000D82 1F 7F                 2352         .word      MASKK
      000D84 CD 02 47         [ 4] 2353         CALL     ANDD
      000D87 CD 01 AF         [ 4] 2354         CALL     RAT
      000D8A CD 02 70         [ 4] 2355         CALL     XORR
      000D8D CD 00 F9         [ 4] 2356         CALL     QBRAN
      000D90 0D 9C                 2357         .word      FIND2
      000D92 CD 06 4B         [ 4] 2358         CALL     CELLP
      000D95 CD 00 C2         [ 4] 2359         CALL     DOLIT
      000D98 FF FF                 2360         .word     0xFFFF
      000D9A 20 0C            [ 2] 2361         JRA     FIND3
      000D9C CD 06 4B         [ 4] 2362 FIND2:  CALL     CELLP
      000D9F CD 02 C5         [ 4] 2363         CALL     TEMP
      000DA2 CD 01 4E         [ 4] 2364         CALL     AT
      000DA5 CD 0D 10         [ 4] 2365         CALL     SAMEQ
      000DA8 CD 01 10         [ 4] 2366 FIND3:  CALL     BRAN
      000DAB 0D BC                 2367         .word      FIND4
      000DAD CD 01 9C         [ 4] 2368 FIND6:  CALL     RFROM
      000DB0 CD 01 F1         [ 4] 2369         CALL     DROP
      000DB3 CD 02 0B         [ 4] 2370         CALL     SWAPP
      000DB6 CD 06 5A         [ 4] 2371         CALL     CELLM
      000DB9 CC 02 0B         [ 2] 2372         JP     SWAPP
      000DBC CD 00 F9         [ 4] 2373 FIND4:  CALL     QBRAN
      000DBF 0D C9                 2374         .word      FIND5
      000DC1 CD 06 5A         [ 4] 2375         CALL     CELLM
      000DC4 CD 06 5A         [ 4] 2376         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      000DC7 20 A5            [ 2] 2377         JRA     FIND1
      000DC9 CD 01 9C         [ 4] 2378 FIND5:  CALL     RFROM
      000DCC CD 01 F1         [ 4] 2379         CALL     DROP
      000DCF CD 02 0B         [ 4] 2380         CALL     SWAPP
      000DD2 CD 01 F1         [ 4] 2381         CALL     DROP
      000DD5 CD 06 5A         [ 4] 2382         CALL     CELLM
      000DD8 CD 01 FB         [ 4] 2383         CALL     DUPP
      000DDB CD 0C FA         [ 4] 2384         CALL     NAMET
      000DDE CC 02 0B         [ 2] 2385         JP     SWAPP
                                   2386 
                                   2387 ;       NAME?   ( a -- ca na | a F )
                                   2388 ;       Search vocabularies for a string.
      000DE1 0D 4B                 2389         .word      LINK
                           000DE3  2390 LINK = . 
      000DE3 05                    2391         .byte      5
      000DE4 4E 41 4D 45 3F        2392         .ascii     "NAME?"
      000DE9                       2393 NAMEQ:
      000DE9 CD 03 17         [ 4] 2394         CALL     CNTXT
      000DEC CC 0D 50         [ 2] 2395         JP     FIND
                                   2396 
                                   2397 ;; Terminal response
                                   2398 
                                   2399 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2400 ;       Backup cursor by one character.
      000DEF 0D E3                 2401         .word      LINK
                           000DF1  2402 LINK = . 
      000DF1 02                    2403         .byte      2
      000DF2 5E 68                 2404         .ascii     "^h"
      000DF4                       2405 BKSP:
      000DF4 CD 01 C4         [ 4] 2406         CALL     TOR
      000DF7 CD 02 25         [ 4] 2407         CALL     OVER
      000DFA CD 01 9C         [ 4] 2408         CALL     RFROM
      000DFD CD 02 0B         [ 4] 2409         CALL     SWAPP
      000E00 CD 02 25         [ 4] 2410         CALL     OVER
      000E03 CD 02 70         [ 4] 2411         CALL     XORR
      000E06 CD 00 F9         [ 4] 2412         CALL     QBRAN
      000E09 0E 24                 2413         .word      BACK1
      000E0B CD 00 C2         [ 4] 2414         CALL     DOLIT
      000E0E 00 08                 2415         .word      BKSPP
      000E10 CD 00 AC         [ 4] 2416         CALL     EMIT
      000E13 CD 06 83         [ 4] 2417         CALL     ONEM
      000E16 CD 06 9D         [ 4] 2418         CALL     BLANK
      000E19 CD 00 AC         [ 4] 2419         CALL     EMIT
      000E1C CD 00 C2         [ 4] 2420         CALL     DOLIT
      000E1F 00 08                 2421         .word      BKSPP
      000E21 CC 00 AC         [ 2] 2422         JP     EMIT
      000E24 81               [ 4] 2423 BACK1:  RET
                                   2424 
                                   2425 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2426 ;       Accept and echo key stroke
                                   2427 ;       and bump cursor.
      000E25 0D F1                 2428         .word      LINK
                           000E27  2429 LINK = . 
      000E27 03                    2430         .byte      3
      000E28 54 41 50              2431         .ascii     "TAP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      000E2B                       2432 TAP:
      000E2B CD 01 FB         [ 4] 2433         CALL     DUPP
      000E2E CD 00 AC         [ 4] 2434         CALL     EMIT
      000E31 CD 02 25         [ 4] 2435         CALL     OVER
      000E34 CD 01 5B         [ 4] 2436         CALL     CSTOR
      000E37 CC 06 76         [ 2] 2437         JP     ONEP
                                   2438 
                                   2439 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2440 ;       Process a key stroke,
                                   2441 ;       CR or backspace.
      000E3A 0E 27                 2442         .word      LINK
                           000E3C  2443 LINK = . 
      000E3C 04                    2444         .byte      4
      000E3D 6B 54 41 50           2445         .ascii     "kTAP"
      000E41                       2446 KTAP:
      000E41 CD 01 FB         [ 4] 2447         CALL     DUPP
      000E44 CD 00 C2         [ 4] 2448         CALL     DOLIT
      000E47 00 0D                 2449         .word      CRR
      000E49 CD 02 70         [ 4] 2450         CALL     XORR
      000E4C CD 00 F9         [ 4] 2451         CALL     QBRAN
      000E4F 0E 67                 2452         .word      KTAP2
      000E51 CD 00 C2         [ 4] 2453         CALL     DOLIT
      000E54 00 08                 2454         .word      BKSPP
      000E56 CD 02 70         [ 4] 2455         CALL     XORR
      000E59 CD 00 F9         [ 4] 2456         CALL     QBRAN
      000E5C 0E 64                 2457         .word      KTAP1
      000E5E CD 06 9D         [ 4] 2458         CALL     BLANK
      000E61 CC 0E 2B         [ 2] 2459         JP     TAP
      000E64 CC 0D F4         [ 2] 2460 KTAP1:  JP     BKSP
      000E67 CD 01 F1         [ 4] 2461 KTAP2:  CALL     DROP
      000E6A CD 02 0B         [ 4] 2462         CALL     SWAPP
      000E6D CD 01 F1         [ 4] 2463         CALL     DROP
      000E70 CC 01 FB         [ 2] 2464         JP     DUPP
                                   2465 
                                   2466 ;       accept  ( b u -- b u )
                                   2467 ;       Accept characters to input
                                   2468 ;       buffer. Return with actual count.
      000E73 0E 3C                 2469         .word      LINK
                           000E75  2470 LINK = . 
      000E75 06                    2471         .byte      6
      000E76 41 43 43 45 50 54     2472         .ascii     "ACCEPT"
      000E7C                       2473 ACCEP:
      000E7C CD 02 25         [ 4] 2474         CALL     OVER
      000E7F CD 03 9E         [ 4] 2475         CALL     PLUS
      000E82 CD 02 25         [ 4] 2476         CALL     OVER
      000E85 CD 03 89         [ 4] 2477 ACCP1:  CALL     DDUP
      000E88 CD 02 70         [ 4] 2478         CALL     XORR
      000E8B CD 00 F9         [ 4] 2479         CALL     QBRAN
      000E8E 0E B0                 2480         .word      ACCP4
      000E90 CD 0A 68         [ 4] 2481         CALL     KEY
      000E93 CD 01 FB         [ 4] 2482         CALL     DUPP
      000E96 CD 06 9D         [ 4] 2483         CALL     BLANK
      000E99 CD 00 C2         [ 4] 2484         CALL     DOLIT
      000E9C 00 7F                 2485         .word      127
      000E9E CD 04 BE         [ 4] 2486         CALL     WITHI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      000EA1 CD 00 F9         [ 4] 2487         CALL     QBRAN
      000EA4 0E AB                 2488         .word      ACCP2
      000EA6 CD 0E 2B         [ 4] 2489         CALL     TAP
      000EA9 20 03            [ 2] 2490         JRA     ACCP3
      000EAB CD 0E 41         [ 4] 2491 ACCP2:  CALL     KTAP
      000EAE 20 D5            [ 2] 2492 ACCP3:  JRA     ACCP1
      000EB0 CD 01 F1         [ 4] 2493 ACCP4:  CALL     DROP
      000EB3 CD 02 25         [ 4] 2494         CALL     OVER
      000EB6 CC 03 FC         [ 2] 2495         JP     SUBB
                                   2496 
                                   2497 ;       QUERY   ( -- )
                                   2498 ;       Accept input stream to
                                   2499 ;       terminal input buffer.
      000EB9 0E 75                 2500         .word      LINK
                                   2501         
                           000EBB  2502 LINK = . 
      000EBB 05                    2503         .byte      5
      000EBC 51 55 45 52 59        2504         .ascii     "QUERY"
      000EC1                       2505 QUERY:
      000EC1 CD 07 A0         [ 4] 2506         CALL     TIB
      000EC4 CD 00 C2         [ 4] 2507         CALL     DOLIT
      000EC7 00 50                 2508         .word      80
      000EC9 CD 0E 7C         [ 4] 2509         CALL     ACCEP
      000ECC CD 02 E4         [ 4] 2510         CALL     NTIB
      000ECF CD 01 37         [ 4] 2511         CALL     STORE
      000ED2 CD 01 F1         [ 4] 2512         CALL     DROP
      000ED5 CD 06 AA         [ 4] 2513         CALL     ZERO
      000ED8 CD 02 D4         [ 4] 2514         CALL     INN
      000EDB CC 01 37         [ 2] 2515         JP     STORE
                                   2516 
                                   2517 ;       ABORT   ( -- )
                                   2518 ;       Reset data stack and
                                   2519 ;       jump to QUIT.
      000EDE 0E BB                 2520         .word      LINK
                           000EE0  2521 LINK = . 
      000EE0 05                    2522         .byte      5
      000EE1 41 42 4F 52 54        2523         .ascii     "ABORT"
      000EE6                       2524 ABORT:
      000EE6 CD 0F DD         [ 4] 2525         CALL     PRESE
      000EE9 CC 0F FA         [ 2] 2526         JP     QUIT
                                   2527 
                                   2528 ;       abort"  ( f -- )
                                   2529 ;       Run time routine of ABORT".
                                   2530 ;       Abort with a message.
      000EEC 0E E0                 2531         .word      LINK
                           000EEE  2532 LINK = . 
      000EEE 46                    2533 	.byte      COMPO+6
      000EEF 61 62 6F 72 74        2534         .ascii     "abort"
      000EF4 22                    2535         .byte      '"'
      000EF5                       2536 ABORQ:
      000EF5 CD 00 F9         [ 4] 2537         CALL     QBRAN
      000EF8 0F 14                 2538         .word      ABOR2   ;text flag
      000EFA CD 0A F8         [ 4] 2539         CALL     DOSTR
      000EFD CD 0A 9A         [ 4] 2540 ABOR1:  CALL     SPACE
      000F00 CD 07 70         [ 4] 2541         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000F03 CD 0A C4         [ 4] 2542         CALL     TYPES
      000F06 CD 00 C2         [ 4] 2543         CALL     DOLIT
      000F09 00 3F                 2544         .word     63 ; "?"
      000F0B CD 00 AC         [ 4] 2545         CALL     EMIT
      000F0E CD 0A E2         [ 4] 2546         CALL     CR
      000F11 CC 0E E6         [ 2] 2547         JP     ABORT   ;pass error string
      000F14 CD 0A F8         [ 4] 2548 ABOR2:  CALL     DOSTR
      000F17 CC 01 F1         [ 2] 2549         JP     DROP
                                   2550 
                                   2551 ;; The text interpreter
                                   2552 
                                   2553 ;       $INTERPRET      ( a -- )
                                   2554 ;       Interpret a word. If failed,
                                   2555 ;       try to convert it to an integer.
      000F1A 0E EE                 2556         .word      LINK
                           000F1C  2557 LINK = . 
      000F1C 0A                    2558         .byte      10
      000F1D 24 49 4E 54 45 52 50  2559         .ascii     "$INTERPRET"
             52 45 54
      000F27                       2560 INTER:
      000F27 CD 0D E9         [ 4] 2561         CALL     NAMEQ
      000F2A CD 03 45         [ 4] 2562         CALL     QDUP    ;?defined
      000F2D CD 00 F9         [ 4] 2563         CALL     QBRAN
      000F30 0F 51                 2564         .word      INTE1
      000F32 CD 01 4E         [ 4] 2565         CALL     AT
      000F35 CD 00 C2         [ 4] 2566         CALL     DOLIT
      000F38 40 00                 2567 		.word       0x4000	; COMPO*256
      000F3A CD 02 47         [ 4] 2568         CALL     ANDD    ;?compile only lexicon bits
      000F3D CD 0E F5         [ 4] 2569         CALL     ABORQ
      000F40 0D                    2570         .byte      13
      000F41 20 63 6F 6D 70 69 6C  2571         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000F4E CC 01 20         [ 2] 2572         JP     EXECU
      000F51 CD 09 95         [ 4] 2573 INTE1:  CALL     NUMBQ   ;convert a number
      000F54 CD 00 F9         [ 4] 2574         CALL     QBRAN
      000F57 0E FD                 2575         .word      ABOR1
      000F59 81               [ 4] 2576         RET
                                   2577 
                                   2578 ;       [       ( -- )
                                   2579 ;       Start  text interpreter.
      000F5A 0F 1C                 2580         .word      LINK
                           000F5C  2581 LINK = . 
      000F5C 81                    2582 	.byte      IMEDD+1
      000F5D 5B                    2583         .ascii     "["
      000F5E                       2584 LBRAC:
      000F5E CD 00 C2         [ 4] 2585         CALL     DOLIT
      000F61 0F 27                 2586         .word      INTER
      000F63 CD 02 F5         [ 4] 2587         CALL     TEVAL
      000F66 CC 01 37         [ 2] 2588         JP     STORE
                                   2589 
                                   2590 ;       .OK     ( -- )
                                   2591 ;       Display 'ok' while interpreting.
      000F69 0F 5C                 2592         .word      LINK
                           000F6B  2593 LINK = . 
      000F6B 03                    2594         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000F6C 2E 4F 4B              2595         .ascii     ".OK"
      000F6F                       2596 DOTOK:
      000F6F CD 00 C2         [ 4] 2597         CALL     DOLIT
      000F72 0F 27                 2598         .word      INTER
      000F74 CD 02 F5         [ 4] 2599         CALL     TEVAL
      000F77 CD 01 4E         [ 4] 2600         CALL     AT
      000F7A CD 04 24         [ 4] 2601         CALL     EQUAL
      000F7D CD 00 F9         [ 4] 2602         CALL     QBRAN
      000F80 0F 89                 2603         .word      DOTO1
      000F82 CD 0B 21         [ 4] 2604         CALL     DOTQP
      000F85 03                    2605         .byte      3
      000F86 20 6F 6B              2606         .ascii     " ok"
      000F89 CC 0A E2         [ 2] 2607 DOTO1:  JP     CR
                                   2608 
                                   2609 ;       ?STACK  ( -- )
                                   2610 ;       Abort if stack underflows.
      000F8C 0F 6B                 2611         .word      LINK
                           000F8E  2612 LINK = . 
      000F8E 06                    2613         .byte      6
      000F8F 3F 53 54 41 43 4B     2614         .ascii     "?STACK"
      000F95                       2615 QSTAC:
      000F95 CD 07 00         [ 4] 2616         CALL     DEPTH
      000F98 CD 02 34         [ 4] 2617         CALL     ZLESS   ;check only for underflow
      000F9B CD 0E F5         [ 4] 2618         CALL     ABORQ
      000F9E 0B                    2619         .byte      11
      000F9F 20 75 6E 64 65 72 66  2620         .ascii     " underflow "
             6C 6F 77 20
      000FAA 81               [ 4] 2621         RET
                                   2622 
                                   2623 ;       EVAL    ( -- )
                                   2624 ;       Interpret  input stream.
      000FAB 0F 8E                 2625         .word      LINK
                           000FAD  2626 LINK = . 
      000FAD 04                    2627         .byte      4
      000FAE 45 56 41 4C           2628         .ascii     "EVAL"
      000FB2                       2629 EVAL:
      000FB2 CD 0C EC         [ 4] 2630 EVAL1:  CALL     TOKEN
      000FB5 CD 01 FB         [ 4] 2631         CALL     DUPP
      000FB8 CD 01 6C         [ 4] 2632         CALL     CAT     ;?input stream empty
      000FBB CD 00 F9         [ 4] 2633         CALL     QBRAN
      000FBE 0F CE                 2634         .word      EVAL2
      000FC0 CD 02 F5         [ 4] 2635         CALL     TEVAL
      000FC3 CD 07 B4         [ 4] 2636         CALL     ATEXE
      000FC6 CD 0F 95         [ 4] 2637         CALL     QSTAC   ;evaluate input, check stack
      000FC9 CD 01 10         [ 4] 2638         CALL     BRAN
      000FCC 0F B2                 2639         .word      EVAL1
      000FCE CD 01 F1         [ 4] 2640 EVAL2:  CALL     DROP
      000FD1 CC 0F 6F         [ 2] 2641         JP     DOTOK
                                   2642 
                                   2643 ;       PRESET  ( -- )
                                   2644 ;       Reset data stack pointer and
                                   2645 ;       terminal input buffer.
      000FD4 0F AD                 2646         .word      LINK
                           000FD6  2647 LINK = . 
      000FD6 06                    2648         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      000FD7 50 52 45 53 45 54     2649         .ascii     "PRESET"
      000FDD                       2650 PRESE:
      000FDD CD 00 C2         [ 4] 2651         CALL     DOLIT
      000FE0 17 FF                 2652         .word      SPP
      000FE2 CD 01 E8         [ 4] 2653         CALL     SPSTO
      000FE5 CD 00 C2         [ 4] 2654         CALL     DOLIT
      000FE8 17 00                 2655         .word      TIBB
      000FEA CD 02 E4         [ 4] 2656         CALL     NTIB
      000FED CD 06 4B         [ 4] 2657         CALL     CELLP
      000FF0 CC 01 37         [ 2] 2658         JP     STORE
                                   2659 
                                   2660 ;       QUIT    ( -- )
                                   2661 ;       Reset return stack pointer
                                   2662 ;       and start text interpreter.
      000FF3 0F D6                 2663         .word      LINK
                           000FF5  2664 LINK = . 
      000FF5 04                    2665         .byte      4
      000FF6 51 55 49 54           2666         .ascii     "QUIT"
      000FFA                       2667 QUIT:
      000FFA CD 00 C2         [ 4] 2668         CALL     DOLIT
      000FFD 16 F0                 2669         .word      RPP
      000FFF CD 01 89         [ 4] 2670         CALL     RPSTO   ;reset return stack pointer
      001002 CD 0F 5E         [ 4] 2671 QUIT1:  CALL     LBRAC   ;start interpretation
      001005 CD 0E C1         [ 4] 2672 QUIT2:  CALL     QUERY   ;get input
      001008 CD 0F B2         [ 4] 2673         CALL     EVAL
      00100B 20 F8            [ 2] 2674         JRA     QUIT2   ;continue till error
                                   2675 
                                   2676 ;; The compiler
                                   2677 
                                   2678 ;       '       ( -- ca )
                                   2679 ;       Search vocabularies for
                                   2680 ;       next word in input stream.
      00100D 0F F5                 2681         .word      LINK
                           00100F  2682 LINK = . 
      00100F 01                    2683         .byte      1
      001010 27                    2684         .ascii     "'"
      001011                       2685 TICK:
      001011 CD 0C EC         [ 4] 2686         CALL     TOKEN
      001014 CD 0D E9         [ 4] 2687         CALL     NAMEQ   ;?defined
      001017 CD 00 F9         [ 4] 2688         CALL     QBRAN
      00101A 0E FD                 2689         .word      ABOR1
      00101C 81               [ 4] 2690         RET     ;yes, push code address
                                   2691 
                                   2692 ;       ALLOT   ( n -- )
                                   2693 ;       Allocate n bytes to  code dictionary.
      00101D 10 0F                 2694         .word      LINK
                           00101F  2695 LINK = . 
      00101F 05                    2696         .byte      5
      001020 41 4C 4C 4F 54        2697         .ascii     "ALLOT"
      001025                       2698 ALLOT:
      001025 CD 03 25         [ 4] 2699         CALL     CPP
      001028 CC 07 2E         [ 2] 2700         JP     PSTOR
                                   2701 
                                   2702 ;       ,       ( w -- )
                                   2703 ;         Compile an integer into
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   2704 ;         code dictionary.
      00102B 10 1F                 2705         .word      LINK
                           00102D  2706 LINK = . 
      00102D 01                    2707         .byte      1
      00102E 2C                    2708         .ascii     ","
      00102F                       2709 COMMA:
      00102F CD 07 83         [ 4] 2710         CALL     HERE
      001032 CD 01 FB         [ 4] 2711         CALL     DUPP
      001035 CD 06 4B         [ 4] 2712         CALL     CELLP   ;cell boundary
      001038 CD 03 25         [ 4] 2713         CALL     CPP
      00103B CD 01 37         [ 4] 2714         CALL     STORE
      00103E CC 01 37         [ 2] 2715         JP     STORE
                                   2716 
                                   2717 ;       C,      ( c -- )
                                   2718 ;       Compile a byte into
                                   2719 ;       code dictionary.
      001041 10 2D                 2720        .word      LINK
                           001043  2721 LINK = . 
      001043 02                    2722         .byte      2
      001044 43 2C                 2723         .ascii     "C,"
      001046                       2724 CCOMMA:
      001046 CD 07 83         [ 4] 2725         CALL     HERE
      001049 CD 01 FB         [ 4] 2726         CALL     DUPP
      00104C CD 06 76         [ 4] 2727         CALL     ONEP
      00104F CD 03 25         [ 4] 2728         CALL     CPP
      001052 CD 01 37         [ 4] 2729         CALL     STORE
      001055 CC 01 5B         [ 2] 2730         JP     CSTOR
                                   2731 
                                   2732 ;       [COMPILE]       ( -- ; <string> )
                                   2733 ;       Compile next immediate
                                   2734 ;       word into code dictionary.
      001058 10 43                 2735         .word      LINK
                           00105A  2736 LINK = . 
      00105A 89                    2737 	.byte      IMEDD+9
      00105B 5B 43 4F 4D 50 49 4C  2738         .ascii     "[COMPILE]"
             45 5D
      001064                       2739 BCOMP:
      001064 CD 10 11         [ 4] 2740         CALL     TICK
      001067 CC 12 C0         [ 2] 2741         JP     JSRC
                                   2742 
                                   2743 ;       COMPILE ( -- )
                                   2744 ;       Compile next jsr in
                                   2745 ;       colon list to code dictionary.
      00106A 10 5A                 2746         .word      LINK
                           00106C  2747 LINK = . 
      00106C 47                    2748 	.byte      COMPO+7
      00106D 43 4F 4D 50 49 4C 45  2749         .ascii     "COMPILE"
      001074                       2750 COMPI:
      001074 CD 01 9C         [ 4] 2751         CALL     RFROM
      001077 CD 06 76         [ 4] 2752         CALL     ONEP
      00107A CD 01 FB         [ 4] 2753         CALL     DUPP
      00107D CD 01 4E         [ 4] 2754         CALL     AT
      001080 CD 12 C0         [ 4] 2755         CALL     JSRC    ;compile subroutine
      001083 CD 06 4B         [ 4] 2756         CALL     CELLP
      001086 CC 01 C4         [ 2] 2757         JP     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   2758 
                                   2759 ;       LITERAL ( w -- )
                                   2760 ;       Compile tos to dictionary
                                   2761 ;       as an integer literal.
      001089 10 6C                 2762         .word      LINK
                           00108B  2763 LINK = . 
      00108B 87                    2764 	.byte      IMEDD+7
      00108C 4C 49 54 45 52 41 4C  2765         .ascii     "LITERAL"
      001093                       2766 LITER:
      001093 CD 10 74         [ 4] 2767         CALL     COMPI
      001096 CD 00 C2         [ 4] 2768         CALL     DOLIT
      001099 CC 10 2F         [ 2] 2769         JP     COMMA
                                   2770 
                                   2771 ;       $,"     ( -- )
                                   2772 ;       Compile a literal string
                                   2773 ;       up to next " .
      00109C 10 8B                 2774         .word      LINK
                           00109E  2775 LINK = . 
      00109E 03                    2776         .byte      3
      00109F 24 2C 22              2777         .byte     '$',',','"'
      0010A2                       2778 STRCQ:
      0010A2 CD 00 C2         [ 4] 2779         CALL     DOLIT
      0010A5 00 22                 2780         .word     34	; "
      0010A7 CD 0C 77         [ 4] 2781         CALL     PARSE
      0010AA CD 07 83         [ 4] 2782         CALL     HERE
      0010AD CD 08 30         [ 4] 2783         CALL     PACKS   ;string to code dictionary
      0010B0 CD 07 70         [ 4] 2784         CALL     COUNT
      0010B3 CD 03 9E         [ 4] 2785         CALL     PLUS    ;calculate aligned end of string
      0010B6 CD 03 25         [ 4] 2786         CALL     CPP
      0010B9 CC 01 37         [ 2] 2787         JP     STORE
                                   2788 
                                   2789 ;; Structures
                                   2790 
                                   2791 ;       FOR     ( -- a )
                                   2792 ;       Start a FOR-NEXT loop
                                   2793 ;       structure in a colon definition.
      0010BC 10 9E                 2794         .word      LINK
                           0010BE  2795 LINK = . 
      0010BE 83                    2796 	.byte      IMEDD+3
      0010BF 46 4F 52              2797         .ascii     "FOR"
      0010C2                       2798 FOR:
      0010C2 CD 10 74         [ 4] 2799         CALL     COMPI
      0010C5 CD 01 C4         [ 4] 2800         CALL     TOR
      0010C8 CC 07 83         [ 2] 2801         JP     HERE
                                   2802 
                                   2803 ;       NEXT    ( a -- )
                                   2804 ;       Terminate a FOR-NEXT loop.
      0010CB 10 BE                 2805         .word      LINK
                           0010CD  2806 LINK = . 
      0010CD 84                    2807 	.byte      IMEDD+4
      0010CE 4E 45 58 54           2808         .ascii     "NEXT"
      0010D2                       2809 NEXT:
      0010D2 CD 10 74         [ 4] 2810         CALL     COMPI
      0010D5 CD 00 DA         [ 4] 2811         CALL     DONXT
      0010D8 CC 10 2F         [ 2] 2812         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   2813 
                                   2814 ;       BEGIN   ( -- a )
                                   2815 ;       Start an infinite or
                                   2816 ;       indefinite loop structure.
      0010DB 10 CD                 2817         .word      LINK
                           0010DD  2818 LINK = . 
      0010DD 85                    2819 	.byte      IMEDD+5
      0010DE 42 45 47 49 4E        2820         .ascii     "BEGIN"
      0010E3                       2821 BEGIN:
      0010E3 CC 07 83         [ 2] 2822         JP     HERE
                                   2823 
                                   2824 ;       UNTIL   ( a -- )
                                   2825 ;       Terminate a BEGIN-UNTIL
                                   2826 ;       indefinite loop structure.
      0010E6 10 DD                 2827         .word      LINK
                           0010E8  2828 LINK = . 
      0010E8 85                    2829 	.byte      IMEDD+5
      0010E9 55 4E 54 49 4C        2830         .ascii     "UNTIL"
      0010EE                       2831 UNTIL:
      0010EE CD 10 74         [ 4] 2832         CALL     COMPI
      0010F1 CD 00 F9         [ 4] 2833         CALL     QBRAN
      0010F4 CC 10 2F         [ 2] 2834         JP     COMMA
                                   2835 
                                   2836 ;       AGAIN   ( a -- )
                                   2837 ;       Terminate a BEGIN-AGAIN
                                   2838 ;       infinite loop structure.
      0010F7 10 E8                 2839         .word      LINK
                           0010F9  2840 LINK = . 
      0010F9 85                    2841 	.byte      IMEDD+5
      0010FA 41 47 41 49 4E        2842         .ascii     "AGAIN"
      0010FF                       2843 AGAIN:
      0010FF CD 10 74         [ 4] 2844         CALL     COMPI
      001102 CD 01 10         [ 4] 2845         CALL     BRAN
      001105 CC 10 2F         [ 2] 2846         JP     COMMA
                                   2847 
                                   2848 ;       IF      ( -- A )
                                   2849 ;       Begin a conditional branch.
      001108 10 F9                 2850         .word      LINK
                           00110A  2851 LINK = . 
      00110A 82                    2852 	.byte      IMEDD+2
      00110B 49 46                 2853         .ascii     "IF"
      00110D                       2854 IFF:
      00110D CD 10 74         [ 4] 2855         CALL     COMPI
      001110 CD 00 F9         [ 4] 2856         CALL     QBRAN
      001113 CD 07 83         [ 4] 2857         CALL     HERE
      001116 CD 06 AA         [ 4] 2858         CALL     ZERO
      001119 CC 10 2F         [ 2] 2859         JP     COMMA
                                   2860 
                                   2861 ;       THEN        ( A -- )
                                   2862 ;       Terminate a conditional branch structure.
      00111C 11 0A                 2863         .word      LINK
                           00111E  2864 LINK = . 
      00111E 84                    2865 	.byte      IMEDD+4
      00111F 54 48 45 4E           2866         .ascii     "THEN"
      001123                       2867 THENN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001123 CD 07 83         [ 4] 2868         CALL     HERE
      001126 CD 02 0B         [ 4] 2869         CALL     SWAPP
      001129 CC 01 37         [ 2] 2870         JP     STORE
                                   2871 
                                   2872 ;       ELSE        ( A -- A )
                                   2873 ;       Start the false clause in an IF-ELSE-THEN structure.
      00112C 11 1E                 2874         .word      LINK
                           00112E  2875 LINK = . 
      00112E 84                    2876 	.byte      IMEDD+4
      00112F 45 4C 53 45           2877         .ascii     "ELSE"
      001133                       2878 ELSEE:
      001133 CD 10 74         [ 4] 2879         CALL     COMPI
      001136 CD 01 10         [ 4] 2880         CALL     BRAN
      001139 CD 07 83         [ 4] 2881         CALL     HERE
      00113C CD 06 AA         [ 4] 2882         CALL     ZERO
      00113F CD 10 2F         [ 4] 2883         CALL     COMMA
      001142 CD 02 0B         [ 4] 2884         CALL     SWAPP
      001145 CD 07 83         [ 4] 2885         CALL     HERE
      001148 CD 02 0B         [ 4] 2886         CALL     SWAPP
      00114B CC 01 37         [ 2] 2887         JP     STORE
                                   2888 
                                   2889 ;       AHEAD       ( -- A )
                                   2890 ;       Compile a forward branch instruction.
      00114E 11 2E                 2891         .word      LINK
                           001150  2892 LINK = . 
      001150 85                    2893 	.byte      IMEDD+5
      001151 41 48 45 41 44        2894         .ascii     "AHEAD"
      001156                       2895 AHEAD:
      001156 CD 10 74         [ 4] 2896         CALL     COMPI
      001159 CD 01 10         [ 4] 2897         CALL     BRAN
      00115C CD 07 83         [ 4] 2898         CALL     HERE
      00115F CD 06 AA         [ 4] 2899         CALL     ZERO
      001162 CC 10 2F         [ 2] 2900         JP     COMMA
                                   2901 
                                   2902 ;       WHILE       ( a -- A a )
                                   2903 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001165 11 50                 2904         .word      LINK
                           001167  2905 LINK = . 
      001167 85                    2906 	.byte      IMEDD+5
      001168 57 48 49 4C 45        2907         .ascii     "WHILE"
      00116D                       2908 WHILE:
      00116D CD 10 74         [ 4] 2909         CALL     COMPI
      001170 CD 00 F9         [ 4] 2910         CALL     QBRAN
      001173 CD 07 83         [ 4] 2911         CALL     HERE
      001176 CD 06 AA         [ 4] 2912         CALL     ZERO
      001179 CD 10 2F         [ 4] 2913         CALL     COMMA
      00117C CC 02 0B         [ 2] 2914         JP     SWAPP
                                   2915 
                                   2916 ;       REPEAT      ( A a -- )
                                   2917 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00117F 11 67                 2918         .word      LINK
                           001181  2919 LINK = . 
      001181 86                    2920         .byte      IMEDD+6
      001182 52 45 50 45 41 54     2921         .ascii     "REPEAT"
      001188                       2922 REPEA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001188 CD 10 74         [ 4] 2923         CALL     COMPI
      00118B CD 01 10         [ 4] 2924         CALL     BRAN
      00118E CD 10 2F         [ 4] 2925         CALL     COMMA
      001191 CD 07 83         [ 4] 2926         CALL     HERE
      001194 CD 02 0B         [ 4] 2927         CALL     SWAPP
      001197 CC 01 37         [ 2] 2928         JP     STORE
                                   2929 
                                   2930 ;       AFT         ( a -- a A )
                                   2931 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00119A 11 81                 2932         .word      LINK
                           00119C  2933 LINK = . 
      00119C 83                    2934 	.byte      IMEDD+3
      00119D 41 46 54              2935         .ascii     "AFT"
      0011A0                       2936 AFT:
      0011A0 CD 01 F1         [ 4] 2937         CALL     DROP
      0011A3 CD 11 56         [ 4] 2938         CALL     AHEAD
      0011A6 CD 07 83         [ 4] 2939         CALL     HERE
      0011A9 CC 02 0B         [ 2] 2940         JP     SWAPP
                                   2941 
                                   2942 ;       ABORT"      ( -- ; <string> )
                                   2943 ;       Conditional abort with an error message.
      0011AC 11 9C                 2944         .word      LINK
                           0011AE  2945 LINK = . 
      0011AE 86                    2946 	.byte      IMEDD+6
      0011AF 41 42 4F 52 54        2947         .ascii     "ABORT"
      0011B4 22                    2948         .byte      '"'
      0011B5                       2949 ABRTQ:
      0011B5 CD 10 74         [ 4] 2950         CALL     COMPI
      0011B8 CD 0E F5         [ 4] 2951         CALL     ABORQ
      0011BB CC 10 A2         [ 2] 2952         JP     STRCQ
                                   2953 
                                   2954 ;       $"     ( -- ; <string> )
                                   2955 ;       Compile an inline string literal.
      0011BE 11 AE                 2956         .word      LINK
                           0011C0  2957 LINK = . 
      0011C0 82                    2958 	.byte      IMEDD+2
      0011C1 24 22                 2959         .byte     '$','"'
      0011C3                       2960 STRQ:
      0011C3 CD 10 74         [ 4] 2961         CALL     COMPI
      0011C6 CD 0B 17         [ 4] 2962         CALL     STRQP
      0011C9 CC 10 A2         [ 2] 2963         JP     STRCQ
                                   2964 
                                   2965 ;       ."          ( -- ; <string> )
                                   2966 ;       Compile an inline string literal to be typed out at run time.
      0011CC 11 C0                 2967         .word      LINK
                           0011CE  2968 LINK = . 
      0011CE 82                    2969 	.byte      IMEDD+2
      0011CF 2E 22                 2970         .byte     '.','"'
      0011D1                       2971 DOTQ:
      0011D1 CD 10 74         [ 4] 2972         CALL     COMPI
      0011D4 CD 0B 21         [ 4] 2973         CALL     DOTQP
      0011D7 CC 10 A2         [ 2] 2974         JP     STRCQ
                                   2975 
                                   2976 ;; Name compiler
                                   2977 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   2978 ;       ?UNIQUE ( a -- a )
                                   2979 ;       Display a warning message
                                   2980 ;       if word already exists.
      0011DA 11 CE                 2981         .word      LINK
                           0011DC  2982 LINK = . 
      0011DC 07                    2983         .byte      7
      0011DD 3F 55 4E 49 51 55 45  2984         .ascii     "?UNIQUE"
      0011E4                       2985 UNIQU:
      0011E4 CD 01 FB         [ 4] 2986         CALL     DUPP
      0011E7 CD 0D E9         [ 4] 2987         CALL     NAMEQ   ;?name exists
      0011EA CD 00 F9         [ 4] 2988         CALL     QBRAN
      0011ED 12 03                 2989         .word      UNIQ1
      0011EF CD 0B 21         [ 4] 2990         CALL     DOTQP   ;redef are OK
      0011F2 07                    2991         .byte       7
      0011F3 20 72 65 44 65 66 20  2992         .ascii     " reDef "       
      0011FA CD 02 25         [ 4] 2993         CALL     OVER
      0011FD CD 07 70         [ 4] 2994         CALL     COUNT
      001200 CD 0A C4         [ 4] 2995         CALL     TYPES   ;just in case
      001203 CC 01 F1         [ 2] 2996 UNIQ1:  JP     DROP
                                   2997 
                                   2998 ;       $,n     ( na -- )
                                   2999 ;       Build a new dictionary name
                                   3000 ;       using string at na.
      001206 11 DC                 3001         .word      LINK
                           001208  3002 LINK = . 
      001208 03                    3003         .byte      3
      001209 24 2C 6E              3004         .ascii     "$,n"
      00120C                       3005 SNAME:
      00120C CD 01 FB         [ 4] 3006         CALL     DUPP
      00120F CD 01 6C         [ 4] 3007         CALL     CAT     ;?null input
      001212 CD 00 F9         [ 4] 3008         CALL     QBRAN
      001215 12 42                 3009         .word      PNAM1
      001217 CD 11 E4         [ 4] 3010         CALL     UNIQU   ;?redefinition
      00121A CD 01 FB         [ 4] 3011         CALL     DUPP
      00121D CD 07 70         [ 4] 3012         CALL     COUNT
      001220 CD 03 9E         [ 4] 3013         CALL     PLUS
      001223 CD 03 25         [ 4] 3014         CALL     CPP
      001226 CD 01 37         [ 4] 3015         CALL     STORE
      001229 CD 01 FB         [ 4] 3016         CALL     DUPP
      00122C CD 03 35         [ 4] 3017         CALL     LAST
      00122F CD 01 37         [ 4] 3018         CALL     STORE   ;save na for vocabulary link
      001232 CD 06 5A         [ 4] 3019         CALL     CELLM   ;link address
      001235 CD 03 17         [ 4] 3020         CALL     CNTXT
      001238 CD 01 4E         [ 4] 3021         CALL     AT
      00123B CD 02 0B         [ 4] 3022         CALL     SWAPP
      00123E CD 01 37         [ 4] 3023         CALL     STORE
      001241 81               [ 4] 3024         RET     ;save code pointer
      001242 CD 0B 17         [ 4] 3025 PNAM1:  CALL     STRQP
      001245 05                    3026         .byte      5
      001246 20 6E 61 6D 65        3027         .ascii     " name" ;null input
      00124B CC 0E FD         [ 2] 3028         JP     ABOR1
                                   3029 
                                   3030 ;; FORTH compiler
                                   3031 
                                   3032 ;       $COMPILE        ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3033 ;       Compile next word to
                                   3034 ;       dictionary as a token or literal.
      00124E 12 08                 3035         .word      LINK
                           001250  3036 LINK = . 
      001250 08                    3037         .byte      8
      001251 24 43 4F 4D 50 49 4C  3038         .ascii     "$COMPILE"
             45
      001259                       3039 SCOMP:
      001259 CD 0D E9         [ 4] 3040         CALL     NAMEQ
      00125C CD 03 45         [ 4] 3041         CALL     QDUP    ;?defined
      00125F CD 00 F9         [ 4] 3042         CALL     QBRAN
      001262 12 7A                 3043         .word      SCOM2
      001264 CD 01 4E         [ 4] 3044         CALL     AT
      001267 CD 00 C2         [ 4] 3045         CALL     DOLIT
      00126A 80 00                 3046         .word     0x8000	;  IMEDD*256
      00126C CD 02 47         [ 4] 3047         CALL     ANDD    ;?immediate
      00126F CD 00 F9         [ 4] 3048         CALL     QBRAN
      001272 12 77                 3049         .word      SCOM1
      001274 CC 01 20         [ 2] 3050         JP     EXECU
      001277 CC 12 C0         [ 2] 3051 SCOM1:  JP     JSRC
      00127A CD 09 95         [ 4] 3052 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00127D CD 00 F9         [ 4] 3053         CALL     QBRAN
      001280 0E FD                 3054         .word      ABOR1
      001282 CC 10 93         [ 2] 3055         JP     LITER
                                   3056 
                                   3057 ;       OVERT   ( -- )
                                   3058 ;       Link a new word into vocabulary.
      001285 12 50                 3059         .word      LINK
                           001287  3060 LINK = . 
      001287 05                    3061         .byte      5
      001288 4F 56 45 52 54        3062         .ascii     "OVERT"
      00128D                       3063 OVERT:
      00128D CD 03 35         [ 4] 3064         CALL     LAST
      001290 CD 01 4E         [ 4] 3065         CALL     AT
      001293 CD 03 17         [ 4] 3066         CALL     CNTXT
      001296 CC 01 37         [ 2] 3067         JP     STORE
                                   3068 
                                   3069 ;       ;       ( -- )
                                   3070 ;       Terminate a colon definition.
      001299 12 87                 3071         .word      LINK
                           00129B  3072 LINK = . 
      00129B C1                    3073 	.byte      IMEDD+COMPO+1
      00129C 3B                    3074         .ascii     ";"
      00129D                       3075 SEMIS:
      00129D CD 10 74         [ 4] 3076         CALL     COMPI
      0012A0 CD 01 30         [ 4] 3077         CALL     EXIT
      0012A3 CD 0F 5E         [ 4] 3078         CALL     LBRAC
      0012A6 CC 12 8D         [ 2] 3079         JP     OVERT
                                   3080 
                                   3081 ;       ]       ( -- )
                                   3082 ;       Start compiling words in
                                   3083 ;       input stream.
      0012A9 12 9B                 3084         .word      LINK
                           0012AB  3085 LINK = . 
      0012AB 01                    3086         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0012AC 5D                    3087         .ascii     "]"
      0012AD                       3088 RBRAC:
      0012AD CD 00 C2         [ 4] 3089         CALL     DOLIT
      0012B0 12 59                 3090         .word      SCOMP
      0012B2 CD 02 F5         [ 4] 3091         CALL     TEVAL
      0012B5 CC 01 37         [ 2] 3092         JP     STORE
                                   3093 
                                   3094 ;       CALL,    ( ca -- )
                                   3095 ;       Compile a subroutine call.
      0012B8 12 AB                 3096         .word      LINK
                           0012BA  3097 LINK = . 
      0012BA 04                    3098         .byte      4
      0012BB 43 41 4C 4C 2C        3099         .ascii     "CALL,"
      0012C0                       3100 JSRC:
      0012C0 CD 00 C2         [ 4] 3101         CALL     DOLIT
      0012C3 00 CD                 3102         .word     CALLL     ;CALL
      0012C5 CD 10 46         [ 4] 3103         CALL     CCOMMA
      0012C8 CC 10 2F         [ 2] 3104         JP     COMMA
                                   3105 
                                   3106 ;       :       ( -- ; <string> )
                                   3107 ;       Start a new colon definition
                                   3108 ;       using next word as its name.
      0012CB 12 BA                 3109         .word      LINK
                           0012CD  3110 LINK = . 
      0012CD 01                    3111         .byte      1
      0012CE 3A                    3112         .ascii     ":"
      0012CF                       3113 COLON:
      0012CF CD 0C EC         [ 4] 3114         CALL     TOKEN
      0012D2 CD 12 0C         [ 4] 3115         CALL     SNAME
      0012D5 CC 12 AD         [ 2] 3116         JP     RBRAC
                                   3117 
                                   3118 ;       IMMEDIATE       ( -- )
                                   3119 ;       Make last compiled word
                                   3120 ;       an immediate word.
      0012D8 12 CD                 3121         .word      LINK
                           0012DA  3122 LINK = . 
      0012DA 09                    3123         .byte      9
      0012DB 49 4D 4D 45 44 49 41  3124         .ascii     "IMMEDIATE"
             54 45
      0012E4                       3125 IMMED:
      0012E4 CD 00 C2         [ 4] 3126         CALL     DOLIT
      0012E7 80 00                 3127         .word     0x8000	;  IMEDD*256
      0012E9 CD 03 35         [ 4] 3128         CALL     LAST
      0012EC CD 01 4E         [ 4] 3129         CALL     AT
      0012EF CD 01 4E         [ 4] 3130         CALL     AT
      0012F2 CD 02 5B         [ 4] 3131         CALL     ORR
      0012F5 CD 03 35         [ 4] 3132         CALL     LAST
      0012F8 CD 01 4E         [ 4] 3133         CALL     AT
      0012FB CC 01 37         [ 2] 3134         JP     STORE
                                   3135 
                                   3136 ;; Defining words
                                   3137 
                                   3138 ;       CREATE  ( -- ; <string> )
                                   3139 ;       Compile a new array
                                   3140 ;       without allocating space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0012FE 12 DA                 3141         .word      LINK
                           001300  3142 LINK = . 
      001300 06                    3143         .byte      6
      001301 43 52 45 41 54 45     3144         .ascii     "CREATE"
      001307                       3145 CREAT:
      001307 CD 0C EC         [ 4] 3146         CALL     TOKEN
      00130A CD 12 0C         [ 4] 3147         CALL     SNAME
      00130D CD 12 8D         [ 4] 3148         CALL     OVERT
      001310 CD 10 74         [ 4] 3149         CALL     COMPI
      001313 CD 02 A8         [ 4] 3150         CALL     DOVAR
      001316 81               [ 4] 3151         RET
                                   3152 
                                   3153 ;       VARIABLE        ( -- ; <string> )
                                   3154 ;       Compile a new variable
                                   3155 ;       initialized to 0.
      001317 13 00                 3156         .word      LINK
                           001319  3157 LINK = . 
      001319 08                    3158         .byte      8
      00131A 56 41 52 49 41 42 4C  3159         .ascii     "VARIABLE"
             45
      001322                       3160 VARIA:
      001322 CD 13 07         [ 4] 3161         CALL     CREAT
      001325 CD 06 AA         [ 4] 3162         CALL     ZERO
      001328 CC 10 2F         [ 2] 3163         JP     COMMA
                                   3164 
                                   3165 ;; Tools
                                   3166 
                                   3167 ;       _TYPE   ( b u -- )
                                   3168 ;       Display a string. Filter
                                   3169 ;       non-printing characters.
      00132B 13 19                 3170         .word      LINK
                           00132D  3171 LINK = . 
      00132D 05                    3172         .byte      5
      00132E 5F 54 59 50 45        3173         .ascii     "_TYPE"
      001333                       3174 UTYPE:
      001333 CD 01 C4         [ 4] 3175         CALL     TOR     ;start count down loop
      001336 20 0F            [ 2] 3176         JRA     UTYP2   ;skip first pass
      001338 CD 01 FB         [ 4] 3177 UTYP1:  CALL     DUPP
      00133B CD 01 6C         [ 4] 3178         CALL     CAT
      00133E CD 06 D4         [ 4] 3179         CALL     TCHAR
      001341 CD 00 AC         [ 4] 3180         CALL     EMIT    ;display only printable
      001344 CD 06 76         [ 4] 3181         CALL     ONEP    ;increment address
      001347 CD 00 DA         [ 4] 3182 UTYP2:  CALL     DONXT
      00134A 13 38                 3183         .word      UTYP1   ;loop till done
      00134C CC 01 F1         [ 2] 3184         JP     DROP
                                   3185 
                                   3186 ;       dm+     ( a u -- a )
                                   3187 ;       Dump u bytes from ,
                                   3188 ;       leaving a+u on  stack.
      00134F 13 2D                 3189         .word      LINK
                           001351  3190 LINK = . 
      001351 03                    3191         .byte      3
      001352 64 6D 2B              3192         .ascii     "dm+"
      001355                       3193 DUMPP:
      001355 CD 02 25         [ 4] 3194         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001358 CD 00 C2         [ 4] 3195         CALL     DOLIT
      00135B 00 04                 3196         .word      4
      00135D CD 0B 4A         [ 4] 3197         CALL     UDOTR   ;display address
      001360 CD 0A 9A         [ 4] 3198         CALL     SPACE
      001363 CD 01 C4         [ 4] 3199         CALL     TOR     ;start count down loop
      001366 20 11            [ 2] 3200         JRA     PDUM2   ;skip first pass
      001368 CD 01 FB         [ 4] 3201 PDUM1:  CALL     DUPP
      00136B CD 01 6C         [ 4] 3202         CALL     CAT
      00136E CD 00 C2         [ 4] 3203         CALL     DOLIT
      001371 00 03                 3204         .word      3
      001373 CD 0B 4A         [ 4] 3205         CALL     UDOTR   ;display numeric data
      001376 CD 06 76         [ 4] 3206         CALL     ONEP    ;increment address
      001379 CD 00 DA         [ 4] 3207 PDUM2:  CALL     DONXT
      00137C 13 68                 3208         .word      PDUM1   ;loop till done
      00137E 81               [ 4] 3209         RET
                                   3210 
                                   3211 ;       DUMP    ( a u -- )
                                   3212 ;       Dump u bytes from a,
                                   3213 ;       in a formatted manner.
      00137F 13 51                 3214         .word      LINK
                           001381  3215 LINK = . 
      001381 04                    3216         .byte      4
      001382 44 55 4D 50           3217         .ascii     "DUMP"
      001386                       3218 DUMP:
      001386 CD 02 B6         [ 4] 3219         CALL     BASE
      001389 CD 01 4E         [ 4] 3220         CALL     AT
      00138C CD 01 C4         [ 4] 3221         CALL     TOR
      00138F CD 09 28         [ 4] 3222         CALL     HEX     ;save radix, set hex
      001392 CD 00 C2         [ 4] 3223         CALL     DOLIT
      001395 00 10                 3224         .word      16
      001397 CD 05 8F         [ 4] 3225         CALL     SLASH   ;change count to lines
      00139A CD 01 C4         [ 4] 3226         CALL     TOR     ;start count down loop
      00139D CD 0A E2         [ 4] 3227 DUMP1:  CALL     CR
      0013A0 CD 00 C2         [ 4] 3228         CALL     DOLIT
      0013A3 00 10                 3229         .word      16
      0013A5 CD 03 89         [ 4] 3230         CALL     DDUP
      0013A8 CD 13 55         [ 4] 3231         CALL     DUMPP   ;display numeric
      0013AB CD 03 56         [ 4] 3232         CALL     ROT
      0013AE CD 03 56         [ 4] 3233         CALL     ROT
      0013B1 CD 0A 9A         [ 4] 3234         CALL     SPACE
      0013B4 CD 0A 9A         [ 4] 3235         CALL     SPACE
      0013B7 CD 13 33         [ 4] 3236         CALL     UTYPE   ;display printable characters
      0013BA CD 00 DA         [ 4] 3237         CALL     DONXT
      0013BD 13 9D                 3238         .word      DUMP1   ;loop till done
      0013BF CD 01 F1         [ 4] 3239 DUMP3:  CALL     DROP
      0013C2 CD 01 9C         [ 4] 3240         CALL     RFROM
      0013C5 CD 02 B6         [ 4] 3241         CALL     BASE
      0013C8 CC 01 37         [ 2] 3242         JP     STORE   ;restore radix
                                   3243 
                                   3244 ;       .S      ( ... -- ... )
                                   3245 ;        Display  contents of stack.
      0013CB 13 81                 3246         .word      LINK
                           0013CD  3247 LINK = . 
      0013CD 02                    3248         .byte      2
      0013CE 2E 53                 3249         .ascii     ".S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0013D0                       3250 DOTS:
      0013D0 CD 0A E2         [ 4] 3251         CALL     CR
      0013D3 CD 07 00         [ 4] 3252         CALL     DEPTH   ;stack depth
      0013D6 CD 01 C4         [ 4] 3253         CALL     TOR     ;start count down loop
      0013D9 20 0C            [ 2] 3254         JRA     DOTS2   ;skip first pass
      0013DB CD 01 AF         [ 4] 3255 DOTS1:  CALL     RAT
      0013DE CD 06 76         [ 4] 3256         CALL ONEP
      0013E1 CD 07 19         [ 4] 3257 	CALL     PICK
      0013E4 CD 0B 7D         [ 4] 3258         CALL     DOT     ;index stack, display contents
      0013E7 CD 00 DA         [ 4] 3259 DOTS2:  CALL     DONXT
      0013EA 13 DB                 3260         .word      DOTS1   ;loop till done
      0013EC CD 0B 21         [ 4] 3261         CALL     DOTQP
      0013EF 05                    3262         .byte      5
      0013F0 20 3C 73 70 20        3263         .ascii     " <sp "
      0013F5 81               [ 4] 3264         RET
                                   3265 
                                   3266 ;       >NAME   ( ca -- na | F )
                                   3267 ;       Convert code address
                                   3268 ;       to a name address.
      0013F6 13 CD                 3269         .word      LINK
                           0013F8  3270 LINK = . 
      0013F8 05                    3271         .byte      5
      0013F9 3E 4E 41 4D 45        3272         .ascii     ">NAME"
      0013FE                       3273 TNAME:
      0013FE CD 03 17         [ 4] 3274         CALL     CNTXT   ;vocabulary link
      001401 CD 01 4E         [ 4] 3275 TNAM2:  CALL     AT
      001404 CD 01 FB         [ 4] 3276         CALL     DUPP    ;?last word in a vocabulary
      001407 CD 00 F9         [ 4] 3277         CALL     QBRAN
      00140A 14 25                 3278         .word      TNAM4
      00140C CD 03 89         [ 4] 3279         CALL     DDUP
      00140F CD 0C FA         [ 4] 3280         CALL     NAMET
      001412 CD 02 70         [ 4] 3281         CALL     XORR    ;compare
      001415 CD 00 F9         [ 4] 3282         CALL     QBRAN
      001418 14 1F                 3283         .word      TNAM3
      00141A CD 06 5A         [ 4] 3284         CALL     CELLM   ;continue with next word
      00141D 20 E2            [ 2] 3285         JRA     TNAM2
      00141F CD 02 0B         [ 4] 3286 TNAM3:  CALL     SWAPP
      001422 CC 01 F1         [ 2] 3287         JP     DROP
      001425 CD 03 7E         [ 4] 3288 TNAM4:  CALL     DDROP
      001428 CC 06 AA         [ 2] 3289         JP     ZERO
                                   3290 
                                   3291 ;       .ID     ( na -- )
                                   3292 ;        Display  name at address.
      00142B 13 F8                 3293         .word      LINK
                           00142D  3294 LINK = . 
      00142D 03                    3295         .byte      3
      00142E 2E 49 44              3296         .ascii     ".ID"
      001431                       3297 DOTID:
      001431 CD 03 45         [ 4] 3298         CALL     QDUP    ;if zero no name
      001434 CD 00 F9         [ 4] 3299         CALL     QBRAN
      001437 14 47                 3300         .word      DOTI1
      001439 CD 07 70         [ 4] 3301         CALL     COUNT
      00143C CD 00 C2         [ 4] 3302         CALL     DOLIT
      00143F 00 1F                 3303         .word      0x1F
      001441 CD 02 47         [ 4] 3304         CALL     ANDD    ;mask lexicon bits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001444 CC 13 33         [ 2] 3305         JP     UTYPE
      001447 CD 0B 21         [ 4] 3306 DOTI1:  CALL     DOTQP
      00144A 09                    3307         .byte      9
      00144B 20 6E 6F 4E 61 6D 65  3308         .ascii     " noName"
      001452 81               [ 4] 3309         RET
                                   3310 
                                   3311 ;       SEE     ( -- ; <string> )
                                   3312 ;       A simple decompiler.
                                   3313 ;       Updated for byte machines.
      001453 14 2D                 3314         .word      LINK
                           001455  3315 LINK = . 
      001455 03                    3316         .byte      3
      001456 53 45 45              3317         .ascii     "SEE"
      001459                       3318 SEE:
      001459 CD 10 11         [ 4] 3319         CALL     TICK    ;starting address
      00145C CD 0A E2         [ 4] 3320         CALL     CR
      00145F CD 06 83         [ 4] 3321         CALL     ONEM
      001462 CD 06 76         [ 4] 3322 SEE1:   CALL     ONEP
      001465 CD 01 FB         [ 4] 3323         CALL     DUPP
      001468 CD 01 4E         [ 4] 3324         CALL     AT
      00146B CD 01 FB         [ 4] 3325         CALL     DUPP    ;?does it contain a zero
      00146E CD 00 F9         [ 4] 3326         CALL     QBRAN
      001471 14 76                 3327         .word      SEE2
      001473 CD 13 FE         [ 4] 3328         CALL     TNAME   ;?is it a name
      001476 CD 03 45         [ 4] 3329 SEE2:   CALL     QDUP    ;name address or zero
      001479 CD 00 F9         [ 4] 3330         CALL     QBRAN
      00147C 14 89                 3331         .word      SEE3
      00147E CD 0A 9A         [ 4] 3332         CALL     SPACE
      001481 CD 14 31         [ 4] 3333         CALL     DOTID   ;display name
      001484 CD 06 76         [ 4] 3334         CALL     ONEP
      001487 20 09            [ 2] 3335         JRA     SEE4
      001489 CD 01 FB         [ 4] 3336 SEE3:   CALL     DUPP
      00148C CD 01 6C         [ 4] 3337         CALL     CAT
      00148F CD 0B 6A         [ 4] 3338         CALL     UDOT    ;display number
      001492 CD 0A 78         [ 4] 3339 SEE4:   CALL     NUFQ    ;user control
      001495 CD 00 F9         [ 4] 3340         CALL     QBRAN
      001498 14 62                 3341         .word      SEE1
      00149A CC 01 F1         [ 2] 3342         JP     DROP
                                   3343 
                                   3344 ;       WORDS   ( -- )
                                   3345 ;       Display names in vocabulary.
      00149D 14 55                 3346         .word      LINK
                           00149F  3347 LINK = . 
      00149F 05                    3348         .byte      5
      0014A0 57 4F 52 44 53        3349         .ascii     "WORDS"
      0014A5                       3350 WORDS:
      0014A5 CD 0A E2         [ 4] 3351         CALL     CR
      0014A8 CD 03 17         [ 4] 3352         CALL     CNTXT   ;only in context
      0014AB CD 01 4E         [ 4] 3353 WORS1:  CALL     AT
      0014AE CD 03 45         [ 4] 3354         CALL     QDUP    ;?at end of list
      0014B1 CD 00 F9         [ 4] 3355         CALL     QBRAN
      0014B4 14 CA                 3356         .word      WORS2
      0014B6 CD 01 FB         [ 4] 3357         CALL     DUPP
      0014B9 CD 0A 9A         [ 4] 3358         CALL     SPACE
      0014BC CD 14 31         [ 4] 3359         CALL     DOTID   ;display a name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0014BF CD 06 5A         [ 4] 3360         CALL     CELLM
      0014C2 CD 01 10         [ 4] 3361         CALL     BRAN
      0014C5 14 AB                 3362         .word      WORS1
      0014C7 CD 01 F1         [ 4] 3363         CALL     DROP
      0014CA 81               [ 4] 3364 WORS2:  RET
                                   3365 
                                   3366         
                                   3367 ;; Hardware reset
                                   3368 
                                   3369 ;       hi      ( -- )
                                   3370 ;       Display sign-on message.
      0014CB 14 9F                 3371         .word      LINK
                           0014CD  3372 LINK = . 
      0014CD 02                    3373         .byte      2
      0014CE 68 69                 3374         .ascii     "hi"
      0014D0                       3375 HI:
      0014D0 CD 0A E2         [ 4] 3376         CALL     CR
      0014D3 CD 0B 21         [ 4] 3377         CALL     DOTQP   ;initialize I/O
      0014D6 0F                    3378         .byte      15
      0014D7 73 74 6D 38 65 46 6F  3379         .ascii     "stm8eForth v"
             72 74 68 20 76
      0014E3 32                    3380 	.byte      VER+'0'
      0014E4 22                    3381         .byte      "."
      0014E5 31                    3382 	.byte      EXT+'0' ;version
      0014E6 CC 0A E2         [ 2] 3383         JP     CR
                                   3384 
                                   3385 ;       DEBUG      ( -- )
                                   3386 ;       Display sign-on message.
                                   3387 ;        .word      LINK
                                   3388 ;LINK = . 
                                   3389 ;        .byte      5
                                   3390 ;        .ascii     "DEBUG"
                                   3391 ;DEBUG:
                                   3392 ;	CALL DOLIT
                                   3393 ;	.word 0x65
                                   3394 ;	CALL EMIT
                                   3395 ;	CALL DOLIT
                                   3396 ;	.word 0
                                   3397 ; 	CALL ZLESS 
                                   3398 ;	CALL DOLIT
                                   3399 ;	.word 0xFFFE
                                   3400 ;	CALL ZLESS 
                                   3401 ;	CALL UPLUS 
                                   3402 ; 	CALL DROP 
                                   3403 ;	CALL DOLIT
                                   3404 ;	.word 3
                                   3405 ;	CALL UPLUS 
                                   3406 ;	CALL UPLUS 
                                   3407 ; 	CALL DROP
                                   3408 ;	CALL DOLIT
                                   3409 ;	.word 0x43
                                   3410 ;	CALL UPLUS 
                                   3411 ; 	CALL DROP
                                   3412 ;	CALL EMIT
                                   3413 ;	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3414 ;	.word 0x4F
                                   3415 ;	CALL DOLIT
                                   3416 ;	.word 0x6F
                                   3417 ; 	CALL XORR
                                   3418 ;	CALL DOLIT
                                   3419 ;	.word 0xF0
                                   3420 ; 	CALL ANDD
                                   3421 ;	CALL DOLIT
                                   3422 ;	.word 0x4F
                                   3423 ; 	CALL ORR
                                   3424 ;	CALL EMIT
                                   3425 ;	CALL DOLIT
                                   3426 ;	.word 8
                                   3427 ;	CALL DOLIT
                                   3428 ;	.word 6
                                   3429 ; 	CALL SWAPP
                                   3430 ;	CALL OVER
                                   3431 ;	CALL XORR
                                   3432 ;	CALL DOLIT
                                   3433 ;	.word 3
                                   3434 ;	CALL ANDD 
                                   3435 ;	CALL ANDD
                                   3436 ;	CALL DOLIT
                                   3437 ;	.word 0x70
                                   3438 ;	CALL UPLUS 
                                   3439 ;	CALL DROP
                                   3440 ;	CALL EMIT
                                   3441 ;	CALL DOLIT
                                   3442 ;	.word 0
                                   3443 ;	CALL QBRAN
                                   3444 ;	.word DEBUG1
                                   3445 ;	CALL DOLIT
                                   3446 ;	.word 0x3F
                                   3447 ;DEBUG1:
                                   3448 ;	CALL DOLIT
                                   3449 ;	.word 0xFFFF
                                   3450 ;	CALL QBRAN
                                   3451 ;	.word DEBUG2
                                   3452 ;	CALL DOLIT
                                   3453 ;	.word 0x74
                                   3454 ;	CALL BRAN
                                   3455 ;	.word DEBUG3
                                   3456 ;DEBUG2:
                                   3457 ;	CALL DOLIT
                                   3458 ;	.word 0x21
                                   3459 ;DEBUG3:
                                   3460 ;	CALL EMIT
                                   3461 ;	CALL DOLIT
                                   3462 ;	.word 0x68
                                   3463 ;	CALL DOLIT
                                   3464 ;	.word 0x80
                                   3465 ;	CALL STORE
                                   3466 ;	CALL DOLIT
                                   3467 ;	.word 0x80
                                   3468 ;	CALL AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3469 ;	CALL EMIT
                                   3470 ;	CALL DOLIT
                                   3471 ;	.word 0x4D
                                   3472 ;	CALL TOR
                                   3473 ;	CALL RAT
                                   3474 ;	CALL RFROM
                                   3475 ;	CALL ANDD
                                   3476 ;	CALL EMIT
                                   3477 ;	CALL DOLIT
                                   3478 ;	.word 0x61
                                   3479 ;	CALL DOLIT
                                   3480 ;	.word 0xA
                                   3481 ;	CALL TOR
                                   3482 ;DEBUG4:
                                   3483 ;	CALL DOLIT
                                   3484 ;	.word 1
                                   3485 ;	CALL UPLUS 
                                   3486 ;	CALL DROP
                                   3487 ;	CALL DONXT
                                   3488 ;	.word DEBUG4
                                   3489 ;	CALL EMIT
                                   3490 ;	CALL DOLIT
                                   3491 ;	.word 0x656D
                                   3492 ;	CALL DOLIT
                                   3493 ;	.word 0x100
                                   3494 ;	CALL UMSTA
                                   3495 ;	CALL SWAPP
                                   3496 ;	CALL DOLIT
                                   3497 ;	.word 0x100
                                   3498 ;	CALL UMSTA
                                   3499 ;	CALL SWAPP 
                                   3500 ;	CALL DROP
                                   3501 ;	CALL EMIT
                                   3502 ;	CALL EMIT
                                   3503 ;	CALL DOLIT
                                   3504 ;	.word 0x2043
                                   3505 ;	CALL DOLIT
                                   3506 ;	.word 0
                                   3507 ;	CALL DOLIT
                                   3508 ;	.word 0x100
                                   3509 ;	CALL UMMOD
                                   3510 ;	CALL EMIT
                                   3511 ;	CALL EMIT
                                   3512 	;JP ORIG
                                   3513 ;	RET
                                   3514 
                                   3515 ;       'BOOT   ( -- a )
                                   3516 ;       The application startup vector.
      0014E9 14 CD                 3517         .word      LINK
                           0014EB  3518 LINK = . 
      0014EB 05                    3519         .byte      5
      0014EC 27 42 4F 4F 54        3520         .ascii     "'BOOT"
      0014F1                       3521 TBOOT:
      0014F1 CD 02 A8         [ 4] 3522         CALL     DOVAR
      0014F4 14 D0                 3523         .word      HI       ;application to boot
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   3524 
                                   3525 ;       COLD    ( -- )
                                   3526 ;       The hilevel cold start s=ence.
      0014F6 14 EB                 3527         .word      LINK
                           0014F8  3528 LINK = . 
      0014F8 04                    3529         .byte      4
      0014F9 43 4F 4C 44           3530         .ascii     "COLD"
      0014FD                       3531 COLD:
                                   3532 ;        CALL DEBUG
      0014FD CD 00 C2         [ 4] 3533 COLD1:  CALL     DOLIT
      001500 00 6A                 3534         .word      UZERO
      001502 CD 00 C2         [ 4] 3535 	CALL     DOLIT
      001505 00 06                 3536         .word      UPP
      001507 CD 00 C2         [ 4] 3537         CALL     DOLIT
      00150A 00 14                 3538 	.word      ULAST-UZERO
      00150C CD 07 CB         [ 4] 3539         CALL     CMOVE   ;initialize user area
      00150F CD 0F DD         [ 4] 3540         CALL     PRESE   ;initialize data stack and TIB
      001512 CD 14 F1         [ 4] 3541         CALL     TBOOT
      001515 CD 07 B4         [ 4] 3542         CALL     ATEXE   ;application boot
      001518 CD 12 8D         [ 4] 3543         CALL     OVERT
      00151B CC 0F FA         [ 2] 3544         JP     QUIT    ;start interpretation
                                   3545 
                                   3546 
                                   3547 ;       
                                   3548 ;===============================================================
                                   3549 
                           0014F8  3550 LASTN   =	LINK   ;last name defined
                                   3551 
                                   3552 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00041F R   |   6 ABOR1      000EFD R
  6 ABOR2      000F14 R   |   6 ABORQ      000EF5 R   |   6 ABORT      000EE6 R
  6 ABRTQ      0011B5 R   |   6 ABSS       000416 R   |   6 ACCEP      000E7C R
  6 ACCP1      000E85 R   |   6 ACCP2      000EAB R   |   6 ACCP3      000EAE R
  6 ACCP4      000EB0 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        0011A0 R
  6 AGAIN      0010FF R   |   6 AHEAD      001156 R   |   6 ALLOT      001025 R
  6 ANDD       000247 R   |   6 AT         00014E R   |   6 ATEXE      0007B4 R
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000E24 R   |   6 BASE       0002B6 R   |     BASEE   =  00000A 
  6 BCOMP      001064 R   |   6 BDIGS      00088D R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0010E3 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000CC5 R   |   6 BKSP       000DF4 R   |     BKSPP   =  000008 
  6 BLANK      00069D R   |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
  6 BRAN       000110 R   |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000020 
  6 CAT        00016C R   |   6 CCOMMA     001046 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      00065A R   |   6 CELLP      00064B R
  6 CELLS      000669 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000AB4 R   |   6 CHAR2      000AB7 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      0007D3 R   |   6 CMOV2      0007EB R   |   6 CMOVE      0007CB R
  6 CNTXT      000317 R   |   6 COLD       0014FD R   |   6 COLD1      0014FD R
  6 COLON      0012CF R   |   6 COMMA      00102F R   |   6 COMPI      001074 R
    COMPO   =  000040     |   6 COUNT      000770 R   |   6 CPP        000325 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000AE2 R
  6 CREAT      001307 R   |     CRR     =  00000D     |   6 CSTOR      00015B R
    CTOP    =  000080     |   6 DAT        000759 R   |     DATSTK  =  0016F0 
  6 DDROP      00037E R   |   6 DDUP       000389 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      00093D R   |   6 DEPTH      000700 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000982 R
  6 DIG        0008B6 R   |   6 DIGIT      000851 R   |   6 DIGS       0008C7 R
  6 DIGS1      0008C7 R   |   6 DIGS2      0008D4 R   |   6 DIGTQ      000951 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0003F6 R
  6 DNEGA      0003DB R   |   6 DOLIT      0000C2 R   |   6 DONXT      0000DA R
  6 DOSTR      000AF8 R   |   6 DOT        000B7D R   |   6 DOT1       000B93 R
  6 DOTI1      001447 R   |   6 DOTID      001431 R   |   6 DOTO1      000F89 R
  6 DOTOK      000F6F R   |   6 DOTPR      000CA6 R   |   6 DOTQ       0011D1 R
  6 DOTQP      000B21 R   |   6 DOTR       000B2F R   |   6 DOTS       0013D0 R
  6 DOTS1      0013DB R   |   6 DOTS2      0013E7 R   |   6 DOVAR      0002A8 R
  6 DROP       0001F1 R   |   6 DSTOR      000745 R   |   6 DUMP       001386 R
  6 DUMP1      00139D R   |   6 DUMP3      0013BF R   |   6 DUMPP      001355 R
  6 DUPP       0001FB R   |   6 EDIGS      0008F2 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      001133 R
  6 EMIT       0000AC R   |   6 EQ1        00043A R   |   6 EQUAL      000424 R
  6 ERASE      000821 R   |     ERR     =  00001B     |   6 EVAL       000FB2 R
  6 EVAL1      000FB2 R   |   6 EVAL2      000FCE R   |   6 EXE1       0007C2 R
  6 EXECU      000120 R   |   6 EXIT       000130 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000879 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       0007FA R
  6 FILL1      000808 R   |   6 FILL2      000811 R   |   6 FIND       000D50 R
  6 FIND1      000D6E R   |   6 FIND2      000D9C R   |   6 FIND3      000DA8 R
  6 FIND4      000DBC R   |   6 FIND5      000DC9 R   |   6 FIND6      000DAD R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FOR        0010C2 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       000783 R   |   6 HEX        000928 R   |   6 HI         0014D0 R
  6 HLD        000304 R   |   6 HOLD       00089D R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        00110D R   |     IMEDD   =  000080     |   6 IMMED      0012E4 R
  6 INCH       00009E R   |   6 INN        0002D4 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      000F51 R   |   6 INTER      000F27 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0003B8 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0012C0 R   |   6 KEY        000A68 R   |   6 KEY1       000A68 R
  6 KTAP       000E41 R   |   6 KTAP1      000E64 R   |   6 KTAP2      000E67 R
  6 LAST       000335 R   |   6 LASTN   =  0014F8 R   |   6 LBRAC      000F5E R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       000461 R   |     LF      =  00000A     |   6 LINK    =  0014F8 R
  6 LITER      001093 R   |   6 LT1        000477 R   |     MASKK   =  001F7F 
  6 MAX        000481 R   |   6 MAX1       000494 R   |   6 MIN        00049E R
  6 MIN1       0004B1 R   |   6 MMOD1      000540 R   |   6 MMOD2      000554 R
  6 MMOD3      00056B R   |   6 MMSM1      0004FB R   |   6 MMSM3      0004FD R
  6 MMSM4      000505 R   |   6 MODD       000585 R   |   6 MONE       0006C3 R
  6 MSMOD      000523 R   |   6 MSTA1      000622 R   |   6 MSTAR      0005FF R
    NAFR    =  004804     |   6 NAMEQ      000DE9 R   |   6 NAMET      000CFA R
    NCLKOPT =  004808     |   6 NEGAT      0003C9 R   |   6 NEX1       0000E7 R
  6 NEXT       0010D2 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       0002E4 R
    NUBC    =  004802     |   6 NUFQ       000A78 R   |   6 NUFQ1      000A91 R
  6 NUMBQ      000995 R   |   6 NUMQ1      0009C9 R   |   6 NUMQ2      0009FA R
  6 NUMQ3      000A3C R   |   6 NUMQ4      000A41 R   |   6 NUMQ5      000A50 R
  6 NUMQ6      000A53 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000011 R   |   6 ONE        0006B5 R   |   6 ONEM       000683 R
  6 ONEP       000676 R   |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
  6 ORIG       000016 R   |   6 ORR        00025B R   |   6 OUTPUT     0000B1 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000225 R   |   6 OVERT      00128D R
    PA      =  000000     |   6 PACKS      000830 R   |   6 PAD        00078F R
  6 PAREN      000CB5 R   |   6 PARS       000BAE R   |   6 PARS1      000BD9 R
  6 PARS2      000C04 R   |   6 PARS3      000C07 R   |   6 PARS4      000C10 R
  6 PARS5      000C33 R   |   6 PARS6      000C48 R   |   6 PARS7      000C57 R
  6 PARS8      000C66 R   |   6 PARSE      000C77 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001368 R
  6 PDUM2      001379 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]

Symbol Table

    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000719 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00039E R   |   6 PNAM1      001242 R
  6 PRESE      000FDD R   |     PROD1   =  00001A     |     PROD2   =  00001C 
    PROD3   =  00001E     |   6 PSTOR      00072E R   |   6 QBRAN      0000F9 R
  6 QDUP       000345 R   |   6 QDUP1      00034F R   |   6 QKEY       000087 R
  6 QSTAC      000F95 R   |   6 QUERY      000EC1 R   |   6 QUEST      000BA0 R
  6 QUIT       000FFA R   |   6 QUIT1      001002 R   |   6 QUIT2      001005 R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        0001AF R   |   6 RBRAC      0012AD R
  6 REPEA      001188 R   |   6 RFROM      00019C R   |     ROP     =  004800 
  6 ROT        000356 R   |     RP0     =  000024     |   6 RPAT       00017C R
    RPP     =  0016F0     |   6 RPSTO      000189 R   |     RST_SR  =  0050B3 
  6 SAME1      000D18 R   |   6 SAME2      000D41 R   |   6 SAMEQ      000D10 R
  6 SCOM1      001277 R   |   6 SCOM2      00127A R   |   6 SCOMP      001259 R
  6 SEE        001459 R   |   6 SEE1       001462 R   |   6 SEE2       001476 R
  6 SEE3       001489 R   |   6 SEE4       001492 R   |   6 SEMIS      00129D R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       0008DC R
  6 SIGN1      0008EC R   |   6 SLASH      00058F R   |   6 SLMOD      000573 R
  6 SNAME      00120C R   |     SP0     =  000022     |   6 SPACE      000A9A R
  6 SPACS      000AA9 R   |   6 SPAT       0001DB R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  0017FF     |   6 SPSTO      0001E8 R
  6 SSMOD      00062B R   |     STACK   =  0017FF     |   6 STAR       0005F4 R
  6 STASL      00063D R   |   6 STORE      000137 R   |   6 STR        00090A R
  6 STRCQ      0010A2 R   |   6 STRQ       0011C3 R   |   6 STRQP      000B17 R
  6 SUBB       0003FC R   |   6 SWAPP      00020B R   |     SWIM_CSR=  007F80 
  6 TAP        000E2B R   |   6 TBOOT      0014F1 R   |   6 TCHA1      0006F7 R
  6 TCHAR      0006D4 R   |   6 TEMP       0002C5 R   |   6 TEVAL      0002F5 R
  6 THENN      001123 R   |   6 TIB        0007A0 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       001011 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001401 R   |   6 TNAM3      00141F R   |   6 TNAM4      001425 R
  6 TNAME      0013FE R   |   6 TOKEN      000CEC R   |   6 TOR        0001C4 R
    TRUEE   =  00FFFF     |   6 TWOSL      000690 R   |   6 TYPE1      000AC9 R
  6 TYPE2      000AD5 R   |   6 TYPES      000AC4 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   6 UDOT       000B6A R   |   6 UDOTR      000B4A R
  6 ULAST      00007E R   |   6 ULES1      000459 R   |   6 ULESS      000443 R
  6 UMMOD      0004D9 R   |   6 UMSTA      00059E R   |   6 UNIQ1      001203 R
  6 UNIQU      0011E4 R   |   6 UNTIL      0010EE R   |   6 UPL1       00029C R
  6 UPLUS      000285 R   |     UPP     =  000006     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   6 UTYP1      001338 R
  6 UTYP2      001347 R   |   6 UTYPE      001333 R   |   6 UZERO      00006A R
  6 VARIA      001322 R   |     VER     =  000002     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      00116D R   |   6 WITHI      0004BE R
  6 WORDD      000CD8 R   |   6 WORDS      0014A5 R   |   6 WORS1      0014AB R
  6 WORS2      0014CA R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000270 R   |     XTEMP   =  00001A     |     YTEMP   =  00001C 
  6 ZERO       0006AA R   |   6 ZL1        00023D R   |   6 ZLESS      000234 R
  6 clear_ra   000003 R   |   6 clock_in   000031 R   |   6 main       000000 R
  6 uart3_in   00003F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    100   flags    8
   3 DATA       size      0   flags    8
   4 DATA1      size     80   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   151E   flags    0

